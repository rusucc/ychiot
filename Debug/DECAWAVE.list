
DECAWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b568  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800b674  0800b674  0000c674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7ec  0800b7ec  0000d1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b7ec  0800b7ec  0000c7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7f4  0800b7f4  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7f4  0800b7f4  0000c7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7f8  0800b7f8  0000c7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800b7fc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001530  200001e8  0800b9e0  0000d1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001718  0800b9e0  0000d718  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014229  00000000  00000000  0000d20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003751  00000000  00000000  00021436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  00024b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df3  00000000  00000000  00025e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa3b  00000000  00000000  00026bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154c0  00000000  00000000  00041636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b6a6  00000000  00000000  00056af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e219c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005138  00000000  00000000  000e21e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e7318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e8 	.word	0x200001e8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b65c 	.word	0x0800b65c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ec 	.word	0x200001ec
 8000148:	0800b65c 	.word	0x0800b65c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <dummy>:
static void writeValueToBytes(uint8_t data[], long val, unsigned int n);
static bool getBit(uint8_t data[], unsigned int n, unsigned int bit);

static void readBytesOTP(dwDevice_t* dev, uint16_t address, uint8_t data[]);

static void dummy(){
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
	;
}
 8000160:	bf00      	nop
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr

08000168 <dwInit>:

void dwInit(dwDevice_t* dev, dwOps_t* ops)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
 800016e:	6078      	str	r0, [r7, #4]
 8000170:	6039      	str	r1, [r7, #0]
	dev->ops = ops;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	683a      	ldr	r2, [r7, #0]
 8000176:	601a      	str	r2, [r3, #0]
	dev->userdata = NULL;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2200      	movs	r2, #0
 800017c:	605a      	str	r2, [r3, #4]

	/* Device default state */
	dev->extendedFrameLength = FRAME_LENGTH_NORMAL;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2200      	movs	r2, #0
 8000182:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	dev->pacSize = PAC_SIZE_8;
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	2208      	movs	r2, #8
 800018a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	dev->pulseFrequency = TX_PULSE_FREQ_16MHZ;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	2201      	movs	r2, #1
 8000192:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	dev->dataRate = TRX_RATE_6800KBPS;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2202      	movs	r2, #2
 800019a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	dev->preambleLength = TX_PREAMBLE_LEN_128;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2205      	movs	r2, #5
 80001a2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	dev->preambleCode = PREAMBLE_CODE_16MHZ_4;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2204      	movs	r2, #4
 80001aa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	dev->channel = CHANNEL_5;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2205      	movs	r2, #5
 80001b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	dev->smartPower = false;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	dev->frameCheck = true;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2201      	movs	r2, #1
 80001c2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	dev->permanentReceive = false;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2200      	movs	r2, #0
 80001ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	dev->deviceMode = IDLE_MODE;
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2200      	movs	r2, #0
 80001d2:	731a      	strb	r2, [r3, #12]

	dev->forceTxPower = false;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2200      	movs	r2, #0
 80001d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

	writeValueToBytes(dev->antennaDelay.raw, 16384, LEN_STAMP);
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	3338      	adds	r3, #56	@ 0x38
 80001e0:	2205      	movs	r2, #5
 80001e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 ffd0 	bl	800218c <writeValueToBytes>

	// Dummy callback handlers
	dev->handleSent = dummy;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000218 <dwInit+0xb0>)
 80001f0:	641a      	str	r2, [r3, #64]	@ 0x40
	dev->handleError = dummy;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	4a08      	ldr	r2, [pc, #32]	@ (8000218 <dwInit+0xb0>)
 80001f6:	645a      	str	r2, [r3, #68]	@ 0x44
	dev->handleReceived = dummy;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	4a07      	ldr	r2, [pc, #28]	@ (8000218 <dwInit+0xb0>)
 80001fc:	649a      	str	r2, [r3, #72]	@ 0x48
	dev->handleReceiveTimeout = dummy;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4a05      	ldr	r2, [pc, #20]	@ (8000218 <dwInit+0xb0>)
 8000202:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->handleReceiveFailed = dummy;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a04      	ldr	r2, [pc, #16]	@ (8000218 <dwInit+0xb0>)
 8000208:	651a      	str	r2, [r3, #80]	@ 0x50
	dev->handleReceiveTimestampAvailable = dummy;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a02      	ldr	r2, [pc, #8]	@ (8000218 <dwInit+0xb0>)
 800020e:	655a      	str	r2, [r3, #84]	@ 0x54

}
 8000210:	bf00      	nop
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	0800015d 	.word	0x0800015d

0800021c <dwConfigure>:
{
	return dev->userdata;
}

int dwConfigure(dwDevice_t* dev)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af02      	add	r7, sp, #8
 8000222:	6078      	str	r0, [r7, #4]
	dwEnableClock(dev, dwClockAuto);
 8000224:	2100      	movs	r1, #0
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f000 f916 	bl	8000458 <dwEnableClock>
	delayms(5);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	2105      	movs	r1, #5
 8000234:	6878      	ldr	r0, [r7, #4]
 8000236:	4798      	blx	r3

	// Reset the chip
	if (dev->ops->reset) {
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	691b      	ldr	r3, [r3, #16]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d005      	beq.n	800024e <dwConfigure+0x32>
		dev->ops->reset(dev);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	691b      	ldr	r3, [r3, #16]
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	4798      	blx	r3
 800024c:	e002      	b.n	8000254 <dwConfigure+0x38>
	} else {
		dwSoftReset(dev);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 f966 	bl	8000520 <dwSoftReset>
	}

	if (dwGetDeviceId(dev) != 0xdeca0130) {
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 f8a8 	bl	80003aa <dwGetDeviceId>
 800025a:	4603      	mov	r3, r0
 800025c:	4a27      	ldr	r2, [pc, #156]	@ (80002fc <dwConfigure+0xe0>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d001      	beq.n	8000266 <dwConfigure+0x4a>
		return DW_ERROR_WRONG_ID;
 8000262:	2301      	movs	r3, #1
 8000264:	e045      	b.n	80002f2 <dwConfigure+0xd6>
	}

	// Set default address
	memset(dev->networkAndAddress, 0xff, LEN_PANADR);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	330d      	adds	r3, #13
 800026a:	2204      	movs	r2, #4
 800026c:	21ff      	movs	r1, #255	@ 0xff
 800026e:	4618      	mov	r0, r3
 8000270:	f00a fd5e 	bl	800ad30 <memset>
	dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	330d      	adds	r3, #13
 8000278:	2204      	movs	r2, #4
 800027a:	9200      	str	r2, [sp, #0]
 800027c:	2200      	movs	r2, #0
 800027e:	2103      	movs	r1, #3
 8000280:	6878      	ldr	r0, [r7, #4]
 8000282:	f002 f82c 	bl	80022de <dwSpiWrite>

	// default configuration
	memset(dev->syscfg, 0, LEN_SYS_CFG);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	3311      	adds	r3, #17
 800028a:	2204      	movs	r2, #4
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f00a fd4e 	bl	800ad30 <memset>
	dwSetDoubleBuffering(dev, false);
 8000294:	2100      	movs	r1, #0
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f000 fa9d 	bl	80007d6 <dwSetDoubleBuffering>
	dwSetInterruptPolarity(dev, true);
 800029c:	2101      	movs	r1, #1
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f000 fab6 	bl	8000810 <dwSetInterruptPolarity>
	dwWriteSystemConfigurationRegister(dev);
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f000 f9b6 	bl	8000616 <dwWriteSystemConfigurationRegister>
	// default interrupt mask, i.e. no interrupts
	dwClearInterrupts(dev);
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f000 fb78 	bl	80009a0 <dwClearInterrupts>
	dwWriteSystemEventMaskRegister(dev);
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f000 fa05 	bl	80006c0 <dwWriteSystemEventMaskRegister>
	// load LDE micro-code
	dwEnableClock(dev, dwClockXti);
 80002b6:	2101      	movs	r1, #1
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f000 f8cd 	bl	8000458 <dwEnableClock>
	delayms(5);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	2105      	movs	r1, #5
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	4798      	blx	r3
	dwManageLDE(dev);
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f000 f818 	bl	8000300 <dwManageLDE>
	delayms(5);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	68db      	ldr	r3, [r3, #12]
 80002d6:	2105      	movs	r1, #5
 80002d8:	6878      	ldr	r0, [r7, #4]
 80002da:	4798      	blx	r3
	dwEnableClock(dev, dwClockPll);
 80002dc:	2102      	movs	r1, #2
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f000 f8ba 	bl	8000458 <dwEnableClock>
	delayms(5);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	2105      	movs	r1, #5
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	4798      	blx	r3
	//
	// delayms(1);

	// Initialize for default configuration (as per datasheet)

	return DW_ERROR_OK;
 80002f0:	2300      	movs	r3, #0
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	deca0130 	.word	0xdeca0130

08000300 <dwManageLDE>:

void dwManageLDE(dwDevice_t* dev) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af02      	add	r7, sp, #8
 8000306:	6078      	str	r0, [r7, #4]
	// }
	// tell the chip to load the LDE microcode
	// TODO remove clock-related code (PMSC_CTRL) as handled separately
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	uint8_t otpctrl[LEN_OTP_CTRL];
	memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 8000308:	f107 030c 	add.w	r3, r7, #12
 800030c:	2204      	movs	r2, #4
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f00a fd0d 	bl	800ad30 <memset>
	memset(otpctrl, 0, LEN_OTP_CTRL);
 8000316:	f107 0308 	add.w	r3, r7, #8
 800031a:	2202      	movs	r2, #2
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f00a fd06 	bl	800ad30 <memset>
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000324:	f107 030c 	add.w	r3, r7, #12
 8000328:	2204      	movs	r2, #4
 800032a:	9200      	str	r2, [sp, #0]
 800032c:	2200      	movs	r2, #0
 800032e:	2136      	movs	r1, #54	@ 0x36
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f001 ff81 	bl	8002238 <dwSpiRead>
	dwSpiRead(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	2202      	movs	r2, #2
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	2206      	movs	r2, #6
 8000340:	212d      	movs	r1, #45	@ 0x2d
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f001 ff78 	bl	8002238 <dwSpiRead>
	pmscctrl0[0] = 0x01;
 8000348:	2301      	movs	r3, #1
 800034a:	733b      	strb	r3, [r7, #12]
	pmscctrl0[1] = 0x03;
 800034c:	2303      	movs	r3, #3
 800034e:	737b      	strb	r3, [r7, #13]
	otpctrl[0] = 0x00;
 8000350:	2300      	movs	r3, #0
 8000352:	723b      	strb	r3, [r7, #8]
	otpctrl[1] = 0x80;
 8000354:	2380      	movs	r3, #128	@ 0x80
 8000356:	727b      	strb	r3, [r7, #9]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	2204      	movs	r2, #4
 800035e:	9200      	str	r2, [sp, #0]
 8000360:	2200      	movs	r2, #0
 8000362:	2136      	movs	r1, #54	@ 0x36
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f001 ffba 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	2202      	movs	r2, #2
 8000370:	9200      	str	r2, [sp, #0]
 8000372:	2206      	movs	r2, #6
 8000374:	212d      	movs	r1, #45	@ 0x2d
 8000376:	6878      	ldr	r0, [r7, #4]
 8000378:	f001 ffb1 	bl	80022de <dwSpiWrite>
	delayms(5);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	68db      	ldr	r3, [r3, #12]
 8000382:	2105      	movs	r1, #5
 8000384:	6878      	ldr	r0, [r7, #4]
 8000386:	4798      	blx	r3
	pmscctrl0[0] = 0x00;
 8000388:	2300      	movs	r3, #0
 800038a:	733b      	strb	r3, [r7, #12]
	pmscctrl0[1] = 0x02;
 800038c:	2302      	movs	r3, #2
 800038e:	737b      	strb	r3, [r7, #13]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000390:	f107 030c 	add.w	r3, r7, #12
 8000394:	2204      	movs	r2, #4
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	2200      	movs	r2, #0
 800039a:	2136      	movs	r1, #54	@ 0x36
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f001 ff9e 	bl	80022de <dwSpiWrite>
}
 80003a2:	bf00      	nop
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <dwGetDeviceId>:


uint32_t dwGetDeviceId(dwDevice_t* dev)
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
	return dwSpiRead32(dev, DEV_ID, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2100      	movs	r1, #0
 80003b6:	6878      	ldr	r0, [r7, #4]
 80003b8:	f001 ff7c 	bl	80022b4 <dwSpiRead32>
 80003bc:	4603      	mov	r3, r0
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <dwEnableAllLeds>:

void dwEnableAllLeds(dwDevice_t* dev)
{
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b084      	sub	sp, #16
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
	uint32_t reg;

	// Set all 4 GPIO in LED mode
	reg = dwSpiRead32(dev, GPIO_CTRL, GPIO_MODE_SUB);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2126      	movs	r1, #38	@ 0x26
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f001 ff6e 	bl	80022b4 <dwSpiRead32>
 80003d8:	60f8      	str	r0, [r7, #12]
	reg &= ~0x00003FC0ul;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80003e0:	60fb      	str	r3, [r7, #12]
	reg |= 0x00001540ul;
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	f443 53aa 	orr.w	r3, r3, #5440	@ 0x1540
 80003e8:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, GPIO_CTRL, GPIO_MODE_SUB, reg);
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	2200      	movs	r2, #0
 80003ee:	2126      	movs	r1, #38	@ 0x26
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f001 ffce 	bl	8002392 <dwSpiWrite32>

	// Enable debounce clock (used to clock the LED blinking)
	reg = dwSpiRead32(dev, PMSC, PMSC_CTRL0_SUB);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2136      	movs	r1, #54	@ 0x36
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f001 ff5a 	bl	80022b4 <dwSpiRead32>
 8000400:	60f8      	str	r0, [r7, #12]
	reg |= 0x00840000ul;
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	f443 0304 	orr.w	r3, r3, #8650752	@ 0x840000
 8000408:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_CTRL0_SUB, reg);
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	2200      	movs	r2, #0
 800040e:	2136      	movs	r1, #54	@ 0x36
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f001 ffbe 	bl	8002392 <dwSpiWrite32>

	// Enable LED blinking and set the rate
	reg = 0x00000110ul;
 8000416:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800041a:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	2228      	movs	r2, #40	@ 0x28
 8000420:	2136      	movs	r1, #54	@ 0x36
 8000422:	6878      	ldr	r0, [r7, #4]
 8000424:	f001 ffb5 	bl	8002392 <dwSpiWrite32>

	// Trigger a manual blink of the LEDs for test
	reg |= 0x000f0000ul;
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 800042e:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	2228      	movs	r2, #40	@ 0x28
 8000434:	2136      	movs	r1, #54	@ 0x36
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	f001 ffab 	bl	8002392 <dwSpiWrite32>
	reg &= ~0x000f0000ul;
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000442:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	2228      	movs	r2, #40	@ 0x28
 8000448:	2136      	movs	r1, #54	@ 0x36
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f001 ffa1 	bl	8002392 <dwSpiWrite32>
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <dwEnableClock>:

void dwEnableClock(dwDevice_t* dev, dwClock_t clock) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af02      	add	r7, sp, #8
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 8000464:	f107 030c 	add.w	r3, r7, #12
 8000468:	2204      	movs	r2, #4
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f00a fc5f 	bl	800ad30 <memset>
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000472:	f107 030c 	add.w	r3, r7, #12
 8000476:	2204      	movs	r2, #4
 8000478:	9200      	str	r2, [sp, #0]
 800047a:	2200      	movs	r2, #0
 800047c:	2136      	movs	r1, #54	@ 0x36
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f001 feda 	bl	8002238 <dwSpiRead>
	if(clock == dwClockAuto) {
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d10d      	bne.n	80004a6 <dwEnableClock+0x4e>
		dev->ops->spiSetSpeed(dev, dwSpiSpeedLow);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	2100      	movs	r1, #0
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	4798      	blx	r3
		pmscctrl0[0] = dwClockAuto;
 8000496:	2300      	movs	r3, #0
 8000498:	733b      	strb	r3, [r7, #12]
		pmscctrl0[1] &= 0xFE;
 800049a:	7b7b      	ldrb	r3, [r7, #13]
 800049c:	f023 0301 	bic.w	r3, r3, #1
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	737b      	strb	r3, [r7, #13]
 80004a4:	e026      	b.n	80004f4 <dwEnableClock+0x9c>
	} else if(clock == dwClockXti) {
 80004a6:	78fb      	ldrb	r3, [r7, #3]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d110      	bne.n	80004ce <dwEnableClock+0x76>
		dev->ops->spiSetSpeed(dev, dwSpiSpeedLow);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	2100      	movs	r1, #0
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	4798      	blx	r3
		pmscctrl0[0] &= 0xFC;
 80004b8:	7b3b      	ldrb	r3, [r7, #12]
 80004ba:	f023 0303 	bic.w	r3, r3, #3
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	733b      	strb	r3, [r7, #12]
		pmscctrl0[0] |= dwClockXti;
 80004c2:	7b3b      	ldrb	r3, [r7, #12]
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	733b      	strb	r3, [r7, #12]
 80004cc:	e012      	b.n	80004f4 <dwEnableClock+0x9c>
	} else if(clock == dwClockPll) {
 80004ce:	78fb      	ldrb	r3, [r7, #3]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d10f      	bne.n	80004f4 <dwEnableClock+0x9c>
		dev->ops->spiSetSpeed(dev, dwSpiSpeedHigh);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	2101      	movs	r1, #1
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	4798      	blx	r3
		pmscctrl0[0] &= 0xFC;
 80004e0:	7b3b      	ldrb	r3, [r7, #12]
 80004e2:	f023 0303 	bic.w	r3, r3, #3
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	733b      	strb	r3, [r7, #12]
		pmscctrl0[0] |= dwClockPll;
 80004ea:	7b3b      	ldrb	r3, [r7, #12]
 80004ec:	f043 0302 	orr.w	r3, r3, #2
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	733b      	strb	r3, [r7, #12]
	} else {
		// TODO deliver proper warning
	}
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, 1);
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	2201      	movs	r2, #1
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	2200      	movs	r2, #0
 80004fe:	2136      	movs	r1, #54	@ 0x36
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f001 feec 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	2204      	movs	r2, #4
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	2200      	movs	r2, #0
 8000510:	2136      	movs	r1, #54	@ 0x36
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f001 fee3 	bl	80022de <dwSpiWrite>
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <dwSoftReset>:

void dwSoftReset(dwDevice_t* dev)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af02      	add	r7, sp, #8
 8000526:	6078      	str	r0, [r7, #4]
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2204      	movs	r2, #4
 800052e:	9200      	str	r2, [sp, #0]
 8000530:	2200      	movs	r2, #0
 8000532:	2136      	movs	r1, #54	@ 0x36
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f001 fe7f 	bl	8002238 <dwSpiRead>
	pmscctrl0[0] = 0x01;
 800053a:	2301      	movs	r3, #1
 800053c:	733b      	strb	r3, [r7, #12]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 800053e:	f107 030c 	add.w	r3, r7, #12
 8000542:	2204      	movs	r2, #4
 8000544:	9200      	str	r2, [sp, #0]
 8000546:	2200      	movs	r2, #0
 8000548:	2136      	movs	r1, #54	@ 0x36
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f001 fec7 	bl	80022de <dwSpiWrite>
	pmscctrl0[3] = 0x00;
 8000550:	2300      	movs	r3, #0
 8000552:	73fb      	strb	r3, [r7, #15]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2204      	movs	r2, #4
 800055a:	9200      	str	r2, [sp, #0]
 800055c:	2200      	movs	r2, #0
 800055e:	2136      	movs	r1, #54	@ 0x36
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f001 febc 	bl	80022de <dwSpiWrite>
	delayms(10);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	210a      	movs	r1, #10
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	4798      	blx	r3
	pmscctrl0[0] = 0x00;
 8000572:	2300      	movs	r3, #0
 8000574:	733b      	strb	r3, [r7, #12]
	pmscctrl0[3] = 0xF0;
 8000576:	23f0      	movs	r3, #240	@ 0xf0
 8000578:	73fb      	strb	r3, [r7, #15]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	2204      	movs	r2, #4
 8000580:	9200      	str	r2, [sp, #0]
 8000582:	2200      	movs	r2, #0
 8000584:	2136      	movs	r1, #54	@ 0x36
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f001 fea9 	bl	80022de <dwSpiWrite>
	// force into idle mode
	dwIdle(dev);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 fa16 	bl	80009be <dwIdle>
}
 8000592:	bf00      	nop
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <dwRxSoftReset>:

/**
 Reset the receiver. Needed after errors or timeouts.
 From the DW1000 User Manual, v2.13 page 35: "Due to an issue in the re-initialisation of the receiver, it is necessary to apply a receiver reset after certain receiver error or timeout events (i.e. RXPHE (PHY Header Error), RXRFSL (Reed Solomon error), RXRFTO (Frame wait timeout), etc.). This ensures that the next good frame will have correctly calculated timestamp. It is not necessary to do this in the cases of RXPTO (Preamble detection Timeout) and RXSFDTO (SFD timeout). For details on how to apply a receiver-only reset see SOFTRESET field of Sub- Register 0x36:00 – PMSC_CTRL0."
 */
void dwRxSoftReset(dwDevice_t* dev) {
 800059a:	b580      	push	{r7, lr}
 800059c:	b086      	sub	sp, #24
 800059e:	af02      	add	r7, sp, #8
 80005a0:	6078      	str	r0, [r7, #4]
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	2204      	movs	r2, #4
 80005a8:	9200      	str	r2, [sp, #0]
 80005aa:	2200      	movs	r2, #0
 80005ac:	2136      	movs	r1, #54	@ 0x36
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f001 fe42 	bl	8002238 <dwSpiRead>

	pmscctrl0[3] = pmscctrl0[3] & 0xEF;
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	f023 0310 	bic.w	r3, r3, #16
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	73fb      	strb	r3, [r7, #15]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	2204      	movs	r2, #4
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	2200      	movs	r2, #0
 80005c8:	2136      	movs	r1, #54	@ 0x36
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f001 fe87 	bl	80022de <dwSpiWrite>
	pmscctrl0[3] = pmscctrl0[3] | 0x10;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f043 0310 	orr.w	r3, r3, #16
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	73fb      	strb	r3, [r7, #15]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2204      	movs	r2, #4
 80005e0:	9200      	str	r2, [sp, #0]
 80005e2:	2200      	movs	r2, #0
 80005e4:	2136      	movs	r1, #54	@ 0x36
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f001 fe79 	bl	80022de <dwSpiWrite>
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <dwReadSystemConfigurationRegister>:

/* ###########################################################################
 * #### DW1000 register read/write ###########################################
 * ######################################################################### */

void dwReadSystemConfigurationRegister(dwDevice_t* dev) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3311      	adds	r3, #17
 8000600:	2204      	movs	r2, #4
 8000602:	9200      	str	r2, [sp, #0]
 8000604:	2200      	movs	r2, #0
 8000606:	2104      	movs	r1, #4
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f001 fe15 	bl	8002238 <dwSpiRead>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <dwWriteSystemConfigurationRegister>:

void dwWriteSystemConfigurationRegister(dwDevice_t* dev) {
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af02      	add	r7, sp, #8
 800061c:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3311      	adds	r3, #17
 8000622:	2204      	movs	r2, #4
 8000624:	9200      	str	r2, [sp, #0]
 8000626:	2200      	movs	r2, #0
 8000628:	2104      	movs	r1, #4
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f001 fe57 	bl	80022de <dwSpiWrite>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <dwReadSystemEventStatusRegister>:

void dwReadSystemEventStatusRegister(dwDevice_t* dev) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af02      	add	r7, sp, #8
 800063e:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, SYS_STATUS, NO_SUB, dev->sysstatus, LEN_SYS_STATUS);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	331d      	adds	r3, #29
 8000644:	2205      	movs	r2, #5
 8000646:	9200      	str	r2, [sp, #0]
 8000648:	2200      	movs	r2, #0
 800064a:	210f      	movs	r1, #15
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f001 fdf3 	bl	8002238 <dwSpiRead>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <dwReadNetworkIdAndDeviceAddress>:

void dwReadNetworkIdAndDeviceAddress(dwDevice_t* dev) {
 800065a:	b580      	push	{r7, lr}
 800065c:	b084      	sub	sp, #16
 800065e:	af02      	add	r7, sp, #8
 8000660:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	330d      	adds	r3, #13
 8000666:	2204      	movs	r2, #4
 8000668:	9200      	str	r2, [sp, #0]
 800066a:	2200      	movs	r2, #0
 800066c:	2103      	movs	r1, #3
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f001 fde2 	bl	8002238 <dwSpiRead>
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <dwWriteNetworkIdAndDeviceAddress>:

void dwWriteNetworkIdAndDeviceAddress(dwDevice_t* dev) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af02      	add	r7, sp, #8
 8000682:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	330d      	adds	r3, #13
 8000688:	2204      	movs	r2, #4
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	2103      	movs	r1, #3
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f001 fe24 	bl	80022de <dwSpiWrite>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <dwReadSystemEventMaskRegister>:

void dwReadSystemEventMaskRegister(dwDevice_t* dev) {
 800069e:	b580      	push	{r7, lr}
 80006a0:	b084      	sub	sp, #16
 80006a2:	af02      	add	r7, sp, #8
 80006a4:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	3315      	adds	r3, #21
 80006aa:	2204      	movs	r2, #4
 80006ac:	9200      	str	r2, [sp, #0]
 80006ae:	2200      	movs	r2, #0
 80006b0:	210e      	movs	r1, #14
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f001 fdc0 	bl	8002238 <dwSpiRead>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <dwWriteSystemEventMaskRegister>:

void dwWriteSystemEventMaskRegister(dwDevice_t* dev) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3315      	adds	r3, #21
 80006cc:	2204      	movs	r2, #4
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	2200      	movs	r2, #0
 80006d2:	210e      	movs	r1, #14
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f001 fe02 	bl	80022de <dwSpiWrite>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <dwReadChannelControlRegister>:

void dwReadChannelControlRegister(dwDevice_t* dev) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b084      	sub	sp, #16
 80006e6:	af02      	add	r7, sp, #8
 80006e8:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	3319      	adds	r3, #25
 80006ee:	2204      	movs	r2, #4
 80006f0:	9200      	str	r2, [sp, #0]
 80006f2:	2200      	movs	r2, #0
 80006f4:	211f      	movs	r1, #31
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f001 fd9e 	bl	8002238 <dwSpiRead>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <dwWriteChannelControlRegister>:

void dwWriteChannelControlRegister(dwDevice_t* dev) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3319      	adds	r3, #25
 8000710:	2204      	movs	r2, #4
 8000712:	9200      	str	r2, [sp, #0]
 8000714:	2200      	movs	r2, #0
 8000716:	211f      	movs	r1, #31
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f001 fde0 	bl	80022de <dwSpiWrite>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <dwReadTransmitFrameControlRegister>:

void dwReadTransmitFrameControlRegister(dwDevice_t* dev) {
 8000726:	b580      	push	{r7, lr}
 8000728:	b084      	sub	sp, #16
 800072a:	af02      	add	r7, sp, #8
 800072c:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	3322      	adds	r3, #34	@ 0x22
 8000732:	2205      	movs	r2, #5
 8000734:	9200      	str	r2, [sp, #0]
 8000736:	2200      	movs	r2, #0
 8000738:	2108      	movs	r1, #8
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f001 fd7c 	bl	8002238 <dwSpiRead>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <dwWriteTransmitFrameControlRegister>:

void dwWriteTransmitFrameControlRegister(dwDevice_t* dev) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af02      	add	r7, sp, #8
 800074e:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3322      	adds	r3, #34	@ 0x22
 8000754:	2205      	movs	r2, #5
 8000756:	9200      	str	r2, [sp, #0]
 8000758:	2200      	movs	r2, #0
 800075a:	2108      	movs	r1, #8
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f001 fdbe 	bl	80022de <dwSpiWrite>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <dwSetFrameFilter>:
void dwSetReceiveWaitTimeout(dwDevice_t *dev, uint16_t timeout) {
	dwSpiWrite(dev, RX_FWTO, NO_SUB, &timeout, 2);
	setBit(dev->syscfg, LEN_SYS_CFG, RXWTOE_BIT, timeout!=0);
}

void dwSetFrameFilter(dwDevice_t* dev, bool val) {
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	460b      	mov	r3, r1
 8000774:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, FFEN_BIT, val);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f103 0011 	add.w	r0, r3, #17
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2200      	movs	r2, #0
 8000780:	2104      	movs	r1, #4
 8000782:	f001 fc9f 	bl	80020c4 <setBit>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <dwSetFrameFilterAllowData>:

void dwSetFrameFilterAllowBeacon(dwDevice_t* dev, bool val) {
	setBit(dev->syscfg, LEN_SYS_CFG, FFAB_BIT, val);
}

void dwSetFrameFilterAllowData(dwDevice_t* dev, bool val) {
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
 8000796:	460b      	mov	r3, r1
 8000798:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, FFAD_BIT, val);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f103 0011 	add.w	r0, r3, #17
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	2203      	movs	r2, #3
 80007a4:	2104      	movs	r1, #4
 80007a6:	f001 fc8d 	bl	80020c4 <setBit>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <dwSetFrameFilterAllowReserved>:

void dwSetFrameFilterAllowMAC(dwDevice_t* dev, bool val) {
	setBit(dev->syscfg, LEN_SYS_CFG, FFAM_BIT, val);
}

void dwSetFrameFilterAllowReserved(dwDevice_t* dev, bool val) {
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, FFAR_BIT, val);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f103 0011 	add.w	r0, r3, #17
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	2206      	movs	r2, #6
 80007c8:	2104      	movs	r1, #4
 80007ca:	f001 fc7b 	bl	80020c4 <setBit>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <dwSetDoubleBuffering>:

void dwSetDoubleBuffering(dwDevice_t* dev, bool val) {
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	460b      	mov	r3, r1
 80007e0:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, DIS_DRXB_BIT, !val);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f103 0011 	add.w	r0, r3, #17
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	bf14      	ite	ne
 80007ee:	2301      	movne	r3, #1
 80007f0:	2300      	moveq	r3, #0
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	f083 0301 	eor.w	r3, r3, #1
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	220c      	movs	r2, #12
 8000802:	2104      	movs	r1, #4
 8000804:	f001 fc5e 	bl	80020c4 <setBit>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <dwSetInterruptPolarity>:

void dwSetInterruptPolarity(dwDevice_t* dev, bool val) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, HIRQ_POL_BIT, val);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f103 0011 	add.w	r0, r3, #17
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	2209      	movs	r2, #9
 8000826:	2104      	movs	r1, #4
 8000828:	f001 fc4c 	bl	80020c4 <setBit>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <dwSetReceiverAutoReenable>:

void dwSetReceiverAutoReenable(dwDevice_t* dev, bool val) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, RXAUTR_BIT, val);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f103 0011 	add.w	r0, r3, #17
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	221d      	movs	r2, #29
 800084a:	2104      	movs	r1, #4
 800084c:	f001 fc3a 	bl	80020c4 <setBit>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <dwInterruptOnSent>:

void dwInterruptOnSent(dwDevice_t* dev, bool val) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, TXFRS_BIT, val);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f103 0015 	add.w	r0, r3, #21
 800086a:	78fb      	ldrb	r3, [r7, #3]
 800086c:	2207      	movs	r2, #7
 800086e:	2104      	movs	r1, #4
 8000870:	f001 fc28 	bl	80020c4 <setBit>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <dwInterruptOnReceived>:

void dwInterruptOnReceived(dwDevice_t* dev, bool val) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, RXDFR_BIT, val);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f103 0015 	add.w	r0, r3, #21
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	220d      	movs	r2, #13
 8000892:	2104      	movs	r1, #4
 8000894:	f001 fc16 	bl	80020c4 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, RXFCG_BIT, val);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f103 0015 	add.w	r0, r3, #21
 800089e:	78fb      	ldrb	r3, [r7, #3]
 80008a0:	220e      	movs	r2, #14
 80008a2:	2104      	movs	r1, #4
 80008a4:	f001 fc0e 	bl	80020c4 <setBit>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <dwInterruptOnReceiveFailed>:

void dwInterruptOnReceiveFailed(dwDevice_t* dev, bool val) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_STATUS, LDEERR_BIT, val);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f103 0015 	add.w	r0, r3, #21
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	2212      	movs	r2, #18
 80008c6:	2105      	movs	r1, #5
 80008c8:	f001 fbfc 	bl	80020c4 <setBit>
	setBit(dev->sysmask, LEN_SYS_STATUS, RXFCE_BIT, val);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f103 0015 	add.w	r0, r3, #21
 80008d2:	78fb      	ldrb	r3, [r7, #3]
 80008d4:	220f      	movs	r2, #15
 80008d6:	2105      	movs	r1, #5
 80008d8:	f001 fbf4 	bl	80020c4 <setBit>
	setBit(dev->sysmask, LEN_SYS_STATUS, RXPHE_BIT, val);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f103 0015 	add.w	r0, r3, #21
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	220c      	movs	r2, #12
 80008e6:	2105      	movs	r1, #5
 80008e8:	f001 fbec 	bl	80020c4 <setBit>
	setBit(dev->sysmask, LEN_SYS_STATUS, RXRFSL_BIT, val);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f103 0015 	add.w	r0, r3, #21
 80008f2:	78fb      	ldrb	r3, [r7, #3]
 80008f4:	2210      	movs	r2, #16
 80008f6:	2105      	movs	r1, #5
 80008f8:	f001 fbe4 	bl	80020c4 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, RXSFDTO_BIT, val);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f103 0015 	add.w	r0, r3, #21
 8000902:	78fb      	ldrb	r3, [r7, #3]
 8000904:	221a      	movs	r2, #26
 8000906:	2104      	movs	r1, #4
 8000908:	f001 fbdc 	bl	80020c4 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, AFFREJ_BIT, val);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f103 0015 	add.w	r0, r3, #21
 8000912:	78fb      	ldrb	r3, [r7, #3]
 8000914:	221d      	movs	r2, #29
 8000916:	2104      	movs	r1, #4
 8000918:	f001 fbd4 	bl	80020c4 <setBit>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <dwInterruptOnReceiveTimeout>:

void dwInterruptOnReceiveTimeout(dwDevice_t* dev, bool val) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, RXRFTO_BIT, val);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f103 0015 	add.w	r0, r3, #21
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	2211      	movs	r2, #17
 800093a:	2104      	movs	r1, #4
 800093c:	f001 fbc2 	bl	80020c4 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, RXPTO_BIT, val);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f103 0015 	add.w	r0, r3, #21
 8000946:	78fb      	ldrb	r3, [r7, #3]
 8000948:	2215      	movs	r2, #21
 800094a:	2104      	movs	r1, #4
 800094c:	f001 fbba 	bl	80020c4 <setBit>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <dwInterruptOnReceiveTimestampAvailable>:

void dwInterruptOnReceiveTimestampAvailable(dwDevice_t* dev, bool val) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, LDEDONE_BIT, val);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f103 0015 	add.w	r0, r3, #21
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	220a      	movs	r2, #10
 800096e:	2104      	movs	r1, #4
 8000970:	f001 fba8 	bl	80020c4 <setBit>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <dwInterruptOnAutomaticAcknowledgeTrigger>:

void dwInterruptOnAutomaticAcknowledgeTrigger(dwDevice_t* dev, bool val) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, AAT_BIT, val);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f103 0015 	add.w	r0, r3, #21
 800098e:	78fb      	ldrb	r3, [r7, #3]
 8000990:	2203      	movs	r2, #3
 8000992:	2104      	movs	r1, #4
 8000994:	f001 fb96 	bl	80020c4 <setBit>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <dwClearInterrupts>:

void dwClearInterrupts(dwDevice_t* dev) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	memset(dev->sysmask, 0, LEN_SYS_MASK);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3315      	adds	r3, #21
 80009ac:	2204      	movs	r2, #4
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f00a f9bd 	bl	800ad30 <memset>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <dwIdle>:

void dwIdle(dwDevice_t* dev)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b084      	sub	sp, #16
 80009c2:	af02      	add	r7, sp, #8
 80009c4:	6078      	str	r0, [r7, #4]
	 memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3308      	adds	r3, #8
 80009ca:	2204      	movs	r2, #4
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f00a f9ae 	bl	800ad30 <memset>
	 dev->sysctrl[0] |= 1<<TRXOFF_BIT;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	7a1b      	ldrb	r3, [r3, #8]
 80009d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	721a      	strb	r2, [r3, #8]
	 dev->deviceMode = IDLE_MODE;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	731a      	strb	r2, [r3, #12]
	 dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3308      	adds	r3, #8
 80009ec:	2204      	movs	r2, #4
 80009ee:	9200      	str	r2, [sp, #0]
 80009f0:	2200      	movs	r2, #0
 80009f2:	210d      	movs	r1, #13
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f001 fc72 	bl	80022de <dwSpiWrite>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <dwNewReceive>:

void dwNewReceive(dwDevice_t* dev) {
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
	dwIdle(dev);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ffd7 	bl	80009be <dwIdle>
	memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3308      	adds	r3, #8
 8000a14:	2204      	movs	r2, #4
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f00a f989 	bl	800ad30 <memset>
	dwClearReceiveStatus(dev);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f000 fc18 	bl	8001254 <dwClearReceiveStatus>
	dev->deviceMode = RX_MODE;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2201      	movs	r2, #1
 8000a28:	731a      	strb	r2, [r3, #12]
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <dwStartReceive>:

void dwStartReceive(dwDevice_t* dev) {
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af02      	add	r7, sp, #8
 8000a38:	6078      	str	r0, [r7, #4]
	setBit(dev->sysctrl, LEN_SYS_CTRL, SFCST_BIT, !dev->frameCheck);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f103 0008 	add.w	r0, r3, #8
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	bf14      	ite	ne
 8000a4a:	2301      	movne	r3, #1
 8000a4c:	2300      	moveq	r3, #0
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	f083 0301 	eor.w	r3, r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2104      	movs	r1, #4
 8000a60:	f001 fb30 	bl	80020c4 <setBit>
	setBit(dev->sysctrl, LEN_SYS_CTRL, RXENAB_BIT, true);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f103 0008 	add.w	r0, r3, #8
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	2104      	movs	r1, #4
 8000a70:	f001 fb28 	bl	80020c4 <setBit>
	dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3308      	adds	r3, #8
 8000a78:	2204      	movs	r2, #4
 8000a7a:	9200      	str	r2, [sp, #0]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	210d      	movs	r1, #13
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f001 fc2c 	bl	80022de <dwSpiWrite>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <dwNewTransmit>:

void dwNewTransmit(dwDevice_t* dev) {
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
	dwIdle(dev);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ff91 	bl	80009be <dwIdle>
	memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3308      	adds	r3, #8
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f00a f943 	bl	800ad30 <memset>
	dwClearTransmitStatus(dev);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f000 fbe4 	bl	8001278 <dwClearTransmitStatus>
	dev->deviceMode = TX_MODE;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	731a      	strb	r2, [r3, #12]
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <dwStartTransmit>:

void dwStartTransmit(dwDevice_t* dev) {
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	af02      	add	r7, sp, #8
 8000ac4:	6078      	str	r0, [r7, #4]
	dwWriteTransmitFrameControlRegister(dev);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff fe3e 	bl	8000748 <dwWriteTransmitFrameControlRegister>
	setBit(dev->sysctrl, LEN_SYS_CTRL, SFCST_BIT, !dev->frameCheck);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f103 0008 	add.w	r0, r3, #8
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	bf14      	ite	ne
 8000adc:	2301      	movne	r3, #1
 8000ade:	2300      	moveq	r3, #0
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	f083 0301 	eor.w	r3, r3, #1
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2200      	movs	r2, #0
 8000af0:	2104      	movs	r1, #4
 8000af2:	f001 fae7 	bl	80020c4 <setBit>
	setBit(dev->sysctrl, LEN_SYS_CTRL, TXSTRT_BIT, true);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f103 0008 	add.w	r0, r3, #8
 8000afc:	2301      	movs	r3, #1
 8000afe:	2201      	movs	r2, #1
 8000b00:	2104      	movs	r1, #4
 8000b02:	f001 fadf 	bl	80020c4 <setBit>
	dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3308      	adds	r3, #8
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	9200      	str	r2, [sp, #0]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	210d      	movs	r1, #13
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f001 fbe3 	bl	80022de <dwSpiWrite>
	if(dev->permanentReceive) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d00d      	beq.n	8000b3e <dwStartTransmit+0x80>
		memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	3308      	adds	r3, #8
 8000b26:	2204      	movs	r2, #4
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f00a f900 	bl	800ad30 <memset>
		dev->deviceMode = RX_MODE;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2201      	movs	r2, #1
 8000b34:	731a      	strb	r2, [r3, #12]
		dwStartReceive(dev);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ff7b 	bl	8000a32 <dwStartReceive>
	} else if (dev->wait4resp) {
		dev->deviceMode = RX_MODE;
	} else {
		dev->deviceMode = IDLE_MODE;
	}
}
 8000b3c:	e00b      	b.n	8000b56 <dwStartTransmit+0x98>
	} else if (dev->wait4resp) {
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d003      	beq.n	8000b50 <dwStartTransmit+0x92>
		dev->deviceMode = RX_MODE;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	731a      	strb	r2, [r3, #12]
}
 8000b4e:	e002      	b.n	8000b56 <dwStartTransmit+0x98>
		dev->deviceMode = IDLE_MODE;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	731a      	strb	r2, [r3, #12]
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <dwNewConfiguration>:

void dwNewConfiguration(dwDevice_t* dev) {
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
	dwIdle(dev);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ff29 	bl	80009be <dwIdle>
	dwReadNetworkIdAndDeviceAddress(dev);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff fd74 	bl	800065a <dwReadNetworkIdAndDeviceAddress>
	dwReadSystemConfigurationRegister(dev);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff fd3e 	bl	80005f4 <dwReadSystemConfigurationRegister>
	dwReadChannelControlRegister(dev);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff fdb2 	bl	80006e2 <dwReadChannelControlRegister>
	dwReadTransmitFrameControlRegister(dev);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff fdd1 	bl	8000726 <dwReadTransmitFrameControlRegister>
	dwReadSystemEventMaskRegister(dev);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff fd8a 	bl	800069e <dwReadSystemEventMaskRegister>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <dwCommitConfiguration>:

void dwCommitConfiguration(dwDevice_t* dev) {
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b084      	sub	sp, #16
 8000b96:	af02      	add	r7, sp, #8
 8000b98:	6078      	str	r0, [r7, #4]
	// write all configurations back to device
	dwWriteNetworkIdAndDeviceAddress(dev);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fd6e 	bl	800067c <dwWriteNetworkIdAndDeviceAddress>
	dwWriteSystemConfigurationRegister(dev);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff fd38 	bl	8000616 <dwWriteSystemConfigurationRegister>
	dwWriteChannelControlRegister(dev);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff fdac 	bl	8000704 <dwWriteChannelControlRegister>
	dwWriteTransmitFrameControlRegister(dev);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff fdcb 	bl	8000748 <dwWriteTransmitFrameControlRegister>
	dwWriteSystemEventMaskRegister(dev);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff fd84 	bl	80006c0 <dwWriteSystemEventMaskRegister>
	// tune according to configuration
	dwTune(dev);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 fb9d 	bl	80012f8 <dwTune>
	// uint8_t antennaDelayBytes[LEN_STAMP];
	// writeValueToBytes(antennaDelayBytes, 16384, LEN_STAMP);
	// dev->antennaDelay.setTimestamp(antennaDelayBytes);
	// dwSpiRead(dev, TX_ANTD, NO_SUB, antennaDelayBytes, LEN_TX_ANTD);
	// dwSpiRead(dev, LDE_IF, LDE_RXANTD_SUB, antennaDelayBytes, LEN_LDE_RXANTD);
	dwSpiWrite(dev, TX_ANTD, NO_SUB, dev->antennaDelay.raw, LEN_TX_ANTD);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3338      	adds	r3, #56	@ 0x38
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	9200      	str	r2, [sp, #0]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2118      	movs	r1, #24
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f001 fb87 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_RXANTD_SUB, dev->antennaDelay.raw, LEN_LDE_RXANTD);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3338      	adds	r3, #56	@ 0x38
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	9200      	str	r2, [sp, #0]
 8000bd8:	f641 0204 	movw	r2, #6148	@ 0x1804
 8000bdc:	212e      	movs	r1, #46	@ 0x2e
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f001 fb7d 	bl	80022de <dwSpiWrite>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <dwSuppressFrameCheck>:
void dwWaitForResponse(dwDevice_t* dev, bool val) {
	dev->wait4resp = val;
	setBit(dev->sysctrl, LEN_SYS_CTRL, WAIT4RESP_BIT, val);
}

void dwSuppressFrameCheck(dwDevice_t* dev, bool val) {
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	70fb      	strb	r3, [r7, #3]
	dev->frameCheck = !val;
 8000bf8:	78fb      	ldrb	r3, [r7, #3]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	bf14      	ite	ne
 8000bfe:	2301      	movne	r3, #1
 8000c00:	2300      	moveq	r3, #0
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f083 0301 	eor.w	r3, r3, #1
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <dwUseSmartPower>:

void dwUseSmartPower(dwDevice_t* dev, bool smartPower) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	70fb      	strb	r3, [r7, #3]
	dev->smartPower = smartPower;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	78fa      	ldrb	r2, [r7, #3]
 8000c30:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	setBit(dev->syscfg, LEN_SYS_CFG, DIS_STXP_BIT, !smartPower);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f103 0011 	add.w	r0, r3, #17
 8000c3a:	78fb      	ldrb	r3, [r7, #3]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	bf14      	ite	ne
 8000c40:	2301      	movne	r3, #1
 8000c42:	2300      	moveq	r3, #0
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	f083 0301 	eor.w	r3, r3, #1
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2212      	movs	r2, #18
 8000c54:	2104      	movs	r1, #4
 8000c56:	f001 fa35 	bl	80020c4 <setBit>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <dwSetDataRate>:
	delayBytes[1] &= 0xFE;
	dwSpiWrite(dev, DX_TIME, NO_SUB, delayBytes, LEN_DX_TIME);
}


void dwSetDataRate(dwDevice_t* dev, uint8_t rate) {
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af02      	add	r7, sp, #8
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	70fb      	strb	r3, [r7, #3]
	rate &= 0x03;
 8000c6e:	78fb      	ldrb	r3, [r7, #3]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	70fb      	strb	r3, [r7, #3]
	dev->txfctrl[1] &= 0x83;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000c7c:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	dev->txfctrl[1] |= (uint8_t)((rate << 5) & 0xFF);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000c8e:	78fb      	ldrb	r3, [r7, #3]
 8000c90:	015b      	lsls	r3, r3, #5
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4313      	orrs	r3, r2
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	// special 110kbps flag
	if(rate == TRX_RATE_110KBPS) {
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d108      	bne.n	8000cb6 <dwSetDataRate+0x54>
		setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, true);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f103 0011 	add.w	r0, r3, #17
 8000caa:	2301      	movs	r3, #1
 8000cac:	2216      	movs	r2, #22
 8000cae:	2104      	movs	r1, #4
 8000cb0:	f001 fa08 	bl	80020c4 <setBit>
 8000cb4:	e007      	b.n	8000cc6 <dwSetDataRate+0x64>
	} else {
		setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, false);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f103 0011 	add.w	r0, r3, #17
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	2216      	movs	r2, #22
 8000cc0:	2104      	movs	r1, #4
 8000cc2:	f001 f9ff 	bl	80020c4 <setBit>
	}
	// SFD mode and type (non-configurable, as in Table )
	if(rate == TRX_RATE_6800KBPS) {
 8000cc6:	78fb      	ldrb	r3, [r7, #3]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d118      	bne.n	8000cfe <dwSetDataRate+0x9c>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, false);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f103 0019 	add.w	r0, r3, #25
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	2211      	movs	r2, #17
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	f001 f9f4 	bl	80020c4 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, false);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f103 0019 	add.w	r0, r3, #25
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	2214      	movs	r2, #20
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	f001 f9ec 	bl	80020c4 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, false);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f103 0019 	add.w	r0, r3, #25
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	2215      	movs	r2, #21
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	f001 f9e4 	bl	80020c4 <setBit>
 8000cfc:	e017      	b.n	8000d2e <dwSetDataRate+0xcc>
	} else {
		setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, true);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f103 0019 	add.w	r0, r3, #25
 8000d04:	2301      	movs	r3, #1
 8000d06:	2211      	movs	r2, #17
 8000d08:	2104      	movs	r1, #4
 8000d0a:	f001 f9db 	bl	80020c4 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, true);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f103 0019 	add.w	r0, r3, #25
 8000d14:	2301      	movs	r3, #1
 8000d16:	2214      	movs	r2, #20
 8000d18:	2104      	movs	r1, #4
 8000d1a:	f001 f9d3 	bl	80020c4 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, true);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f103 0019 	add.w	r0, r3, #25
 8000d24:	2301      	movs	r3, #1
 8000d26:	2215      	movs	r2, #21
 8000d28:	2104      	movs	r1, #4
 8000d2a:	f001 f9cb 	bl	80020c4 <setBit>

	}
	uint8_t sfdLength;
	if(rate == TRX_RATE_6800KBPS) {
 8000d2e:	78fb      	ldrb	r3, [r7, #3]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d102      	bne.n	8000d3a <dwSetDataRate+0xd8>
		sfdLength = 0x08;
 8000d34:	2308      	movs	r3, #8
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	e007      	b.n	8000d4a <dwSetDataRate+0xe8>
	} else if(rate == TRX_RATE_850KBPS) {
 8000d3a:	78fb      	ldrb	r3, [r7, #3]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d102      	bne.n	8000d46 <dwSetDataRate+0xe4>
		sfdLength = 0x10;
 8000d40:	2310      	movs	r3, #16
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e001      	b.n	8000d4a <dwSetDataRate+0xe8>
	} else {
		sfdLength = 0x40;
 8000d46:	2340      	movs	r3, #64	@ 0x40
 8000d48:	73fb      	strb	r3, [r7, #15]
	}
	dwSpiWrite(dev, USR_SFD, SFD_LENGTH_SUB, &sfdLength, LEN_SFD_LENGTH);
 8000d4a:	f107 030f 	add.w	r3, r7, #15
 8000d4e:	2201      	movs	r2, #1
 8000d50:	9200      	str	r2, [sp, #0]
 8000d52:	2200      	movs	r2, #0
 8000d54:	2121      	movs	r1, #33	@ 0x21
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f001 fac1 	bl	80022de <dwSpiWrite>
	dev->dataRate = rate;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	78fa      	ldrb	r2, [r7, #3]
 8000d60:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <dwSetPulseFrequency>:

void dwSetPulseFrequency(dwDevice_t* dev, uint8_t freq) {
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	70fb      	strb	r3, [r7, #3]
	freq &= 0x03;
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	70fb      	strb	r3, [r7, #3]
	dev->txfctrl[2] &= 0xFC;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d86:	f023 0303 	bic.w	r3, r3, #3
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	dev->txfctrl[2] |= (uint8_t)(freq & 0xFF);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000d98:	78fb      	ldrb	r3, [r7, #3]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	dev->chanctrl[2] &= 0xF3;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	7edb      	ldrb	r3, [r3, #27]
 8000da8:	f023 030c 	bic.w	r3, r3, #12
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	76da      	strb	r2, [r3, #27]
	dev->chanctrl[2] |= (uint8_t)((freq << 2) & 0xFF);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7eda      	ldrb	r2, [r3, #27]
 8000db6:	78fb      	ldrb	r3, [r7, #3]
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	76da      	strb	r2, [r3, #27]
	dev->pulseFrequency = freq;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	78fa      	ldrb	r2, [r7, #3]
 8000dc8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr

08000dd6 <dwSetPreambleLength>:

uint8_t dwGetPulseFrequency(dwDevice_t* dev) {
	return dev->pulseFrequency;
}

void dwSetPreambleLength(dwDevice_t* dev, uint8_t prealen) {
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	460b      	mov	r3, r1
 8000de0:	70fb      	strb	r3, [r7, #3]
	prealen &= 0x0F;
 8000de2:	78fb      	ldrb	r3, [r7, #3]
 8000de4:	f003 030f 	and.w	r3, r3, #15
 8000de8:	70fb      	strb	r3, [r7, #3]
	dev->txfctrl[2] &= 0xC3;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000df0:	f023 033c 	bic.w	r3, r3, #60	@ 0x3c
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	dev->txfctrl[2] |= (uint8_t)((prealen << 2) & 0xFF);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000e02:	78fb      	ldrb	r3, [r7, #3]
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	if(prealen == TX_PREAMBLE_LEN_64 || prealen == TX_PREAMBLE_LEN_128) {
 8000e12:	78fb      	ldrb	r3, [r7, #3]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d002      	beq.n	8000e1e <dwSetPreambleLength+0x48>
 8000e18:	78fb      	ldrb	r3, [r7, #3]
 8000e1a:	2b05      	cmp	r3, #5
 8000e1c:	d104      	bne.n	8000e28 <dwSetPreambleLength+0x52>
		dev->pacSize = PAC_SIZE_8;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2208      	movs	r2, #8
 8000e22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8000e26:	e016      	b.n	8000e56 <dwSetPreambleLength+0x80>
	} else if(prealen == TX_PREAMBLE_LEN_256 || prealen == TX_PREAMBLE_LEN_512) {
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	2b09      	cmp	r3, #9
 8000e2c:	d002      	beq.n	8000e34 <dwSetPreambleLength+0x5e>
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	2b0d      	cmp	r3, #13
 8000e32:	d104      	bne.n	8000e3e <dwSetPreambleLength+0x68>
		dev->pacSize = PAC_SIZE_16;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2210      	movs	r2, #16
 8000e38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8000e3c:	e00b      	b.n	8000e56 <dwSetPreambleLength+0x80>
	} else if(prealen == TX_PREAMBLE_LEN_1024) {
 8000e3e:	78fb      	ldrb	r3, [r7, #3]
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d104      	bne.n	8000e4e <dwSetPreambleLength+0x78>
		dev->pacSize = PAC_SIZE_32;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2220      	movs	r2, #32
 8000e48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8000e4c:	e003      	b.n	8000e56 <dwSetPreambleLength+0x80>
	} else {
		dev->pacSize = PAC_SIZE_64;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2240      	movs	r2, #64	@ 0x40
 8000e52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}
	dev->preambleLength = prealen;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	78fa      	ldrb	r2, [r7, #3]
 8000e5a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <dwUseExtendedFrameLength>:

void dwUseExtendedFrameLength(dwDevice_t* dev, bool val) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	70fb      	strb	r3, [r7, #3]
	dev->extendedFrameLength = (val ? FRAME_LENGTH_EXTENDED : FRAME_LENGTH_NORMAL);
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <dwUseExtendedFrameLength+0x16>
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	e000      	b.n	8000e80 <dwUseExtendedFrameLength+0x18>
 8000e7e:	2200      	movs	r2, #0
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	dev->syscfg[2] &= 0xFC;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	7cdb      	ldrb	r3, [r3, #19]
 8000e8a:	f023 0303 	bic.w	r3, r3, #3
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	74da      	strb	r2, [r3, #19]
	dev->syscfg[2] |= dev->extendedFrameLength;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7cda      	ldrb	r2, [r3, #19]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	74da      	strb	r2, [r3, #19]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <dwSetChannel>:

void dwReceivePermanently(dwDevice_t* dev, bool val) {
	dev->permanentReceive = val;
}

void dwSetChannel(dwDevice_t* dev, uint8_t channel) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
	channel &= 0xF;
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	f003 030f 	and.w	r3, r3, #15
 8000ec2:	70fb      	strb	r3, [r7, #3]
	dev->chanctrl[0] = ((channel | (channel << 4)) & 0xFF);
 8000ec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ec8:	011b      	lsls	r3, r3, #4
 8000eca:	b25a      	sxtb	r2, r3
 8000ecc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	765a      	strb	r2, [r3, #25]
	dev->channel = channel;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	78fa      	ldrb	r2, [r7, #3]
 8000ede:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <dwSetPreambleCode>:

void dwSetPreambleCode(dwDevice_t* dev, uint8_t preacode) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	70fb      	strb	r3, [r7, #3]
	preacode &= 0x1F;
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	f003 031f 	and.w	r3, r3, #31
 8000efe:	70fb      	strb	r3, [r7, #3]
	dev->chanctrl[2] &= 0x3F;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7edb      	ldrb	r3, [r3, #27]
 8000f04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	76da      	strb	r2, [r3, #27]
	dev->chanctrl[2] |= ((preacode << 6) & 0xFF);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	7edb      	ldrb	r3, [r3, #27]
 8000f12:	b25a      	sxtb	r2, r3
 8000f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f18:	019b      	lsls	r3, r3, #6
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b25b      	sxtb	r3, r3
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	76da      	strb	r2, [r3, #27]
	dev->chanctrl[3] = 0x00;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	771a      	strb	r2, [r3, #28]
	dev->chanctrl[3] = ((((preacode >> 2) & 0x07) | (preacode << 3)) & 0xFF);
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	b25a      	sxtb	r2, r3
 8000f3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	771a      	strb	r2, [r3, #28]
	dev->preambleCode = preacode;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	78fa      	ldrb	r2, [r7, #3]
 8000f50:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
	...

08000f60 <dwSetDefaults>:

void dwSetDefaults(dwDevice_t* dev) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	if(dev->deviceMode == TX_MODE) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	7b1b      	ldrb	r3, [r3, #12]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d03f      	beq.n	8000ff0 <dwSetDefaults+0x90>

	} else if(dev->deviceMode == RX_MODE) {
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7b1b      	ldrb	r3, [r3, #12]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d03b      	beq.n	8000ff0 <dwSetDefaults+0x90>

	} else if(dev->deviceMode == IDLE_MODE) {
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7b1b      	ldrb	r3, [r3, #12]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d137      	bne.n	8000ff0 <dwSetDefaults+0x90>
		dwUseExtendedFrameLength(dev, false);
 8000f80:	2100      	movs	r1, #0
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ff70 	bl	8000e68 <dwUseExtendedFrameLength>
		dwUseSmartPower(dev, false);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff fe48 	bl	8000c20 <dwUseSmartPower>
		dwSuppressFrameCheck(dev, false);
 8000f90:	2100      	movs	r1, #0
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff fe2a 	bl	8000bec <dwSuppressFrameCheck>
		//for global frame filtering
		dwSetFrameFilter(dev, false);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff fbe5 	bl	800076a <dwSetFrameFilter>
		//for data frame (poll, poll_ack, range, range report, range failed) filtering
		dwSetFrameFilterAllowData(dev, false);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff fbf3 	bl	800078e <dwSetFrameFilterAllowData>
		//for reserved (blink) frame filtering
		dwSetFrameFilterAllowReserved(dev, false);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fc01 	bl	80007b2 <dwSetFrameFilterAllowReserved>
		//setFrameFilterAllowMAC(true);
		//setFrameFilterAllowBeacon(true);
		//setFrameFilterAllowAcknowledgement(true);
		dwInterruptOnSent(dev, true);
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff fc50 	bl	8000858 <dwInterruptOnSent>
		dwInterruptOnReceived(dev, true);
 8000fb8:	2101      	movs	r1, #1
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff fc5e 	bl	800087c <dwInterruptOnReceived>
		dwInterruptOnReceiveTimeout(dev, true);
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff fcae 	bl	8000924 <dwInterruptOnReceiveTimeout>
		dwInterruptOnReceiveFailed(dev, false);
 8000fc8:	2100      	movs	r1, #0
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fc70 	bl	80008b0 <dwInterruptOnReceiveFailed>
		dwInterruptOnReceiveTimestampAvailable(dev, false);
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff fcc0 	bl	8000958 <dwInterruptOnReceiveTimestampAvailable>
		dwInterruptOnAutomaticAcknowledgeTrigger(dev, false);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fcce 	bl	800097c <dwInterruptOnAutomaticAcknowledgeTrigger>
		dwSetReceiverAutoReenable(dev, true);
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fc26 	bl	8000834 <dwSetReceiverAutoReenable>
		// default mode when powering up the chip
		// still explicitly selected for later tuning
		dwEnableMode(dev, MODE_LONGDATA_RANGE_LOWPOWER);
 8000fe8:	4903      	ldr	r1, [pc, #12]	@ (8000ff8 <dwSetDefaults+0x98>)
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 f954 	bl	8001298 <dwEnableMode>
	}
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	0800b784 	.word	0x0800b784

08000ffc <dwSetData>:

void dwSetData(dwDevice_t* dev, uint8_t data[], unsigned int n) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af02      	add	r7, sp, #8
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	if(dev->frameCheck) {
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <dwSetData+0x1c>
		n+=2; // two bytes CRC-16
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3302      	adds	r3, #2
 8001016:	607b      	str	r3, [r7, #4]
	}
	if(n > LEN_EXT_UWB_FRAMES) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800101e:	d22e      	bcs.n	800107e <dwSetData+0x82>
		return; // TODO proper error handling: frame/buffer size
	}
	if(n > LEN_UWB_FRAMES && !dev->extendedFrameLength) {
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b7f      	cmp	r3, #127	@ 0x7f
 8001024:	d904      	bls.n	8001030 <dwSetData+0x34>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800102c:	2b00      	cmp	r3, #0
 800102e:	d028      	beq.n	8001082 <dwSetData+0x86>
		return; // TODO proper error handling: frame/buffer size
	}
	// transmit data and length
	dwSpiWrite(dev, TX_BUFFER, NO_SUB, data, n);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	2200      	movs	r2, #0
 8001038:	2109      	movs	r1, #9
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f001 f94f 	bl	80022de <dwSpiWrite>
	dev->txfctrl[0] = (uint8_t)(n & 0xFF); // 1 byte (regular length + 1 bit)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	dev->txfctrl[1] &= 0xE0;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001050:	f023 031f 	bic.w	r3, r3, #31
 8001054:	b2da      	uxtb	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	dev->txfctrl[1] |= (uint8_t)((n >> 8) & 0x03);	// 2 added bits if extended length
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001062:	b25a      	sxtb	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	0a1b      	lsrs	r3, r3, #8
 8001068:	b25b      	sxtb	r3, r3
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	b25b      	sxtb	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b25b      	sxtb	r3, r3
 8001074:	b2da      	uxtb	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 800107c:	e002      	b.n	8001084 <dwSetData+0x88>
		return; // TODO proper error handling: frame/buffer size
 800107e:	bf00      	nop
 8001080:	e000      	b.n	8001084 <dwSetData+0x88>
		return; // TODO proper error handling: frame/buffer size
 8001082:	bf00      	nop
}
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <dwIsTransmitDone>:

void dwGetSystemTimestamp(dwDevice_t* dev, dwTime_t* time) {
	dwSpiRead(dev, SYS_TIME, NO_SUB, time->raw, LEN_SYS_TIME);
}

bool dwIsTransmitDone(dwDevice_t* dev) {
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
	return getBit(dev->sysstatus, LEN_SYS_STATUS, TXFRS_BIT);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	331d      	adds	r3, #29
 8001096:	2207      	movs	r2, #7
 8001098:	2105      	movs	r1, #5
 800109a:	4618      	mov	r0, r3
 800109c:	f001 f84e 	bl	800213c <getBit>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <dwIsReceiveTimestampAvailable>:

bool dwIsReceiveTimestampAvailable(dwDevice_t* dev) {
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
	return getBit(dev->sysstatus, LEN_SYS_STATUS, LDEDONE_BIT);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	331d      	adds	r3, #29
 80010b6:	220a      	movs	r2, #10
 80010b8:	2105      	movs	r1, #5
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 f83e 	bl	800213c <getBit>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <dwIsReceiveDone>:

bool dwIsReceiveDone(dwDevice_t* dev) {
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
	if(dev->frameCheck) {
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d008      	beq.n	80010ee <dwIsReceiveDone+0x24>
		return getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCG_BIT);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	331d      	adds	r3, #29
 80010e0:	220e      	movs	r2, #14
 80010e2:	2105      	movs	r1, #5
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 f829 	bl	800213c <getBit>
 80010ea:	4603      	mov	r3, r0
 80010ec:	e007      	b.n	80010fe <dwIsReceiveDone+0x34>
	}
	return getBit(dev->sysstatus, LEN_SYS_STATUS, RXDFR_BIT);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	331d      	adds	r3, #29
 80010f2:	220d      	movs	r2, #13
 80010f4:	2105      	movs	r1, #5
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 f820 	bl	800213c <getBit>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <dwIsReceiveFailed>:

bool dwIsReceiveFailed(dwDevice_t *dev) {
 8001106:	b580      	push	{r7, lr}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
	bool ldeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, LDEERR_BIT);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	331d      	adds	r3, #29
 8001112:	2212      	movs	r2, #18
 8001114:	2105      	movs	r1, #5
 8001116:	4618      	mov	r0, r3
 8001118:	f001 f810 	bl	800213c <getBit>
 800111c:	4603      	mov	r3, r0
 800111e:	73fb      	strb	r3, [r7, #15]
	bool rxCRCErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCE_BIT);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	331d      	adds	r3, #29
 8001124:	220f      	movs	r2, #15
 8001126:	2105      	movs	r1, #5
 8001128:	4618      	mov	r0, r3
 800112a:	f001 f807 	bl	800213c <getBit>
 800112e:	4603      	mov	r3, r0
 8001130:	73bb      	strb	r3, [r7, #14]
	bool rxHeaderErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXPHE_BIT);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	331d      	adds	r3, #29
 8001136:	220c      	movs	r2, #12
 8001138:	2105      	movs	r1, #5
 800113a:	4618      	mov	r0, r3
 800113c:	f000 fffe 	bl	800213c <getBit>
 8001140:	4603      	mov	r3, r0
 8001142:	737b      	strb	r3, [r7, #13]
	bool rxDecodeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFSL_BIT);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	331d      	adds	r3, #29
 8001148:	2210      	movs	r2, #16
 800114a:	2105      	movs	r1, #5
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fff5 	bl	800213c <getBit>
 8001152:	4603      	mov	r3, r0
 8001154:	733b      	strb	r3, [r7, #12]


	bool rxSfdto = getBit(dev->sysstatus, LEN_SYS_STATUS, RXSFDTO_BIT);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	331d      	adds	r3, #29
 800115a:	221a      	movs	r2, #26
 800115c:	2105      	movs	r1, #5
 800115e:	4618      	mov	r0, r3
 8001160:	f000 ffec 	bl	800213c <getBit>
 8001164:	4603      	mov	r3, r0
 8001166:	72fb      	strb	r3, [r7, #11]
	bool affrej = getBit(dev->sysstatus, LEN_SYS_STATUS, AFFREJ_BIT);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	331d      	adds	r3, #29
 800116c:	221d      	movs	r2, #29
 800116e:	2105      	movs	r1, #5
 8001170:	4618      	mov	r0, r3
 8001172:	f000 ffe3 	bl	800213c <getBit>
 8001176:	4603      	mov	r3, r0
 8001178:	72bb      	strb	r3, [r7, #10]

	return (ldeErr || rxCRCErr || rxHeaderErr || rxDecodeErr || rxSfdto || affrej);
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10e      	bne.n	800119e <dwIsReceiveFailed+0x98>
 8001180:	7bbb      	ldrb	r3, [r7, #14]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10b      	bne.n	800119e <dwIsReceiveFailed+0x98>
 8001186:	7b7b      	ldrb	r3, [r7, #13]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d108      	bne.n	800119e <dwIsReceiveFailed+0x98>
 800118c:	7b3b      	ldrb	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d105      	bne.n	800119e <dwIsReceiveFailed+0x98>
 8001192:	7afb      	ldrb	r3, [r7, #11]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <dwIsReceiveFailed+0x98>
 8001198:	7abb      	ldrb	r3, [r7, #10]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <dwIsReceiveFailed+0x9c>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <dwIsReceiveFailed+0x9e>
 80011a2:	2300      	movs	r3, #0
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <dwIsReceiveTimeout>:

bool dwIsReceiveTimeout(dwDevice_t* dev) {
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
	return getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFTO_BIT);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	331d      	adds	r3, #29
 80011be:	2211      	movs	r2, #17
 80011c0:	2105      	movs	r1, #5
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 ffba 	bl	800213c <getBit>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <dwIsClockProblem>:

bool dwIsClockProblem(dwDevice_t* dev) {
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b084      	sub	sp, #16
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
	bool clkllErr, rfllErr;
	clkllErr = getBit(dev->sysstatus, LEN_SYS_STATUS, CLKPLL_LL_BIT);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	331d      	adds	r3, #29
 80011de:	2219      	movs	r2, #25
 80011e0:	2105      	movs	r1, #5
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 ffaa 	bl	800213c <getBit>
 80011e8:	4603      	mov	r3, r0
 80011ea:	73fb      	strb	r3, [r7, #15]
	rfllErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RFPLL_LL_BIT);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	331d      	adds	r3, #29
 80011f0:	2218      	movs	r2, #24
 80011f2:	2105      	movs	r1, #5
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 ffa1 	bl	800213c <getBit>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73bb      	strb	r3, [r7, #14]
	if(clkllErr || rfllErr) {
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <dwIsClockProblem+0x38>
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <dwIsClockProblem+0x3c>
		return true;
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <dwIsClockProblem+0x3e>
	}
	return false;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <dwClearReceiveTimestampAvailableStatus>:
	memset(dev->sysstatus, 0, LEN_SYS_STATUS);
	uint32_t reg = 0xffffffff;
	dwSpiWrite(dev, SYS_STATUS, NO_SUB,  &reg, LEN_SYS_STATUS);
}

void dwClearReceiveTimestampAvailableStatus(dwDevice_t* dev) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af02      	add	r7, sp, #8
 800121e:	6078      	str	r0, [r7, #4]
	uint8_t reg[LEN_SYS_STATUS] = {0};
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	711a      	strb	r2, [r3, #4]
	setBit(reg, LEN_SYS_STATUS, LDEDONE_BIT, true);
 800122a:	f107 0008 	add.w	r0, r7, #8
 800122e:	2301      	movs	r3, #1
 8001230:	220a      	movs	r2, #10
 8001232:	2105      	movs	r1, #5
 8001234:	f000 ff46 	bl	80020c4 <setBit>
	dwSpiWrite(dev, SYS_STATUS, NO_SUB, reg, LEN_SYS_STATUS);
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	2205      	movs	r2, #5
 800123e:	9200      	str	r2, [sp, #0]
 8001240:	2200      	movs	r2, #0
 8001242:	210f      	movs	r1, #15
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f001 f84a 	bl	80022de <dwSpiWrite>
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <dwClearReceiveStatus>:

void dwClearReceiveStatus(dwDevice_t* dev) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	// clear latched RX bits (i.e. write 1 to clear)
	uint32_t regData = SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_GOOD;
 800125c:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <dwClearReceiveStatus+0x20>)
 800125e:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2200      	movs	r2, #0
 8001264:	210f      	movs	r1, #15
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f001 f893 	bl	8002392 <dwSpiWrite32>
}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2427ff00 	.word	0x2427ff00

08001278 <dwClearTransmitStatus>:

void dwClearTransmitStatus(dwDevice_t* dev) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	// clear latched TX bits
	uint32_t regData = SYS_STATUS_ALL_TX;
 8001280:	23f8      	movs	r3, #248	@ 0xf8
 8001282:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2200      	movs	r2, #0
 8001288:	210f      	movs	r1, #15
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f001 f881 	bl	8002392 <dwSpiWrite32>
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <dwEnableMode>:
	float twoPower17 = 131072.0f;

	return calculatePower(C * twoPower17, N, dev->pulseFrequency);
}

void dwEnableMode(dwDevice_t *dev, const uint8_t mode[]) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
	dwSetDataRate(dev, mode[0]);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	4619      	mov	r1, r3
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff fcda 	bl	8000c62 <dwSetDataRate>
	dwSetPulseFrequency(dev, mode[1]);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff fd58 	bl	8000d6c <dwSetPulseFrequency>
	dwSetPreambleLength(dev, mode[2]);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	3302      	adds	r3, #2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	4619      	mov	r1, r3
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff fd86 	bl	8000dd6 <dwSetPreambleLength>
	// TODO add channel and code to mode tuples
	// TODO add channel and code settings with checks (see Table 58)
	dwSetChannel(dev, CHANNEL_5);
 80012ca:	2105      	movs	r1, #5
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff fdef 	bl	8000eb0 <dwSetChannel>
	if(mode[1] == TX_PULSE_FREQ_16MHZ) {
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	3301      	adds	r3, #1
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d104      	bne.n	80012e6 <dwEnableMode+0x4e>
		dwSetPreambleCode(dev, PREAMBLE_CODE_16MHZ_4);
 80012dc:	2104      	movs	r1, #4
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff fe04 	bl	8000eec <dwSetPreambleCode>
	} else {
		dwSetPreambleCode(dev, PREAMBLE_CODE_64MHZ_10);
	}
}
 80012e4:	e003      	b.n	80012ee <dwEnableMode+0x56>
		dwSetPreambleCode(dev, PREAMBLE_CODE_64MHZ_10);
 80012e6:	210a      	movs	r1, #10
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff fdff 	bl	8000eec <dwSetPreambleCode>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <dwTune>:

void dwTune(dwDevice_t *dev) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b098      	sub	sp, #96	@ 0x60
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	6078      	str	r0, [r7, #4]
	uint8_t tcpgdelay[LEN_TC_PGDELAY];
	uint8_t fspllcfg[LEN_FS_PLLCFG];
	uint8_t fsplltune[LEN_FS_PLLTUNE];
	uint8_t fsxtalt[LEN_FS_XTALT];
	// AGC_TUNE1
	if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001306:	2b01      	cmp	r3, #1
 8001308:	d108      	bne.n	800131c <dwTune+0x24>
		writeValueToBytes(agctune1, 0x8870, LEN_AGC_TUNE1);
 800130a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800130e:	2202      	movs	r2, #2
 8001310:	f648 0170 	movw	r1, #34928	@ 0x8870
 8001314:	4618      	mov	r0, r3
 8001316:	f000 ff39 	bl	800218c <writeValueToBytes>
 800131a:	e00c      	b.n	8001336 <dwTune+0x3e>
	} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001322:	2b02      	cmp	r3, #2
 8001324:	d107      	bne.n	8001336 <dwTune+0x3e>
		writeValueToBytes(agctune1, 0x889B, LEN_AGC_TUNE1);
 8001326:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800132a:	2202      	movs	r2, #2
 800132c:	f648 019b 	movw	r1, #34971	@ 0x889b
 8001330:	4618      	mov	r0, r3
 8001332:	f000 ff2b 	bl	800218c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// AGC_TUNE2
	writeValueToBytes(agctune2, 0x2502A907L, LEN_AGC_TUNE2);
 8001336:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800133a:	2204      	movs	r2, #4
 800133c:	49b9      	ldr	r1, [pc, #740]	@ (8001624 <dwTune+0x32c>)
 800133e:	4618      	mov	r0, r3
 8001340:	f000 ff24 	bl	800218c <writeValueToBytes>
	// AGC_TUNE3
	writeValueToBytes(agctune3, 0x0035, LEN_AGC_TUNE3);
 8001344:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001348:	2202      	movs	r2, #2
 800134a:	2135      	movs	r1, #53	@ 0x35
 800134c:	4618      	mov	r0, r3
 800134e:	f000 ff1d 	bl	800218c <writeValueToBytes>
	// DRX_TUNE0b (already optimized according to Table 20 of user manual)
	if(dev->dataRate == TRX_RATE_110KBPS) {
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001358:	2b00      	cmp	r3, #0
 800135a:	d107      	bne.n	800136c <dwTune+0x74>
		writeValueToBytes(drxtune0b, 0x0016, LEN_DRX_TUNE0b);
 800135c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001360:	2202      	movs	r2, #2
 8001362:	2116      	movs	r1, #22
 8001364:	4618      	mov	r0, r3
 8001366:	f000 ff11 	bl	800218c <writeValueToBytes>
 800136a:	e018      	b.n	800139e <dwTune+0xa6>
	} else if(dev->dataRate == TRX_RATE_850KBPS) {
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001372:	2b01      	cmp	r3, #1
 8001374:	d107      	bne.n	8001386 <dwTune+0x8e>
		writeValueToBytes(drxtune0b, 0x0006, LEN_DRX_TUNE0b);
 8001376:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800137a:	2202      	movs	r2, #2
 800137c:	2106      	movs	r1, #6
 800137e:	4618      	mov	r0, r3
 8001380:	f000 ff04 	bl	800218c <writeValueToBytes>
 8001384:	e00b      	b.n	800139e <dwTune+0xa6>
	} else if(dev->dataRate == TRX_RATE_6800KBPS) {
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800138c:	2b02      	cmp	r3, #2
 800138e:	d106      	bne.n	800139e <dwTune+0xa6>
		writeValueToBytes(drxtune0b, 0x0001, LEN_DRX_TUNE0b);
 8001390:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001394:	2202      	movs	r2, #2
 8001396:	2101      	movs	r1, #1
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fef7 	bl	800218c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// DRX_TUNE1a
	if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d107      	bne.n	80013b8 <dwTune+0xc0>
		writeValueToBytes(drxtune1a, 0x0087, LEN_DRX_TUNE1a);
 80013a8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80013ac:	2202      	movs	r2, #2
 80013ae:	2187      	movs	r1, #135	@ 0x87
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 feeb 	bl	800218c <writeValueToBytes>
 80013b6:	e00b      	b.n	80013d0 <dwTune+0xd8>
	} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d106      	bne.n	80013d0 <dwTune+0xd8>
		writeValueToBytes(drxtune1a, 0x008D, LEN_DRX_TUNE1a);
 80013c2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80013c6:	2202      	movs	r2, #2
 80013c8:	218d      	movs	r1, #141	@ 0x8d
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fede 	bl	800218c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// DRX_TUNE1b
	if(dev->preambleLength ==  TX_PREAMBLE_LEN_1536 || dev->preambleLength ==  TX_PREAMBLE_LEN_2048 ||
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d009      	beq.n	80013ee <dwTune+0xf6>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80013e0:	2b0a      	cmp	r3, #10
 80013e2:	d004      	beq.n	80013ee <dwTune+0xf6>
			dev->preambleLength ==  TX_PREAMBLE_LEN_4096) {
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	if(dev->preambleLength ==  TX_PREAMBLE_LEN_1536 || dev->preambleLength ==  TX_PREAMBLE_LEN_2048 ||
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d10c      	bne.n	8001408 <dwTune+0x110>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d12a      	bne.n	800144e <dwTune+0x156>
			writeValueToBytes(drxtune1b, 0x0064, LEN_DRX_TUNE1b);
 80013f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013fc:	2202      	movs	r2, #2
 80013fe:	2164      	movs	r1, #100	@ 0x64
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fec3 	bl	800218c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001406:	e022      	b.n	800144e <dwTune+0x156>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->preambleLength != TX_PREAMBLE_LEN_64) {
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800140e:	2b01      	cmp	r3, #1
 8001410:	d011      	beq.n	8001436 <dwTune+0x13e>
		if(dev->dataRate == TRX_RATE_850KBPS || dev->dataRate == TRX_RATE_6800KBPS) {
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001418:	2b01      	cmp	r3, #1
 800141a:	d004      	beq.n	8001426 <dwTune+0x12e>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001422:	2b02      	cmp	r3, #2
 8001424:	d113      	bne.n	800144e <dwTune+0x156>
			writeValueToBytes(drxtune1b, 0x0020, LEN_DRX_TUNE1b);
 8001426:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800142a:	2202      	movs	r2, #2
 800142c:	2120      	movs	r1, #32
 800142e:	4618      	mov	r0, r3
 8001430:	f000 feac 	bl	800218c <writeValueToBytes>
 8001434:	e00b      	b.n	800144e <dwTune+0x156>
		} else {
			// TODO proper error/warning handling
		}
	} else {
		if(dev->dataRate == TRX_RATE_6800KBPS) {
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800143c:	2b02      	cmp	r3, #2
 800143e:	d106      	bne.n	800144e <dwTune+0x156>
			writeValueToBytes(drxtune1b, 0x0010, LEN_DRX_TUNE1b);
 8001440:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001444:	2202      	movs	r2, #2
 8001446:	2110      	movs	r1, #16
 8001448:	4618      	mov	r0, r3
 800144a:	f000 fe9f 	bl	800218c <writeValueToBytes>
		} else {
			// TODO proper error/warning handling
		}
	}
	// DRX_TUNE2
	if(dev->pacSize == PAC_SIZE_8) {
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001454:	2b08      	cmp	r3, #8
 8001456:	d119      	bne.n	800148c <dwTune+0x194>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800145e:	2b01      	cmp	r3, #1
 8001460:	d107      	bne.n	8001472 <dwTune+0x17a>
			writeValueToBytes(drxtune2, 0x311A002DL, LEN_DRX_TUNE2);
 8001462:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001466:	2204      	movs	r2, #4
 8001468:	496f      	ldr	r1, [pc, #444]	@ (8001628 <dwTune+0x330>)
 800146a:	4618      	mov	r0, r3
 800146c:	f000 fe8e 	bl	800218c <writeValueToBytes>
 8001470:	e068      	b.n	8001544 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001478:	2b02      	cmp	r3, #2
 800147a:	d163      	bne.n	8001544 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x313B006BL, LEN_DRX_TUNE2);
 800147c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001480:	2204      	movs	r2, #4
 8001482:	496a      	ldr	r1, [pc, #424]	@ (800162c <dwTune+0x334>)
 8001484:	4618      	mov	r0, r3
 8001486:	f000 fe81 	bl	800218c <writeValueToBytes>
 800148a:	e05b      	b.n	8001544 <dwTune+0x24c>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->pacSize == PAC_SIZE_16) {
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001492:	2b10      	cmp	r3, #16
 8001494:	d119      	bne.n	80014ca <dwTune+0x1d2>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800149c:	2b01      	cmp	r3, #1
 800149e:	d107      	bne.n	80014b0 <dwTune+0x1b8>
			writeValueToBytes(drxtune2, 0x331A0052L, LEN_DRX_TUNE2);
 80014a0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80014a4:	2204      	movs	r2, #4
 80014a6:	4962      	ldr	r1, [pc, #392]	@ (8001630 <dwTune+0x338>)
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 fe6f 	bl	800218c <writeValueToBytes>
 80014ae:	e049      	b.n	8001544 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d144      	bne.n	8001544 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x333B00BEL, LEN_DRX_TUNE2);
 80014ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80014be:	2204      	movs	r2, #4
 80014c0:	495c      	ldr	r1, [pc, #368]	@ (8001634 <dwTune+0x33c>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 fe62 	bl	800218c <writeValueToBytes>
 80014c8:	e03c      	b.n	8001544 <dwTune+0x24c>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->pacSize == PAC_SIZE_32) {
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80014d0:	2b20      	cmp	r3, #32
 80014d2:	d119      	bne.n	8001508 <dwTune+0x210>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d107      	bne.n	80014ee <dwTune+0x1f6>
			writeValueToBytes(drxtune2, 0x351A009AL, LEN_DRX_TUNE2);
 80014de:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80014e2:	2204      	movs	r2, #4
 80014e4:	4954      	ldr	r1, [pc, #336]	@ (8001638 <dwTune+0x340>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 fe50 	bl	800218c <writeValueToBytes>
 80014ec:	e02a      	b.n	8001544 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d125      	bne.n	8001544 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x353B015EL, LEN_DRX_TUNE2);
 80014f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80014fc:	2204      	movs	r2, #4
 80014fe:	494f      	ldr	r1, [pc, #316]	@ (800163c <dwTune+0x344>)
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fe43 	bl	800218c <writeValueToBytes>
 8001506:	e01d      	b.n	8001544 <dwTune+0x24c>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->pacSize == PAC_SIZE_64) {
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800150e:	2b40      	cmp	r3, #64	@ 0x40
 8001510:	d118      	bne.n	8001544 <dwTune+0x24c>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001518:	2b01      	cmp	r3, #1
 800151a:	d107      	bne.n	800152c <dwTune+0x234>
			writeValueToBytes(drxtune2, 0x371A011DL, LEN_DRX_TUNE2);
 800151c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001520:	2204      	movs	r2, #4
 8001522:	4947      	ldr	r1, [pc, #284]	@ (8001640 <dwTune+0x348>)
 8001524:	4618      	mov	r0, r3
 8001526:	f000 fe31 	bl	800218c <writeValueToBytes>
 800152a:	e00b      	b.n	8001544 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001532:	2b02      	cmp	r3, #2
 8001534:	d106      	bne.n	8001544 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x373B0296L, LEN_DRX_TUNE2);
 8001536:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800153a:	2204      	movs	r2, #4
 800153c:	4941      	ldr	r1, [pc, #260]	@ (8001644 <dwTune+0x34c>)
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fe24 	bl	800218c <writeValueToBytes>
		}
	} else {
		// TODO proper error/warning handling
	}
	// DRX_TUNE4H
	if(dev->preambleLength == TX_PREAMBLE_LEN_64) {
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800154a:	2b01      	cmp	r3, #1
 800154c:	d107      	bne.n	800155e <dwTune+0x266>
		writeValueToBytes(drxtune4H, 0x0010, LEN_DRX_TUNE4H);
 800154e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001552:	2202      	movs	r2, #2
 8001554:	2110      	movs	r1, #16
 8001556:	4618      	mov	r0, r3
 8001558:	f000 fe18 	bl	800218c <writeValueToBytes>
 800155c:	e006      	b.n	800156c <dwTune+0x274>
	} else {
		writeValueToBytes(drxtune4H, 0x0028, LEN_DRX_TUNE4H);
 800155e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001562:	2202      	movs	r2, #2
 8001564:	2128      	movs	r1, #40	@ 0x28
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fe10 	bl	800218c <writeValueToBytes>
	}
	// RF_RXCTRLH
	if(dev->channel != CHANNEL_4 && dev->channel != CHANNEL_7) {
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001572:	2b04      	cmp	r3, #4
 8001574:	d00c      	beq.n	8001590 <dwTune+0x298>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800157c:	2b07      	cmp	r3, #7
 800157e:	d007      	beq.n	8001590 <dwTune+0x298>
		writeValueToBytes(rfrxctrlh, 0xD8, LEN_RF_RXCTRLH);
 8001580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001584:	2201      	movs	r2, #1
 8001586:	21d8      	movs	r1, #216	@ 0xd8
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fdff 	bl	800218c <writeValueToBytes>
 800158e:	e006      	b.n	800159e <dwTune+0x2a6>
	} else {
		writeValueToBytes(rfrxctrlh, 0xBC, LEN_RF_RXCTRLH);
 8001590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001594:	2201      	movs	r2, #1
 8001596:	21bc      	movs	r1, #188	@ 0xbc
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fdf7 	bl	800218c <writeValueToBytes>
	}
	// RX_TXCTRL
	if(dev->channel == CHANNEL_1) {
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d108      	bne.n	80015ba <dwTune+0x2c2>
		writeValueToBytes(rftxctrl, 0x00005C40L, LEN_RF_TXCTRL);
 80015a8:	f107 0320 	add.w	r3, r7, #32
 80015ac:	2204      	movs	r2, #4
 80015ae:	f645 4140 	movw	r1, #23616	@ 0x5c40
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 fdea 	bl	800218c <writeValueToBytes>
 80015b8:	e05a      	b.n	8001670 <dwTune+0x378>
	} else if(dev->channel == CHANNEL_2) {
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d107      	bne.n	80015d4 <dwTune+0x2dc>
		writeValueToBytes(rftxctrl, 0x00045CA0L, LEN_RF_TXCTRL);
 80015c4:	f107 0320 	add.w	r3, r7, #32
 80015c8:	2204      	movs	r2, #4
 80015ca:	491f      	ldr	r1, [pc, #124]	@ (8001648 <dwTune+0x350>)
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fddd 	bl	800218c <writeValueToBytes>
 80015d2:	e04d      	b.n	8001670 <dwTune+0x378>
	} else if(dev->channel == CHANNEL_3) {
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d107      	bne.n	80015ee <dwTune+0x2f6>
		writeValueToBytes(rftxctrl, 0x00086CC0L, LEN_RF_TXCTRL);
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	2204      	movs	r2, #4
 80015e4:	4919      	ldr	r1, [pc, #100]	@ (800164c <dwTune+0x354>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fdd0 	bl	800218c <writeValueToBytes>
 80015ec:	e040      	b.n	8001670 <dwTune+0x378>
	} else if(dev->channel == CHANNEL_4) {
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d107      	bne.n	8001608 <dwTune+0x310>
		writeValueToBytes(rftxctrl, 0x00045C80L, LEN_RF_TXCTRL);
 80015f8:	f107 0320 	add.w	r3, r7, #32
 80015fc:	2204      	movs	r2, #4
 80015fe:	4914      	ldr	r1, [pc, #80]	@ (8001650 <dwTune+0x358>)
 8001600:	4618      	mov	r0, r3
 8001602:	f000 fdc3 	bl	800218c <writeValueToBytes>
 8001606:	e033      	b.n	8001670 <dwTune+0x378>
	} else if(dev->channel == CHANNEL_5) {
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800160e:	2b05      	cmp	r3, #5
 8001610:	d122      	bne.n	8001658 <dwTune+0x360>
		writeValueToBytes(rftxctrl, 0x001E3FE0L, LEN_RF_TXCTRL);
 8001612:	f107 0320 	add.w	r3, r7, #32
 8001616:	2204      	movs	r2, #4
 8001618:	490e      	ldr	r1, [pc, #56]	@ (8001654 <dwTune+0x35c>)
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fdb6 	bl	800218c <writeValueToBytes>
 8001620:	e026      	b.n	8001670 <dwTune+0x378>
 8001622:	bf00      	nop
 8001624:	2502a907 	.word	0x2502a907
 8001628:	311a002d 	.word	0x311a002d
 800162c:	313b006b 	.word	0x313b006b
 8001630:	331a0052 	.word	0x331a0052
 8001634:	333b00be 	.word	0x333b00be
 8001638:	351a009a 	.word	0x351a009a
 800163c:	353b015e 	.word	0x353b015e
 8001640:	371a011d 	.word	0x371a011d
 8001644:	373b0296 	.word	0x373b0296
 8001648:	00045ca0 	.word	0x00045ca0
 800164c:	00086cc0 	.word	0x00086cc0
 8001650:	00045c80 	.word	0x00045c80
 8001654:	001e3fe0 	.word	0x001e3fe0
	} else if(dev->channel == CHANNEL_7) {
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800165e:	2b07      	cmp	r3, #7
 8001660:	d106      	bne.n	8001670 <dwTune+0x378>
		writeValueToBytes(rftxctrl, 0x001E7DE0L, LEN_RF_TXCTRL);
 8001662:	f107 0320 	add.w	r3, r7, #32
 8001666:	2204      	movs	r2, #4
 8001668:	49be      	ldr	r1, [pc, #760]	@ (8001964 <dwTune+0x66c>)
 800166a:	4618      	mov	r0, r3
 800166c:	f000 fd8e 	bl	800218c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// TC_PGDELAY
	if(dev->channel == CHANNEL_1) {
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001676:	2b01      	cmp	r3, #1
 8001678:	d107      	bne.n	800168a <dwTune+0x392>
		writeValueToBytes(tcpgdelay, 0xC9, LEN_TC_PGDELAY);
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	2201      	movs	r2, #1
 8001680:	21c9      	movs	r1, #201	@ 0xc9
 8001682:	4618      	mov	r0, r3
 8001684:	f000 fd82 	bl	800218c <writeValueToBytes>
 8001688:	e03f      	b.n	800170a <dwTune+0x412>
	} else if(dev->channel == CHANNEL_2) {
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001690:	2b02      	cmp	r3, #2
 8001692:	d107      	bne.n	80016a4 <dwTune+0x3ac>
		writeValueToBytes(tcpgdelay, 0xC2, LEN_TC_PGDELAY);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	2201      	movs	r2, #1
 800169a:	21c2      	movs	r1, #194	@ 0xc2
 800169c:	4618      	mov	r0, r3
 800169e:	f000 fd75 	bl	800218c <writeValueToBytes>
 80016a2:	e032      	b.n	800170a <dwTune+0x412>
	} else if(dev->channel == CHANNEL_3) {
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d107      	bne.n	80016be <dwTune+0x3c6>
		writeValueToBytes(tcpgdelay, 0xC5, LEN_TC_PGDELAY);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	2201      	movs	r2, #1
 80016b4:	21c5      	movs	r1, #197	@ 0xc5
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fd68 	bl	800218c <writeValueToBytes>
 80016bc:	e025      	b.n	800170a <dwTune+0x412>
	} else if(dev->channel == CHANNEL_4) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d107      	bne.n	80016d8 <dwTune+0x3e0>
		writeValueToBytes(tcpgdelay, 0x95, LEN_TC_PGDELAY);
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	2201      	movs	r2, #1
 80016ce:	2195      	movs	r1, #149	@ 0x95
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fd5b 	bl	800218c <writeValueToBytes>
 80016d6:	e018      	b.n	800170a <dwTune+0x412>
	} else if(dev->channel == CHANNEL_5) {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80016de:	2b05      	cmp	r3, #5
 80016e0:	d107      	bne.n	80016f2 <dwTune+0x3fa>
		writeValueToBytes(tcpgdelay, 0xC0, LEN_TC_PGDELAY);
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	2201      	movs	r2, #1
 80016e8:	21c0      	movs	r1, #192	@ 0xc0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 fd4e 	bl	800218c <writeValueToBytes>
 80016f0:	e00b      	b.n	800170a <dwTune+0x412>
	} else if(dev->channel == CHANNEL_7) {
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80016f8:	2b07      	cmp	r3, #7
 80016fa:	d106      	bne.n	800170a <dwTune+0x412>
		writeValueToBytes(tcpgdelay, 0x93, LEN_TC_PGDELAY);
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	2201      	movs	r2, #1
 8001702:	2193      	movs	r1, #147	@ 0x93
 8001704:	4618      	mov	r0, r3
 8001706:	f000 fd41 	bl	800218c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// FS_PLLCFG and FS_PLLTUNE
	if(dev->channel == CHANNEL_1) {
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001710:	2b01      	cmp	r3, #1
 8001712:	d10e      	bne.n	8001732 <dwTune+0x43a>
		writeValueToBytes(fspllcfg, 0x09000407L, LEN_FS_PLLCFG);
 8001714:	f107 0318 	add.w	r3, r7, #24
 8001718:	2204      	movs	r2, #4
 800171a:	4993      	ldr	r1, [pc, #588]	@ (8001968 <dwTune+0x670>)
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fd35 	bl	800218c <writeValueToBytes>
		writeValueToBytes(fsplltune, 0x1E, LEN_FS_PLLTUNE);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	2201      	movs	r2, #1
 8001728:	211e      	movs	r1, #30
 800172a:	4618      	mov	r0, r3
 800172c:	f000 fd2e 	bl	800218c <writeValueToBytes>
 8001730:	e044      	b.n	80017bc <dwTune+0x4c4>
	} else if(dev->channel == CHANNEL_2 || dev->channel == CHANNEL_4) {
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001738:	2b02      	cmp	r3, #2
 800173a:	d004      	beq.n	8001746 <dwTune+0x44e>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001742:	2b04      	cmp	r3, #4
 8001744:	d10e      	bne.n	8001764 <dwTune+0x46c>
		writeValueToBytes(fspllcfg, 0x08400508L, LEN_FS_PLLCFG);
 8001746:	f107 0318 	add.w	r3, r7, #24
 800174a:	2204      	movs	r2, #4
 800174c:	4987      	ldr	r1, [pc, #540]	@ (800196c <dwTune+0x674>)
 800174e:	4618      	mov	r0, r3
 8001750:	f000 fd1c 	bl	800218c <writeValueToBytes>
		writeValueToBytes(fsplltune, 0x26, LEN_FS_PLLTUNE);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2201      	movs	r2, #1
 800175a:	2126      	movs	r1, #38	@ 0x26
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fd15 	bl	800218c <writeValueToBytes>
 8001762:	e02b      	b.n	80017bc <dwTune+0x4c4>
	} else if(dev->channel == CHANNEL_3) {
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800176a:	2b03      	cmp	r3, #3
 800176c:	d10e      	bne.n	800178c <dwTune+0x494>
		writeValueToBytes(fspllcfg, 0x08401009L, LEN_FS_PLLCFG);
 800176e:	f107 0318 	add.w	r3, r7, #24
 8001772:	2204      	movs	r2, #4
 8001774:	497e      	ldr	r1, [pc, #504]	@ (8001970 <dwTune+0x678>)
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fd08 	bl	800218c <writeValueToBytes>
		writeValueToBytes(fsplltune, 0x56, LEN_FS_PLLTUNE);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2201      	movs	r2, #1
 8001782:	2156      	movs	r1, #86	@ 0x56
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fd01 	bl	800218c <writeValueToBytes>
 800178a:	e017      	b.n	80017bc <dwTune+0x4c4>
	} else if(dev->channel == CHANNEL_5 || dev->channel == CHANNEL_7) {
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001792:	2b05      	cmp	r3, #5
 8001794:	d004      	beq.n	80017a0 <dwTune+0x4a8>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800179c:	2b07      	cmp	r3, #7
 800179e:	d10d      	bne.n	80017bc <dwTune+0x4c4>
		writeValueToBytes(fspllcfg, 0x0800041DL, LEN_FS_PLLCFG);
 80017a0:	f107 0318 	add.w	r3, r7, #24
 80017a4:	2204      	movs	r2, #4
 80017a6:	4973      	ldr	r1, [pc, #460]	@ (8001974 <dwTune+0x67c>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 fcef 	bl	800218c <writeValueToBytes>
		writeValueToBytes(fsplltune, 0xA6, LEN_FS_PLLTUNE);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	2201      	movs	r2, #1
 80017b4:	21a6      	movs	r1, #166	@ 0xa6
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 fce8 	bl	800218c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// LDE_CFG1
	writeValueToBytes(ldecfg1, 0xD, LEN_LDE_CFG1);
 80017bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017c0:	2201      	movs	r2, #1
 80017c2:	210d      	movs	r1, #13
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fce1 	bl	800218c <writeValueToBytes>
	// LDE_CFG2
	if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d108      	bne.n	80017e6 <dwTune+0x4ee>
		writeValueToBytes(ldecfg2, 0x1607, LEN_LDE_CFG2);
 80017d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017d8:	2202      	movs	r2, #2
 80017da:	f241 6107 	movw	r1, #5639	@ 0x1607
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 fcd4 	bl	800218c <writeValueToBytes>
 80017e4:	e00c      	b.n	8001800 <dwTune+0x508>
	} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d107      	bne.n	8001800 <dwTune+0x508>
		writeValueToBytes(ldecfg2, 0x0607, LEN_LDE_CFG2);
 80017f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017f4:	2202      	movs	r2, #2
 80017f6:	f240 6107 	movw	r1, #1543	@ 0x607
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fcc6 	bl	800218c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// LDE_REPC
	if(dev->preambleCode == PREAMBLE_CODE_16MHZ_1 || dev->preambleCode == PREAMBLE_CODE_16MHZ_2) {
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001806:	2b01      	cmp	r3, #1
 8001808:	d004      	beq.n	8001814 <dwTune+0x51c>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001810:	2b02      	cmp	r3, #2
 8001812:	d116      	bne.n	8001842 <dwTune+0x54a>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800181a:	2b00      	cmp	r3, #0
 800181c:	d108      	bne.n	8001830 <dwTune+0x538>
			writeValueToBytes(lderepc, ((0x5998 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800181e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001822:	2202      	movs	r2, #2
 8001824:	f640 3133 	movw	r1, #2867	@ 0xb33
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fcaf 	bl	800218c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800182e:	e154      	b.n	8001ada <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x5998, LEN_LDE_REPC);
 8001830:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001834:	2202      	movs	r2, #2
 8001836:	f645 1198 	movw	r1, #22936	@ 0x5998
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fca6 	bl	800218c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001840:	e14b      	b.n	8001ada <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_3 || dev->preambleCode == PREAMBLE_CODE_16MHZ_8) {
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001848:	2b03      	cmp	r3, #3
 800184a:	d004      	beq.n	8001856 <dwTune+0x55e>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001852:	2b08      	cmp	r3, #8
 8001854:	d116      	bne.n	8001884 <dwTune+0x58c>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800185c:	2b00      	cmp	r3, #0
 800185e:	d108      	bne.n	8001872 <dwTune+0x57a>
			writeValueToBytes(lderepc, ((0x51EA >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001860:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001864:	2202      	movs	r2, #2
 8001866:	f640 213d 	movw	r1, #2621	@ 0xa3d
 800186a:	4618      	mov	r0, r3
 800186c:	f000 fc8e 	bl	800218c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001870:	e133      	b.n	8001ada <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x51EA, LEN_LDE_REPC);
 8001872:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001876:	2202      	movs	r2, #2
 8001878:	f245 11ea 	movw	r1, #20970	@ 0x51ea
 800187c:	4618      	mov	r0, r3
 800187e:	f000 fc85 	bl	800218c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001882:	e12a      	b.n	8001ada <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_4) {
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800188a:	2b04      	cmp	r3, #4
 800188c:	d116      	bne.n	80018bc <dwTune+0x5c4>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001894:	2b00      	cmp	r3, #0
 8001896:	d108      	bne.n	80018aa <dwTune+0x5b2>
			writeValueToBytes(lderepc, ((0x428E >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001898:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800189c:	2202      	movs	r2, #2
 800189e:	f640 0151 	movw	r1, #2129	@ 0x851
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fc72 	bl	800218c <writeValueToBytes>
 80018a8:	e117      	b.n	8001ada <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x428E, LEN_LDE_REPC);
 80018aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018ae:	2202      	movs	r2, #2
 80018b0:	f244 218e 	movw	r1, #17038	@ 0x428e
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 fc69 	bl	800218c <writeValueToBytes>
 80018ba:	e10e      	b.n	8001ada <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_5) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d116      	bne.n	80018f4 <dwTune+0x5fc>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d108      	bne.n	80018e2 <dwTune+0x5ea>
			writeValueToBytes(lderepc, ((0x451E >> 3) & 0xFFFF), LEN_LDE_REPC);
 80018d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018d4:	2202      	movs	r2, #2
 80018d6:	f640 01a3 	movw	r1, #2211	@ 0x8a3
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fc56 	bl	800218c <writeValueToBytes>
 80018e0:	e0fb      	b.n	8001ada <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x451E, LEN_LDE_REPC);
 80018e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018e6:	2202      	movs	r2, #2
 80018e8:	f244 511e 	movw	r1, #17694	@ 0x451e
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 fc4d 	bl	800218c <writeValueToBytes>
 80018f2:	e0f2      	b.n	8001ada <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_6) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d116      	bne.n	800192c <dwTune+0x634>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001904:	2b00      	cmp	r3, #0
 8001906:	d108      	bne.n	800191a <dwTune+0x622>
			writeValueToBytes(lderepc, ((0x2E14 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001908:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800190c:	2202      	movs	r2, #2
 800190e:	f240 51c2 	movw	r1, #1474	@ 0x5c2
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fc3a 	bl	800218c <writeValueToBytes>
 8001918:	e0df      	b.n	8001ada <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x2E14, LEN_LDE_REPC);
 800191a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800191e:	2202      	movs	r2, #2
 8001920:	f642 6114 	movw	r1, #11796	@ 0x2e14
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fc31 	bl	800218c <writeValueToBytes>
 800192a:	e0d6      	b.n	8001ada <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_7) {
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001932:	2b07      	cmp	r3, #7
 8001934:	d120      	bne.n	8001978 <dwTune+0x680>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800193c:	2b00      	cmp	r3, #0
 800193e:	d108      	bne.n	8001952 <dwTune+0x65a>
			writeValueToBytes(lderepc, ((0x8000 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001940:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001944:	2202      	movs	r2, #2
 8001946:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800194a:	4618      	mov	r0, r3
 800194c:	f000 fc1e 	bl	800218c <writeValueToBytes>
 8001950:	e0c3      	b.n	8001ada <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x8000, LEN_LDE_REPC);
 8001952:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001956:	2202      	movs	r2, #2
 8001958:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800195c:	4618      	mov	r0, r3
 800195e:	f000 fc15 	bl	800218c <writeValueToBytes>
 8001962:	e0ba      	b.n	8001ada <dwTune+0x7e2>
 8001964:	001e7de0 	.word	0x001e7de0
 8001968:	09000407 	.word	0x09000407
 800196c:	08400508 	.word	0x08400508
 8001970:	08401009 	.word	0x08401009
 8001974:	0800041d 	.word	0x0800041d
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_9) {
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800197e:	2b09      	cmp	r3, #9
 8001980:	d116      	bne.n	80019b0 <dwTune+0x6b8>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001988:	2b00      	cmp	r3, #0
 800198a:	d108      	bne.n	800199e <dwTune+0x6a6>
			writeValueToBytes(lderepc, ((0x28F4 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800198c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001990:	2202      	movs	r2, #2
 8001992:	f240 511e 	movw	r1, #1310	@ 0x51e
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fbf8 	bl	800218c <writeValueToBytes>
 800199c:	e09d      	b.n	8001ada <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x28F4, LEN_LDE_REPC);
 800199e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019a2:	2202      	movs	r2, #2
 80019a4:	f642 01f4 	movw	r1, #10484	@ 0x28f4
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 fbef 	bl	800218c <writeValueToBytes>
 80019ae:	e094      	b.n	8001ada <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_10 || dev->preambleCode == PREAMBLE_CODE_64MHZ_17) {
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80019b6:	2b0a      	cmp	r3, #10
 80019b8:	d004      	beq.n	80019c4 <dwTune+0x6cc>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80019c0:	2b11      	cmp	r3, #17
 80019c2:	d116      	bne.n	80019f2 <dwTune+0x6fa>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d108      	bne.n	80019e0 <dwTune+0x6e8>
			writeValueToBytes(lderepc, ((0x3332 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80019ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019d2:	2202      	movs	r2, #2
 80019d4:	f240 6166 	movw	r1, #1638	@ 0x666
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 fbd7 	bl	800218c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80019de:	e07c      	b.n	8001ada <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x3332, LEN_LDE_REPC);
 80019e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019e4:	2202      	movs	r2, #2
 80019e6:	f243 3132 	movw	r1, #13106	@ 0x3332
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 fbce 	bl	800218c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80019f0:	e073      	b.n	8001ada <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_11) {
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80019f8:	2b0b      	cmp	r3, #11
 80019fa:	d116      	bne.n	8001a2a <dwTune+0x732>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d108      	bne.n	8001a18 <dwTune+0x720>
			writeValueToBytes(lderepc, ((0x3AE0 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001a06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f240 715c 	movw	r1, #1884	@ 0x75c
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fbbb 	bl	800218c <writeValueToBytes>
 8001a16:	e060      	b.n	8001ada <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x3AE0, LEN_LDE_REPC);
 8001a18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	f643 21e0 	movw	r1, #15072	@ 0x3ae0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 fbb2 	bl	800218c <writeValueToBytes>
 8001a28:	e057      	b.n	8001ada <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_12) {
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001a30:	2b0c      	cmp	r3, #12
 8001a32:	d116      	bne.n	8001a62 <dwTune+0x76a>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d108      	bne.n	8001a50 <dwTune+0x758>
			writeValueToBytes(lderepc, ((0x3D70 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001a3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a42:	2202      	movs	r2, #2
 8001a44:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 fb9f 	bl	800218c <writeValueToBytes>
 8001a4e:	e044      	b.n	8001ada <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x3D70, LEN_LDE_REPC);
 8001a50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a54:	2202      	movs	r2, #2
 8001a56:	f643 5170 	movw	r1, #15728	@ 0x3d70
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 fb96 	bl	800218c <writeValueToBytes>
 8001a60:	e03b      	b.n	8001ada <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_18 || dev->preambleCode == PREAMBLE_CODE_64MHZ_19) {
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001a68:	2b12      	cmp	r3, #18
 8001a6a:	d004      	beq.n	8001a76 <dwTune+0x77e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001a72:	2b13      	cmp	r3, #19
 8001a74:	d116      	bne.n	8001aa4 <dwTune+0x7ac>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d108      	bne.n	8001a92 <dwTune+0x79a>
			writeValueToBytes(lderepc, ((0x35C2 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001a80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a84:	2202      	movs	r2, #2
 8001a86:	f44f 61d7 	mov.w	r1, #1720	@ 0x6b8
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fb7e 	bl	800218c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001a90:	e023      	b.n	8001ada <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x35C2, LEN_LDE_REPC);
 8001a92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a96:	2202      	movs	r2, #2
 8001a98:	f243 51c2 	movw	r1, #13762	@ 0x35c2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 fb75 	bl	800218c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001aa2:	e01a      	b.n	8001ada <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_20) {
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001aaa:	2b14      	cmp	r3, #20
 8001aac:	d115      	bne.n	8001ada <dwTune+0x7e2>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d108      	bne.n	8001aca <dwTune+0x7d2>
			writeValueToBytes(lderepc, ((0x47AE >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001ab8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001abc:	2202      	movs	r2, #2
 8001abe:	f640 01f5 	movw	r1, #2293	@ 0x8f5
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 fb62 	bl	800218c <writeValueToBytes>
 8001ac8:	e007      	b.n	8001ada <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x47AE, LEN_LDE_REPC);
 8001aca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f244 71ae 	movw	r1, #18350	@ 0x47ae
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 fb59 	bl	800218c <writeValueToBytes>
		}
	} else {
		// TODO proper error/warning handling
	}
	// TX_POWER (enabled smart transmit power control)
	if(dev->forceTxPower) {
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d009      	beq.n	8001af8 <dwTune+0x800>
		writeValueToBytes(txpower, dev->txPower, LEN_TX_POWER);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aee:	2204      	movs	r2, #4
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fb4b 	bl	800218c <writeValueToBytes>
 8001af6:	e12f      	b.n	8001d58 <dwTune+0xa60>
	} else if(dev->channel == CHANNEL_1 || dev->channel == CHANNEL_2) {
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d004      	beq.n	8001b0c <dwTune+0x814>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d136      	bne.n	8001b7a <dwTune+0x882>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d115      	bne.n	8001b42 <dwTune+0x84a>
			if(dev->smartPower) {
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d007      	beq.n	8001b30 <dwTune+0x838>
				writeValueToBytes(txpower, 0x15355575L, LEN_TX_POWER);
 8001b20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b24:	2204      	movs	r2, #4
 8001b26:	4995      	ldr	r1, [pc, #596]	@ (8001d7c <dwTune+0xa84>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 fb2f 	bl	800218c <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001b2e:	e112      	b.n	8001d56 <dwTune+0xa5e>
			} else {
				writeValueToBytes(txpower, 0x75757575L, LEN_TX_POWER);
 8001b30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b34:	2204      	movs	r2, #4
 8001b36:	f04f 3175 	mov.w	r1, #1970632053	@ 0x75757575
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 fb26 	bl	800218c <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001b40:	e109      	b.n	8001d56 <dwTune+0xa5e>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	f040 8104 	bne.w	8001d56 <dwTune+0xa5e>
			if(dev->smartPower) {
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <dwTune+0x870>
				writeValueToBytes(txpower, 0x07274767L, LEN_TX_POWER);
 8001b58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	4988      	ldr	r1, [pc, #544]	@ (8001d80 <dwTune+0xa88>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 fb13 	bl	800218c <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001b66:	e0f6      	b.n	8001d56 <dwTune+0xa5e>
			} else {
				writeValueToBytes(txpower, 0x67676767L, LEN_TX_POWER);
 8001b68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	f04f 3167 	mov.w	r1, #1734829927	@ 0x67676767
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 fb0a 	bl	800218c <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001b78:	e0ed      	b.n	8001d56 <dwTune+0xa5e>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_3) {
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d136      	bne.n	8001bf2 <dwTune+0x8fa>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d115      	bne.n	8001bba <dwTune+0x8c2>
			if(dev->smartPower) {
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d007      	beq.n	8001ba8 <dwTune+0x8b0>
				writeValueToBytes(txpower, 0x0F2F4F6FL, LEN_TX_POWER);
 8001b98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	4979      	ldr	r1, [pc, #484]	@ (8001d84 <dwTune+0xa8c>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 faf3 	bl	800218c <writeValueToBytes>
 8001ba6:	e0d7      	b.n	8001d58 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x6F6F6F6FL, LEN_TX_POWER);
 8001ba8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bac:	2204      	movs	r2, #4
 8001bae:	f04f 316f 	mov.w	r1, #1869573999	@ 0x6f6f6f6f
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 faea 	bl	800218c <writeValueToBytes>
 8001bb8:	e0ce      	b.n	8001d58 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	f040 80c9 	bne.w	8001d58 <dwTune+0xa60>
			if(dev->smartPower) {
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d007      	beq.n	8001be0 <dwTune+0x8e8>
				writeValueToBytes(txpower, 0x2B4B6B8BL, LEN_TX_POWER);
 8001bd0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	496c      	ldr	r1, [pc, #432]	@ (8001d88 <dwTune+0xa90>)
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fad7 	bl	800218c <writeValueToBytes>
 8001bde:	e0bb      	b.n	8001d58 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x8B8B8B8BL, LEN_TX_POWER);
 8001be0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001be4:	2204      	movs	r2, #4
 8001be6:	f04f 318b 	mov.w	r1, #2341178251	@ 0x8b8b8b8b
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 face 	bl	800218c <writeValueToBytes>
 8001bf0:	e0b2      	b.n	8001d58 <dwTune+0xa60>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_4) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d136      	bne.n	8001c6a <dwTune+0x972>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d115      	bne.n	8001c32 <dwTune+0x93a>
			if(dev->smartPower) {
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d007      	beq.n	8001c20 <dwTune+0x928>
				writeValueToBytes(txpower, 0x1F1F3F5FL, LEN_TX_POWER);
 8001c10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c14:	2204      	movs	r2, #4
 8001c16:	495d      	ldr	r1, [pc, #372]	@ (8001d8c <dwTune+0xa94>)
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 fab7 	bl	800218c <writeValueToBytes>
 8001c1e:	e09b      	b.n	8001d58 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x5F5F5F5FL, LEN_TX_POWER);
 8001c20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c24:	2204      	movs	r2, #4
 8001c26:	f04f 315f 	mov.w	r1, #1600085855	@ 0x5f5f5f5f
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 faae 	bl	800218c <writeValueToBytes>
 8001c30:	e092      	b.n	8001d58 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	f040 808d 	bne.w	8001d58 <dwTune+0xa60>
			if(dev->smartPower) {
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d007      	beq.n	8001c58 <dwTune+0x960>
				writeValueToBytes(txpower, 0x3A5A7A9AL, LEN_TX_POWER);
 8001c48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	4950      	ldr	r1, [pc, #320]	@ (8001d90 <dwTune+0xa98>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 fa9b 	bl	800218c <writeValueToBytes>
 8001c56:	e07f      	b.n	8001d58 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x9A9A9A9AL, LEN_TX_POWER);
 8001c58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	f04f 319a 	mov.w	r1, #2593823386	@ 0x9a9a9a9a
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 fa92 	bl	800218c <writeValueToBytes>
 8001c68:	e076      	b.n	8001d58 <dwTune+0xa60>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_5) {
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	d135      	bne.n	8001ce0 <dwTune+0x9e8>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d115      	bne.n	8001caa <dwTune+0x9b2>
			if(dev->smartPower) {
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d007      	beq.n	8001c98 <dwTune+0x9a0>
				writeValueToBytes(txpower, 0x0E082848L, LEN_TX_POWER);
 8001c88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	4941      	ldr	r1, [pc, #260]	@ (8001d94 <dwTune+0xa9c>)
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 fa7b 	bl	800218c <writeValueToBytes>
 8001c96:	e05f      	b.n	8001d58 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x48484848L, LEN_TX_POWER);
 8001c98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	f04f 3148 	mov.w	r1, #1212696648	@ 0x48484848
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 fa72 	bl	800218c <writeValueToBytes>
 8001ca8:	e056      	b.n	8001d58 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d151      	bne.n	8001d58 <dwTune+0xa60>
			if(dev->smartPower) {
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <dwTune+0x9d6>
				writeValueToBytes(txpower, 0x25456585L, LEN_TX_POWER);
 8001cbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	4934      	ldr	r1, [pc, #208]	@ (8001d98 <dwTune+0xaa0>)
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 fa60 	bl	800218c <writeValueToBytes>
 8001ccc:	e044      	b.n	8001d58 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x85858585L, LEN_TX_POWER);
 8001cce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	f04f 3185 	mov.w	r1, #2240120197	@ 0x85858585
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fa57 	bl	800218c <writeValueToBytes>
 8001cde:	e03b      	b.n	8001d58 <dwTune+0xa60>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_7) {
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001ce6:	2b07      	cmp	r3, #7
 8001ce8:	d136      	bne.n	8001d58 <dwTune+0xa60>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d115      	bne.n	8001d20 <dwTune+0xa28>
			if(dev->smartPower) {
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <dwTune+0xa16>
				writeValueToBytes(txpower, 0x32527292L, LEN_TX_POWER);
 8001cfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d02:	2204      	movs	r2, #4
 8001d04:	4925      	ldr	r1, [pc, #148]	@ (8001d9c <dwTune+0xaa4>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 fa40 	bl	800218c <writeValueToBytes>
 8001d0c:	e024      	b.n	8001d58 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x92929292L, LEN_TX_POWER);
 8001d0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d12:	2204      	movs	r2, #4
 8001d14:	f04f 3192 	mov.w	r1, #2459079314	@ 0x92929292
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fa37 	bl	800218c <writeValueToBytes>
 8001d1e:	e01b      	b.n	8001d58 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d116      	bne.n	8001d58 <dwTune+0xa60>
			if(dev->smartPower) {
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d007      	beq.n	8001d44 <dwTune+0xa4c>
				writeValueToBytes(txpower, 0x5171B1D1L, LEN_TX_POWER);
 8001d34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d38:	2204      	movs	r2, #4
 8001d3a:	4919      	ldr	r1, [pc, #100]	@ (8001da0 <dwTune+0xaa8>)
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 fa25 	bl	800218c <writeValueToBytes>
 8001d42:	e009      	b.n	8001d58 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0xD1D1D1D1L, LEN_TX_POWER);
 8001d44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d48:	2204      	movs	r2, #4
 8001d4a:	f04f 31d1 	mov.w	r1, #3520188881	@ 0xd1d1d1d1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fa1c 	bl	800218c <writeValueToBytes>
 8001d54:	e000      	b.n	8001d58 <dwTune+0xa60>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001d56:	bf00      	nop
	} else {
		// TODO proper error/warning handling
	}
	// Crystal calibration from OTP (if available)
	uint8_t buf_otp[4];
	readBytesOTP(dev, 0x01E, buf_otp);
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	211e      	movs	r1, #30
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fa33 	bl	80021cc <readBytesOTP>
	if (buf_otp[0] == 0) {
 8001d66:	7b3b      	ldrb	r3, [r7, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d11b      	bne.n	8001da4 <dwTune+0xaac>
		// No trim value available from OTP, use midrange value of 0x10
		writeValueToBytes(fsxtalt, ((0x10 & 0x1F) | 0x60), LEN_FS_XTALT);
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	2201      	movs	r2, #1
 8001d72:	2170      	movs	r1, #112	@ 0x70
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 fa09 	bl	800218c <writeValueToBytes>
 8001d7a:	e01e      	b.n	8001dba <dwTune+0xac2>
 8001d7c:	15355575 	.word	0x15355575
 8001d80:	07274767 	.word	0x07274767
 8001d84:	0f2f4f6f 	.word	0x0f2f4f6f
 8001d88:	2b4b6b8b 	.word	0x2b4b6b8b
 8001d8c:	1f1f3f5f 	.word	0x1f1f3f5f
 8001d90:	3a5a7a9a 	.word	0x3a5a7a9a
 8001d94:	0e082848 	.word	0x0e082848
 8001d98:	25456585 	.word	0x25456585
 8001d9c:	32527292 	.word	0x32527292
 8001da0:	5171b1d1 	.word	0x5171b1d1
	} else {
		writeValueToBytes(fsxtalt, ((buf_otp[0] & 0x1F) | 0x60), LEN_FS_XTALT);
 8001da4:	7b3b      	ldrb	r3, [r7, #12]
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	f043 0160 	orr.w	r1, r3, #96	@ 0x60
 8001dae:	f107 0310 	add.w	r3, r7, #16
 8001db2:	2201      	movs	r2, #1
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 f9e9 	bl	800218c <writeValueToBytes>
	}
	// write configuration back to chip
	dwSpiWrite(dev, AGC_TUNE, AGC_TUNE1_SUB, agctune1, LEN_AGC_TUNE1);
 8001dba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	9200      	str	r2, [sp, #0]
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	2123      	movs	r1, #35	@ 0x23
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 fa89 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, AGC_TUNE, AGC_TUNE2_SUB, agctune2, LEN_AGC_TUNE2);
 8001dcc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	9200      	str	r2, [sp, #0]
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	2123      	movs	r1, #35	@ 0x23
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 fa80 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, AGC_TUNE, AGC_TUNE3_SUB, agctune3, LEN_AGC_TUNE3);
 8001dde:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001de2:	2202      	movs	r2, #2
 8001de4:	9200      	str	r2, [sp, #0]
 8001de6:	2212      	movs	r2, #18
 8001de8:	2123      	movs	r1, #35	@ 0x23
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fa77 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE0b_SUB, drxtune0b, LEN_DRX_TUNE0b);
 8001df0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001df4:	2202      	movs	r2, #2
 8001df6:	9200      	str	r2, [sp, #0]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	2127      	movs	r1, #39	@ 0x27
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 fa6e 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1a_SUB, drxtune1a, LEN_DRX_TUNE1a);
 8001e02:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001e06:	2202      	movs	r2, #2
 8001e08:	9200      	str	r2, [sp, #0]
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	2127      	movs	r1, #39	@ 0x27
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fa65 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1b_SUB, drxtune1b, LEN_DRX_TUNE1b);
 8001e14:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e18:	2202      	movs	r2, #2
 8001e1a:	9200      	str	r2, [sp, #0]
 8001e1c:	2206      	movs	r2, #6
 8001e1e:	2127      	movs	r1, #39	@ 0x27
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fa5c 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE2_SUB, drxtune2, LEN_DRX_TUNE2);
 8001e26:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	9200      	str	r2, [sp, #0]
 8001e2e:	2208      	movs	r2, #8
 8001e30:	2127      	movs	r1, #39	@ 0x27
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 fa53 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE4H_SUB, drxtune4H, LEN_DRX_TUNE4H);
 8001e38:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	9200      	str	r2, [sp, #0]
 8001e40:	2226      	movs	r2, #38	@ 0x26
 8001e42:	2127      	movs	r1, #39	@ 0x27
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 fa4a 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_CFG1_SUB, ldecfg1, LEN_LDE_CFG1);
 8001e4a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e4e:	2201      	movs	r2, #1
 8001e50:	9200      	str	r2, [sp, #0]
 8001e52:	f640 0206 	movw	r2, #2054	@ 0x806
 8001e56:	212e      	movs	r1, #46	@ 0x2e
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fa40 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_CFG2_SUB, ldecfg2, LEN_LDE_CFG2);
 8001e5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e62:	2202      	movs	r2, #2
 8001e64:	9200      	str	r2, [sp, #0]
 8001e66:	f641 0206 	movw	r2, #6150	@ 0x1806
 8001e6a:	212e      	movs	r1, #46	@ 0x2e
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fa36 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_REPC_SUB, lderepc, LEN_LDE_REPC);
 8001e72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e76:	2202      	movs	r2, #2
 8001e78:	9200      	str	r2, [sp, #0]
 8001e7a:	f642 0204 	movw	r2, #10244	@ 0x2804
 8001e7e:	212e      	movs	r1, #46	@ 0x2e
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fa2c 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, TX_POWER, NO_SUB, txpower, LEN_TX_POWER);
 8001e86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	9200      	str	r2, [sp, #0]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	211e      	movs	r1, #30
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fa23 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, RF_CONF, RF_RXCTRLH_SUB, rfrxctrlh, LEN_RF_RXCTRLH);
 8001e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	9200      	str	r2, [sp, #0]
 8001ea0:	220b      	movs	r2, #11
 8001ea2:	2128      	movs	r1, #40	@ 0x28
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fa1a 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, RF_CONF, RF_TXCTRL_SUB, rftxctrl, LEN_RF_TXCTRL);
 8001eaa:	f107 0320 	add.w	r3, r7, #32
 8001eae:	2204      	movs	r2, #4
 8001eb0:	9200      	str	r2, [sp, #0]
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	2128      	movs	r1, #40	@ 0x28
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fa11 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, TX_CAL, TC_PGDELAY_SUB, tcpgdelay, LEN_TC_PGDELAY);
 8001ebc:	f107 031c 	add.w	r3, r7, #28
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	9200      	str	r2, [sp, #0]
 8001ec4:	220b      	movs	r2, #11
 8001ec6:	212a      	movs	r1, #42	@ 0x2a
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 fa08 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, FS_CTRL, FS_PLLTUNE_SUB, fsplltune, LEN_FS_PLLTUNE);
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	9200      	str	r2, [sp, #0]
 8001ed6:	220b      	movs	r2, #11
 8001ed8:	212b      	movs	r1, #43	@ 0x2b
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f9ff 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, FS_CTRL, FS_PLLCFG_SUB, fspllcfg, LEN_FS_PLLCFG);
 8001ee0:	f107 0318 	add.w	r3, r7, #24
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	9200      	str	r2, [sp, #0]
 8001ee8:	2207      	movs	r2, #7
 8001eea:	212b      	movs	r1, #43	@ 0x2b
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f9f6 	bl	80022de <dwSpiWrite>
	dwSpiWrite(dev, FS_CTRL, FS_XTALT_SUB, fsxtalt, LEN_FS_XTALT);
 8001ef2:	f107 0310 	add.w	r3, r7, #16
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	9200      	str	r2, [sp, #0]
 8001efa:	220e      	movs	r2, #14
 8001efc:	212b      	movs	r1, #43	@ 0x2b
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f9ed 	bl	80022de <dwSpiWrite>
}
 8001f04:	bf00      	nop
 8001f06:	3758      	adds	r7, #88	@ 0x58
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <dwHandleInterrupt>:

void dwHandleInterrupt(dwDevice_t *dev) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	// read current status and handle via callbacks
	dwReadSystemEventStatusRegister(dev);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7fe fb8f 	bl	8000638 <dwReadSystemEventStatusRegister>
	if(dwIsClockProblem(dev) /* TODO and others */ && dev->handleError != 0) {
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff f959 	bl	80011d2 <dwIsClockProblem>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <dwHandleInterrupt+0x2a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <dwHandleInterrupt+0x2a>
		(*dev->handleError)(dev);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	4798      	blx	r3
	}
	if(dwIsTransmitDone(dev) && dev->handleSent != 0) {
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff f8a7 	bl	800108a <dwIsTransmitDone>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00a      	beq.n	8001f58 <dwHandleInterrupt+0x4c>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d006      	beq.n	8001f58 <dwHandleInterrupt+0x4c>
		dwClearTransmitStatus(dev);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff f994 	bl	8001278 <dwClearTransmitStatus>
		(*dev->handleSent)(dev);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	4798      	blx	r3
	}
	if(dwIsReceiveTimestampAvailable(dev) && dev->handleReceiveTimestampAvailable != 0) {
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff f8a6 	bl	80010aa <dwIsReceiveTimestampAvailable>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00a      	beq.n	8001f7a <dwHandleInterrupt+0x6e>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <dwHandleInterrupt+0x6e>
		dwClearReceiveTimestampAvailableStatus(dev);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff f953 	bl	8001218 <dwClearReceiveTimestampAvailableStatus>
		(*dev->handleReceiveTimestampAvailable)(dev);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	4798      	blx	r3
	}
	if(dwIsReceiveFailed(dev)) {
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff f8c3 	bl	8001106 <dwIsReceiveFailed>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d019      	beq.n	8001fba <dwHandleInterrupt+0xae>
		dwClearReceiveStatus(dev);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff f964 	bl	8001254 <dwClearReceiveStatus>
		dwRxSoftReset(dev); // Needed due to error in the RX auto-re-enable functionality. See page 35 of DW1000 manual, v2.13.
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7fe fb04 	bl	800059a <dwRxSoftReset>
		if(dev->handleReceiveFailed != 0) {
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d04b      	beq.n	8002032 <dwHandleInterrupt+0x126>
			dev->handleReceiveFailed(dev);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	4798      	blx	r3
			if(dev->permanentReceive) {
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d042      	beq.n	8002032 <dwHandleInterrupt+0x126>
				dwNewReceive(dev);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7fe fd28 	bl	8000a02 <dwNewReceive>
				dwStartReceive(dev);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7fe fd3d 	bl	8000a32 <dwStartReceive>
		if(dev->permanentReceive) {
			dwNewReceive(dev);
			dwStartReceive(dev);
		}
	}
}
 8001fb8:	e03b      	b.n	8002032 <dwHandleInterrupt+0x126>
	} else if(dwIsReceiveTimeout(dev)) {
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff f8f9 	bl	80011b2 <dwIsReceiveTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d019      	beq.n	8001ffa <dwHandleInterrupt+0xee>
		dwClearReceiveStatus(dev);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff f944 	bl	8001254 <dwClearReceiveStatus>
		dwRxSoftReset(dev); // Needed due to error in the RX auto-re-enable functionality. See page 35 of DW1000 manual, v2.13.
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7fe fae4 	bl	800059a <dwRxSoftReset>
		if(dev->handleReceiveTimeout != 0) {
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d02b      	beq.n	8002032 <dwHandleInterrupt+0x126>
			(*dev->handleReceiveTimeout)(dev);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	4798      	blx	r3
			if(dev->permanentReceive) {
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d022      	beq.n	8002032 <dwHandleInterrupt+0x126>
				dwNewReceive(dev);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7fe fd08 	bl	8000a02 <dwNewReceive>
				dwStartReceive(dev);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7fe fd1d 	bl	8000a32 <dwStartReceive>
}
 8001ff8:	e01b      	b.n	8002032 <dwHandleInterrupt+0x126>
	} else if(dwIsReceiveDone(dev) && dev->handleReceived != 0) {
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff f865 	bl	80010ca <dwIsReceiveDone>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d015      	beq.n	8002032 <dwHandleInterrupt+0x126>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800200a:	2b00      	cmp	r3, #0
 800200c:	d011      	beq.n	8002032 <dwHandleInterrupt+0x126>
		dwClearReceiveStatus(dev);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff f920 	bl	8001254 <dwClearReceiveStatus>
		(*dev->handleReceived)(dev);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	4798      	blx	r3
		if(dev->permanentReceive) {
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002022:	2b00      	cmp	r3, #0
 8002024:	d005      	beq.n	8002032 <dwHandleInterrupt+0x126>
			dwNewReceive(dev);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe fceb 	bl	8000a02 <dwNewReceive>
			dwStartReceive(dev);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7fe fd00 	bl	8000a32 <dwStartReceive>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <dwAttachSentHandler>:
{
	dev->forceTxPower = true;
	dev->txPower = txPower;
}

void dwAttachSentHandler(dwDevice_t *dev, dwHandler_t handler) {
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
	dev->handleSent = handler;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <dwAttachReceivedHandler>:

void dwAttachErrorHandler(dwDevice_t *dev, dwHandler_t handler) {
	dev->handleError = handler;
}

void dwAttachReceivedHandler(dwDevice_t *dev, dwHandler_t handler) {
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
	dev->handleReceived = handler;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <dwSetAntenaDelay>:

void dwAttachReceiveTimestampAvailable(dwDevice_t *dev, dwHandler_t handler) {
	dev->handleReceiveTimestampAvailable = handler;
}

void dwSetAntenaDelay(dwDevice_t *dev, dwTime_t delay) {
 800206e:	b480      	push	{r7}
 8002070:	b085      	sub	sp, #20
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	4639      	mov	r1, r7
 8002078:	e881 000c 	stmia.w	r1, {r2, r3}
	dev->antennaDelay.full = delay.full;
 800207c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002080:	68f9      	ldr	r1, [r7, #12]
 8002082:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <dwStrError>:

char* dwStrError(int error)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	if (error == DW_ERROR_OK) return "No error";
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <dwStrError+0x12>
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <dwStrError+0x28>)
 80020a0:	e005      	b.n	80020ae <dwStrError+0x1e>
	else if (error == DW_ERROR_WRONG_ID) return "Wrong chip ID";
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <dwStrError+0x1c>
 80020a8:	4b04      	ldr	r3, [pc, #16]	@ (80020bc <dwStrError+0x2c>)
 80020aa:	e000      	b.n	80020ae <dwStrError+0x1e>
	else return "Uknown error";
 80020ac:	4b04      	ldr	r3, [pc, #16]	@ (80020c0 <dwStrError+0x30>)
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	0800b674 	.word	0x0800b674
 80020bc:	0800b680 	.word	0x0800b680
 80020c0:	0800b690 	.word	0x0800b690

080020c4 <setBit>:

static void setBit(uint8_t data[], unsigned int n, unsigned int bit, bool val) {
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	@ 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	70fb      	strb	r3, [r7, #3]
	unsigned int idx;
	unsigned int shift;

	idx = bit / 8;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	08db      	lsrs	r3, r3, #3
 80020d6:	61fb      	str	r3, [r7, #28]
	if(idx >= n) {
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d228      	bcs.n	8002132 <setBit+0x6e>
		return; // TODO proper error handling: out of bounds
	}
	uint8_t* targetByte = &data[idx];
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	4413      	add	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
	shift = bit % 8;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	617b      	str	r3, [r7, #20]
	if(val) {
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00d      	beq.n	8002112 <setBit+0x4e>
		*targetByte |= (1<<shift);
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	b25a      	sxtb	r2, r3
 80020fc:	2101      	movs	r1, #1
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	b25b      	sxtb	r3, r3
 8002106:	4313      	orrs	r3, r2
 8002108:	b25b      	sxtb	r3, r3
 800210a:	b2da      	uxtb	r2, r3
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	701a      	strb	r2, [r3, #0]
 8002110:	e010      	b.n	8002134 <setBit+0x70>
	} else {
		*targetByte &= ~(1<<shift);
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	b25a      	sxtb	r2, r3
 8002118:	2101      	movs	r1, #1
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	b25b      	sxtb	r3, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	b25b      	sxtb	r3, r3
 8002126:	4013      	ands	r3, r2
 8002128:	b25b      	sxtb	r3, r3
 800212a:	b2da      	uxtb	r2, r3
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	701a      	strb	r2, [r3, #0]
 8002130:	e000      	b.n	8002134 <setBit+0x70>
		return; // TODO proper error handling: out of bounds
 8002132:	bf00      	nop
	}
}
 8002134:	3724      	adds	r7, #36	@ 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <getBit>:

static bool getBit(uint8_t data[], unsigned int n, unsigned int bit) {
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	@ 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
	unsigned int idx;
	unsigned int shift;

	idx = bit / 8;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	08db      	lsrs	r3, r3, #3
 800214c:	61fb      	str	r3, [r7, #28]
	if(idx >= n) {
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	429a      	cmp	r2, r3
 8002154:	d301      	bcc.n	800215a <getBit+0x1e>
		return false; // TODO proper error handling: out of bounds
 8002156:	2300      	movs	r3, #0
 8002158:	e013      	b.n	8002182 <getBit+0x46>
	}
	uint8_t targetByte = data[idx];
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	4413      	add	r3, r2
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	76fb      	strb	r3, [r7, #27]
	shift = bit % 8;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	617b      	str	r3, [r7, #20]

	return (targetByte>>shift)&0x01;
 800216c:	7efa      	ldrb	r2, [r7, #27]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	fa42 f303 	asr.w	r3, r2, r3
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf14      	ite	ne
 800217c:	2301      	movne	r3, #1
 800217e:	2300      	moveq	r3, #0
 8002180:	b2db      	uxtb	r3, r3
}
 8002182:	4618      	mov	r0, r3
 8002184:	3724      	adds	r7, #36	@ 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <writeValueToBytes>:

static void writeValueToBytes(uint8_t data[], long val, unsigned int n) {
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
	unsigned int i;
	for(i = 0; i < n; i++) {
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	e00c      	b.n	80021b8 <writeValueToBytes+0x2c>
		data[i] = ((val >> (i * 8)) & 0xFF);
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	fa42 f103 	asr.w	r1, r2, r3
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	4413      	add	r3, r2
 80021ae:	b2ca      	uxtb	r2, r1
 80021b0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < n; i++) {
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	3301      	adds	r3, #1
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d3ee      	bcc.n	800219e <writeValueToBytes+0x12>
	}
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <readBytesOTP>:

static void readBytesOTP(dwDevice_t* dev, uint16_t address, uint8_t data[]) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	460b      	mov	r3, r1
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	817b      	strh	r3, [r7, #10]
	uint8_t addressBytes[LEN_OTP_ADDR];

	// p60 - 6.3.3 Reading a value from OTP memory
	// bytes of address
	addressBytes[0] = (address & 0xFF);
 80021da:	897b      	ldrh	r3, [r7, #10]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	753b      	strb	r3, [r7, #20]
	addressBytes[1] = ((address >> 8) & 0xFF);
 80021e0:	897b      	ldrh	r3, [r7, #10]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	757b      	strb	r3, [r7, #21]
	// set address
	dwSpiWrite(dev, OTP_IF, OTP_ADDR_SUB, addressBytes, LEN_OTP_ADDR);
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	2202      	movs	r2, #2
 80021f0:	9200      	str	r2, [sp, #0]
 80021f2:	2204      	movs	r2, #4
 80021f4:	212d      	movs	r1, #45	@ 0x2d
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f871 	bl	80022de <dwSpiWrite>
	// switch into read mode
	dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x03); // OTPRDEN | OTPREAD
 80021fc:	2303      	movs	r3, #3
 80021fe:	2206      	movs	r2, #6
 8002200:	212d      	movs	r1, #45	@ 0x2d
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f8ae 	bl	8002364 <dwSpiWrite8>
	dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x01); // OTPRDEN
 8002208:	2301      	movs	r3, #1
 800220a:	2206      	movs	r2, #6
 800220c:	212d      	movs	r1, #45	@ 0x2d
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 f8a8 	bl	8002364 <dwSpiWrite8>
	// read value/block - 4 bytes
	dwSpiRead(dev, OTP_IF, OTP_RDAT_SUB, data, LEN_OTP_RDAT);
 8002214:	2304      	movs	r3, #4
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	220a      	movs	r2, #10
 800221c:	212d      	movs	r1, #45	@ 0x2d
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f80a 	bl	8002238 <dwSpiRead>
	// end read mode
	dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x00);
 8002224:	2300      	movs	r3, #0
 8002226:	2206      	movs	r2, #6
 8002228:	212d      	movs	r1, #45	@ 0x2d
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f89a 	bl	8002364 <dwSpiWrite8>
}
 8002230:	bf00      	nop
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <dwSpiRead>:

#include "libdw1000Spi.h"


void dwSpiRead(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                void* data, size_t length) {
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b089      	sub	sp, #36	@ 0x24
 800223c:	af02      	add	r7, sp, #8
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	460b      	mov	r3, r1
 8002246:	72fb      	strb	r3, [r7, #11]
	uint8_t header[3];
 	size_t headerLength=1;
 8002248:	2301      	movs	r3, #1
 800224a:	617b      	str	r3, [r7, #20]

	header[0] = regid & 0x3f;
 800224c:	7afb      	ldrb	r3, [r7, #11]
 800224e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002252:	b2db      	uxtb	r3, r3
 8002254:	743b      	strb	r3, [r7, #16]

	if (address != 0) {
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01c      	beq.n	8002296 <dwSpiRead+0x5e>
		header[0] |= 0x40;
 800225c:	7c3b      	ldrb	r3, [r7, #16]
 800225e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002262:	b2db      	uxtb	r3, r3
 8002264:	743b      	strb	r3, [r7, #16]

		header[1] = address & 0x7f;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800226e:	b2db      	uxtb	r3, r3
 8002270:	747b      	strb	r3, [r7, #17]
		address >>= 7;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	09db      	lsrs	r3, r3, #7
 8002276:	607b      	str	r3, [r7, #4]
		headerLength = 2;
 8002278:	2302      	movs	r3, #2
 800227a:	617b      	str	r3, [r7, #20]

		if (address != 0) {
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <dwSpiRead+0x5e>
			header[1] |= 0x80;
 8002282:	7c7b      	ldrb	r3, [r7, #17]
 8002284:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002288:	b2db      	uxtb	r3, r3
 800228a:	747b      	strb	r3, [r7, #17]
			header[2] = address & 0xff;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	74bb      	strb	r3, [r7, #18]
			headerLength = 3;
 8002292:	2303      	movs	r3, #3
 8002294:	617b      	str	r3, [r7, #20]
		}
	}

	dev->ops->spiRead(dev, header, headerLength, data, length);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681c      	ldr	r4, [r3, #0]
 800229c:	f107 0110 	add.w	r1, r7, #16
 80022a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	47a0      	blx	r4
}
 80022ac:	bf00      	nop
 80022ae:	371c      	adds	r7, #28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd90      	pop	{r4, r7, pc}

080022b4 <dwSpiRead32>:
	uint16_t data;
	dwSpiRead(dev, regid, address, &data, sizeof(data));
	return data;
}

uint32_t dwSpiRead32(dwDevice_t *dev, uint8_t regid, uint32_t address) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	460b      	mov	r3, r1
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	72fb      	strb	r3, [r7, #11]
	uint32_t data;
	dwSpiRead(dev, regid, address, &data, sizeof(data));
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	7af9      	ldrb	r1, [r7, #11]
 80022c8:	2204      	movs	r2, #4
 80022ca:	9200      	str	r2, [sp, #0]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f7ff ffb2 	bl	8002238 <dwSpiRead>
	return data;
 80022d4:	697b      	ldr	r3, [r7, #20]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <dwSpiWrite>:

void dwSpiWrite(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                 const void* data, size_t length) {
 80022de:	b590      	push	{r4, r7, lr}
 80022e0:	b089      	sub	sp, #36	@ 0x24
 80022e2:	af02      	add	r7, sp, #8
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	460b      	mov	r3, r1
 80022ec:	72fb      	strb	r3, [r7, #11]
	uint8_t header[3];
	size_t headerLength=1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]

	header[0] = regid & 0x3f;
 80022f2:	7afb      	ldrb	r3, [r7, #11]
 80022f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	743b      	strb	r3, [r7, #16]
	header[0] |= 0x80;
 80022fc:	7c3b      	ldrb	r3, [r7, #16]
 80022fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002302:	b2db      	uxtb	r3, r3
 8002304:	743b      	strb	r3, [r7, #16]

	if (address != 0) {
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01c      	beq.n	8002346 <dwSpiWrite+0x68>
		header[0] |= 0x40;
 800230c:	7c3b      	ldrb	r3, [r7, #16]
 800230e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002312:	b2db      	uxtb	r3, r3
 8002314:	743b      	strb	r3, [r7, #16]

		header[1] = address & 0x7f;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800231e:	b2db      	uxtb	r3, r3
 8002320:	747b      	strb	r3, [r7, #17]
		address >>= 7;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	09db      	lsrs	r3, r3, #7
 8002326:	607b      	str	r3, [r7, #4]
		headerLength = 2;
 8002328:	2302      	movs	r3, #2
 800232a:	617b      	str	r3, [r7, #20]

		if (address != 0) {
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d009      	beq.n	8002346 <dwSpiWrite+0x68>
			header[1] |= 0x80;
 8002332:	7c7b      	ldrb	r3, [r7, #17]
 8002334:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002338:	b2db      	uxtb	r3, r3
 800233a:	747b      	strb	r3, [r7, #17]
			header[2] = address & 0xff;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	74bb      	strb	r3, [r7, #18]
			headerLength = 3;
 8002342:	2303      	movs	r3, #3
 8002344:	617b      	str	r3, [r7, #20]
		}
	}

	dev->ops->spiWrite(dev, header, headerLength, data, length);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685c      	ldr	r4, [r3, #4]
 800234c:	f107 0110 	add.w	r1, r7, #16
 8002350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	47a0      	blx	r4
}
 800235c:	bf00      	nop
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd90      	pop	{r4, r7, pc}

08002364 <dwSpiWrite8>:

void dwSpiWrite8(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                   uint8_t data) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af02      	add	r7, sp, #8
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	461a      	mov	r2, r3
 8002370:	460b      	mov	r3, r1
 8002372:	72fb      	strb	r3, [r7, #11]
 8002374:	4613      	mov	r3, r2
 8002376:	72bb      	strb	r3, [r7, #10]
	dwSpiWrite(dev, regid, address, &data, sizeof(data));
 8002378:	f107 030a 	add.w	r3, r7, #10
 800237c:	7af9      	ldrb	r1, [r7, #11]
 800237e:	2201      	movs	r2, #1
 8002380:	9200      	str	r2, [sp, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f7ff ffaa 	bl	80022de <dwSpiWrite>
}
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <dwSpiWrite32>:

void dwSpiWrite32(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                   uint32_t data) {
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af02      	add	r7, sp, #8
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	460b      	mov	r3, r1
 80023a0:	72fb      	strb	r3, [r7, #11]
	dwSpiWrite(dev, regid, address, &data, sizeof(data));
 80023a2:	463b      	mov	r3, r7
 80023a4:	7af9      	ldrb	r1, [r7, #11]
 80023a6:	2204      	movs	r2, #4
 80023a8:	9200      	str	r2, [sp, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f7ff ff96 	bl	80022de <dwSpiWrite>
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <spiRead>:
char USB_TX_Buffer[255] = "\0";
#define SPI_Transmit_Timeout  100
//Timeout for transmission, in ms

void spiRead(dwDevice_t *dev, const void *header, size_t headerLength,
		void *data, size_t dataLength) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	603b      	str	r3, [r7, #0]
	//Function for SPI_Read for decawave device, member of dw_ops .spiRead field
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80023ca:	2201      	movs	r2, #1
 80023cc:	2140      	movs	r1, #64	@ 0x40
 80023ce:	4812      	ldr	r0, [pc, #72]	@ (8002418 <spiRead+0x5c>)
 80023d0:	f001 f823 	bl	800341a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2110      	movs	r1, #16
 80023d8:	4810      	ldr	r0, [pc, #64]	@ (800241c <spiRead+0x60>)
 80023da:	f001 f81e 	bl	800341a <HAL_GPIO_WritePin>
	//Led ON

	HAL_SPI_Transmit(&hspi1, (uint8_t*) header, headerLength,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	2364      	movs	r3, #100	@ 0x64
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	480e      	ldr	r0, [pc, #56]	@ (8002420 <spiRead+0x64>)
 80023e8:	f003 faf2 	bl	80059d0 <HAL_SPI_Transmit>
	SPI_Transmit_Timeout);

	HAL_SPI_Receive(&hspi1, (uint8_t*) data, dataLength, SPI_Transmit_Timeout);
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	2364      	movs	r3, #100	@ 0x64
 80023f2:	6839      	ldr	r1, [r7, #0]
 80023f4:	480a      	ldr	r0, [pc, #40]	@ (8002420 <spiRead+0x64>)
 80023f6:	f003 fc2f 	bl	8005c58 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2140      	movs	r1, #64	@ 0x40
 80023fe:	4806      	ldr	r0, [pc, #24]	@ (8002418 <spiRead+0x5c>)
 8002400:	f001 f80b 	bl	800341a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002404:	2201      	movs	r2, #1
 8002406:	2110      	movs	r1, #16
 8002408:	4804      	ldr	r0, [pc, #16]	@ (800241c <spiRead+0x60>)
 800240a:	f001 f806 	bl	800341a <HAL_GPIO_WritePin>
	//Led OFF
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40010c00 	.word	0x40010c00
 800241c:	40010800 	.word	0x40010800
 8002420:	20000204 	.word	0x20000204

08002424 <spiWrite>:

void spiWrite(dwDevice_t *dev, const void *header, size_t headerLength,
		const void *data, size_t dataLength) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
	//Function for SPI_Write for decawave device, member of dw_ops .spiWrite field
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8002432:	2201      	movs	r2, #1
 8002434:	2140      	movs	r1, #64	@ 0x40
 8002436:	4812      	ldr	r0, [pc, #72]	@ (8002480 <spiWrite+0x5c>)
 8002438:	f000 ffef 	bl	800341a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800243c:	2200      	movs	r2, #0
 800243e:	2110      	movs	r1, #16
 8002440:	4810      	ldr	r0, [pc, #64]	@ (8002484 <spiWrite+0x60>)
 8002442:	f000 ffea 	bl	800341a <HAL_GPIO_WritePin>
	//Led ON

	HAL_SPI_Transmit(&hspi1, (uint8_t*) header, headerLength,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	b29a      	uxth	r2, r3
 800244a:	2364      	movs	r3, #100	@ 0x64
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	480e      	ldr	r0, [pc, #56]	@ (8002488 <spiWrite+0x64>)
 8002450:	f003 fabe 	bl	80059d0 <HAL_SPI_Transmit>
	SPI_Transmit_Timeout);

	HAL_SPI_Transmit(&hspi1, (uint8_t*) data, dataLength, SPI_Transmit_Timeout);
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	b29a      	uxth	r2, r3
 8002458:	2364      	movs	r3, #100	@ 0x64
 800245a:	6839      	ldr	r1, [r7, #0]
 800245c:	480a      	ldr	r0, [pc, #40]	@ (8002488 <spiWrite+0x64>)
 800245e:	f003 fab7 	bl	80059d0 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002462:	2200      	movs	r2, #0
 8002464:	2140      	movs	r1, #64	@ 0x40
 8002466:	4806      	ldr	r0, [pc, #24]	@ (8002480 <spiWrite+0x5c>)
 8002468:	f000 ffd7 	bl	800341a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800246c:	2201      	movs	r2, #1
 800246e:	2110      	movs	r1, #16
 8002470:	4804      	ldr	r0, [pc, #16]	@ (8002484 <spiWrite+0x60>)
 8002472:	f000 ffd2 	bl	800341a <HAL_GPIO_WritePin>
	//Led OFF
}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40010c00 	.word	0x40010c00
 8002484:	40010800 	.word	0x40010800
 8002488:	20000204 	.word	0x20000204

0800248c <spiSetSpeed>:

void spiSetSpeed(dwDevice_t *dev, dwSpiSpeed_t speed) {
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
// Needs to restart SPI using HAL, future improvement
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <delayms>:
void delayms(dwDevice_t *dev, unsigned int delay) {
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
	HAL_Delay(delay);
 80024ac:	6838      	ldr	r0, [r7, #0]
 80024ae:	f000 fcbb 	bl	8002e28 <HAL_Delay>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <reset>:

void reset(dwDevice_t *dev) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80024c4:	2201      	movs	r2, #1
 80024c6:	2101      	movs	r1, #1
 80024c8:	4807      	ldr	r0, [pc, #28]	@ (80024e8 <reset+0x2c>)
 80024ca:	f000 ffa6 	bl	800341a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80024ce:	200a      	movs	r0, #10
 80024d0:	f000 fcaa 	bl	8002e28 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80024d4:	2200      	movs	r2, #0
 80024d6:	2102      	movs	r1, #2
 80024d8:	4803      	ldr	r0, [pc, #12]	@ (80024e8 <reset+0x2c>)
 80024da:	f000 ff9e 	bl	800341a <HAL_GPIO_WritePin>
	//Open drain output, must not be driven High externally
	//See: DW1000 datasheet, page 8
//Hardware RST pin
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40010800 	.word	0x40010800

080024ec <TX_Callback>:

dwOps_t dw_ops = { .spiRead = spiRead, .spiWrite = spiWrite, .spiSetSpeed =
		spiSetSpeed, .delayms = delayms, .reset = reset };

//RX and TX callbacks
void TX_Callback(dwDevice_t *dev) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	sprintf((char*) USB_TX_Buffer, "TX Complete %d \n\r\0", HAL_GetTick());
 80024f4:	f000 fc8e 	bl	8002e14 <HAL_GetTick>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	4908      	ldr	r1, [pc, #32]	@ (8002520 <TX_Callback+0x34>)
 80024fe:	4809      	ldr	r0, [pc, #36]	@ (8002524 <TX_Callback+0x38>)
 8002500:	f008 fbf4 	bl	800acec <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002504:	4807      	ldr	r0, [pc, #28]	@ (8002524 <TX_Callback+0x38>)
 8002506:	f7fd fe21 	bl	800014c <strlen>
 800250a:	4603      	mov	r3, r0
 800250c:	b29b      	uxth	r3, r3
 800250e:	4619      	mov	r1, r3
 8002510:	4804      	ldr	r0, [pc, #16]	@ (8002524 <TX_Callback+0x38>)
 8002512:	f008 f80d 	bl	800a530 <CDC_Transmit_FS>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	0800b6a0 	.word	0x0800b6a0
 8002524:	200002a4 	.word	0x200002a4

08002528 <RX_Callback>:
void RX_Callback(dwDevice_t *dev) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	sprintf((char*) USB_TX_Buffer, "RX Complete %d \n\r\0", HAL_GetTick());
 8002530:	f000 fc70 	bl	8002e14 <HAL_GetTick>
 8002534:	4603      	mov	r3, r0
 8002536:	461a      	mov	r2, r3
 8002538:	4908      	ldr	r1, [pc, #32]	@ (800255c <RX_Callback+0x34>)
 800253a:	4809      	ldr	r0, [pc, #36]	@ (8002560 <RX_Callback+0x38>)
 800253c:	f008 fbd6 	bl	800acec <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002540:	4807      	ldr	r0, [pc, #28]	@ (8002560 <RX_Callback+0x38>)
 8002542:	f7fd fe03 	bl	800014c <strlen>
 8002546:	4603      	mov	r3, r0
 8002548:	b29b      	uxth	r3, r3
 800254a:	4619      	mov	r1, r3
 800254c:	4804      	ldr	r0, [pc, #16]	@ (8002560 <RX_Callback+0x38>)
 800254e:	f007 ffef 	bl	800a530 <CDC_Transmit_FS>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	0800b6b4 	.word	0x0800b6b4
 8002560:	200002a4 	.word	0x200002a4

08002564 <send_Data_Over_UWB>:

#define MAC802154_HEADER_LENGTH 21
//Data Transmit and Receive Functions:
void send_Data_Over_UWB(char *data) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b0c2      	sub	sp, #264	@ 0x108
 8002568:	af00      	add	r7, sp, #0
 800256a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800256e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002572:	6018      	str	r0, [r3, #0]
	uint8_t txPacket[255];
	//TODO: Look up the maximum data for each package
	strcpy(txPacket, data);
 8002574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800257c:	f107 0208 	add.w	r2, r7, #8
 8002580:	6819      	ldr	r1, [r3, #0]
 8002582:	4610      	mov	r0, r2
 8002584:	f008 fc08 	bl	800ad98 <strcpy>
	dwNewTransmit(dwm);
 8002588:	4b0d      	ldr	r3, [pc, #52]	@ (80025c0 <send_Data_Over_UWB+0x5c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fa7e 	bl	8000a8e <dwNewTransmit>
	dwSetDefaults(dwm);
 8002592:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <send_Data_Over_UWB+0x5c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fce2 	bl	8000f60 <dwSetDefaults>
	dwSetData(dwm, (uint8_t*) &txPacket, MAC802154_HEADER_LENGTH + 2);
 800259c:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <send_Data_Over_UWB+0x5c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f107 0108 	add.w	r1, r7, #8
 80025a4:	2217      	movs	r2, #23
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fd28 	bl	8000ffc <dwSetData>
	dwStartTransmit(dwm);
 80025ac:	4b04      	ldr	r3, [pc, #16]	@ (80025c0 <send_Data_Over_UWB+0x5c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe fa84 	bl	8000abe <dwStartTransmit>
}
 80025b6:	bf00      	nop
 80025b8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000000 	.word	0x20000000

080025c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025c4:	b5b0      	push	{r4, r5, r7, lr}
 80025c6:	b08a      	sub	sp, #40	@ 0x28
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ca:	f000 fbcb 	bl	8002d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025ce:	f000 f8eb 	bl	80027a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025d2:	f000 f9a5 	bl	8002920 <MX_GPIO_Init>
  MX_SPI1_Init();
 80025d6:	f000 f943 	bl	8002860 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80025da:	f007 feeb 	bl	800a3b4 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80025de:	f000 f975 	bl	80028cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	sprintf((char*) USB_TX_Buffer, "Starting test \n\r\0");
 80025e2:	4964      	ldr	r1, [pc, #400]	@ (8002774 <main+0x1b0>)
 80025e4:	4864      	ldr	r0, [pc, #400]	@ (8002778 <main+0x1b4>)
 80025e6:	f008 fb81 	bl	800acec <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 80025ea:	4863      	ldr	r0, [pc, #396]	@ (8002778 <main+0x1b4>)
 80025ec:	f7fd fdae 	bl	800014c <strlen>
 80025f0:	4603      	mov	r3, r0
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	4619      	mov	r1, r3
 80025f6:	4860      	ldr	r0, [pc, #384]	@ (8002778 <main+0x1b4>)
 80025f8:	f007 ff9a 	bl	800a530 <CDC_Transmit_FS>
//		HAL_Delay(5);
//		sprintf((char*) USB_TX_Buffer, "Waiting %d \n\r\0", i);
//		CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
//	}

	sprintf((char*) USB_TX_Buffer, "Test:Init for DW1000 \n\r\0");
 80025fc:	495f      	ldr	r1, [pc, #380]	@ (800277c <main+0x1b8>)
 80025fe:	485e      	ldr	r0, [pc, #376]	@ (8002778 <main+0x1b4>)
 8002600:	f008 fb74 	bl	800acec <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002604:	485c      	ldr	r0, [pc, #368]	@ (8002778 <main+0x1b4>)
 8002606:	f7fd fda1 	bl	800014c <strlen>
 800260a:	4603      	mov	r3, r0
 800260c:	b29b      	uxth	r3, r3
 800260e:	4619      	mov	r1, r3
 8002610:	4859      	ldr	r0, [pc, #356]	@ (8002778 <main+0x1b4>)
 8002612:	f007 ff8d 	bl	800a530 <CDC_Transmit_FS>
	HAL_Delay(1000);
 8002616:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800261a:	f000 fc05 	bl	8002e28 <HAL_Delay>
	//Initialize Decawave

	dwInit(dwm, &dw_ops);
 800261e:	4b58      	ldr	r3, [pc, #352]	@ (8002780 <main+0x1bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4958      	ldr	r1, [pc, #352]	@ (8002784 <main+0x1c0>)
 8002624:	4618      	mov	r0, r3
 8002626:	f7fd fd9f 	bl	8000168 <dwInit>

	//dwOpsInit(dwm);
	//Looks like it was used in another project in order to enable Interrupts on STM32
	//Link: https://github.com/bitcraze/lps-node-firmware/blob/6a85c68c3de8f35a218d083125346241bd2a7a13/src/dwOps.c#L40

	uint8_t result = dwConfigure(dwm); // Configure the dw1000 chip
 800262a:	4b55      	ldr	r3, [pc, #340]	@ (8002780 <main+0x1bc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd fdf4 	bl	800021c <dwConfigure>
 8002634:	4603      	mov	r3, r0
 8002636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	if (result == 0) {
 800263a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800263e:	2b00      	cmp	r3, #0
 8002640:	d112      	bne.n	8002668 <main+0xa4>
		sprintf((char*) USB_TX_Buffer, "Ok \n\r\0");
 8002642:	4951      	ldr	r1, [pc, #324]	@ (8002788 <main+0x1c4>)
 8002644:	484c      	ldr	r0, [pc, #304]	@ (8002778 <main+0x1b4>)
 8002646:	f008 fb51 	bl	800acec <siprintf>
		CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 800264a:	484b      	ldr	r0, [pc, #300]	@ (8002778 <main+0x1b4>)
 800264c:	f7fd fd7e 	bl	800014c <strlen>
 8002650:	4603      	mov	r3, r0
 8002652:	b29b      	uxth	r3, r3
 8002654:	4619      	mov	r1, r3
 8002656:	4848      	ldr	r0, [pc, #288]	@ (8002778 <main+0x1b4>)
 8002658:	f007 ff6a 	bl	800a530 <CDC_Transmit_FS>
		dwEnableAllLeds(dwm);
 800265c:	4b48      	ldr	r3, [pc, #288]	@ (8002780 <main+0x1bc>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd feb0 	bl	80003c6 <dwEnableAllLeds>
 8002666:	e013      	b.n	8002690 <main+0xcc>
	} else {
		sprintf((char*) USB_TX_Buffer, "[ERROR]: %s\n\r\0", dwStrError(result));
 8002668:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fd0f 	bl	8002090 <dwStrError>
 8002672:	4603      	mov	r3, r0
 8002674:	461a      	mov	r2, r3
 8002676:	4945      	ldr	r1, [pc, #276]	@ (800278c <main+0x1c8>)
 8002678:	483f      	ldr	r0, [pc, #252]	@ (8002778 <main+0x1b4>)
 800267a:	f008 fb37 	bl	800acec <siprintf>
		CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 800267e:	483e      	ldr	r0, [pc, #248]	@ (8002778 <main+0x1b4>)
 8002680:	f7fd fd64 	bl	800014c <strlen>
 8002684:	4603      	mov	r3, r0
 8002686:	b29b      	uxth	r3, r3
 8002688:	4619      	mov	r1, r3
 800268a:	483b      	ldr	r0, [pc, #236]	@ (8002778 <main+0x1b4>)
 800268c:	f007 ff50 	bl	800a530 <CDC_Transmit_FS>
	}
	//Decawave config end

	sprintf((char*) USB_TX_Buffer, "Config End \n\r\0");
 8002690:	493f      	ldr	r1, [pc, #252]	@ (8002790 <main+0x1cc>)
 8002692:	4839      	ldr	r0, [pc, #228]	@ (8002778 <main+0x1b4>)
 8002694:	f008 fb2a 	bl	800acec <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002698:	4837      	ldr	r0, [pc, #220]	@ (8002778 <main+0x1b4>)
 800269a:	f7fd fd57 	bl	800014c <strlen>
 800269e:	4603      	mov	r3, r0
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	4619      	mov	r1, r3
 80026a4:	4834      	ldr	r0, [pc, #208]	@ (8002778 <main+0x1b4>)
 80026a6:	f007 ff43 	bl	800a530 <CDC_Transmit_FS>
	HAL_Delay(1000);
 80026aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026ae:	f000 fbbb 	bl	8002e28 <HAL_Delay>

	//Continue with config:
	dwTime_t delay = { .full = 0 };
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
	dwSetAntenaDelay(dwm, delay);
 80026be:	4b30      	ldr	r3, [pc, #192]	@ (8002780 <main+0x1bc>)
 80026c0:	6819      	ldr	r1, [r3, #0]
 80026c2:	f107 0318 	add.w	r3, r7, #24
 80026c6:	cb0c      	ldmia	r3, {r2, r3}
 80026c8:	4608      	mov	r0, r1
 80026ca:	f7ff fcd0 	bl	800206e <dwSetAntenaDelay>

	dwAttachSentHandler(dwm, TX_Callback);
 80026ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002780 <main+0x1bc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4930      	ldr	r1, [pc, #192]	@ (8002794 <main+0x1d0>)
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fcb0 	bl	800203a <dwAttachSentHandler>
	dwAttachReceivedHandler(dwm, RX_Callback);
 80026da:	4b29      	ldr	r3, [pc, #164]	@ (8002780 <main+0x1bc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	492e      	ldr	r1, [pc, #184]	@ (8002798 <main+0x1d4>)
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fcb7 	bl	8002054 <dwAttachReceivedHandler>

	dwNewConfiguration(dwm);
 80026e6:	4b26      	ldr	r3, [pc, #152]	@ (8002780 <main+0x1bc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe fa37 	bl	8000b5e <dwNewConfiguration>
	dwSetDefaults(dwm);
 80026f0:	4b23      	ldr	r3, [pc, #140]	@ (8002780 <main+0x1bc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fc33 	bl	8000f60 <dwSetDefaults>

	dwEnableMode(dwm, MODE_SHORTDATA_FAST_ACCURACY);
 80026fa:	4b21      	ldr	r3, [pc, #132]	@ (8002780 <main+0x1bc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4927      	ldr	r1, [pc, #156]	@ (800279c <main+0x1d8>)
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe fdc9 	bl	8001298 <dwEnableMode>
	dwSetChannel(dwm, CHANNEL_2);
 8002706:	4b1e      	ldr	r3, [pc, #120]	@ (8002780 <main+0x1bc>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2102      	movs	r1, #2
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fbcf 	bl	8000eb0 <dwSetChannel>
	dwSetPreambleCode(dwm, PREAMBLE_CODE_64MHZ_9);
 8002712:	4b1b      	ldr	r3, [pc, #108]	@ (8002780 <main+0x1bc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2109      	movs	r1, #9
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe fbe7 	bl	8000eec <dwSetPreambleCode>

	dwCommitConfiguration(dwm);
 800271e:	4b18      	ldr	r3, [pc, #96]	@ (8002780 <main+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fa35 	bl	8000b92 <dwCommitConfiguration>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int i = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (TRANSMITTER == 1) {
			i++;
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	3301      	adds	r3, #1
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
			sprintf((char*) USB_TX_Buffer, "Cycle no %d \n\r\0", i);
 8002732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002734:	491a      	ldr	r1, [pc, #104]	@ (80027a0 <main+0x1dc>)
 8002736:	4810      	ldr	r0, [pc, #64]	@ (8002778 <main+0x1b4>)
 8002738:	f008 fad8 	bl	800acec <siprintf>
			CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 800273c:	480e      	ldr	r0, [pc, #56]	@ (8002778 <main+0x1b4>)
 800273e:	f7fd fd05 	bl	800014c <strlen>
 8002742:	4603      	mov	r3, r0
 8002744:	b29b      	uxth	r3, r3
 8002746:	4619      	mov	r1, r3
 8002748:	480b      	ldr	r0, [pc, #44]	@ (8002778 <main+0x1b4>)
 800274a:	f007 fef1 	bl	800a530 <CDC_Transmit_FS>

			char mesaj[] = "Hello UWB World! \n\r\0";
 800274e:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <main+0x1e0>)
 8002750:	463c      	mov	r4, r7
 8002752:	461d      	mov	r5, r3
 8002754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002758:	e895 0003 	ldmia.w	r5, {r0, r1}
 800275c:	6020      	str	r0, [r4, #0]
 800275e:	3404      	adds	r4, #4
 8002760:	7021      	strb	r1, [r4, #0]
			send_Data_Over_UWB(mesaj);
 8002762:	463b      	mov	r3, r7
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fefd 	bl	8002564 <send_Data_Over_UWB>
			HAL_Delay(100);
 800276a:	2064      	movs	r0, #100	@ 0x64
 800276c:	f000 fb5c 	bl	8002e28 <HAL_Delay>
		if (TRANSMITTER == 1) {
 8002770:	e7dc      	b.n	800272c <main+0x168>
 8002772:	bf00      	nop
 8002774:	0800b6c8 	.word	0x0800b6c8
 8002778:	200002a4 	.word	0x200002a4
 800277c:	0800b6dc 	.word	0x0800b6dc
 8002780:	20000000 	.word	0x20000000
 8002784:	20000004 	.word	0x20000004
 8002788:	0800b6f8 	.word	0x0800b6f8
 800278c:	0800b700 	.word	0x0800b700
 8002790:	0800b710 	.word	0x0800b710
 8002794:	080024ed 	.word	0x080024ed
 8002798:	08002529 	.word	0x08002529
 800279c:	0800b788 	.word	0x0800b788
 80027a0:	0800b720 	.word	0x0800b720
 80027a4:	0800b730 	.word	0x0800b730

080027a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b094      	sub	sp, #80	@ 0x50
 80027ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027b2:	2228      	movs	r2, #40	@ 0x28
 80027b4:	2100      	movs	r1, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f008 faba 	bl	800ad30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027d8:	2301      	movs	r3, #1
 80027da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80027e2:	2300      	movs	r3, #0
 80027e4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027e6:	2301      	movs	r3, #1
 80027e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027ea:	2302      	movs	r3, #2
 80027ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80027f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80027f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027fe:	4618      	mov	r0, r3
 8002800:	f002 fb9c 	bl	8004f3c <HAL_RCC_OscConfig>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800280a:	f000 f93d 	bl	8002a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800280e:	230f      	movs	r3, #15
 8002810:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002812:	2302      	movs	r3, #2
 8002814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800281a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800281e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002820:	2300      	movs	r3, #0
 8002822:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	2101      	movs	r1, #1
 800282a:	4618      	mov	r0, r3
 800282c:	f002 fe08 	bl	8005440 <HAL_RCC_ClockConfig>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002836:	f000 f927 	bl	8002a88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800283a:	2310      	movs	r3, #16
 800283c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800283e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002842:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	4618      	mov	r0, r3
 8002848:	f002 ff88 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002852:	f000 f919 	bl	8002a88 <Error_Handler>
  }
}
 8002856:	bf00      	nop
 8002858:	3750      	adds	r7, #80	@ 0x50
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002864:	4b17      	ldr	r3, [pc, #92]	@ (80028c4 <MX_SPI1_Init+0x64>)
 8002866:	4a18      	ldr	r2, [pc, #96]	@ (80028c8 <MX_SPI1_Init+0x68>)
 8002868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800286a:	4b16      	ldr	r3, [pc, #88]	@ (80028c4 <MX_SPI1_Init+0x64>)
 800286c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002870:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002872:	4b14      	ldr	r3, [pc, #80]	@ (80028c4 <MX_SPI1_Init+0x64>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002878:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <MX_SPI1_Init+0x64>)
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800287e:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <MX_SPI1_Init+0x64>)
 8002880:	2200      	movs	r2, #0
 8002882:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002884:	4b0f      	ldr	r3, [pc, #60]	@ (80028c4 <MX_SPI1_Init+0x64>)
 8002886:	2200      	movs	r2, #0
 8002888:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800288a:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <MX_SPI1_Init+0x64>)
 800288c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002890:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002892:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <MX_SPI1_Init+0x64>)
 8002894:	2218      	movs	r2, #24
 8002896:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002898:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <MX_SPI1_Init+0x64>)
 800289a:	2200      	movs	r2, #0
 800289c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800289e:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <MX_SPI1_Init+0x64>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a4:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <MX_SPI1_Init+0x64>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80028aa:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <MX_SPI1_Init+0x64>)
 80028ac:	220a      	movs	r2, #10
 80028ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028b0:	4804      	ldr	r0, [pc, #16]	@ (80028c4 <MX_SPI1_Init+0x64>)
 80028b2:	f003 f809 	bl	80058c8 <HAL_SPI_Init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028bc:	f000 f8e4 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000204 	.word	0x20000204
 80028c8:	40013000 	.word	0x40013000

080028cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028d0:	4b11      	ldr	r3, [pc, #68]	@ (8002918 <MX_USART1_UART_Init+0x4c>)
 80028d2:	4a12      	ldr	r2, [pc, #72]	@ (800291c <MX_USART1_UART_Init+0x50>)
 80028d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028d6:	4b10      	ldr	r3, [pc, #64]	@ (8002918 <MX_USART1_UART_Init+0x4c>)
 80028d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028de:	4b0e      	ldr	r3, [pc, #56]	@ (8002918 <MX_USART1_UART_Init+0x4c>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <MX_USART1_UART_Init+0x4c>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002918 <MX_USART1_UART_Init+0x4c>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028f0:	4b09      	ldr	r3, [pc, #36]	@ (8002918 <MX_USART1_UART_Init+0x4c>)
 80028f2:	220c      	movs	r2, #12
 80028f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f6:	4b08      	ldr	r3, [pc, #32]	@ (8002918 <MX_USART1_UART_Init+0x4c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028fc:	4b06      	ldr	r3, [pc, #24]	@ (8002918 <MX_USART1_UART_Init+0x4c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002902:	4805      	ldr	r0, [pc, #20]	@ (8002918 <MX_USART1_UART_Init+0x4c>)
 8002904:	f003 fd75 	bl	80063f2 <HAL_UART_Init>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800290e:	f000 f8bb 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	2000025c 	.word	0x2000025c
 800291c:	40013800 	.word	0x40013800

08002920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002926:	f107 0310 	add.w	r3, r7, #16
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	605a      	str	r2, [r3, #4]
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002934:	4b3c      	ldr	r3, [pc, #240]	@ (8002a28 <MX_GPIO_Init+0x108>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	4a3b      	ldr	r2, [pc, #236]	@ (8002a28 <MX_GPIO_Init+0x108>)
 800293a:	f043 0320 	orr.w	r3, r3, #32
 800293e:	6193      	str	r3, [r2, #24]
 8002940:	4b39      	ldr	r3, [pc, #228]	@ (8002a28 <MX_GPIO_Init+0x108>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800294c:	4b36      	ldr	r3, [pc, #216]	@ (8002a28 <MX_GPIO_Init+0x108>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	4a35      	ldr	r2, [pc, #212]	@ (8002a28 <MX_GPIO_Init+0x108>)
 8002952:	f043 0304 	orr.w	r3, r3, #4
 8002956:	6193      	str	r3, [r2, #24]
 8002958:	4b33      	ldr	r3, [pc, #204]	@ (8002a28 <MX_GPIO_Init+0x108>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002964:	4b30      	ldr	r3, [pc, #192]	@ (8002a28 <MX_GPIO_Init+0x108>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	4a2f      	ldr	r2, [pc, #188]	@ (8002a28 <MX_GPIO_Init+0x108>)
 800296a:	f043 0308 	orr.w	r3, r3, #8
 800296e:	6193      	str	r3, [r2, #24]
 8002970:	4b2d      	ldr	r3, [pc, #180]	@ (8002a28 <MX_GPIO_Init+0x108>)
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	607b      	str	r3, [r7, #4]
 800297a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_RSTn_GPIO_Port, DW_RSTn_Pin, GPIO_PIN_RESET);
 800297c:	2200      	movs	r2, #0
 800297e:	2101      	movs	r1, #1
 8002980:	482a      	ldr	r0, [pc, #168]	@ (8002a2c <MX_GPIO_Init+0x10c>)
 8002982:	f000 fd4a 	bl	800341a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USB_EN_Pin|NSS_Pin, GPIO_PIN_SET);
 8002986:	2201      	movs	r2, #1
 8002988:	2118      	movs	r1, #24
 800298a:	4828      	ldr	r0, [pc, #160]	@ (8002a2c <MX_GPIO_Init+0x10c>)
 800298c:	f000 fd45 	bl	800341a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8002990:	2201      	movs	r2, #1
 8002992:	2140      	movs	r1, #64	@ 0x40
 8002994:	4826      	ldr	r0, [pc, #152]	@ (8002a30 <MX_GPIO_Init+0x110>)
 8002996:	f000 fd40 	bl	800341a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800299a:	2200      	movs	r2, #0
 800299c:	2180      	movs	r1, #128	@ 0x80
 800299e:	4824      	ldr	r0, [pc, #144]	@ (8002a30 <MX_GPIO_Init+0x110>)
 80029a0:	f000 fd3b 	bl	800341a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DW_RSTn_Pin */
  GPIO_InitStruct.Pin = DW_RSTn_Pin;
 80029a4:	2301      	movs	r3, #1
 80029a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80029a8:	2311      	movs	r3, #17
 80029aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b0:	2302      	movs	r3, #2
 80029b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_RSTn_GPIO_Port, &GPIO_InitStruct);
 80029b4:	f107 0310 	add.w	r3, r7, #16
 80029b8:	4619      	mov	r1, r3
 80029ba:	481c      	ldr	r0, [pc, #112]	@ (8002a2c <MX_GPIO_Init+0x10c>)
 80029bc:	f000 fb92 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_EN_Pin NSS_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin|NSS_Pin;
 80029c0:	2318      	movs	r3, #24
 80029c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c4:	2301      	movs	r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029cc:	2302      	movs	r3, #2
 80029ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d0:	f107 0310 	add.w	r3, r7, #16
 80029d4:	4619      	mov	r1, r3
 80029d6:	4815      	ldr	r0, [pc, #84]	@ (8002a2c <MX_GPIO_Init+0x10c>)
 80029d8:	f000 fb84 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 80029dc:	2320      	movs	r3, #32
 80029de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80029e0:	4b14      	ldr	r3, [pc, #80]	@ (8002a34 <MX_GPIO_Init+0x114>)
 80029e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 80029e8:	f107 0310 	add.w	r3, r7, #16
 80029ec:	4619      	mov	r1, r3
 80029ee:	4810      	ldr	r0, [pc, #64]	@ (8002a30 <MX_GPIO_Init+0x110>)
 80029f0:	f000 fb78 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 80029f4:	23c0      	movs	r3, #192	@ 0xc0
 80029f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f8:	2301      	movs	r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2302      	movs	r3, #2
 8002a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a04:	f107 0310 	add.w	r3, r7, #16
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4809      	ldr	r0, [pc, #36]	@ (8002a30 <MX_GPIO_Init+0x110>)
 8002a0c:	f000 fb6a 	bl	80030e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2100      	movs	r1, #0
 8002a14:	2017      	movs	r0, #23
 8002a16:	f000 fb20 	bl	800305a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a1a:	2017      	movs	r0, #23
 8002a1c:	f000 fb39 	bl	8003092 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002a20:	bf00      	nop
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40010800 	.word	0x40010800
 8002a30:	40010c00 	.word	0x40010c00
 8002a34:	10310000 	.word	0x10310000

08002a38 <checkIrq>:
/* USER CODE BEGIN 4 */
//External interrupt handle
#define DWM_IRQn EXTI9_5_IRQn
#define DWM_IRQ_PIN GPIO_PIN_5
static int checkIrq()
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8002a3c:	2120      	movs	r1, #32
 8002a3e:	4803      	ldr	r0, [pc, #12]	@ (8002a4c <checkIrq+0x14>)
 8002a40:	f000 fcd4 	bl	80033ec <HAL_GPIO_ReadPin>
 8002a44:	4603      	mov	r3, r0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40010c00 	.word	0x40010c00

08002a50 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == DWM_IRQ_PIN) // If The INT Source Is EXTI Line9 (A9 Pin)
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d10c      	bne.n	8002a7a <HAL_GPIO_EXTI_Callback+0x2a>
	{ //GPIO_PIN_5- PB5
		do{
			dwHandleInterrupt(dwm);
 8002a60:	4b08      	ldr	r3, [pc, #32]	@ (8002a84 <HAL_GPIO_EXTI_Callback+0x34>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fa51 	bl	8001f0c <dwHandleInterrupt>
		}while(checkIrq() != 0);
 8002a6a:	f7ff ffe5 	bl	8002a38 <checkIrq>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f5      	bne.n	8002a60 <HAL_GPIO_EXTI_Callback+0x10>
		HAL_NVIC_ClearPendingIRQ(DWM_IRQn);
 8002a74:	2017      	movs	r0, #23
 8002a76:	f000 fb26 	bl	80030c6 <HAL_NVIC_ClearPendingIRQ>
	}
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000000 	.word	0x20000000

08002a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a8c:	b672      	cpsid	i
}
 8002a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a90:	bf00      	nop
 8002a92:	e7fd      	b.n	8002a90 <Error_Handler+0x8>

08002a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a9a:	4b15      	ldr	r3, [pc, #84]	@ (8002af0 <HAL_MspInit+0x5c>)
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	4a14      	ldr	r2, [pc, #80]	@ (8002af0 <HAL_MspInit+0x5c>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6193      	str	r3, [r2, #24]
 8002aa6:	4b12      	ldr	r3, [pc, #72]	@ (8002af0 <HAL_MspInit+0x5c>)
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8002af0 <HAL_MspInit+0x5c>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8002af0 <HAL_MspInit+0x5c>)
 8002ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002abc:	61d3      	str	r3, [r2, #28]
 8002abe:	4b0c      	ldr	r3, [pc, #48]	@ (8002af0 <HAL_MspInit+0x5c>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002aca:	4b0a      	ldr	r3, [pc, #40]	@ (8002af4 <HAL_MspInit+0x60>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	4a04      	ldr	r2, [pc, #16]	@ (8002af4 <HAL_MspInit+0x60>)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40010000 	.word	0x40010000

08002af8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 0310 	add.w	r3, r7, #16
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1b      	ldr	r2, [pc, #108]	@ (8002b80 <HAL_SPI_MspInit+0x88>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d12f      	bne.n	8002b78 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b18:	4b1a      	ldr	r3, [pc, #104]	@ (8002b84 <HAL_SPI_MspInit+0x8c>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	4a19      	ldr	r2, [pc, #100]	@ (8002b84 <HAL_SPI_MspInit+0x8c>)
 8002b1e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b22:	6193      	str	r3, [r2, #24]
 8002b24:	4b17      	ldr	r3, [pc, #92]	@ (8002b84 <HAL_SPI_MspInit+0x8c>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b30:	4b14      	ldr	r3, [pc, #80]	@ (8002b84 <HAL_SPI_MspInit+0x8c>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	4a13      	ldr	r2, [pc, #76]	@ (8002b84 <HAL_SPI_MspInit+0x8c>)
 8002b36:	f043 0304 	orr.w	r3, r3, #4
 8002b3a:	6193      	str	r3, [r2, #24]
 8002b3c:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <HAL_SPI_MspInit+0x8c>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b48:	23a0      	movs	r3, #160	@ 0xa0
 8002b4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b50:	2303      	movs	r3, #3
 8002b52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b54:	f107 0310 	add.w	r3, r7, #16
 8002b58:	4619      	mov	r1, r3
 8002b5a:	480b      	ldr	r0, [pc, #44]	@ (8002b88 <HAL_SPI_MspInit+0x90>)
 8002b5c:	f000 fac2 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b60:	2340      	movs	r3, #64	@ 0x40
 8002b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6c:	f107 0310 	add.w	r3, r7, #16
 8002b70:	4619      	mov	r1, r3
 8002b72:	4805      	ldr	r0, [pc, #20]	@ (8002b88 <HAL_SPI_MspInit+0x90>)
 8002b74:	f000 fab6 	bl	80030e4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002b78:	bf00      	nop
 8002b7a:	3720      	adds	r7, #32
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40013000 	.word	0x40013000
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40010800 	.word	0x40010800

08002b8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 0310 	add.w	r3, r7, #16
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c18 <HAL_UART_MspInit+0x8c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d131      	bne.n	8002c10 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bac:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <HAL_UART_MspInit+0x90>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	4a1a      	ldr	r2, [pc, #104]	@ (8002c1c <HAL_UART_MspInit+0x90>)
 8002bb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bb6:	6193      	str	r3, [r2, #24]
 8002bb8:	4b18      	ldr	r3, [pc, #96]	@ (8002c1c <HAL_UART_MspInit+0x90>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc4:	4b15      	ldr	r3, [pc, #84]	@ (8002c1c <HAL_UART_MspInit+0x90>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	4a14      	ldr	r2, [pc, #80]	@ (8002c1c <HAL_UART_MspInit+0x90>)
 8002bca:	f043 0304 	orr.w	r3, r3, #4
 8002bce:	6193      	str	r3, [r2, #24]
 8002bd0:	4b12      	ldr	r3, [pc, #72]	@ (8002c1c <HAL_UART_MspInit+0x90>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002be0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002be6:	2303      	movs	r3, #3
 8002be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bea:	f107 0310 	add.w	r3, r7, #16
 8002bee:	4619      	mov	r1, r3
 8002bf0:	480b      	ldr	r0, [pc, #44]	@ (8002c20 <HAL_UART_MspInit+0x94>)
 8002bf2:	f000 fa77 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c04:	f107 0310 	add.w	r3, r7, #16
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4805      	ldr	r0, [pc, #20]	@ (8002c20 <HAL_UART_MspInit+0x94>)
 8002c0c:	f000 fa6a 	bl	80030e4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002c10:	bf00      	nop
 8002c12:	3720      	adds	r7, #32
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40013800 	.word	0x40013800
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40010800 	.word	0x40010800

08002c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <NMI_Handler+0x4>

08002c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <HardFault_Handler+0x4>

08002c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <MemManage_Handler+0x4>

08002c3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c40:	bf00      	nop
 8002c42:	e7fd      	b.n	8002c40 <BusFault_Handler+0x4>

08002c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c48:	bf00      	nop
 8002c4a:	e7fd      	b.n	8002c48 <UsageFault_Handler+0x4>

08002c4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c74:	f000 f8bc 	bl	8002df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8002c78:	bf00      	nop
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c80:	4802      	ldr	r0, [pc, #8]	@ (8002c8c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002c82:	f000 fd17 	bl	80036b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200010d8 	.word	0x200010d8

08002c90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 8002c94:	2020      	movs	r0, #32
 8002c96:	f000 fbd9 	bl	800344c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ca8:	4a14      	ldr	r2, [pc, #80]	@ (8002cfc <_sbrk+0x5c>)
 8002caa:	4b15      	ldr	r3, [pc, #84]	@ (8002d00 <_sbrk+0x60>)
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cb4:	4b13      	ldr	r3, [pc, #76]	@ (8002d04 <_sbrk+0x64>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d102      	bne.n	8002cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cbc:	4b11      	ldr	r3, [pc, #68]	@ (8002d04 <_sbrk+0x64>)
 8002cbe:	4a12      	ldr	r2, [pc, #72]	@ (8002d08 <_sbrk+0x68>)
 8002cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cc2:	4b10      	ldr	r3, [pc, #64]	@ (8002d04 <_sbrk+0x64>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d207      	bcs.n	8002ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cd0:	f008 f836 	bl	800ad40 <__errno>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cda:	f04f 33ff 	mov.w	r3, #4294967295
 8002cde:	e009      	b.n	8002cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ce0:	4b08      	ldr	r3, [pc, #32]	@ (8002d04 <_sbrk+0x64>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ce6:	4b07      	ldr	r3, [pc, #28]	@ (8002d04 <_sbrk+0x64>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	4a05      	ldr	r2, [pc, #20]	@ (8002d04 <_sbrk+0x64>)
 8002cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20005000 	.word	0x20005000
 8002d00:	00000400 	.word	0x00000400
 8002d04:	20000408 	.word	0x20000408
 8002d08:	20001718 	.word	0x20001718

08002d0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d18:	f7ff fff8 	bl	8002d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d1c:	480b      	ldr	r0, [pc, #44]	@ (8002d4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d1e:	490c      	ldr	r1, [pc, #48]	@ (8002d50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d20:	4a0c      	ldr	r2, [pc, #48]	@ (8002d54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d24:	e002      	b.n	8002d2c <LoopCopyDataInit>

08002d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d2a:	3304      	adds	r3, #4

08002d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d30:	d3f9      	bcc.n	8002d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d32:	4a09      	ldr	r2, [pc, #36]	@ (8002d58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d34:	4c09      	ldr	r4, [pc, #36]	@ (8002d5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d38:	e001      	b.n	8002d3e <LoopFillZerobss>

08002d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d3c:	3204      	adds	r2, #4

08002d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d40:	d3fb      	bcc.n	8002d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d42:	f008 f803 	bl	800ad4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d46:	f7ff fc3d 	bl	80025c4 <main>
  bx lr
 8002d4a:	4770      	bx	lr
  ldr r0, =_sdata
 8002d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d50:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002d54:	0800b7fc 	.word	0x0800b7fc
  ldr r2, =_sbss
 8002d58:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002d5c:	20001718 	.word	0x20001718

08002d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d60:	e7fe      	b.n	8002d60 <ADC1_2_IRQHandler>
	...

08002d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d68:	4b08      	ldr	r3, [pc, #32]	@ (8002d8c <HAL_Init+0x28>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a07      	ldr	r2, [pc, #28]	@ (8002d8c <HAL_Init+0x28>)
 8002d6e:	f043 0310 	orr.w	r3, r3, #16
 8002d72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d74:	2003      	movs	r0, #3
 8002d76:	f000 f965 	bl	8003044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d7a:	200f      	movs	r0, #15
 8002d7c:	f000 f808 	bl	8002d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d80:	f7ff fe88 	bl	8002a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40022000 	.word	0x40022000

08002d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d98:	4b12      	ldr	r3, [pc, #72]	@ (8002de4 <HAL_InitTick+0x54>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b12      	ldr	r3, [pc, #72]	@ (8002de8 <HAL_InitTick+0x58>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	4619      	mov	r1, r3
 8002da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f97d 	bl	80030ae <HAL_SYSTICK_Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e00e      	b.n	8002ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b0f      	cmp	r3, #15
 8002dc2:	d80a      	bhi.n	8002dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dcc:	f000 f945 	bl	800305a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dd0:	4a06      	ldr	r2, [pc, #24]	@ (8002dec <HAL_InitTick+0x5c>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e000      	b.n	8002ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000018 	.word	0x20000018
 8002de8:	20000020 	.word	0x20000020
 8002dec:	2000001c 	.word	0x2000001c

08002df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df4:	4b05      	ldr	r3, [pc, #20]	@ (8002e0c <HAL_IncTick+0x1c>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b05      	ldr	r3, [pc, #20]	@ (8002e10 <HAL_IncTick+0x20>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	4a03      	ldr	r2, [pc, #12]	@ (8002e10 <HAL_IncTick+0x20>)
 8002e02:	6013      	str	r3, [r2, #0]
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	20000020 	.word	0x20000020
 8002e10:	2000040c 	.word	0x2000040c

08002e14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return uwTick;
 8002e18:	4b02      	ldr	r3, [pc, #8]	@ (8002e24 <HAL_GetTick+0x10>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr
 8002e24:	2000040c 	.word	0x2000040c

08002e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e30:	f7ff fff0 	bl	8002e14 <HAL_GetTick>
 8002e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d005      	beq.n	8002e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e42:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <HAL_Delay+0x44>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e4e:	bf00      	nop
 8002e50:	f7ff ffe0 	bl	8002e14 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d8f7      	bhi.n	8002e50 <HAL_Delay+0x28>
  {
  }
}
 8002e60:	bf00      	nop
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000020 	.word	0x20000020

08002e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e80:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ea2:	4a04      	ldr	r2, [pc, #16]	@ (8002eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	60d3      	str	r3, [r2, #12]
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ebc:	4b04      	ldr	r3, [pc, #16]	@ (8002ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	f003 0307 	and.w	r3, r3, #7
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	db0b      	blt.n	8002efe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	f003 021f 	and.w	r2, r3, #31
 8002eec:	4906      	ldr	r1, [pc, #24]	@ (8002f08 <__NVIC_EnableIRQ+0x34>)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8002efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	e000e100 	.word	0xe000e100

08002f0c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	db0c      	blt.n	8002f38 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	f003 021f 	and.w	r2, r3, #31
 8002f24:	4907      	ldr	r1, [pc, #28]	@ (8002f44 <__NVIC_ClearPendingIRQ+0x38>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f32:	3360      	adds	r3, #96	@ 0x60
 8002f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000e100 	.word	0xe000e100

08002f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	db0a      	blt.n	8002f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	490c      	ldr	r1, [pc, #48]	@ (8002f94 <__NVIC_SetPriority+0x4c>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	0112      	lsls	r2, r2, #4
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f70:	e00a      	b.n	8002f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4908      	ldr	r1, [pc, #32]	@ (8002f98 <__NVIC_SetPriority+0x50>)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	3b04      	subs	r3, #4
 8002f80:	0112      	lsls	r2, r2, #4
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	440b      	add	r3, r1
 8002f86:	761a      	strb	r2, [r3, #24]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	e000e100 	.word	0xe000e100
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	@ 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f1c3 0307 	rsb	r3, r3, #7
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	bf28      	it	cs
 8002fba:	2304      	movcs	r3, #4
 8002fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d902      	bls.n	8002fcc <NVIC_EncodePriority+0x30>
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3b03      	subs	r3, #3
 8002fca:	e000      	b.n	8002fce <NVIC_EncodePriority+0x32>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	401a      	ands	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	43d9      	mvns	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	4313      	orrs	r3, r2
         );
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3724      	adds	r7, #36	@ 0x24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003010:	d301      	bcc.n	8003016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003012:	2301      	movs	r3, #1
 8003014:	e00f      	b.n	8003036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003016:	4a0a      	ldr	r2, [pc, #40]	@ (8003040 <SysTick_Config+0x40>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800301e:	210f      	movs	r1, #15
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	f7ff ff90 	bl	8002f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003028:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <SysTick_Config+0x40>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302e:	4b04      	ldr	r3, [pc, #16]	@ (8003040 <SysTick_Config+0x40>)
 8003030:	2207      	movs	r2, #7
 8003032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	e000e010 	.word	0xe000e010

08003044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff0f 	bl	8002e70 <__NVIC_SetPriorityGrouping>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800306c:	f7ff ff24 	bl	8002eb8 <__NVIC_GetPriorityGrouping>
 8003070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	6978      	ldr	r0, [r7, #20]
 8003078:	f7ff ff90 	bl	8002f9c <NVIC_EncodePriority>
 800307c:	4602      	mov	r2, r0
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff5f 	bl	8002f48 <__NVIC_SetPriority>
}
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff17 	bl	8002ed4 <__NVIC_EnableIRQ>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ffa2 	bl	8003000 <SysTick_Config>
 80030bc:	4603      	mov	r3, r0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	4603      	mov	r3, r0
 80030ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80030d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff19 	bl	8002f0c <__NVIC_ClearPendingIRQ>
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b08b      	sub	sp, #44	@ 0x2c
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ee:	2300      	movs	r3, #0
 80030f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030f2:	2300      	movs	r3, #0
 80030f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f6:	e169      	b.n	80033cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030f8:	2201      	movs	r2, #1
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	4013      	ands	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	429a      	cmp	r2, r3
 8003112:	f040 8158 	bne.w	80033c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4a9a      	ldr	r2, [pc, #616]	@ (8003384 <HAL_GPIO_Init+0x2a0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d05e      	beq.n	80031de <HAL_GPIO_Init+0xfa>
 8003120:	4a98      	ldr	r2, [pc, #608]	@ (8003384 <HAL_GPIO_Init+0x2a0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d875      	bhi.n	8003212 <HAL_GPIO_Init+0x12e>
 8003126:	4a98      	ldr	r2, [pc, #608]	@ (8003388 <HAL_GPIO_Init+0x2a4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d058      	beq.n	80031de <HAL_GPIO_Init+0xfa>
 800312c:	4a96      	ldr	r2, [pc, #600]	@ (8003388 <HAL_GPIO_Init+0x2a4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d86f      	bhi.n	8003212 <HAL_GPIO_Init+0x12e>
 8003132:	4a96      	ldr	r2, [pc, #600]	@ (800338c <HAL_GPIO_Init+0x2a8>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d052      	beq.n	80031de <HAL_GPIO_Init+0xfa>
 8003138:	4a94      	ldr	r2, [pc, #592]	@ (800338c <HAL_GPIO_Init+0x2a8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d869      	bhi.n	8003212 <HAL_GPIO_Init+0x12e>
 800313e:	4a94      	ldr	r2, [pc, #592]	@ (8003390 <HAL_GPIO_Init+0x2ac>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d04c      	beq.n	80031de <HAL_GPIO_Init+0xfa>
 8003144:	4a92      	ldr	r2, [pc, #584]	@ (8003390 <HAL_GPIO_Init+0x2ac>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d863      	bhi.n	8003212 <HAL_GPIO_Init+0x12e>
 800314a:	4a92      	ldr	r2, [pc, #584]	@ (8003394 <HAL_GPIO_Init+0x2b0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d046      	beq.n	80031de <HAL_GPIO_Init+0xfa>
 8003150:	4a90      	ldr	r2, [pc, #576]	@ (8003394 <HAL_GPIO_Init+0x2b0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d85d      	bhi.n	8003212 <HAL_GPIO_Init+0x12e>
 8003156:	2b12      	cmp	r3, #18
 8003158:	d82a      	bhi.n	80031b0 <HAL_GPIO_Init+0xcc>
 800315a:	2b12      	cmp	r3, #18
 800315c:	d859      	bhi.n	8003212 <HAL_GPIO_Init+0x12e>
 800315e:	a201      	add	r2, pc, #4	@ (adr r2, 8003164 <HAL_GPIO_Init+0x80>)
 8003160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003164:	080031df 	.word	0x080031df
 8003168:	080031b9 	.word	0x080031b9
 800316c:	080031cb 	.word	0x080031cb
 8003170:	0800320d 	.word	0x0800320d
 8003174:	08003213 	.word	0x08003213
 8003178:	08003213 	.word	0x08003213
 800317c:	08003213 	.word	0x08003213
 8003180:	08003213 	.word	0x08003213
 8003184:	08003213 	.word	0x08003213
 8003188:	08003213 	.word	0x08003213
 800318c:	08003213 	.word	0x08003213
 8003190:	08003213 	.word	0x08003213
 8003194:	08003213 	.word	0x08003213
 8003198:	08003213 	.word	0x08003213
 800319c:	08003213 	.word	0x08003213
 80031a0:	08003213 	.word	0x08003213
 80031a4:	08003213 	.word	0x08003213
 80031a8:	080031c1 	.word	0x080031c1
 80031ac:	080031d5 	.word	0x080031d5
 80031b0:	4a79      	ldr	r2, [pc, #484]	@ (8003398 <HAL_GPIO_Init+0x2b4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031b6:	e02c      	b.n	8003212 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	623b      	str	r3, [r7, #32]
          break;
 80031be:	e029      	b.n	8003214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	3304      	adds	r3, #4
 80031c6:	623b      	str	r3, [r7, #32]
          break;
 80031c8:	e024      	b.n	8003214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	3308      	adds	r3, #8
 80031d0:	623b      	str	r3, [r7, #32]
          break;
 80031d2:	e01f      	b.n	8003214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	330c      	adds	r3, #12
 80031da:	623b      	str	r3, [r7, #32]
          break;
 80031dc:	e01a      	b.n	8003214 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031e6:	2304      	movs	r3, #4
 80031e8:	623b      	str	r3, [r7, #32]
          break;
 80031ea:	e013      	b.n	8003214 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d105      	bne.n	8003200 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031f4:	2308      	movs	r3, #8
 80031f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	611a      	str	r2, [r3, #16]
          break;
 80031fe:	e009      	b.n	8003214 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003200:	2308      	movs	r3, #8
 8003202:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	615a      	str	r2, [r3, #20]
          break;
 800320a:	e003      	b.n	8003214 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800320c:	2300      	movs	r3, #0
 800320e:	623b      	str	r3, [r7, #32]
          break;
 8003210:	e000      	b.n	8003214 <HAL_GPIO_Init+0x130>
          break;
 8003212:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2bff      	cmp	r3, #255	@ 0xff
 8003218:	d801      	bhi.n	800321e <HAL_GPIO_Init+0x13a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	e001      	b.n	8003222 <HAL_GPIO_Init+0x13e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3304      	adds	r3, #4
 8003222:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2bff      	cmp	r3, #255	@ 0xff
 8003228:	d802      	bhi.n	8003230 <HAL_GPIO_Init+0x14c>
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	e002      	b.n	8003236 <HAL_GPIO_Init+0x152>
 8003230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003232:	3b08      	subs	r3, #8
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	210f      	movs	r1, #15
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	fa01 f303 	lsl.w	r3, r1, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	401a      	ands	r2, r3
 8003248:	6a39      	ldr	r1, [r7, #32]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	fa01 f303 	lsl.w	r3, r1, r3
 8003250:	431a      	orrs	r2, r3
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 80b1 	beq.w	80033c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003264:	4b4d      	ldr	r3, [pc, #308]	@ (800339c <HAL_GPIO_Init+0x2b8>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	4a4c      	ldr	r2, [pc, #304]	@ (800339c <HAL_GPIO_Init+0x2b8>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6193      	str	r3, [r2, #24]
 8003270:	4b4a      	ldr	r3, [pc, #296]	@ (800339c <HAL_GPIO_Init+0x2b8>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800327c:	4a48      	ldr	r2, [pc, #288]	@ (80033a0 <HAL_GPIO_Init+0x2bc>)
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	089b      	lsrs	r3, r3, #2
 8003282:	3302      	adds	r3, #2
 8003284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003288:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	220f      	movs	r2, #15
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4013      	ands	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a40      	ldr	r2, [pc, #256]	@ (80033a4 <HAL_GPIO_Init+0x2c0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d013      	beq.n	80032d0 <HAL_GPIO_Init+0x1ec>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a3f      	ldr	r2, [pc, #252]	@ (80033a8 <HAL_GPIO_Init+0x2c4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00d      	beq.n	80032cc <HAL_GPIO_Init+0x1e8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a3e      	ldr	r2, [pc, #248]	@ (80033ac <HAL_GPIO_Init+0x2c8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d007      	beq.n	80032c8 <HAL_GPIO_Init+0x1e4>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a3d      	ldr	r2, [pc, #244]	@ (80033b0 <HAL_GPIO_Init+0x2cc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d101      	bne.n	80032c4 <HAL_GPIO_Init+0x1e0>
 80032c0:	2303      	movs	r3, #3
 80032c2:	e006      	b.n	80032d2 <HAL_GPIO_Init+0x1ee>
 80032c4:	2304      	movs	r3, #4
 80032c6:	e004      	b.n	80032d2 <HAL_GPIO_Init+0x1ee>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e002      	b.n	80032d2 <HAL_GPIO_Init+0x1ee>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <HAL_GPIO_Init+0x1ee>
 80032d0:	2300      	movs	r3, #0
 80032d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032d4:	f002 0203 	and.w	r2, r2, #3
 80032d8:	0092      	lsls	r2, r2, #2
 80032da:	4093      	lsls	r3, r2
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032e2:	492f      	ldr	r1, [pc, #188]	@ (80033a0 <HAL_GPIO_Init+0x2bc>)
 80032e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e6:	089b      	lsrs	r3, r3, #2
 80032e8:	3302      	adds	r3, #2
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d006      	beq.n	800330a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032fc:	4b2d      	ldr	r3, [pc, #180]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	492c      	ldr	r1, [pc, #176]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	4313      	orrs	r3, r2
 8003306:	608b      	str	r3, [r1, #8]
 8003308:	e006      	b.n	8003318 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800330a:	4b2a      	ldr	r3, [pc, #168]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	43db      	mvns	r3, r3
 8003312:	4928      	ldr	r1, [pc, #160]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 8003314:	4013      	ands	r3, r2
 8003316:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d006      	beq.n	8003332 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003324:	4b23      	ldr	r3, [pc, #140]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	4922      	ldr	r1, [pc, #136]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	60cb      	str	r3, [r1, #12]
 8003330:	e006      	b.n	8003340 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003332:	4b20      	ldr	r3, [pc, #128]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	43db      	mvns	r3, r3
 800333a:	491e      	ldr	r1, [pc, #120]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 800333c:	4013      	ands	r3, r2
 800333e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d006      	beq.n	800335a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800334c:	4b19      	ldr	r3, [pc, #100]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	4918      	ldr	r1, [pc, #96]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
 8003358:	e006      	b.n	8003368 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800335a:	4b16      	ldr	r3, [pc, #88]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	43db      	mvns	r3, r3
 8003362:	4914      	ldr	r1, [pc, #80]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 8003364:	4013      	ands	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d021      	beq.n	80033b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003374:	4b0f      	ldr	r3, [pc, #60]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	490e      	ldr	r1, [pc, #56]	@ (80033b4 <HAL_GPIO_Init+0x2d0>)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	600b      	str	r3, [r1, #0]
 8003380:	e021      	b.n	80033c6 <HAL_GPIO_Init+0x2e2>
 8003382:	bf00      	nop
 8003384:	10320000 	.word	0x10320000
 8003388:	10310000 	.word	0x10310000
 800338c:	10220000 	.word	0x10220000
 8003390:	10210000 	.word	0x10210000
 8003394:	10120000 	.word	0x10120000
 8003398:	10110000 	.word	0x10110000
 800339c:	40021000 	.word	0x40021000
 80033a0:	40010000 	.word	0x40010000
 80033a4:	40010800 	.word	0x40010800
 80033a8:	40010c00 	.word	0x40010c00
 80033ac:	40011000 	.word	0x40011000
 80033b0:	40011400 	.word	0x40011400
 80033b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033b8:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <HAL_GPIO_Init+0x304>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	43db      	mvns	r3, r3
 80033c0:	4909      	ldr	r1, [pc, #36]	@ (80033e8 <HAL_GPIO_Init+0x304>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	3301      	adds	r3, #1
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	fa22 f303 	lsr.w	r3, r2, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f47f ae8e 	bne.w	80030f8 <HAL_GPIO_Init+0x14>
  }
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	372c      	adds	r7, #44	@ 0x2c
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	40010400 	.word	0x40010400

080033ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	887b      	ldrh	r3, [r7, #2]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e001      	b.n	800340e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800340a:	2300      	movs	r3, #0
 800340c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr

0800341a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	460b      	mov	r3, r1
 8003424:	807b      	strh	r3, [r7, #2]
 8003426:	4613      	mov	r3, r2
 8003428:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800342a:	787b      	ldrb	r3, [r7, #1]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003430:	887a      	ldrh	r2, [r7, #2]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003436:	e003      	b.n	8003440 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003438:	887b      	ldrh	r3, [r7, #2]
 800343a:	041a      	lsls	r2, r3, #16
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	611a      	str	r2, [r3, #16]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr
	...

0800344c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003456:	4b08      	ldr	r3, [pc, #32]	@ (8003478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d006      	beq.n	8003470 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003462:	4a05      	ldr	r2, [pc, #20]	@ (8003478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff faf0 	bl	8002a50 <HAL_GPIO_EXTI_Callback>
  }
}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40010400 	.word	0x40010400

0800347c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e0e8      	b.n	8003660 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f007 f978 	bl	800a798 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2203      	movs	r2, #3
 80034ac:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f003 f89b 	bl	80065f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3304      	adds	r3, #4
 80034c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034ca:	f003 f871 	bl	80065b0 <USB_CoreInit>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0bf      	b.n	8003660 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2100      	movs	r1, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f003 f89f 	bl	800662a <USB_SetCurrentMode>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2202      	movs	r2, #2
 80034f6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0b0      	b.n	8003660 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034fe:	2300      	movs	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	e03e      	b.n	8003582 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	440b      	add	r3, r1
 8003512:	3311      	adds	r3, #17
 8003514:	2201      	movs	r2, #1
 8003516:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003518:	7bfa      	ldrb	r2, [r7, #15]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	440b      	add	r3, r1
 8003526:	3310      	adds	r3, #16
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	440b      	add	r3, r1
 800353a:	3313      	adds	r3, #19
 800353c:	2200      	movs	r2, #0
 800353e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003540:	7bfa      	ldrb	r2, [r7, #15]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	440b      	add	r3, r1
 800354e:	3320      	adds	r3, #32
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	440b      	add	r3, r1
 8003562:	3324      	adds	r3, #36	@ 0x24
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	440b      	add	r3, r1
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	3301      	adds	r3, #1
 8003580:	73fb      	strb	r3, [r7, #15]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	791b      	ldrb	r3, [r3, #4]
 8003586:	7bfa      	ldrb	r2, [r7, #15]
 8003588:	429a      	cmp	r2, r3
 800358a:	d3bb      	bcc.n	8003504 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800358c:	2300      	movs	r3, #0
 800358e:	73fb      	strb	r3, [r7, #15]
 8003590:	e044      	b.n	800361c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003592:	7bfa      	ldrb	r2, [r7, #15]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	440b      	add	r3, r1
 80035a0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	440b      	add	r3, r1
 80035b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	440b      	add	r3, r1
 80035cc:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	440b      	add	r3, r1
 80035e2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	440b      	add	r3, r1
 80035f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	440b      	add	r3, r1
 800360e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	3301      	adds	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	791b      	ldrb	r3, [r3, #4]
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	429a      	cmp	r2, r3
 8003624:	d3b5      	bcc.n	8003592 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3304      	adds	r3, #4
 800362e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003630:	f003 f807 	bl	8006642 <USB_DevInit>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2202      	movs	r2, #2
 800363e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e00c      	b.n	8003660 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f005 fa86 	bl	8008b6a <USB_DevDisconnect>

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_PCD_Start+0x16>
 800367a:	2302      	movs	r3, #2
 800367c:	e016      	b.n	80036ac <HAL_PCD_Start+0x44>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f002 ff9d 	bl	80065ca <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003690:	2101      	movs	r1, #1
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f007 faf3 	bl	800ac7e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f005 fa5a 	bl	8008b56 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f005 fa5c 	bl	8008b7e <USB_ReadInterrupts>
 80036c6:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fb1a 	bl	8003d0c <PCD_EP_ISR_Handler>

    return;
 80036d8:	e119      	b.n	800390e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d013      	beq.n	800370c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036f6:	b292      	uxth	r2, r2
 80036f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f007 f8c6 	bl	800a88e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003702:	2100      	movs	r1, #0
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f905 	bl	8003914 <HAL_PCD_SetAddress>

    return;
 800370a:	e100      	b.n	800390e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00c      	beq.n	8003730 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800371e:	b29a      	uxth	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003728:	b292      	uxth	r2, r2
 800372a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800372e:	e0ee      	b.n	800390e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00c      	beq.n	8003754 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800374c:	b292      	uxth	r2, r2
 800374e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003752:	e0dc      	b.n	800390e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d027      	beq.n	80037ae <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003766:	b29a      	uxth	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0204 	bic.w	r2, r2, #4
 8003770:	b292      	uxth	r2, r2
 8003772:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800377e:	b29a      	uxth	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0208 	bic.w	r2, r2, #8
 8003788:	b292      	uxth	r2, r2
 800378a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f007 f8b6 	bl	800a900 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800379c:	b29a      	uxth	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037a6:	b292      	uxth	r2, r2
 80037a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80037ac:	e0af      	b.n	800390e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 8083 	beq.w	80038c0 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	77fb      	strb	r3, [r7, #31]
 80037be:	e010      	b.n	80037e2 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	7ffb      	ldrb	r3, [r7, #31]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	441a      	add	r2, r3
 80037cc:	7ffb      	ldrb	r3, [r7, #31]
 80037ce:	8812      	ldrh	r2, [r2, #0]
 80037d0:	b292      	uxth	r2, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	3320      	adds	r3, #32
 80037d6:	443b      	add	r3, r7
 80037d8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80037dc:	7ffb      	ldrb	r3, [r7, #31]
 80037de:	3301      	adds	r3, #1
 80037e0:	77fb      	strb	r3, [r7, #31]
 80037e2:	7ffb      	ldrb	r3, [r7, #31]
 80037e4:	2b07      	cmp	r3, #7
 80037e6:	d9eb      	bls.n	80037c0 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	b292      	uxth	r2, r2
 80037fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003808:	b29a      	uxth	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0201 	bic.w	r2, r2, #1
 8003812:	b292      	uxth	r2, r2
 8003814:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003818:	bf00      	nop
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003822:	b29b      	uxth	r3, r3
 8003824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f6      	beq.n	800381a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003834:	b29a      	uxth	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800383e:	b292      	uxth	r2, r2
 8003840:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003844:	2300      	movs	r3, #0
 8003846:	77fb      	strb	r3, [r7, #31]
 8003848:	e00f      	b.n	800386a <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800384a:	7ffb      	ldrb	r3, [r7, #31]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	4611      	mov	r1, r2
 8003852:	7ffa      	ldrb	r2, [r7, #31]
 8003854:	0092      	lsls	r2, r2, #2
 8003856:	440a      	add	r2, r1
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	3320      	adds	r3, #32
 800385c:	443b      	add	r3, r7
 800385e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003862:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003864:	7ffb      	ldrb	r3, [r7, #31]
 8003866:	3301      	adds	r3, #1
 8003868:	77fb      	strb	r3, [r7, #31]
 800386a:	7ffb      	ldrb	r3, [r7, #31]
 800386c:	2b07      	cmp	r3, #7
 800386e:	d9ec      	bls.n	800384a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003878:	b29a      	uxth	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0208 	orr.w	r2, r2, #8
 8003882:	b292      	uxth	r2, r2
 8003884:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003890:	b29a      	uxth	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800389a:	b292      	uxth	r2, r2
 800389c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0204 	orr.w	r2, r2, #4
 80038b2:	b292      	uxth	r2, r2
 80038b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f007 f807 	bl	800a8cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038be:	e026      	b.n	800390e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00f      	beq.n	80038ea <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038dc:	b292      	uxth	r2, r2
 80038de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f006 ffc5 	bl	800a872 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038e8:	e011      	b.n	800390e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00c      	beq.n	800390e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003906:	b292      	uxth	r2, r2
 8003908:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800390c:	bf00      	nop
  }
}
 800390e:	3720      	adds	r7, #32
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_PCD_SetAddress+0x1a>
 800392a:	2302      	movs	r3, #2
 800392c:	e012      	b.n	8003954 <HAL_PCD_SetAddress+0x40>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	78fa      	ldrb	r2, [r7, #3]
 8003942:	4611      	mov	r1, r2
 8003944:	4618      	mov	r0, r3
 8003946:	f005 f8f3 	bl	8008b30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	4608      	mov	r0, r1
 8003966:	4611      	mov	r1, r2
 8003968:	461a      	mov	r2, r3
 800396a:	4603      	mov	r3, r0
 800396c:	70fb      	strb	r3, [r7, #3]
 800396e:	460b      	mov	r3, r1
 8003970:	803b      	strh	r3, [r7, #0]
 8003972:	4613      	mov	r3, r2
 8003974:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800397a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800397e:	2b00      	cmp	r3, #0
 8003980:	da0e      	bge.n	80039a0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	f003 0207 	and.w	r2, r3, #7
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	3310      	adds	r3, #16
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	705a      	strb	r2, [r3, #1]
 800399e:	e00e      	b.n	80039be <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	f003 0207 	and.w	r2, r3, #7
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	4413      	add	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039ca:	883a      	ldrh	r2, [r7, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	78ba      	ldrb	r2, [r7, #2]
 80039d4:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039d6:	78bb      	ldrb	r3, [r7, #2]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d102      	bne.n	80039e2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_PCD_EP_Open+0x94>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e00e      	b.n	8003a0e <HAL_PCD_EP_Open+0xb2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68f9      	ldr	r1, [r7, #12]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f002 fe3c 	bl	800667c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003a0c:	7afb      	ldrb	r3, [r7, #11]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	da0e      	bge.n	8003a48 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	f003 0207 	and.w	r2, r3, #7
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	3310      	adds	r3, #16
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2201      	movs	r2, #1
 8003a44:	705a      	strb	r2, [r3, #1]
 8003a46:	e00e      	b.n	8003a66 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	f003 0207 	and.w	r2, r3, #7
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_PCD_EP_Close+0x6a>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e00e      	b.n	8003a9e <HAL_PCD_EP_Close+0x88>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68f9      	ldr	r1, [r7, #12]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f003 f9b4 	bl	8006dfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b086      	sub	sp, #24
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab6:	7afb      	ldrb	r3, [r7, #11]
 8003ab8:	f003 0207 	and.w	r2, r3, #7
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ae6:	7afb      	ldrb	r3, [r7, #11]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6979      	ldr	r1, [r7, #20]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f003 fb6b 	bl	80071d4 <USB_EPStartXfer>

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	f003 0207 	and.w	r2, r3, #7
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	440b      	add	r3, r1
 8003b26:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003b2a:	681b      	ldr	r3, [r3, #0]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr

08003b36 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b086      	sub	sp, #24
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	460b      	mov	r3, r1
 8003b44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b46:	7afb      	ldrb	r3, [r7, #11]
 8003b48:	f003 0207 	and.w	r2, r3, #7
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	3310      	adds	r3, #16
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4413      	add	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b82:	7afb      	ldrb	r3, [r7, #11]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6979      	ldr	r1, [r7, #20]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f003 fb1d 	bl	80071d4 <USB_EPStartXfer>

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	7912      	ldrb	r2, [r2, #4]
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e04c      	b.n	8003c5c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	da0e      	bge.n	8003be8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	f003 0207 	and.w	r2, r3, #7
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	3310      	adds	r3, #16
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	705a      	strb	r2, [r3, #1]
 8003be6:	e00c      	b.n	8003c02 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003be8:	78fa      	ldrb	r2, [r7, #3]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_PCD_EP_SetStall+0x7e>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e01c      	b.n	8003c5c <HAL_PCD_EP_SetStall+0xb8>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68f9      	ldr	r1, [r7, #12]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f004 fe80 	bl	8008936 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d108      	bne.n	8003c52 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	f004 ffa5 	bl	8008b9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	7912      	ldrb	r2, [r2, #4]
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e040      	b.n	8003d04 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	da0e      	bge.n	8003ca8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	f003 0207 	and.w	r2, r3, #7
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	3310      	adds	r3, #16
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	705a      	strb	r2, [r3, #1]
 8003ca6:	e00e      	b.n	8003cc6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	f003 0207 	and.w	r2, r3, #7
 8003cae:	4613      	mov	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ccc:	78fb      	ldrb	r3, [r7, #3]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_PCD_EP_ClrStall+0x82>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e00e      	b.n	8003d04 <HAL_PCD_EP_ClrStall+0xa0>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68f9      	ldr	r1, [r7, #12]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f004 fe6e 	bl	80089d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b096      	sub	sp, #88	@ 0x58
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d14:	e3bb      	b.n	800448e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d1e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003d30:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f040 8175 	bne.w	8004024 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d3e:	f003 0310 	and.w	r3, r3, #16
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d14e      	bne.n	8003de4 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d56:	81fb      	strh	r3, [r7, #14]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	89fb      	ldrh	r3, [r7, #14]
 8003d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3310      	adds	r3, #16
 8003d6e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4413      	add	r3, r2
 8003d84:	3302      	adds	r3, #2
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6812      	ldr	r2, [r2, #0]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d9a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	441a      	add	r2, r3
 8003da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003daa:	2100      	movs	r1, #0
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f006 fd46 	bl	800a83e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	7b5b      	ldrb	r3, [r3, #13]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 8368 	beq.w	800448e <PCD_EP_ISR_Handler+0x782>
 8003dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f040 8363 	bne.w	800448e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	7b5b      	ldrb	r3, [r3, #13]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	735a      	strb	r2, [r3, #13]
 8003de2:	e354      	b.n	800448e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003dea:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003df6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003dfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d034      	beq.n	8003e6c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4413      	add	r3, r2
 8003e16:	3306      	adds	r3, #6
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e2c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e3a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e3e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f004 fefc 	bl	8008c3e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e52:	4013      	ands	r3, r2
 8003e54:	823b      	strh	r3, [r7, #16]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	8a3a      	ldrh	r2, [r7, #16]
 8003e5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e60:	b292      	uxth	r2, r2
 8003e62:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f006 fcbd 	bl	800a7e4 <HAL_PCD_SetupStageCallback>
 8003e6a:	e310      	b.n	800448e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e6c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f280 830c 	bge.w	800448e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e82:	4013      	ands	r3, r2
 8003e84:	83fb      	strh	r3, [r7, #30]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	8bfa      	ldrh	r2, [r7, #30]
 8003e8c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e90:	b292      	uxth	r2, r2
 8003e92:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3306      	adds	r3, #6
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ebe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d019      	beq.n	8003efc <PCD_EP_ISR_Handler+0x1f0>
 8003ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d015      	beq.n	8003efc <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed6:	6959      	ldr	r1, [r3, #20]
 8003ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eda:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003edc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ede:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	f004 feac 	bl	8008c3e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee8:	695a      	ldr	r2, [r3, #20]
 8003eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	441a      	add	r2, r3
 8003ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f006 fc86 	bl	800a808 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003f06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f040 82bd 	bne.w	800448e <PCD_EP_ISR_Handler+0x782>
 8003f14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f18:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f20:	f000 82b5 	beq.w	800448e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	4413      	add	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	801a      	strh	r2, [r3, #0]
 8003f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f5a:	d91d      	bls.n	8003f98 <PCD_EP_ISR_Handler+0x28c>
 8003f5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	095b      	lsrs	r3, r3, #5
 8003f62:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f003 031f 	and.w	r3, r3, #31
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d102      	bne.n	8003f76 <PCD_EP_ISR_Handler+0x26a>
 8003f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f72:	3b01      	subs	r3, #1
 8003f74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	029b      	lsls	r3, r3, #10
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	4313      	orrs	r3, r2
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	801a      	strh	r2, [r3, #0]
 8003f96:	e026      	b.n	8003fe6 <PCD_EP_ISR_Handler+0x2da>
 8003f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <PCD_EP_ISR_Handler+0x2aa>
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	801a      	strh	r2, [r3, #0]
 8003fb4:	e017      	b.n	8003fe6 <PCD_EP_ISR_Handler+0x2da>
 8003fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	085b      	lsrs	r3, r3, #1
 8003fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <PCD_EP_ISR_Handler+0x2c4>
 8003fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fcc:	3301      	adds	r3, #1
 8003fce:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	029b      	lsls	r3, r3, #10
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ff6:	827b      	strh	r3, [r7, #18]
 8003ff8:	8a7b      	ldrh	r3, [r7, #18]
 8003ffa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003ffe:	827b      	strh	r3, [r7, #18]
 8004000:	8a7b      	ldrh	r3, [r7, #18]
 8004002:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004006:	827b      	strh	r3, [r7, #18]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	8a7b      	ldrh	r3, [r7, #18]
 800400e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004012:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800401a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800401e:	b29b      	uxth	r3, r3
 8004020:	8013      	strh	r3, [r2, #0]
 8004022:	e234      	b.n	800448e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004038:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800403c:	2b00      	cmp	r3, #0
 800403e:	f280 80fc 	bge.w	800423a <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b29a      	uxth	r2, r3
 8004054:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004058:	4013      	ands	r3, r2
 800405a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004070:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004074:	b292      	uxth	r2, r2
 8004076:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004078:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	4413      	add	r3, r2
 800408c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800408e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004090:	7b1b      	ldrb	r3, [r3, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d125      	bne.n	80040e2 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800409e:	b29b      	uxth	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	4413      	add	r3, r2
 80040aa:	3306      	adds	r3, #6
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040be:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80040c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 8092 	beq.w	80041f0 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d2:	6959      	ldr	r1, [r3, #20]
 80040d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d6:	88da      	ldrh	r2, [r3, #6]
 80040d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80040dc:	f004 fdaf 	bl	8008c3e <USB_ReadPMA>
 80040e0:	e086      	b.n	80041f0 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80040e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e4:	78db      	ldrb	r3, [r3, #3]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d10a      	bne.n	8004100 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80040ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80040ee:	461a      	mov	r2, r3
 80040f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f9d9 	bl	80044aa <HAL_PCD_EP_DB_Receive>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80040fe:	e077      	b.n	80041f0 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29b      	uxth	r3, r3
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800411a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	441a      	add	r2, r3
 800412c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004130:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004134:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800413c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004140:	b29b      	uxth	r3, r3
 8004142:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d024      	beq.n	80041a8 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004166:	b29b      	uxth	r3, r3
 8004168:	461a      	mov	r2, r3
 800416a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	3302      	adds	r3, #2
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004186:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800418a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800418e:	2b00      	cmp	r3, #0
 8004190:	d02e      	beq.n	80041f0 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004198:	6959      	ldr	r1, [r3, #20]
 800419a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800419c:	891a      	ldrh	r2, [r3, #8]
 800419e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041a2:	f004 fd4c 	bl	8008c3e <USB_ReadPMA>
 80041a6:	e023      	b.n	80041f0 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	4413      	add	r3, r2
 80041bc:	3306      	adds	r3, #6
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041d0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80041d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d009      	beq.n	80041f0 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e2:	6959      	ldr	r1, [r3, #20]
 80041e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e6:	895a      	ldrh	r2, [r3, #10]
 80041e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041ec:	f004 fd27 	bl	8008c3e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80041f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f2:	69da      	ldr	r2, [r3, #28]
 80041f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041f8:	441a      	add	r2, r3
 80041fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80041fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004206:	441a      	add	r2, r3
 8004208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800420a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800420c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <PCD_EP_ISR_Handler+0x514>
 8004214:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	429a      	cmp	r2, r3
 800421e:	d206      	bcs.n	800422e <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	4619      	mov	r1, r3
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f006 faee 	bl	800a808 <HAL_PCD_DataOutStageCallback>
 800422c:	e005      	b.n	800423a <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004234:	4618      	mov	r0, r3
 8004236:	f002 ffcd 	bl	80071d4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800423a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800423e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8123 	beq.w	800448e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8004248:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	3310      	adds	r3, #16
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	4413      	add	r3, r2
 800425a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	b29b      	uxth	r3, r3
 800426e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004276:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	441a      	add	r2, r3
 8004288:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800428c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004294:	b29b      	uxth	r3, r3
 8004296:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800429a:	78db      	ldrb	r3, [r3, #3]
 800429c:	2b01      	cmp	r3, #1
 800429e:	f040 80a2 	bne.w	80043e6 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80042a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a4:	2200      	movs	r2, #0
 80042a6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80042a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042aa:	7b1b      	ldrb	r3, [r3, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8093 	beq.w	80043d8 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80042b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80042b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d046      	beq.n	800434c <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c0:	785b      	ldrb	r3, [r3, #1]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d126      	bne.n	8004314 <PCD_EP_ISR_Handler+0x608>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	4413      	add	r3, r2
 80042dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80042de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	011a      	lsls	r2, r3, #4
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	4413      	add	r3, r2
 80042e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042ec:	623b      	str	r3, [r7, #32]
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	801a      	strh	r2, [r3, #0]
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800430c:	b29a      	uxth	r2, r3
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	801a      	strh	r2, [r3, #0]
 8004312:	e061      	b.n	80043d8 <PCD_EP_ISR_Handler+0x6cc>
 8004314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004316:	785b      	ldrb	r3, [r3, #1]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d15d      	bne.n	80043d8 <PCD_EP_ISR_Handler+0x6cc>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800432a:	b29b      	uxth	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004330:	4413      	add	r3, r2
 8004332:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	011a      	lsls	r2, r3, #4
 800433a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800433c:	4413      	add	r3, r2
 800433e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004342:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004346:	2200      	movs	r2, #0
 8004348:	801a      	strh	r2, [r3, #0]
 800434a:	e045      	b.n	80043d8 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004354:	785b      	ldrb	r3, [r3, #1]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d126      	bne.n	80043a8 <PCD_EP_ISR_Handler+0x69c>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004368:	b29b      	uxth	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800436e:	4413      	add	r3, r2
 8004370:	637b      	str	r3, [r7, #52]	@ 0x34
 8004372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	011a      	lsls	r2, r3, #4
 8004378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437a:	4413      	add	r3, r2
 800437c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004380:	633b      	str	r3, [r7, #48]	@ 0x30
 8004382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	b29b      	uxth	r3, r3
 8004388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800438c:	b29a      	uxth	r2, r3
 800438e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004390:	801a      	strh	r2, [r3, #0]
 8004392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	b29b      	uxth	r3, r3
 8004398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800439c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a4:	801a      	strh	r2, [r3, #0]
 80043a6:	e017      	b.n	80043d8 <PCD_EP_ISR_Handler+0x6cc>
 80043a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d113      	bne.n	80043d8 <PCD_EP_ISR_Handler+0x6cc>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043be:	4413      	add	r3, r2
 80043c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	011a      	lsls	r2, r3, #4
 80043c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ca:	4413      	add	r3, r2
 80043cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d4:	2200      	movs	r2, #0
 80043d6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	4619      	mov	r1, r3
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f006 fa2d 	bl	800a83e <HAL_PCD_DataInStageCallback>
 80043e4:	e053      	b.n	800448e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80043e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80043ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d146      	bne.n	8004480 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	3302      	adds	r3, #2
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800441a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800441e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004426:	429a      	cmp	r2, r3
 8004428:	d907      	bls.n	800443a <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800442a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800442c:	699a      	ldr	r2, [r3, #24]
 800442e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004432:	1ad2      	subs	r2, r2, r3
 8004434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004436:	619a      	str	r2, [r3, #24]
 8004438:	e002      	b.n	8004440 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800443a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800443c:	2200      	movs	r2, #0
 800443e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d106      	bne.n	8004456 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	4619      	mov	r1, r3
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f006 f9f5 	bl	800a83e <HAL_PCD_DataInStageCallback>
 8004454:	e01b      	b.n	800448e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800445e:	441a      	add	r2, r3
 8004460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004462:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800446c:	441a      	add	r2, r3
 800446e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004470:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004478:	4618      	mov	r0, r3
 800447a:	f002 feab 	bl	80071d4 <USB_EPStartXfer>
 800447e:	e006      	b.n	800448e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004480:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004484:	461a      	mov	r2, r3
 8004486:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f91b 	bl	80046c4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004496:	b29b      	uxth	r3, r3
 8004498:	b21b      	sxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	f6ff ac3b 	blt.w	8003d16 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3758      	adds	r7, #88	@ 0x58
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b088      	sub	sp, #32
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	4613      	mov	r3, r2
 80044b6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d07e      	beq.n	80045c0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4413      	add	r3, r2
 80044d6:	3302      	adds	r3, #2
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	699a      	ldr	r2, [r3, #24]
 80044f0:	8b7b      	ldrh	r3, [r7, #26]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d306      	bcc.n	8004504 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	8b7b      	ldrh	r3, [r7, #26]
 80044fc:	1ad2      	subs	r2, r2, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	619a      	str	r2, [r3, #24]
 8004502:	e002      	b.n	800450a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2200      	movs	r2, #0
 8004508:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d123      	bne.n	800455a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800452c:	833b      	strh	r3, [r7, #24]
 800452e:	8b3b      	ldrh	r3, [r7, #24]
 8004530:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004534:	833b      	strh	r3, [r7, #24]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	441a      	add	r2, r3
 8004544:	8b3b      	ldrh	r3, [r7, #24]
 8004546:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800454a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800454e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004556:	b29b      	uxth	r3, r3
 8004558:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01f      	beq.n	80045a4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800457a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800457e:	82fb      	strh	r3, [r7, #22]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	441a      	add	r2, r3
 800458e:	8afb      	ldrh	r3, [r7, #22]
 8004590:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004594:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004598:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800459c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80045a4:	8b7b      	ldrh	r3, [r7, #26]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 8087 	beq.w	80046ba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	6959      	ldr	r1, [r3, #20]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	891a      	ldrh	r2, [r3, #8]
 80045b8:	8b7b      	ldrh	r3, [r7, #26]
 80045ba:	f004 fb40 	bl	8008c3e <USB_ReadPMA>
 80045be:	e07c      	b.n	80046ba <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	461a      	mov	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	4413      	add	r3, r2
 80045d4:	3306      	adds	r3, #6
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	8b7b      	ldrh	r3, [r7, #26]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d306      	bcc.n	8004602 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	699a      	ldr	r2, [r3, #24]
 80045f8:	8b7b      	ldrh	r3, [r7, #26]
 80045fa:	1ad2      	subs	r2, r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	619a      	str	r2, [r3, #24]
 8004600:	e002      	b.n	8004608 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2200      	movs	r2, #0
 8004606:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d123      	bne.n	8004658 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	b29b      	uxth	r3, r3
 8004622:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800462a:	83fb      	strh	r3, [r7, #30]
 800462c:	8bfb      	ldrh	r3, [r7, #30]
 800462e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004632:	83fb      	strh	r3, [r7, #30]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	8bfb      	ldrh	r3, [r7, #30]
 8004644:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004648:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800464c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004654:	b29b      	uxth	r3, r3
 8004656:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d11f      	bne.n	80046a2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800467c:	83bb      	strh	r3, [r7, #28]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	441a      	add	r2, r3
 800468c:	8bbb      	ldrh	r3, [r7, #28]
 800468e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800469a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800469e:	b29b      	uxth	r3, r3
 80046a0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80046a2:	8b7b      	ldrh	r3, [r7, #26]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6818      	ldr	r0, [r3, #0]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	6959      	ldr	r1, [r3, #20]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	895a      	ldrh	r2, [r3, #10]
 80046b4:	8b7b      	ldrh	r3, [r7, #26]
 80046b6:	f004 fac2 	bl	8008c3e <USB_ReadPMA>
    }
  }

  return count;
 80046ba:	8b7b      	ldrh	r3, [r7, #26]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3720      	adds	r7, #32
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b0a4      	sub	sp, #144	@ 0x90
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	4613      	mov	r3, r2
 80046d0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 81dd 	beq.w	8004a98 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	4413      	add	r3, r2
 80046f2:	3302      	adds	r3, #2
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	6812      	ldr	r2, [r2, #0]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004706:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004712:	429a      	cmp	r2, r3
 8004714:	d907      	bls.n	8004726 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800471e:	1ad2      	subs	r2, r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	619a      	str	r2, [r3, #24]
 8004724:	e002      	b.n	800472c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2200      	movs	r2, #0
 800472a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f040 80b9 	bne.w	80048a8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	785b      	ldrb	r3, [r3, #1]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d126      	bne.n	800478c <HAL_PCD_EP_DB_Transmit+0xc8>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800474c:	b29b      	uxth	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004752:	4413      	add	r3, r2
 8004754:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	011a      	lsls	r2, r3, #4
 800475c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800475e:	4413      	add	r3, r2
 8004760:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004764:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004770:	b29a      	uxth	r2, r3
 8004772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004774:	801a      	strh	r2, [r3, #0]
 8004776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	b29b      	uxth	r3, r3
 800477c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004784:	b29a      	uxth	r2, r3
 8004786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004788:	801a      	strh	r2, [r3, #0]
 800478a:	e01a      	b.n	80047c2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	785b      	ldrb	r3, [r3, #1]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d116      	bne.n	80047c2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	637b      	str	r3, [r7, #52]	@ 0x34
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a8:	4413      	add	r3, r2
 80047aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	011a      	lsls	r2, r3, #4
 80047b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b4:	4413      	add	r3, r2
 80047b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80047bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047be:	2200      	movs	r2, #0
 80047c0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	785b      	ldrb	r3, [r3, #1]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d126      	bne.n	800481e <HAL_PCD_EP_DB_Transmit+0x15a>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047de:	b29b      	uxth	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	61fb      	str	r3, [r7, #28]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	011a      	lsls	r2, r3, #4
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	4413      	add	r3, r2
 80047f2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047f6:	61bb      	str	r3, [r7, #24]
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004802:	b29a      	uxth	r2, r3
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	801a      	strh	r2, [r3, #0]
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004816:	b29a      	uxth	r2, r3
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	801a      	strh	r2, [r3, #0]
 800481c:	e017      	b.n	800484e <HAL_PCD_EP_DB_Transmit+0x18a>
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	785b      	ldrb	r3, [r3, #1]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d113      	bne.n	800484e <HAL_PCD_EP_DB_Transmit+0x18a>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800482e:	b29b      	uxth	r3, r3
 8004830:	461a      	mov	r2, r3
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	4413      	add	r3, r2
 8004836:	627b      	str	r3, [r7, #36]	@ 0x24
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	011a      	lsls	r2, r3, #4
 800483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004840:	4413      	add	r3, r2
 8004842:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004846:	623b      	str	r3, [r7, #32]
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	2200      	movs	r2, #0
 800484c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	4619      	mov	r1, r3
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f005 fff2 	bl	800a83e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 82fc 	beq.w	8004e5e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	461a      	mov	r2, r3
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800487c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004880:	82fb      	strh	r3, [r7, #22]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	441a      	add	r2, r3
 8004890:	8afb      	ldrh	r3, [r7, #22]
 8004892:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004896:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800489a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800489e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	8013      	strh	r3, [r2, #0]
 80048a6:	e2da      	b.n	8004e5e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048a8:	88fb      	ldrh	r3, [r7, #6]
 80048aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d021      	beq.n	80048f6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	441a      	add	r2, r3
 80048de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80048e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	f040 82ae 	bne.w	8004e5e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800490a:	441a      	add	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004918:	441a      	add	r2, r3
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	6a1a      	ldr	r2, [r3, #32]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	429a      	cmp	r2, r3
 8004928:	d30b      	bcc.n	8004942 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	6a1a      	ldr	r2, [r3, #32]
 8004936:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800493a:	1ad2      	subs	r2, r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	621a      	str	r2, [r3, #32]
 8004940:	e017      	b.n	8004972 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d108      	bne.n	800495c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800494a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800494e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800495a:	e00a      	b.n	8004972 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2200      	movs	r2, #0
 8004970:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	785b      	ldrb	r3, [r3, #1]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d165      	bne.n	8004a46 <HAL_PCD_EP_DB_Transmit+0x382>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004988:	b29b      	uxth	r3, r3
 800498a:	461a      	mov	r2, r3
 800498c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800498e:	4413      	add	r3, r2
 8004990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	011a      	lsls	r2, r3, #4
 8004998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800499a:	4413      	add	r3, r2
 800499c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80049a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80049b8:	d91d      	bls.n	80049f6 <HAL_PCD_EP_DB_Transmit+0x332>
 80049ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d102      	bne.n	80049d4 <HAL_PCD_EP_DB_Transmit+0x310>
 80049ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049d0:	3b01      	subs	r3, #1
 80049d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	b29a      	uxth	r2, r3
 80049da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049dc:	b29b      	uxth	r3, r3
 80049de:	029b      	lsls	r3, r3, #10
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	4313      	orrs	r3, r2
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f2:	801a      	strh	r2, [r3, #0]
 80049f4:	e044      	b.n	8004a80 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80049f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10a      	bne.n	8004a14 <HAL_PCD_EP_DB_Transmit+0x350>
 80049fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a10:	801a      	strh	r2, [r3, #0]
 8004a12:	e035      	b.n	8004a80 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <HAL_PCD_EP_DB_Transmit+0x36a>
 8004a28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	029b      	lsls	r3, r3, #10
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a42:	801a      	strh	r2, [r3, #0]
 8004a44:	e01c      	b.n	8004a80 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	785b      	ldrb	r3, [r3, #1]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d118      	bne.n	8004a80 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	461a      	mov	r2, r3
 8004a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a62:	4413      	add	r3, r2
 8004a64:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	011a      	lsls	r2, r3, #4
 8004a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a6e:	4413      	add	r3, r2
 8004a70:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a7e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6818      	ldr	r0, [r3, #0]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	6959      	ldr	r1, [r3, #20]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	891a      	ldrh	r2, [r3, #8]
 8004a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	f004 f88e 	bl	8008bb2 <USB_WritePMA>
 8004a96:	e1e2      	b.n	8004e5e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	4413      	add	r3, r2
 8004aac:	3306      	adds	r3, #6
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	6812      	ldr	r2, [r2, #0]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ac0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	699a      	ldr	r2, [r3, #24]
 8004ac8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d307      	bcc.n	8004ae0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	699a      	ldr	r2, [r3, #24]
 8004ad4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ad8:	1ad2      	subs	r2, r2, r3
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	619a      	str	r2, [r3, #24]
 8004ade:	e002      	b.n	8004ae6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f040 80c0 	bne.w	8004c70 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	785b      	ldrb	r3, [r3, #1]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d126      	bne.n	8004b46 <HAL_PCD_EP_DB_Transmit+0x482>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	461a      	mov	r2, r3
 8004b0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b0c:	4413      	add	r3, r2
 8004b0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	011a      	lsls	r2, r3, #4
 8004b16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b18:	4413      	add	r3, r2
 8004b1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b2e:	801a      	strh	r2, [r3, #0]
 8004b30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b42:	801a      	strh	r2, [r3, #0]
 8004b44:	e01a      	b.n	8004b7c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	785b      	ldrb	r3, [r3, #1]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d116      	bne.n	8004b7c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b62:	4413      	add	r3, r2
 8004b64:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	011a      	lsls	r2, r3, #4
 8004b6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b6e:	4413      	add	r3, r2
 8004b70:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b74:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b78:	2200      	movs	r2, #0
 8004b7a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	785b      	ldrb	r3, [r3, #1]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d12b      	bne.n	8004be2 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b9e:	4413      	add	r3, r2
 8004ba0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	011a      	lsls	r2, r3, #4
 8004ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004baa:	4413      	add	r3, r2
 8004bac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004bb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bc6:	801a      	strh	r2, [r3, #0]
 8004bc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bde:	801a      	strh	r2, [r3, #0]
 8004be0:	e017      	b.n	8004c12 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	785b      	ldrb	r3, [r3, #1]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d113      	bne.n	8004c12 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bf8:	4413      	add	r3, r2
 8004bfa:	677b      	str	r3, [r7, #116]	@ 0x74
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	011a      	lsls	r2, r3, #4
 8004c02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c04:	4413      	add	r3, r2
 8004c06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c0e:	2200      	movs	r2, #0
 8004c10:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	4619      	mov	r1, r3
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f005 fe10 	bl	800a83e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c1e:	88fb      	ldrh	r3, [r7, #6]
 8004c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f040 811a 	bne.w	8004e5e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c44:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	441a      	add	r2, r3
 8004c56:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004c5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	8013      	strh	r3, [r2, #0]
 8004c6e:	e0f6      	b.n	8004e5e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c70:	88fb      	ldrh	r3, [r7, #6]
 8004c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d121      	bne.n	8004cbe <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c94:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	441a      	add	r2, r3
 8004ca6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004caa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	f040 80ca 	bne.w	8004e5e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	695a      	ldr	r2, [r3, #20]
 8004cce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cd2:	441a      	add	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	69da      	ldr	r2, [r3, #28]
 8004cdc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ce0:	441a      	add	r2, r3
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	6a1a      	ldr	r2, [r3, #32]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d30b      	bcc.n	8004d0a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	6a1a      	ldr	r2, [r3, #32]
 8004cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d02:	1ad2      	subs	r2, r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	621a      	str	r2, [r3, #32]
 8004d08:	e017      	b.n	8004d3a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d108      	bne.n	8004d24 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004d12:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004d22:	e00a      	b.n	8004d3a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d165      	bne.n	8004e14 <HAL_PCD_EP_DB_Transmit+0x750>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d5c:	4413      	add	r3, r2
 8004d5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	011a      	lsls	r2, r3, #4
 8004d66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d68:	4413      	add	r3, r2
 8004d6a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d7e:	801a      	strh	r2, [r3, #0]
 8004d80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d84:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d86:	d91d      	bls.n	8004dc4 <HAL_PCD_EP_DB_Transmit+0x700>
 8004d88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d94:	f003 031f 	and.w	r3, r3, #31
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004d9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004da2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	029b      	lsls	r3, r3, #10
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	4313      	orrs	r3, r2
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dc0:	801a      	strh	r2, [r3, #0]
 8004dc2:	e041      	b.n	8004e48 <HAL_PCD_EP_DB_Transmit+0x784>
 8004dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10a      	bne.n	8004de2 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004dcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dde:	801a      	strh	r2, [r3, #0]
 8004de0:	e032      	b.n	8004e48 <HAL_PCD_EP_DB_Transmit+0x784>
 8004de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004de6:	085b      	lsrs	r3, r3, #1
 8004de8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_PCD_EP_DB_Transmit+0x738>
 8004df6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004df8:	3301      	adds	r3, #1
 8004dfa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	029b      	lsls	r3, r3, #10
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e10:	801a      	strh	r2, [r3, #0]
 8004e12:	e019      	b.n	8004e48 <HAL_PCD_EP_DB_Transmit+0x784>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	785b      	ldrb	r3, [r3, #1]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d115      	bne.n	8004e48 <HAL_PCD_EP_DB_Transmit+0x784>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e2a:	4413      	add	r3, r2
 8004e2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	011a      	lsls	r2, r3, #4
 8004e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e36:	4413      	add	r3, r2
 8004e38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e46:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	6959      	ldr	r1, [r3, #20]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	895a      	ldrh	r2, [r3, #10]
 8004e54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f003 feaa 	bl	8008bb2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e78:	82bb      	strh	r3, [r7, #20]
 8004e7a:	8abb      	ldrh	r3, [r7, #20]
 8004e7c:	f083 0310 	eor.w	r3, r3, #16
 8004e80:	82bb      	strh	r3, [r7, #20]
 8004e82:	8abb      	ldrh	r3, [r7, #20]
 8004e84:	f083 0320 	eor.w	r3, r3, #32
 8004e88:	82bb      	strh	r3, [r7, #20]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	441a      	add	r2, r3
 8004e98:	8abb      	ldrh	r3, [r7, #20]
 8004e9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3790      	adds	r7, #144	@ 0x90
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	817b      	strh	r3, [r7, #10]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004eca:	897b      	ldrh	r3, [r7, #10]
 8004ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00b      	beq.n	8004eee <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ed6:	897b      	ldrh	r3, [r7, #10]
 8004ed8:	f003 0207 	and.w	r2, r3, #7
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	3310      	adds	r3, #16
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4413      	add	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	e009      	b.n	8004f02 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004eee:	897a      	ldrh	r2, [r7, #10]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f02:	893b      	ldrh	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d107      	bne.n	8004f18 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	80da      	strh	r2, [r3, #6]
 8004f16:	e00b      	b.n	8004f30 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	0c1b      	lsrs	r3, r3, #16
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr

08004f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e272      	b.n	8005434 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 8087 	beq.w	800506a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f5c:	4b92      	ldr	r3, [pc, #584]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f003 030c 	and.w	r3, r3, #12
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d00c      	beq.n	8004f82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f68:	4b8f      	ldr	r3, [pc, #572]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f003 030c 	and.w	r3, r3, #12
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d112      	bne.n	8004f9a <HAL_RCC_OscConfig+0x5e>
 8004f74:	4b8c      	ldr	r3, [pc, #560]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f80:	d10b      	bne.n	8004f9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f82:	4b89      	ldr	r3, [pc, #548]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d06c      	beq.n	8005068 <HAL_RCC_OscConfig+0x12c>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d168      	bne.n	8005068 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e24c      	b.n	8005434 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa2:	d106      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x76>
 8004fa4:	4b80      	ldr	r3, [pc, #512]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a7f      	ldr	r2, [pc, #508]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	e02e      	b.n	8005010 <HAL_RCC_OscConfig+0xd4>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x98>
 8004fba:	4b7b      	ldr	r3, [pc, #492]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a7a      	ldr	r2, [pc, #488]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004fc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	4b78      	ldr	r3, [pc, #480]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a77      	ldr	r2, [pc, #476]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004fcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	e01d      	b.n	8005010 <HAL_RCC_OscConfig+0xd4>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fdc:	d10c      	bne.n	8004ff8 <HAL_RCC_OscConfig+0xbc>
 8004fde:	4b72      	ldr	r3, [pc, #456]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a71      	ldr	r2, [pc, #452]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	4b6f      	ldr	r3, [pc, #444]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a6e      	ldr	r2, [pc, #440]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	e00b      	b.n	8005010 <HAL_RCC_OscConfig+0xd4>
 8004ff8:	4b6b      	ldr	r3, [pc, #428]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a6a      	ldr	r2, [pc, #424]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	4b68      	ldr	r3, [pc, #416]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a67      	ldr	r2, [pc, #412]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 800500a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800500e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d013      	beq.n	8005040 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005018:	f7fd fefc 	bl	8002e14 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005020:	f7fd fef8 	bl	8002e14 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b64      	cmp	r3, #100	@ 0x64
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e200      	b.n	8005434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005032:	4b5d      	ldr	r3, [pc, #372]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0xe4>
 800503e:	e014      	b.n	800506a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005040:	f7fd fee8 	bl	8002e14 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005048:	f7fd fee4 	bl	8002e14 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	@ 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e1ec      	b.n	8005434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800505a:	4b53      	ldr	r3, [pc, #332]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x10c>
 8005066:	e000      	b.n	800506a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d063      	beq.n	800513e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005076:	4b4c      	ldr	r3, [pc, #304]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f003 030c 	and.w	r3, r3, #12
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00b      	beq.n	800509a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005082:	4b49      	ldr	r3, [pc, #292]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f003 030c 	and.w	r3, r3, #12
 800508a:	2b08      	cmp	r3, #8
 800508c:	d11c      	bne.n	80050c8 <HAL_RCC_OscConfig+0x18c>
 800508e:	4b46      	ldr	r3, [pc, #280]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d116      	bne.n	80050c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800509a:	4b43      	ldr	r3, [pc, #268]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <HAL_RCC_OscConfig+0x176>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d001      	beq.n	80050b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e1c0      	b.n	8005434 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b2:	4b3d      	ldr	r3, [pc, #244]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4939      	ldr	r1, [pc, #228]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c6:	e03a      	b.n	800513e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d020      	beq.n	8005112 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050d0:	4b36      	ldr	r3, [pc, #216]	@ (80051ac <HAL_RCC_OscConfig+0x270>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d6:	f7fd fe9d 	bl	8002e14 <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050de:	f7fd fe99 	bl	8002e14 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e1a1      	b.n	8005434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f0:	4b2d      	ldr	r3, [pc, #180]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0f0      	beq.n	80050de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050fc:	4b2a      	ldr	r3, [pc, #168]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	4927      	ldr	r1, [pc, #156]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 800510c:	4313      	orrs	r3, r2
 800510e:	600b      	str	r3, [r1, #0]
 8005110:	e015      	b.n	800513e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005112:	4b26      	ldr	r3, [pc, #152]	@ (80051ac <HAL_RCC_OscConfig+0x270>)
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005118:	f7fd fe7c 	bl	8002e14 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005120:	f7fd fe78 	bl	8002e14 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e180      	b.n	8005434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005132:	4b1d      	ldr	r3, [pc, #116]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d03a      	beq.n	80051c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d019      	beq.n	8005186 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005152:	4b17      	ldr	r3, [pc, #92]	@ (80051b0 <HAL_RCC_OscConfig+0x274>)
 8005154:	2201      	movs	r2, #1
 8005156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005158:	f7fd fe5c 	bl	8002e14 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005160:	f7fd fe58 	bl	8002e14 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e160      	b.n	8005434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005172:	4b0d      	ldr	r3, [pc, #52]	@ (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8005174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800517e:	2001      	movs	r0, #1
 8005180:	f000 face 	bl	8005720 <RCC_Delay>
 8005184:	e01c      	b.n	80051c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005186:	4b0a      	ldr	r3, [pc, #40]	@ (80051b0 <HAL_RCC_OscConfig+0x274>)
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800518c:	f7fd fe42 	bl	8002e14 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005192:	e00f      	b.n	80051b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005194:	f7fd fe3e 	bl	8002e14 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d908      	bls.n	80051b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e146      	b.n	8005434 <HAL_RCC_OscConfig+0x4f8>
 80051a6:	bf00      	nop
 80051a8:	40021000 	.word	0x40021000
 80051ac:	42420000 	.word	0x42420000
 80051b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b4:	4b92      	ldr	r3, [pc, #584]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 80051b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e9      	bne.n	8005194 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80a6 	beq.w	800531a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ce:	2300      	movs	r3, #0
 80051d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051d2:	4b8b      	ldr	r3, [pc, #556]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10d      	bne.n	80051fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051de:	4b88      	ldr	r3, [pc, #544]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	4a87      	ldr	r2, [pc, #540]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 80051e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051e8:	61d3      	str	r3, [r2, #28]
 80051ea:	4b85      	ldr	r3, [pc, #532]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051f6:	2301      	movs	r3, #1
 80051f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051fa:	4b82      	ldr	r3, [pc, #520]	@ (8005404 <HAL_RCC_OscConfig+0x4c8>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d118      	bne.n	8005238 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005206:	4b7f      	ldr	r3, [pc, #508]	@ (8005404 <HAL_RCC_OscConfig+0x4c8>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a7e      	ldr	r2, [pc, #504]	@ (8005404 <HAL_RCC_OscConfig+0x4c8>)
 800520c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005212:	f7fd fdff 	bl	8002e14 <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800521a:	f7fd fdfb 	bl	8002e14 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b64      	cmp	r3, #100	@ 0x64
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e103      	b.n	8005434 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522c:	4b75      	ldr	r3, [pc, #468]	@ (8005404 <HAL_RCC_OscConfig+0x4c8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0f0      	beq.n	800521a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d106      	bne.n	800524e <HAL_RCC_OscConfig+0x312>
 8005240:	4b6f      	ldr	r3, [pc, #444]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	4a6e      	ldr	r2, [pc, #440]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 8005246:	f043 0301 	orr.w	r3, r3, #1
 800524a:	6213      	str	r3, [r2, #32]
 800524c:	e02d      	b.n	80052aa <HAL_RCC_OscConfig+0x36e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10c      	bne.n	8005270 <HAL_RCC_OscConfig+0x334>
 8005256:	4b6a      	ldr	r3, [pc, #424]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	4a69      	ldr	r2, [pc, #420]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	6213      	str	r3, [r2, #32]
 8005262:	4b67      	ldr	r3, [pc, #412]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	4a66      	ldr	r2, [pc, #408]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 8005268:	f023 0304 	bic.w	r3, r3, #4
 800526c:	6213      	str	r3, [r2, #32]
 800526e:	e01c      	b.n	80052aa <HAL_RCC_OscConfig+0x36e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	2b05      	cmp	r3, #5
 8005276:	d10c      	bne.n	8005292 <HAL_RCC_OscConfig+0x356>
 8005278:	4b61      	ldr	r3, [pc, #388]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	4a60      	ldr	r2, [pc, #384]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 800527e:	f043 0304 	orr.w	r3, r3, #4
 8005282:	6213      	str	r3, [r2, #32]
 8005284:	4b5e      	ldr	r3, [pc, #376]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	4a5d      	ldr	r2, [pc, #372]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 800528a:	f043 0301 	orr.w	r3, r3, #1
 800528e:	6213      	str	r3, [r2, #32]
 8005290:	e00b      	b.n	80052aa <HAL_RCC_OscConfig+0x36e>
 8005292:	4b5b      	ldr	r3, [pc, #364]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	4a5a      	ldr	r2, [pc, #360]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 8005298:	f023 0301 	bic.w	r3, r3, #1
 800529c:	6213      	str	r3, [r2, #32]
 800529e:	4b58      	ldr	r3, [pc, #352]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	4a57      	ldr	r2, [pc, #348]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 80052a4:	f023 0304 	bic.w	r3, r3, #4
 80052a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d015      	beq.n	80052de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052b2:	f7fd fdaf 	bl	8002e14 <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b8:	e00a      	b.n	80052d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ba:	f7fd fdab 	bl	8002e14 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e0b1      	b.n	8005434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d0:	4b4b      	ldr	r3, [pc, #300]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0ee      	beq.n	80052ba <HAL_RCC_OscConfig+0x37e>
 80052dc:	e014      	b.n	8005308 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052de:	f7fd fd99 	bl	8002e14 <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052e4:	e00a      	b.n	80052fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052e6:	f7fd fd95 	bl	8002e14 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e09b      	b.n	8005434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052fc:	4b40      	ldr	r3, [pc, #256]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1ee      	bne.n	80052e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005308:	7dfb      	ldrb	r3, [r7, #23]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d105      	bne.n	800531a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800530e:	4b3c      	ldr	r3, [pc, #240]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	4a3b      	ldr	r2, [pc, #236]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 8005314:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005318:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 8087 	beq.w	8005432 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005324:	4b36      	ldr	r3, [pc, #216]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f003 030c 	and.w	r3, r3, #12
 800532c:	2b08      	cmp	r3, #8
 800532e:	d061      	beq.n	80053f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	2b02      	cmp	r3, #2
 8005336:	d146      	bne.n	80053c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005338:	4b33      	ldr	r3, [pc, #204]	@ (8005408 <HAL_RCC_OscConfig+0x4cc>)
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533e:	f7fd fd69 	bl	8002e14 <HAL_GetTick>
 8005342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005344:	e008      	b.n	8005358 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005346:	f7fd fd65 	bl	8002e14 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e06d      	b.n	8005434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005358:	4b29      	ldr	r3, [pc, #164]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f0      	bne.n	8005346 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800536c:	d108      	bne.n	8005380 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800536e:	4b24      	ldr	r3, [pc, #144]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	4921      	ldr	r1, [pc, #132]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 800537c:	4313      	orrs	r3, r2
 800537e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005380:	4b1f      	ldr	r3, [pc, #124]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a19      	ldr	r1, [r3, #32]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005390:	430b      	orrs	r3, r1
 8005392:	491b      	ldr	r1, [pc, #108]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 8005394:	4313      	orrs	r3, r2
 8005396:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005398:	4b1b      	ldr	r3, [pc, #108]	@ (8005408 <HAL_RCC_OscConfig+0x4cc>)
 800539a:	2201      	movs	r2, #1
 800539c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539e:	f7fd fd39 	bl	8002e14 <HAL_GetTick>
 80053a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053a4:	e008      	b.n	80053b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a6:	f7fd fd35 	bl	8002e14 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e03d      	b.n	8005434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053b8:	4b11      	ldr	r3, [pc, #68]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0f0      	beq.n	80053a6 <HAL_RCC_OscConfig+0x46a>
 80053c4:	e035      	b.n	8005432 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c6:	4b10      	ldr	r3, [pc, #64]	@ (8005408 <HAL_RCC_OscConfig+0x4cc>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053cc:	f7fd fd22 	bl	8002e14 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d4:	f7fd fd1e 	bl	8002e14 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e026      	b.n	8005434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053e6:	4b06      	ldr	r3, [pc, #24]	@ (8005400 <HAL_RCC_OscConfig+0x4c4>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1f0      	bne.n	80053d4 <HAL_RCC_OscConfig+0x498>
 80053f2:	e01e      	b.n	8005432 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d107      	bne.n	800540c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e019      	b.n	8005434 <HAL_RCC_OscConfig+0x4f8>
 8005400:	40021000 	.word	0x40021000
 8005404:	40007000 	.word	0x40007000
 8005408:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800540c:	4b0b      	ldr	r3, [pc, #44]	@ (800543c <HAL_RCC_OscConfig+0x500>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	429a      	cmp	r2, r3
 800541e:	d106      	bne.n	800542e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542a:	429a      	cmp	r2, r3
 800542c:	d001      	beq.n	8005432 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e000      	b.n	8005434 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40021000 	.word	0x40021000

08005440 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e0d0      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005454:	4b6a      	ldr	r3, [pc, #424]	@ (8005600 <HAL_RCC_ClockConfig+0x1c0>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d910      	bls.n	8005484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005462:	4b67      	ldr	r3, [pc, #412]	@ (8005600 <HAL_RCC_ClockConfig+0x1c0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f023 0207 	bic.w	r2, r3, #7
 800546a:	4965      	ldr	r1, [pc, #404]	@ (8005600 <HAL_RCC_ClockConfig+0x1c0>)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	4313      	orrs	r3, r2
 8005470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005472:	4b63      	ldr	r3, [pc, #396]	@ (8005600 <HAL_RCC_ClockConfig+0x1c0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	429a      	cmp	r2, r3
 800547e:	d001      	beq.n	8005484 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e0b8      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d020      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800549c:	4b59      	ldr	r3, [pc, #356]	@ (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	4a58      	ldr	r2, [pc, #352]	@ (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 80054a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80054a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d005      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054b4:	4b53      	ldr	r3, [pc, #332]	@ (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	4a52      	ldr	r2, [pc, #328]	@ (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 80054ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80054be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054c0:	4b50      	ldr	r3, [pc, #320]	@ (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	494d      	ldr	r1, [pc, #308]	@ (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d040      	beq.n	8005560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d107      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e6:	4b47      	ldr	r3, [pc, #284]	@ (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d115      	bne.n	800551e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e07f      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d107      	bne.n	800550e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054fe:	4b41      	ldr	r3, [pc, #260]	@ (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e073      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800550e:	4b3d      	ldr	r3, [pc, #244]	@ (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e06b      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800551e:	4b39      	ldr	r3, [pc, #228]	@ (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f023 0203 	bic.w	r2, r3, #3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	4936      	ldr	r1, [pc, #216]	@ (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 800552c:	4313      	orrs	r3, r2
 800552e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005530:	f7fd fc70 	bl	8002e14 <HAL_GetTick>
 8005534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005536:	e00a      	b.n	800554e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005538:	f7fd fc6c 	bl	8002e14 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005546:	4293      	cmp	r3, r2
 8005548:	d901      	bls.n	800554e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e053      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800554e:	4b2d      	ldr	r3, [pc, #180]	@ (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f003 020c 	and.w	r2, r3, #12
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	429a      	cmp	r2, r3
 800555e:	d1eb      	bne.n	8005538 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005560:	4b27      	ldr	r3, [pc, #156]	@ (8005600 <HAL_RCC_ClockConfig+0x1c0>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d210      	bcs.n	8005590 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800556e:	4b24      	ldr	r3, [pc, #144]	@ (8005600 <HAL_RCC_ClockConfig+0x1c0>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f023 0207 	bic.w	r2, r3, #7
 8005576:	4922      	ldr	r1, [pc, #136]	@ (8005600 <HAL_RCC_ClockConfig+0x1c0>)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	4313      	orrs	r3, r2
 800557c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800557e:	4b20      	ldr	r3, [pc, #128]	@ (8005600 <HAL_RCC_ClockConfig+0x1c0>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d001      	beq.n	8005590 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e032      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d008      	beq.n	80055ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800559c:	4b19      	ldr	r3, [pc, #100]	@ (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4916      	ldr	r1, [pc, #88]	@ (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d009      	beq.n	80055ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055ba:	4b12      	ldr	r3, [pc, #72]	@ (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	490e      	ldr	r1, [pc, #56]	@ (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055ce:	f000 f821 	bl	8005614 <HAL_RCC_GetSysClockFreq>
 80055d2:	4602      	mov	r2, r0
 80055d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	091b      	lsrs	r3, r3, #4
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	490a      	ldr	r1, [pc, #40]	@ (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 80055e0:	5ccb      	ldrb	r3, [r1, r3]
 80055e2:	fa22 f303 	lsr.w	r3, r2, r3
 80055e6:	4a09      	ldr	r2, [pc, #36]	@ (800560c <HAL_RCC_ClockConfig+0x1cc>)
 80055e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055ea:	4b09      	ldr	r3, [pc, #36]	@ (8005610 <HAL_RCC_ClockConfig+0x1d0>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fd fbce 	bl	8002d90 <HAL_InitTick>

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40022000 	.word	0x40022000
 8005604:	40021000 	.word	0x40021000
 8005608:	0800b78c 	.word	0x0800b78c
 800560c:	20000018 	.word	0x20000018
 8005610:	2000001c 	.word	0x2000001c

08005614 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	2300      	movs	r3, #0
 8005620:	60bb      	str	r3, [r7, #8]
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	2300      	movs	r3, #0
 8005628:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800562e:	4b1e      	ldr	r3, [pc, #120]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f003 030c 	and.w	r3, r3, #12
 800563a:	2b04      	cmp	r3, #4
 800563c:	d002      	beq.n	8005644 <HAL_RCC_GetSysClockFreq+0x30>
 800563e:	2b08      	cmp	r3, #8
 8005640:	d003      	beq.n	800564a <HAL_RCC_GetSysClockFreq+0x36>
 8005642:	e027      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005644:	4b19      	ldr	r3, [pc, #100]	@ (80056ac <HAL_RCC_GetSysClockFreq+0x98>)
 8005646:	613b      	str	r3, [r7, #16]
      break;
 8005648:	e027      	b.n	800569a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	0c9b      	lsrs	r3, r3, #18
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	4a17      	ldr	r2, [pc, #92]	@ (80056b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005654:	5cd3      	ldrb	r3, [r2, r3]
 8005656:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d010      	beq.n	8005684 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005662:	4b11      	ldr	r3, [pc, #68]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	0c5b      	lsrs	r3, r3, #17
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	4a11      	ldr	r2, [pc, #68]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800566e:	5cd3      	ldrb	r3, [r2, r3]
 8005670:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a0d      	ldr	r2, [pc, #52]	@ (80056ac <HAL_RCC_GetSysClockFreq+0x98>)
 8005676:	fb03 f202 	mul.w	r2, r3, r2
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	e004      	b.n	800568e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a0c      	ldr	r2, [pc, #48]	@ (80056b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005688:	fb02 f303 	mul.w	r3, r2, r3
 800568c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	613b      	str	r3, [r7, #16]
      break;
 8005692:	e002      	b.n	800569a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005694:	4b05      	ldr	r3, [pc, #20]	@ (80056ac <HAL_RCC_GetSysClockFreq+0x98>)
 8005696:	613b      	str	r3, [r7, #16]
      break;
 8005698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800569a:	693b      	ldr	r3, [r7, #16]
}
 800569c:	4618      	mov	r0, r3
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	40021000 	.word	0x40021000
 80056ac:	007a1200 	.word	0x007a1200
 80056b0:	0800b7a4 	.word	0x0800b7a4
 80056b4:	0800b7b4 	.word	0x0800b7b4
 80056b8:	003d0900 	.word	0x003d0900

080056bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056c0:	4b02      	ldr	r3, [pc, #8]	@ (80056cc <HAL_RCC_GetHCLKFreq+0x10>)
 80056c2:	681b      	ldr	r3, [r3, #0]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bc80      	pop	{r7}
 80056ca:	4770      	bx	lr
 80056cc:	20000018 	.word	0x20000018

080056d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056d4:	f7ff fff2 	bl	80056bc <HAL_RCC_GetHCLKFreq>
 80056d8:	4602      	mov	r2, r0
 80056da:	4b05      	ldr	r3, [pc, #20]	@ (80056f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	0a1b      	lsrs	r3, r3, #8
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	4903      	ldr	r1, [pc, #12]	@ (80056f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056e6:	5ccb      	ldrb	r3, [r1, r3]
 80056e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40021000 	.word	0x40021000
 80056f4:	0800b79c 	.word	0x0800b79c

080056f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056fc:	f7ff ffde 	bl	80056bc <HAL_RCC_GetHCLKFreq>
 8005700:	4602      	mov	r2, r0
 8005702:	4b05      	ldr	r3, [pc, #20]	@ (8005718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	0adb      	lsrs	r3, r3, #11
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	4903      	ldr	r1, [pc, #12]	@ (800571c <HAL_RCC_GetPCLK2Freq+0x24>)
 800570e:	5ccb      	ldrb	r3, [r1, r3]
 8005710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005714:	4618      	mov	r0, r3
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40021000 	.word	0x40021000
 800571c:	0800b79c 	.word	0x0800b79c

08005720 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005728:	4b0a      	ldr	r3, [pc, #40]	@ (8005754 <RCC_Delay+0x34>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a0a      	ldr	r2, [pc, #40]	@ (8005758 <RCC_Delay+0x38>)
 800572e:	fba2 2303 	umull	r2, r3, r2, r3
 8005732:	0a5b      	lsrs	r3, r3, #9
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	fb02 f303 	mul.w	r3, r2, r3
 800573a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800573c:	bf00      	nop
  }
  while (Delay --);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	1e5a      	subs	r2, r3, #1
 8005742:	60fa      	str	r2, [r7, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1f9      	bne.n	800573c <RCC_Delay+0x1c>
}
 8005748:	bf00      	nop
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr
 8005754:	20000018 	.word	0x20000018
 8005758:	10624dd3 	.word	0x10624dd3

0800575c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	613b      	str	r3, [r7, #16]
 8005768:	2300      	movs	r3, #0
 800576a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d07d      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005778:	2300      	movs	r3, #0
 800577a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800577c:	4b4f      	ldr	r3, [pc, #316]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10d      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005788:	4b4c      	ldr	r3, [pc, #304]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	4a4b      	ldr	r2, [pc, #300]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800578e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005792:	61d3      	str	r3, [r2, #28]
 8005794:	4b49      	ldr	r3, [pc, #292]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057a0:	2301      	movs	r3, #1
 80057a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a4:	4b46      	ldr	r3, [pc, #280]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d118      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057b0:	4b43      	ldr	r3, [pc, #268]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a42      	ldr	r2, [pc, #264]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057bc:	f7fd fb2a 	bl	8002e14 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c2:	e008      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c4:	f7fd fb26 	bl	8002e14 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b64      	cmp	r3, #100	@ 0x64
 80057d0:	d901      	bls.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e06d      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d6:	4b3a      	ldr	r3, [pc, #232]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0f0      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057e2:	4b36      	ldr	r3, [pc, #216]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d02e      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d027      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005800:	4b2e      	ldr	r3, [pc, #184]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005808:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800580a:	4b2e      	ldr	r3, [pc, #184]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800580c:	2201      	movs	r2, #1
 800580e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005810:	4b2c      	ldr	r3, [pc, #176]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005816:	4a29      	ldr	r2, [pc, #164]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d014      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005826:	f7fd faf5 	bl	8002e14 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800582c:	e00a      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582e:	f7fd faf1 	bl	8002e14 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800583c:	4293      	cmp	r3, r2
 800583e:	d901      	bls.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e036      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005844:	4b1d      	ldr	r3, [pc, #116]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0ee      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005850:	4b1a      	ldr	r3, [pc, #104]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	4917      	ldr	r1, [pc, #92]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800585e:	4313      	orrs	r3, r2
 8005860:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005862:	7dfb      	ldrb	r3, [r7, #23]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d105      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005868:	4b14      	ldr	r3, [pc, #80]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	4a13      	ldr	r2, [pc, #76]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800586e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005872:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d008      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005880:	4b0e      	ldr	r3, [pc, #56]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	490b      	ldr	r1, [pc, #44]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800588e:	4313      	orrs	r3, r2
 8005890:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0310 	and.w	r3, r3, #16
 800589a:	2b00      	cmp	r3, #0
 800589c:	d008      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800589e:	4b07      	ldr	r3, [pc, #28]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	4904      	ldr	r1, [pc, #16]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	40021000 	.word	0x40021000
 80058c0:	40007000 	.word	0x40007000
 80058c4:	42420440 	.word	0x42420440

080058c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e076      	b.n	80059c8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d108      	bne.n	80058f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058ea:	d009      	beq.n	8005900 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	61da      	str	r2, [r3, #28]
 80058f2:	e005      	b.n	8005900 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d106      	bne.n	8005920 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fd f8ec 	bl	8002af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005936:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005952:	431a      	orrs	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005984:	ea42 0103 	orr.w	r1, r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	0c1a      	lsrs	r2, r3, #16
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f002 0204 	and.w	r2, r2, #4
 80059a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	69da      	ldr	r2, [r3, #28]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	4613      	mov	r3, r2
 80059de:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059e0:	f7fd fa18 	bl	8002e14 <HAL_GetTick>
 80059e4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80059e6:	88fb      	ldrh	r3, [r7, #6]
 80059e8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d001      	beq.n	80059fa <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80059f6:	2302      	movs	r3, #2
 80059f8:	e12a      	b.n	8005c50 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_SPI_Transmit+0x36>
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e122      	b.n	8005c50 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_SPI_Transmit+0x48>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e11b      	b.n	8005c50 <HAL_SPI_Transmit+0x280>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2203      	movs	r2, #3
 8005a24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	88fa      	ldrh	r2, [r7, #6]
 8005a38:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	88fa      	ldrh	r2, [r7, #6]
 8005a3e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a66:	d10f      	bne.n	8005a88 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a92:	2b40      	cmp	r3, #64	@ 0x40
 8005a94:	d007      	beq.n	8005aa6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005aa4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aae:	d152      	bne.n	8005b56 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <HAL_SPI_Transmit+0xee>
 8005ab8:	8b7b      	ldrh	r3, [r7, #26]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d145      	bne.n	8005b4a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac2:	881a      	ldrh	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ace:	1c9a      	adds	r2, r3, #2
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ae2:	e032      	b.n	8005b4a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d112      	bne.n	8005b18 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af6:	881a      	ldrh	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b02:	1c9a      	adds	r2, r3, #2
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b16:	e018      	b.n	8005b4a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b18:	f7fd f97c 	bl	8002e14 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d803      	bhi.n	8005b30 <HAL_SPI_Transmit+0x160>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2e:	d102      	bne.n	8005b36 <HAL_SPI_Transmit+0x166>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d109      	bne.n	8005b4a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e082      	b.n	8005c50 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1c7      	bne.n	8005ae4 <HAL_SPI_Transmit+0x114>
 8005b54:	e053      	b.n	8005bfe <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_SPI_Transmit+0x194>
 8005b5e:	8b7b      	ldrh	r3, [r7, #26]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d147      	bne.n	8005bf4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	330c      	adds	r3, #12
 8005b6e:	7812      	ldrb	r2, [r2, #0]
 8005b70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b8a:	e033      	b.n	8005bf4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d113      	bne.n	8005bc2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	7812      	ldrb	r2, [r2, #0]
 8005ba6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005bc0:	e018      	b.n	8005bf4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bc2:	f7fd f927 	bl	8002e14 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d803      	bhi.n	8005bda <HAL_SPI_Transmit+0x20a>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd8:	d102      	bne.n	8005be0 <HAL_SPI_Transmit+0x210>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d109      	bne.n	8005bf4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e02d      	b.n	8005c50 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1c6      	bne.n	8005b8c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 fbc4 	bl	8006390 <SPI_EndRxTxTransaction>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2220      	movs	r2, #32
 8005c12:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e000      	b.n	8005c50 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
  }
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3720      	adds	r7, #32
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b088      	sub	sp, #32
 8005c5c:	af02      	add	r7, sp, #8
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	603b      	str	r3, [r7, #0]
 8005c64:	4613      	mov	r3, r2
 8005c66:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d001      	beq.n	8005c78 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005c74:	2302      	movs	r3, #2
 8005c76:	e104      	b.n	8005e82 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c80:	d112      	bne.n	8005ca8 <HAL_SPI_Receive+0x50>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10e      	bne.n	8005ca8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2204      	movs	r2, #4
 8005c8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c92:	88fa      	ldrh	r2, [r7, #6]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 f8f3 	bl	8005e8a <HAL_SPI_TransmitReceive>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	e0ec      	b.n	8005e82 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ca8:	f7fd f8b4 	bl	8002e14 <HAL_GetTick>
 8005cac:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <HAL_SPI_Receive+0x62>
 8005cb4:	88fb      	ldrh	r3, [r7, #6]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e0e1      	b.n	8005e82 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_SPI_Receive+0x74>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e0da      	b.n	8005e82 <HAL_SPI_Receive+0x22a>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	88fa      	ldrh	r2, [r7, #6]
 8005cec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	88fa      	ldrh	r2, [r7, #6]
 8005cf2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d1a:	d10f      	bne.n	8005d3c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d3a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d46:	2b40      	cmp	r3, #64	@ 0x40
 8005d48:	d007      	beq.n	8005d5a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d58:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d170      	bne.n	8005e44 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d62:	e035      	b.n	8005dd0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d115      	bne.n	8005d9e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f103 020c 	add.w	r2, r3, #12
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7e:	7812      	ldrb	r2, [r2, #0]
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d9c:	e018      	b.n	8005dd0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d9e:	f7fd f839 	bl	8002e14 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d803      	bhi.n	8005db6 <HAL_SPI_Receive+0x15e>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db4:	d102      	bne.n	8005dbc <HAL_SPI_Receive+0x164>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d109      	bne.n	8005dd0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e058      	b.n	8005e82 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1c4      	bne.n	8005d64 <HAL_SPI_Receive+0x10c>
 8005dda:	e038      	b.n	8005e4e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d113      	bne.n	8005e12 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df4:	b292      	uxth	r2, r2
 8005df6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfc:	1c9a      	adds	r2, r3, #2
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e10:	e018      	b.n	8005e44 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e12:	f7fc ffff 	bl	8002e14 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d803      	bhi.n	8005e2a <HAL_SPI_Receive+0x1d2>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e28:	d102      	bne.n	8005e30 <HAL_SPI_Receive+0x1d8>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d109      	bne.n	8005e44 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e01e      	b.n	8005e82 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1c6      	bne.n	8005ddc <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 fa4a 	bl	80062ec <SPI_EndRxTransaction>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e000      	b.n	8005e82 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005e80:	2300      	movs	r3, #0
  }
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b08a      	sub	sp, #40	@ 0x28
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	607a      	str	r2, [r7, #4]
 8005e96:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e9c:	f7fc ffba 	bl	8002e14 <HAL_GetTick>
 8005ea0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ea8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005eb0:	887b      	ldrh	r3, [r7, #2]
 8005eb2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005eb4:	7ffb      	ldrb	r3, [r7, #31]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d00c      	beq.n	8005ed4 <HAL_SPI_TransmitReceive+0x4a>
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ec0:	d106      	bne.n	8005ed0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d102      	bne.n	8005ed0 <HAL_SPI_TransmitReceive+0x46>
 8005eca:	7ffb      	ldrb	r3, [r7, #31]
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d001      	beq.n	8005ed4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e17f      	b.n	80061d4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d005      	beq.n	8005ee6 <HAL_SPI_TransmitReceive+0x5c>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <HAL_SPI_TransmitReceive+0x5c>
 8005ee0:	887b      	ldrh	r3, [r7, #2]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e174      	b.n	80061d4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_SPI_TransmitReceive+0x6e>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e16d      	b.n	80061d4 <HAL_SPI_TransmitReceive+0x34a>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b04      	cmp	r3, #4
 8005f0a:	d003      	beq.n	8005f14 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2205      	movs	r2, #5
 8005f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	887a      	ldrh	r2, [r7, #2]
 8005f24:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	887a      	ldrh	r2, [r7, #2]
 8005f2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	887a      	ldrh	r2, [r7, #2]
 8005f36:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	887a      	ldrh	r2, [r7, #2]
 8005f3c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f54:	2b40      	cmp	r3, #64	@ 0x40
 8005f56:	d007      	beq.n	8005f68 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f70:	d17e      	bne.n	8006070 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <HAL_SPI_TransmitReceive+0xf6>
 8005f7a:	8afb      	ldrh	r3, [r7, #22]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d16c      	bne.n	800605a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f84:	881a      	ldrh	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f90:	1c9a      	adds	r2, r3, #2
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fa4:	e059      	b.n	800605a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d11b      	bne.n	8005fec <HAL_SPI_TransmitReceive+0x162>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d016      	beq.n	8005fec <HAL_SPI_TransmitReceive+0x162>
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d113      	bne.n	8005fec <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc8:	881a      	ldrh	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd4:	1c9a      	adds	r2, r3, #2
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d119      	bne.n	800602e <HAL_SPI_TransmitReceive+0x1a4>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	d014      	beq.n	800602e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600e:	b292      	uxth	r2, r2
 8006010:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006016:	1c9a      	adds	r2, r3, #2
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b01      	subs	r3, #1
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800602a:	2301      	movs	r3, #1
 800602c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800602e:	f7fc fef1 	bl	8002e14 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800603a:	429a      	cmp	r2, r3
 800603c:	d80d      	bhi.n	800605a <HAL_SPI_TransmitReceive+0x1d0>
 800603e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006044:	d009      	beq.n	800605a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e0bc      	b.n	80061d4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800605e:	b29b      	uxth	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1a0      	bne.n	8005fa6 <HAL_SPI_TransmitReceive+0x11c>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d19b      	bne.n	8005fa6 <HAL_SPI_TransmitReceive+0x11c>
 800606e:	e082      	b.n	8006176 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <HAL_SPI_TransmitReceive+0x1f4>
 8006078:	8afb      	ldrh	r3, [r7, #22]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d171      	bne.n	8006162 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	330c      	adds	r3, #12
 8006088:	7812      	ldrb	r2, [r2, #0]
 800608a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060a4:	e05d      	b.n	8006162 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d11c      	bne.n	80060ee <HAL_SPI_TransmitReceive+0x264>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d017      	beq.n	80060ee <HAL_SPI_TransmitReceive+0x264>
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d114      	bne.n	80060ee <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	330c      	adds	r3, #12
 80060ce:	7812      	ldrb	r2, [r2, #0]
 80060d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	3b01      	subs	r3, #1
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d119      	bne.n	8006130 <HAL_SPI_TransmitReceive+0x2a6>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d014      	beq.n	8006130 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800612c:	2301      	movs	r3, #1
 800612e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006130:	f7fc fe70 	bl	8002e14 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800613c:	429a      	cmp	r2, r3
 800613e:	d803      	bhi.n	8006148 <HAL_SPI_TransmitReceive+0x2be>
 8006140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006146:	d102      	bne.n	800614e <HAL_SPI_TransmitReceive+0x2c4>
 8006148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614a:	2b00      	cmp	r3, #0
 800614c:	d109      	bne.n	8006162 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e038      	b.n	80061d4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006166:	b29b      	uxth	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d19c      	bne.n	80060a6 <HAL_SPI_TransmitReceive+0x21c>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d197      	bne.n	80060a6 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006176:	6a3a      	ldr	r2, [r7, #32]
 8006178:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f908 	bl	8006390 <SPI_EndRxTxTransaction>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d008      	beq.n	8006198 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2220      	movs	r2, #32
 800618a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e01d      	b.n	80061d4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10a      	bne.n	80061b6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061a0:	2300      	movs	r3, #0
 80061a2:	613b      	str	r3, [r7, #16]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	613b      	str	r3, [r7, #16]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	613b      	str	r3, [r7, #16]
 80061b4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e000      	b.n	80061d4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80061d2:	2300      	movs	r3, #0
  }
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3728      	adds	r7, #40	@ 0x28
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	4613      	mov	r3, r2
 80061ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061ec:	f7fc fe12 	bl	8002e14 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f4:	1a9b      	subs	r3, r3, r2
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	4413      	add	r3, r2
 80061fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061fc:	f7fc fe0a 	bl	8002e14 <HAL_GetTick>
 8006200:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006202:	4b39      	ldr	r3, [pc, #228]	@ (80062e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	015b      	lsls	r3, r3, #5
 8006208:	0d1b      	lsrs	r3, r3, #20
 800620a:	69fa      	ldr	r2, [r7, #28]
 800620c:	fb02 f303 	mul.w	r3, r2, r3
 8006210:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006212:	e054      	b.n	80062be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621a:	d050      	beq.n	80062be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800621c:	f7fc fdfa 	bl	8002e14 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	69fa      	ldr	r2, [r7, #28]
 8006228:	429a      	cmp	r2, r3
 800622a:	d902      	bls.n	8006232 <SPI_WaitFlagStateUntilTimeout+0x56>
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d13d      	bne.n	80062ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006240:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800624a:	d111      	bne.n	8006270 <SPI_WaitFlagStateUntilTimeout+0x94>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006254:	d004      	beq.n	8006260 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800625e:	d107      	bne.n	8006270 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800626e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006278:	d10f      	bne.n	800629a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006298:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e017      	b.n	80062de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4013      	ands	r3, r2
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	bf0c      	ite	eq
 80062ce:	2301      	moveq	r3, #1
 80062d0:	2300      	movne	r3, #0
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	79fb      	ldrb	r3, [r7, #7]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d19b      	bne.n	8006214 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3720      	adds	r7, #32
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20000018 	.word	0x20000018

080062ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006300:	d111      	bne.n	8006326 <SPI_EndRxTransaction+0x3a>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800630a:	d004      	beq.n	8006316 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006314:	d107      	bne.n	8006326 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006324:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800632e:	d117      	bne.n	8006360 <SPI_EndRxTransaction+0x74>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006338:	d112      	bne.n	8006360 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2200      	movs	r2, #0
 8006342:	2101      	movs	r1, #1
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f7ff ff49 	bl	80061dc <SPI_WaitFlagStateUntilTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01a      	beq.n	8006386 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006354:	f043 0220 	orr.w	r2, r3, #32
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e013      	b.n	8006388 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2200      	movs	r2, #0
 8006368:	2180      	movs	r1, #128	@ 0x80
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f7ff ff36 	bl	80061dc <SPI_WaitFlagStateUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d007      	beq.n	8006386 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800637a:	f043 0220 	orr.w	r2, r3, #32
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e000      	b.n	8006388 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af02      	add	r7, sp, #8
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2201      	movs	r2, #1
 80063a4:	2102      	movs	r1, #2
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f7ff ff18 	bl	80061dc <SPI_WaitFlagStateUntilTimeout>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d007      	beq.n	80063c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b6:	f043 0220 	orr.w	r2, r3, #32
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e013      	b.n	80063ea <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2200      	movs	r2, #0
 80063ca:	2180      	movs	r1, #128	@ 0x80
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f7ff ff05 	bl	80061dc <SPI_WaitFlagStateUntilTimeout>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d007      	beq.n	80063e8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063dc:	f043 0220 	orr.w	r2, r3, #32
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e000      	b.n	80063ea <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b082      	sub	sp, #8
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e042      	b.n	800648a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d106      	bne.n	800641e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7fc fbb7 	bl	8002b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2224      	movs	r2, #36	@ 0x24
 8006422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68da      	ldr	r2, [r3, #12]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006434:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f82c 	bl	8006494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	691a      	ldr	r2, [r3, #16]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800644a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	695a      	ldr	r2, [r3, #20]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800645a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800646a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2220      	movs	r2, #32
 8006476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	431a      	orrs	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80064ce:	f023 030c 	bic.w	r3, r3, #12
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	6812      	ldr	r2, [r2, #0]
 80064d6:	68b9      	ldr	r1, [r7, #8]
 80064d8:	430b      	orrs	r3, r1
 80064da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699a      	ldr	r2, [r3, #24]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a2c      	ldr	r2, [pc, #176]	@ (80065a8 <UART_SetConfig+0x114>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d103      	bne.n	8006504 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80064fc:	f7ff f8fc 	bl	80056f8 <HAL_RCC_GetPCLK2Freq>
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	e002      	b.n	800650a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006504:	f7ff f8e4 	bl	80056d0 <HAL_RCC_GetPCLK1Freq>
 8006508:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4613      	mov	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	009a      	lsls	r2, r3, #2
 8006514:	441a      	add	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006520:	4a22      	ldr	r2, [pc, #136]	@ (80065ac <UART_SetConfig+0x118>)
 8006522:	fba2 2303 	umull	r2, r3, r2, r3
 8006526:	095b      	lsrs	r3, r3, #5
 8006528:	0119      	lsls	r1, r3, #4
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009a      	lsls	r2, r3, #2
 8006534:	441a      	add	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006540:	4b1a      	ldr	r3, [pc, #104]	@ (80065ac <UART_SetConfig+0x118>)
 8006542:	fba3 0302 	umull	r0, r3, r3, r2
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	2064      	movs	r0, #100	@ 0x64
 800654a:	fb00 f303 	mul.w	r3, r0, r3
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	011b      	lsls	r3, r3, #4
 8006552:	3332      	adds	r3, #50	@ 0x32
 8006554:	4a15      	ldr	r2, [pc, #84]	@ (80065ac <UART_SetConfig+0x118>)
 8006556:	fba2 2303 	umull	r2, r3, r2, r3
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006560:	4419      	add	r1, r3
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4613      	mov	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	009a      	lsls	r2, r3, #2
 800656c:	441a      	add	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	fbb2 f2f3 	udiv	r2, r2, r3
 8006578:	4b0c      	ldr	r3, [pc, #48]	@ (80065ac <UART_SetConfig+0x118>)
 800657a:	fba3 0302 	umull	r0, r3, r3, r2
 800657e:	095b      	lsrs	r3, r3, #5
 8006580:	2064      	movs	r0, #100	@ 0x64
 8006582:	fb00 f303 	mul.w	r3, r0, r3
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	3332      	adds	r3, #50	@ 0x32
 800658c:	4a07      	ldr	r2, [pc, #28]	@ (80065ac <UART_SetConfig+0x118>)
 800658e:	fba2 2303 	umull	r2, r3, r2, r3
 8006592:	095b      	lsrs	r3, r3, #5
 8006594:	f003 020f 	and.w	r2, r3, #15
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	440a      	add	r2, r1
 800659e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80065a0:	bf00      	nop
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40013800 	.word	0x40013800
 80065ac:	51eb851f 	.word	0x51eb851f

080065b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	4638      	mov	r0, r7
 80065ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bc80      	pop	{r7}
 80065c8:	4770      	bx	lr

080065ca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b085      	sub	sp, #20
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065da:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80065de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr

080065f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b085      	sub	sp, #20
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065fe:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006602:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800660a:	b29a      	uxth	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	b29b      	uxth	r3, r3
 8006610:	43db      	mvns	r3, r3
 8006612:	b29b      	uxth	r3, r3
 8006614:	4013      	ands	r3, r2
 8006616:	b29a      	uxth	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	bc80      	pop	{r7}
 8006628:	4770      	bx	lr

0800662a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	460b      	mov	r3, r1
 8006634:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	bc80      	pop	{r7}
 8006640:	4770      	bx	lr

08006642 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006642:	b480      	push	{r7}
 8006644:	b085      	sub	sp, #20
 8006646:	af00      	add	r7, sp, #0
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	4638      	mov	r0, r7
 800664c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2201      	movs	r2, #1
 8006654:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	bc80      	pop	{r7}
 800667a:	4770      	bx	lr

0800667c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800667c:	b480      	push	{r7}
 800667e:	b09d      	sub	sp, #116	@ 0x74
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	b29b      	uxth	r3, r3
 800669a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800669e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066a2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	78db      	ldrb	r3, [r3, #3]
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d81f      	bhi.n	80066ee <USB_ActivateEndpoint+0x72>
 80066ae:	a201      	add	r2, pc, #4	@ (adr r2, 80066b4 <USB_ActivateEndpoint+0x38>)
 80066b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b4:	080066c5 	.word	0x080066c5
 80066b8:	080066e1 	.word	0x080066e1
 80066bc:	080066f7 	.word	0x080066f7
 80066c0:	080066d3 	.word	0x080066d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80066c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80066cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80066d0:	e012      	b.n	80066f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80066d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066d6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80066da:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80066de:	e00b      	b.n	80066f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80066e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80066e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80066ec:	e004      	b.n	80066f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80066f4:	e000      	b.n	80066f8 <USB_ActivateEndpoint+0x7c>
      break;
 80066f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	441a      	add	r2, r3
 8006702:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006706:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800670a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800670e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006716:	b29b      	uxth	r3, r3
 8006718:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	b29b      	uxth	r3, r3
 8006728:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800672c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006730:	b29b      	uxth	r3, r3
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	7812      	ldrb	r2, [r2, #0]
 8006736:	4313      	orrs	r3, r2
 8006738:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	441a      	add	r2, r3
 8006746:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800674a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800674e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800675a:	b29b      	uxth	r3, r3
 800675c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	7b1b      	ldrb	r3, [r3, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	f040 8178 	bne.w	8006a58 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	785b      	ldrb	r3, [r3, #1]
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 8084 	beq.w	800687a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	61bb      	str	r3, [r7, #24]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800677c:	b29b      	uxth	r3, r3
 800677e:	461a      	mov	r2, r3
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	4413      	add	r3, r2
 8006784:	61bb      	str	r3, [r7, #24]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	011a      	lsls	r2, r3, #4
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	88db      	ldrh	r3, [r3, #6]
 800679a:	085b      	lsrs	r3, r3, #1
 800679c:	b29b      	uxth	r3, r3
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	827b      	strh	r3, [r7, #18]
 80067b4:	8a7b      	ldrh	r3, [r7, #18]
 80067b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d01b      	beq.n	80067f6 <USB_ActivateEndpoint+0x17a>
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d4:	823b      	strh	r3, [r7, #16]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	441a      	add	r2, r3
 80067e0:	8a3b      	ldrh	r3, [r7, #16]
 80067e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	78db      	ldrb	r3, [r3, #3]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d020      	beq.n	8006840 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	b29b      	uxth	r3, r3
 800680c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006810:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006814:	81bb      	strh	r3, [r7, #12]
 8006816:	89bb      	ldrh	r3, [r7, #12]
 8006818:	f083 0320 	eor.w	r3, r3, #32
 800681c:	81bb      	strh	r3, [r7, #12]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	441a      	add	r2, r3
 8006828:	89bb      	ldrh	r3, [r7, #12]
 800682a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800682e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800683a:	b29b      	uxth	r3, r3
 800683c:	8013      	strh	r3, [r2, #0]
 800683e:	e2d5      	b.n	8006dec <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	b29b      	uxth	r3, r3
 800684e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006856:	81fb      	strh	r3, [r7, #14]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	441a      	add	r2, r3
 8006862:	89fb      	ldrh	r3, [r7, #14]
 8006864:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006868:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800686c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006874:	b29b      	uxth	r3, r3
 8006876:	8013      	strh	r3, [r2, #0]
 8006878:	e2b8      	b.n	8006dec <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	633b      	str	r3, [r7, #48]	@ 0x30
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006884:	b29b      	uxth	r3, r3
 8006886:	461a      	mov	r2, r3
 8006888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688a:	4413      	add	r3, r2
 800688c:	633b      	str	r3, [r7, #48]	@ 0x30
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	011a      	lsls	r2, r3, #4
 8006894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006896:	4413      	add	r3, r2
 8006898:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800689c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	88db      	ldrh	r3, [r3, #6]
 80068a2:	085b      	lsrs	r3, r3, #1
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ac:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	461a      	mov	r2, r3
 80068bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068be:	4413      	add	r3, r2
 80068c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	011a      	lsls	r2, r3, #4
 80068c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ca:	4413      	add	r3, r2
 80068cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068dc:	b29a      	uxth	r2, r3
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	801a      	strh	r2, [r3, #0]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80068e8:	d91d      	bls.n	8006926 <USB_ActivateEndpoint+0x2aa>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 031f 	and.w	r3, r3, #31
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d102      	bne.n	8006904 <USB_ActivateEndpoint+0x288>
 80068fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006900:	3b01      	subs	r3, #1
 8006902:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	b29a      	uxth	r2, r3
 800690a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800690c:	b29b      	uxth	r3, r3
 800690e:	029b      	lsls	r3, r3, #10
 8006910:	b29b      	uxth	r3, r3
 8006912:	4313      	orrs	r3, r2
 8006914:	b29b      	uxth	r3, r3
 8006916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800691a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800691e:	b29a      	uxth	r2, r3
 8006920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006922:	801a      	strh	r2, [r3, #0]
 8006924:	e026      	b.n	8006974 <USB_ActivateEndpoint+0x2f8>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10a      	bne.n	8006944 <USB_ActivateEndpoint+0x2c8>
 800692e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	b29b      	uxth	r3, r3
 8006934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800693c:	b29a      	uxth	r2, r3
 800693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006940:	801a      	strh	r2, [r3, #0]
 8006942:	e017      	b.n	8006974 <USB_ActivateEndpoint+0x2f8>
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	085b      	lsrs	r3, r3, #1
 800694a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <USB_ActivateEndpoint+0x2e2>
 8006958:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800695a:	3301      	adds	r3, #1
 800695c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800695e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	b29a      	uxth	r2, r3
 8006964:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006966:	b29b      	uxth	r3, r3
 8006968:	029b      	lsls	r3, r3, #10
 800696a:	b29b      	uxth	r3, r3
 800696c:	4313      	orrs	r3, r2
 800696e:	b29a      	uxth	r2, r3
 8006970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006972:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006982:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006984:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01b      	beq.n	80069c4 <USB_ActivateEndpoint+0x348>
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800699e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a2:	843b      	strh	r3, [r7, #32]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	441a      	add	r2, r3
 80069ae:	8c3b      	ldrh	r3, [r7, #32]
 80069b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d124      	bne.n	8006a16 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e2:	83bb      	strh	r3, [r7, #28]
 80069e4:	8bbb      	ldrh	r3, [r7, #28]
 80069e6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069ea:	83bb      	strh	r3, [r7, #28]
 80069ec:	8bbb      	ldrh	r3, [r7, #28]
 80069ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069f2:	83bb      	strh	r3, [r7, #28]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	441a      	add	r2, r3
 80069fe:	8bbb      	ldrh	r3, [r7, #28]
 8006a00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	8013      	strh	r3, [r2, #0]
 8006a14:	e1ea      	b.n	8006dec <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a2c:	83fb      	strh	r3, [r7, #30]
 8006a2e:	8bfb      	ldrh	r3, [r7, #30]
 8006a30:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a34:	83fb      	strh	r3, [r7, #30]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	441a      	add	r2, r3
 8006a40:	8bfb      	ldrh	r3, [r7, #30]
 8006a42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	8013      	strh	r3, [r2, #0]
 8006a56:	e1c9      	b.n	8006dec <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	78db      	ldrb	r3, [r3, #3]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d11e      	bne.n	8006a9e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a76:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	441a      	add	r2, r3
 8006a84:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006a88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a90:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	8013      	strh	r3, [r2, #0]
 8006a9c:	e01d      	b.n	8006ada <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006ab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	441a      	add	r2, r3
 8006ac2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006ac6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006aea:	4413      	add	r3, r2
 8006aec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	011a      	lsls	r2, r3, #4
 8006af4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006afc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	891b      	ldrh	r3, [r3, #8]
 8006b02:	085b      	lsrs	r3, r3, #1
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b0c:	801a      	strh	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b1e:	4413      	add	r3, r2
 8006b20:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	011a      	lsls	r2, r3, #4
 8006b28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006b30:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	895b      	ldrh	r3, [r3, #10]
 8006b36:	085b      	lsrs	r3, r3, #1
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b40:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	785b      	ldrb	r3, [r3, #1]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f040 8093 	bne.w	8006c72 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006b5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006b60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d01b      	beq.n	8006ba0 <USB_ActivateEndpoint+0x524>
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b7e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	441a      	add	r2, r3
 8006b8a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006b8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006bae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d01b      	beq.n	8006bf0 <USB_ActivateEndpoint+0x574>
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bce:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	441a      	add	r2, r3
 8006bda:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006bdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006be0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006be4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006be8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c06:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006c08:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006c0a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006c0e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006c10:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006c12:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006c16:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	441a      	add	r2, r3
 8006c22:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006c24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c4e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	441a      	add	r2, r3
 8006c5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	8013      	strh	r3, [r2, #0]
 8006c70:	e0bc      	b.n	8006dec <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006c82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01d      	beq.n	8006cca <USB_ActivateEndpoint+0x64e>
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ca0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	441a      	add	r2, r3
 8006cb2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006cb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006cda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d01d      	beq.n	8006d22 <USB_ActivateEndpoint+0x6a6>
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cfc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	441a      	add	r2, r3
 8006d0a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006d0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d1a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	78db      	ldrb	r3, [r3, #3]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d024      	beq.n	8006d74 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d40:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006d44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006d48:	f083 0320 	eor.w	r3, r3, #32
 8006d4c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	441a      	add	r2, r3
 8006d5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006d5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	8013      	strh	r3, [r2, #0]
 8006d72:	e01d      	b.n	8006db0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d8a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	441a      	add	r2, r3
 8006d98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006da0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006da4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dc6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	441a      	add	r2, r3
 8006dd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006dd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ddc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006de0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006dec:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3774      	adds	r7, #116	@ 0x74
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bc80      	pop	{r7}
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop

08006dfc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b08d      	sub	sp, #52	@ 0x34
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	7b1b      	ldrb	r3, [r3, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f040 808e 	bne.w	8006f2c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	785b      	ldrb	r3, [r3, #1]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d044      	beq.n	8006ea2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	81bb      	strh	r3, [r7, #12]
 8006e26:	89bb      	ldrh	r3, [r7, #12]
 8006e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d01b      	beq.n	8006e68 <USB_DeactivateEndpoint+0x6c>
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e46:	817b      	strh	r3, [r7, #10]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	441a      	add	r2, r3
 8006e52:	897b      	ldrh	r3, [r7, #10]
 8006e54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e7e:	813b      	strh	r3, [r7, #8]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	441a      	add	r2, r3
 8006e8a:	893b      	ldrh	r3, [r7, #8]
 8006e8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	8013      	strh	r3, [r2, #0]
 8006ea0:	e192      	b.n	80071c8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	827b      	strh	r3, [r7, #18]
 8006eb0:	8a7b      	ldrh	r3, [r7, #18]
 8006eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d01b      	beq.n	8006ef2 <USB_DeactivateEndpoint+0xf6>
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ed0:	823b      	strh	r3, [r7, #16]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	441a      	add	r2, r3
 8006edc:	8a3b      	ldrh	r3, [r7, #16]
 8006ede:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ee2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ee6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f08:	81fb      	strh	r3, [r7, #14]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	441a      	add	r2, r3
 8006f14:	89fb      	ldrh	r3, [r7, #14]
 8006f16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	8013      	strh	r3, [r2, #0]
 8006f2a:	e14d      	b.n	80071c8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	785b      	ldrb	r3, [r3, #1]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f040 80a5 	bne.w	8007080 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	843b      	strh	r3, [r7, #32]
 8006f44:	8c3b      	ldrh	r3, [r7, #32]
 8006f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d01b      	beq.n	8006f86 <USB_DeactivateEndpoint+0x18a>
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f64:	83fb      	strh	r3, [r7, #30]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	441a      	add	r2, r3
 8006f70:	8bfb      	ldrh	r3, [r7, #30]
 8006f72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	83bb      	strh	r3, [r7, #28]
 8006f94:	8bbb      	ldrh	r3, [r7, #28]
 8006f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d01b      	beq.n	8006fd6 <USB_DeactivateEndpoint+0x1da>
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fb4:	837b      	strh	r3, [r7, #26]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	441a      	add	r2, r3
 8006fc0:	8b7b      	ldrh	r3, [r7, #26]
 8006fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fec:	833b      	strh	r3, [r7, #24]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	441a      	add	r2, r3
 8006ff8:	8b3b      	ldrh	r3, [r7, #24]
 8006ffa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ffe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007006:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800700a:	b29b      	uxth	r3, r3
 800700c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	b29b      	uxth	r3, r3
 800701c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007024:	82fb      	strh	r3, [r7, #22]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	441a      	add	r2, r3
 8007030:	8afb      	ldrh	r3, [r7, #22]
 8007032:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007036:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800703a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800703e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007042:	b29b      	uxth	r3, r3
 8007044:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29b      	uxth	r3, r3
 8007054:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007058:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800705c:	82bb      	strh	r3, [r7, #20]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	441a      	add	r2, r3
 8007068:	8abb      	ldrh	r3, [r7, #20]
 800706a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800706e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800707a:	b29b      	uxth	r3, r3
 800707c:	8013      	strh	r3, [r2, #0]
 800707e:	e0a3      	b.n	80071c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800708e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007090:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01b      	beq.n	80070d0 <USB_DeactivateEndpoint+0x2d4>
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	441a      	add	r2, r3
 80070ba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80070bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80070de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80070e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d01b      	beq.n	8007120 <USB_DeactivateEndpoint+0x324>
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070fe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	441a      	add	r2, r3
 800710a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800710c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007110:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007114:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007118:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800711c:	b29b      	uxth	r3, r3
 800711e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	b29b      	uxth	r3, r3
 800712e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007136:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	441a      	add	r2, r3
 8007142:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007144:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007148:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800714c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007154:	b29b      	uxth	r3, r3
 8007156:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	b29b      	uxth	r3, r3
 8007166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800716a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800716e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	441a      	add	r2, r3
 800717a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800717c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007180:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007184:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800718c:	b29b      	uxth	r3, r3
 800718e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	b29b      	uxth	r3, r3
 800719e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071a6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	441a      	add	r2, r3
 80071b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80071b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3734      	adds	r7, #52	@ 0x34
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bc80      	pop	{r7}
 80071d2:	4770      	bx	lr

080071d4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b0c2      	sub	sp, #264	@ 0x108
 80071d8:	af00      	add	r7, sp, #0
 80071da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071e2:	6018      	str	r0, [r3, #0]
 80071e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ec:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	785b      	ldrb	r3, [r3, #1]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	f040 86b7 	bne.w	8007f6e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	699a      	ldr	r2, [r3, #24]
 800720c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	429a      	cmp	r2, r3
 800721a:	d908      	bls.n	800722e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800721c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800722c:	e007      	b.n	800723e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800722e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800723e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	7b1b      	ldrb	r3, [r3, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d13a      	bne.n	80072c4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800724e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6959      	ldr	r1, [r3, #20]
 800725a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800725e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	88da      	ldrh	r2, [r3, #6]
 8007266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726a:	b29b      	uxth	r3, r3
 800726c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007270:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007274:	6800      	ldr	r0, [r0, #0]
 8007276:	f001 fc9c 	bl	8008bb2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800727a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800727e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	613b      	str	r3, [r7, #16]
 8007286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007294:	b29b      	uxth	r3, r3
 8007296:	461a      	mov	r2, r3
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	4413      	add	r3, r2
 800729c:	613b      	str	r3, [r7, #16]
 800729e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	011a      	lsls	r2, r3, #4
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	4413      	add	r3, r2
 80072b0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072b4:	60fb      	str	r3, [r7, #12]
 80072b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	801a      	strh	r2, [r3, #0]
 80072c0:	f000 be1f 	b.w	8007f02 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80072c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	78db      	ldrb	r3, [r3, #3]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	f040 8462 	bne.w	8007b9a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80072d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6a1a      	ldr	r2, [r3, #32]
 80072e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	f240 83df 	bls.w	8007ab2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80072f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	b29b      	uxth	r3, r3
 8007312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800731a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800731e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	441a      	add	r2, r3
 8007338:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800733c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007340:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007344:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800734c:	b29b      	uxth	r3, r3
 800734e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6a1a      	ldr	r2, [r3, #32]
 800735c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007360:	1ad2      	subs	r2, r2, r3
 8007362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800736e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 81c7 	beq.w	8007724 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80073a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	785b      	ldrb	r3, [r3, #1]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d177      	bne.n	80074a2 <USB_EPStartXfer+0x2ce>
 80073b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	461a      	mov	r2, r3
 80073d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d2:	4413      	add	r3, r2
 80073d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	011a      	lsls	r2, r3, #4
 80073e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e6:	4413      	add	r3, r2
 80073e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fc:	801a      	strh	r2, [r3, #0]
 80073fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007402:	2b3e      	cmp	r3, #62	@ 0x3e
 8007404:	d921      	bls.n	800744a <USB_EPStartXfer+0x276>
 8007406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740a:	095b      	lsrs	r3, r3, #5
 800740c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007414:	f003 031f 	and.w	r3, r3, #31
 8007418:	2b00      	cmp	r3, #0
 800741a:	d104      	bne.n	8007426 <USB_EPStartXfer+0x252>
 800741c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007420:	3b01      	subs	r3, #1
 8007422:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b29a      	uxth	r2, r3
 800742c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007430:	b29b      	uxth	r3, r3
 8007432:	029b      	lsls	r3, r3, #10
 8007434:	b29b      	uxth	r3, r3
 8007436:	4313      	orrs	r3, r2
 8007438:	b29b      	uxth	r3, r3
 800743a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800743e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007442:	b29a      	uxth	r2, r3
 8007444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007446:	801a      	strh	r2, [r3, #0]
 8007448:	e050      	b.n	80074ec <USB_EPStartXfer+0x318>
 800744a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10a      	bne.n	8007468 <USB_EPStartXfer+0x294>
 8007452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	b29b      	uxth	r3, r3
 8007458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800745c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007460:	b29a      	uxth	r2, r3
 8007462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007464:	801a      	strh	r2, [r3, #0]
 8007466:	e041      	b.n	80074ec <USB_EPStartXfer+0x318>
 8007468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800746c:	085b      	lsrs	r3, r3, #1
 800746e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d004      	beq.n	8007488 <USB_EPStartXfer+0x2b4>
 800747e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007482:	3301      	adds	r3, #1
 8007484:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	b29a      	uxth	r2, r3
 800748e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007492:	b29b      	uxth	r3, r3
 8007494:	029b      	lsls	r3, r3, #10
 8007496:	b29b      	uxth	r3, r3
 8007498:	4313      	orrs	r3, r2
 800749a:	b29a      	uxth	r2, r3
 800749c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749e:	801a      	strh	r2, [r3, #0]
 80074a0:	e024      	b.n	80074ec <USB_EPStartXfer+0x318>
 80074a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	785b      	ldrb	r3, [r3, #1]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d11c      	bne.n	80074ec <USB_EPStartXfer+0x318>
 80074b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	461a      	mov	r2, r3
 80074c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c6:	4413      	add	r3, r2
 80074c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80074ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	011a      	lsls	r2, r3, #4
 80074d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074da:	4413      	add	r3, r2
 80074dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80074ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	895b      	ldrh	r3, [r3, #10]
 80074f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6959      	ldr	r1, [r3, #20]
 8007508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750c:	b29b      	uxth	r3, r3
 800750e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007512:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007516:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800751a:	6800      	ldr	r0, [r0, #0]
 800751c:	f001 fb49 	bl	8008bb2 <USB_WritePMA>
            ep->xfer_buff += len;
 8007520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695a      	ldr	r2, [r3, #20]
 800752c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007530:	441a      	add	r2, r3
 8007532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800753e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6a1a      	ldr	r2, [r3, #32]
 800754a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	429a      	cmp	r2, r3
 8007558:	d90f      	bls.n	800757a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800755a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800755e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6a1a      	ldr	r2, [r3, #32]
 8007566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800756a:	1ad2      	subs	r2, r2, r3
 800756c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	621a      	str	r2, [r3, #32]
 8007578:	e00e      	b.n	8007598 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800757a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800758a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2200      	movs	r2, #0
 8007596:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	785b      	ldrb	r3, [r3, #1]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d177      	bne.n	8007698 <USB_EPStartXfer+0x4c4>
 80075a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	61bb      	str	r3, [r7, #24]
 80075b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	461a      	mov	r2, r3
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	4413      	add	r3, r2
 80075ca:	61bb      	str	r3, [r7, #24]
 80075cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	011a      	lsls	r2, r3, #4
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	4413      	add	r3, r2
 80075de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80075e2:	617b      	str	r3, [r7, #20]
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	801a      	strh	r2, [r3, #0]
 80075f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80075fa:	d921      	bls.n	8007640 <USB_EPStartXfer+0x46c>
 80075fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007600:	095b      	lsrs	r3, r3, #5
 8007602:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760a:	f003 031f 	and.w	r3, r3, #31
 800760e:	2b00      	cmp	r3, #0
 8007610:	d104      	bne.n	800761c <USB_EPStartXfer+0x448>
 8007612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007616:	3b01      	subs	r3, #1
 8007618:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	b29a      	uxth	r2, r3
 8007622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007626:	b29b      	uxth	r3, r3
 8007628:	029b      	lsls	r3, r3, #10
 800762a:	b29b      	uxth	r3, r3
 800762c:	4313      	orrs	r3, r2
 800762e:	b29b      	uxth	r3, r3
 8007630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007638:	b29a      	uxth	r2, r3
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	801a      	strh	r2, [r3, #0]
 800763e:	e056      	b.n	80076ee <USB_EPStartXfer+0x51a>
 8007640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10a      	bne.n	800765e <USB_EPStartXfer+0x48a>
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	b29b      	uxth	r3, r3
 800764e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007656:	b29a      	uxth	r2, r3
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	801a      	strh	r2, [r3, #0]
 800765c:	e047      	b.n	80076ee <USB_EPStartXfer+0x51a>
 800765e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007662:	085b      	lsrs	r3, r3, #1
 8007664:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b00      	cmp	r3, #0
 8007672:	d004      	beq.n	800767e <USB_EPStartXfer+0x4aa>
 8007674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007678:	3301      	adds	r3, #1
 800767a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	b29a      	uxth	r2, r3
 8007684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007688:	b29b      	uxth	r3, r3
 800768a:	029b      	lsls	r3, r3, #10
 800768c:	b29b      	uxth	r3, r3
 800768e:	4313      	orrs	r3, r2
 8007690:	b29a      	uxth	r2, r3
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	801a      	strh	r2, [r3, #0]
 8007696:	e02a      	b.n	80076ee <USB_EPStartXfer+0x51a>
 8007698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800769c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	785b      	ldrb	r3, [r3, #1]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d122      	bne.n	80076ee <USB_EPStartXfer+0x51a>
 80076a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	623b      	str	r3, [r7, #32]
 80076b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	461a      	mov	r2, r3
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	4413      	add	r3, r2
 80076ca:	623b      	str	r3, [r7, #32]
 80076cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	011a      	lsls	r2, r3, #4
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	4413      	add	r3, r2
 80076de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076e2:	61fb      	str	r3, [r7, #28]
 80076e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80076ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	891b      	ldrh	r3, [r3, #8]
 80076fa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007702:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6959      	ldr	r1, [r3, #20]
 800770a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770e:	b29b      	uxth	r3, r3
 8007710:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007714:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007718:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800771c:	6800      	ldr	r0, [r0, #0]
 800771e:	f001 fa48 	bl	8008bb2 <USB_WritePMA>
 8007722:	e3ee      	b.n	8007f02 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	785b      	ldrb	r3, [r3, #1]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d177      	bne.n	8007824 <USB_EPStartXfer+0x650>
 8007734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007744:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800774e:	b29b      	uxth	r3, r3
 8007750:	461a      	mov	r2, r3
 8007752:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007754:	4413      	add	r3, r2
 8007756:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800775c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	011a      	lsls	r2, r3, #4
 8007766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007768:	4413      	add	r3, r2
 800776a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800776e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	b29b      	uxth	r3, r3
 8007776:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800777a:	b29a      	uxth	r2, r3
 800777c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800777e:	801a      	strh	r2, [r3, #0]
 8007780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007784:	2b3e      	cmp	r3, #62	@ 0x3e
 8007786:	d921      	bls.n	80077cc <USB_EPStartXfer+0x5f8>
 8007788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778c:	095b      	lsrs	r3, r3, #5
 800778e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007796:	f003 031f 	and.w	r3, r3, #31
 800779a:	2b00      	cmp	r3, #0
 800779c:	d104      	bne.n	80077a8 <USB_EPStartXfer+0x5d4>
 800779e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077a2:	3b01      	subs	r3, #1
 80077a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80077a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	029b      	lsls	r3, r3, #10
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	4313      	orrs	r3, r2
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077c8:	801a      	strh	r2, [r3, #0]
 80077ca:	e056      	b.n	800787a <USB_EPStartXfer+0x6a6>
 80077cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10a      	bne.n	80077ea <USB_EPStartXfer+0x616>
 80077d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077e6:	801a      	strh	r2, [r3, #0]
 80077e8:	e047      	b.n	800787a <USB_EPStartXfer+0x6a6>
 80077ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ee:	085b      	lsrs	r3, r3, #1
 80077f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80077f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d004      	beq.n	800780a <USB_EPStartXfer+0x636>
 8007800:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007804:	3301      	adds	r3, #1
 8007806:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800780a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	b29a      	uxth	r2, r3
 8007810:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007814:	b29b      	uxth	r3, r3
 8007816:	029b      	lsls	r3, r3, #10
 8007818:	b29b      	uxth	r3, r3
 800781a:	4313      	orrs	r3, r2
 800781c:	b29a      	uxth	r2, r3
 800781e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007820:	801a      	strh	r2, [r3, #0]
 8007822:	e02a      	b.n	800787a <USB_EPStartXfer+0x6a6>
 8007824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	785b      	ldrb	r3, [r3, #1]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d122      	bne.n	800787a <USB_EPStartXfer+0x6a6>
 8007834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007838:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007844:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800784e:	b29b      	uxth	r3, r3
 8007850:	461a      	mov	r2, r3
 8007852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007854:	4413      	add	r3, r2
 8007856:	653b      	str	r3, [r7, #80]	@ 0x50
 8007858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800785c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	011a      	lsls	r2, r3, #4
 8007866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007868:	4413      	add	r3, r2
 800786a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800786e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007874:	b29a      	uxth	r2, r3
 8007876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007878:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800787a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	891b      	ldrh	r3, [r3, #8]
 8007886:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800788a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800788e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6959      	ldr	r1, [r3, #20]
 8007896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800789a:	b29b      	uxth	r3, r3
 800789c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80078a0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80078a4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80078a8:	6800      	ldr	r0, [r0, #0]
 80078aa:	f001 f982 	bl	8008bb2 <USB_WritePMA>
            ep->xfer_buff += len;
 80078ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	695a      	ldr	r2, [r3, #20]
 80078ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078be:	441a      	add	r2, r3
 80078c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80078cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6a1a      	ldr	r2, [r3, #32]
 80078d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d90f      	bls.n	8007908 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80078e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6a1a      	ldr	r2, [r3, #32]
 80078f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f8:	1ad2      	subs	r2, r2, r3
 80078fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	621a      	str	r2, [r3, #32]
 8007906:	e00e      	b.n	8007926 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2200      	movs	r2, #0
 8007924:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	643b      	str	r3, [r7, #64]	@ 0x40
 8007932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	785b      	ldrb	r3, [r3, #1]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d177      	bne.n	8007a32 <USB_EPStartXfer+0x85e>
 8007942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007946:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800794e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007952:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800795c:	b29b      	uxth	r3, r3
 800795e:	461a      	mov	r2, r3
 8007960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007962:	4413      	add	r3, r2
 8007964:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	011a      	lsls	r2, r3, #4
 8007974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007976:	4413      	add	r3, r2
 8007978:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800797c:	637b      	str	r3, [r7, #52]	@ 0x34
 800797e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	b29b      	uxth	r3, r3
 8007984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007988:	b29a      	uxth	r2, r3
 800798a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800798c:	801a      	strh	r2, [r3, #0]
 800798e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007992:	2b3e      	cmp	r3, #62	@ 0x3e
 8007994:	d921      	bls.n	80079da <USB_EPStartXfer+0x806>
 8007996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800799a:	095b      	lsrs	r3, r3, #5
 800799c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80079a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a4:	f003 031f 	and.w	r3, r3, #31
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d104      	bne.n	80079b6 <USB_EPStartXfer+0x7e2>
 80079ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b0:	3b01      	subs	r3, #1
 80079b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80079b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	029b      	lsls	r3, r3, #10
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	4313      	orrs	r3, r2
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079d6:	801a      	strh	r2, [r3, #0]
 80079d8:	e050      	b.n	8007a7c <USB_EPStartXfer+0x8a8>
 80079da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10a      	bne.n	80079f8 <USB_EPStartXfer+0x824>
 80079e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f4:	801a      	strh	r2, [r3, #0]
 80079f6:	e041      	b.n	8007a7c <USB_EPStartXfer+0x8a8>
 80079f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079fc:	085b      	lsrs	r3, r3, #1
 80079fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d004      	beq.n	8007a18 <USB_EPStartXfer+0x844>
 8007a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a12:	3301      	adds	r3, #1
 8007a14:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	029b      	lsls	r3, r3, #10
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a2e:	801a      	strh	r2, [r3, #0]
 8007a30:	e024      	b.n	8007a7c <USB_EPStartXfer+0x8a8>
 8007a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	785b      	ldrb	r3, [r3, #1]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d11c      	bne.n	8007a7c <USB_EPStartXfer+0x8a8>
 8007a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	461a      	mov	r2, r3
 8007a54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a56:	4413      	add	r3, r2
 8007a58:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	011a      	lsls	r2, r3, #4
 8007a68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	895b      	ldrh	r3, [r3, #10]
 8007a88:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6959      	ldr	r1, [r3, #20]
 8007a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007aa2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007aa6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007aaa:	6800      	ldr	r0, [r0, #0]
 8007aac:	f001 f881 	bl	8008bb2 <USB_WritePMA>
 8007ab0:	e227      	b.n	8007f02 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007ae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ae8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	441a      	add	r2, r3
 8007b06:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007b0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b3e:	4413      	add	r3, r2
 8007b40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	011a      	lsls	r2, r3, #4
 8007b50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b52:	4413      	add	r3, r2
 8007b54:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	891b      	ldrh	r3, [r3, #8]
 8007b70:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	6959      	ldr	r1, [r3, #20]
 8007b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b8a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b8e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b92:	6800      	ldr	r0, [r0, #0]
 8007b94:	f001 f80d 	bl	8008bb2 <USB_WritePMA>
 8007b98:	e1b3      	b.n	8007f02 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6a1a      	ldr	r2, [r3, #32]
 8007ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007baa:	1ad2      	subs	r2, r2, r3
 8007bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 80c6 	beq.w	8007d6c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	785b      	ldrb	r3, [r3, #1]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d177      	bne.n	8007cec <USB_EPStartXfer+0xb18>
 8007bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	461a      	mov	r2, r3
 8007c1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c1c:	4413      	add	r3, r2
 8007c1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	011a      	lsls	r2, r3, #4
 8007c2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c30:	4413      	add	r3, r2
 8007c32:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c36:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c46:	801a      	strh	r2, [r3, #0]
 8007c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c4e:	d921      	bls.n	8007c94 <USB_EPStartXfer+0xac0>
 8007c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c54:	095b      	lsrs	r3, r3, #5
 8007c56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c5e:	f003 031f 	and.w	r3, r3, #31
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d104      	bne.n	8007c70 <USB_EPStartXfer+0xa9c>
 8007c66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	029b      	lsls	r3, r3, #10
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	4313      	orrs	r3, r2
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c90:	801a      	strh	r2, [r3, #0]
 8007c92:	e050      	b.n	8007d36 <USB_EPStartXfer+0xb62>
 8007c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10a      	bne.n	8007cb2 <USB_EPStartXfer+0xade>
 8007c9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cae:	801a      	strh	r2, [r3, #0]
 8007cb0:	e041      	b.n	8007d36 <USB_EPStartXfer+0xb62>
 8007cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb6:	085b      	lsrs	r3, r3, #1
 8007cb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d004      	beq.n	8007cd2 <USB_EPStartXfer+0xafe>
 8007cc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007ccc:	3301      	adds	r3, #1
 8007cce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007cd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	029b      	lsls	r3, r3, #10
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ce8:	801a      	strh	r2, [r3, #0]
 8007cea:	e024      	b.n	8007d36 <USB_EPStartXfer+0xb62>
 8007cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	785b      	ldrb	r3, [r3, #1]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d11c      	bne.n	8007d36 <USB_EPStartXfer+0xb62>
 8007cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d10:	4413      	add	r3, r2
 8007d12:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	011a      	lsls	r2, r3, #4
 8007d22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d24:	4413      	add	r3, r2
 8007d26:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	895b      	ldrh	r3, [r3, #10]
 8007d42:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6959      	ldr	r1, [r3, #20]
 8007d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d5c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d60:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d64:	6800      	ldr	r0, [r0, #0]
 8007d66:	f000 ff24 	bl	8008bb2 <USB_WritePMA>
 8007d6a:	e0ca      	b.n	8007f02 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	785b      	ldrb	r3, [r3, #1]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d177      	bne.n	8007e6c <USB_EPStartXfer+0xc98>
 8007d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	461a      	mov	r2, r3
 8007d9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d9c:	4413      	add	r3, r2
 8007d9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	011a      	lsls	r2, r3, #4
 8007dae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007db0:	4413      	add	r3, r2
 8007db2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007db6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007db8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dc6:	801a      	strh	r2, [r3, #0]
 8007dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dcc:	2b3e      	cmp	r3, #62	@ 0x3e
 8007dce:	d921      	bls.n	8007e14 <USB_EPStartXfer+0xc40>
 8007dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd4:	095b      	lsrs	r3, r3, #5
 8007dd6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dde:	f003 031f 	and.w	r3, r3, #31
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d104      	bne.n	8007df0 <USB_EPStartXfer+0xc1c>
 8007de6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007dea:	3b01      	subs	r3, #1
 8007dec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007df0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	029b      	lsls	r3, r3, #10
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	4313      	orrs	r3, r2
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e10:	801a      	strh	r2, [r3, #0]
 8007e12:	e05c      	b.n	8007ece <USB_EPStartXfer+0xcfa>
 8007e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <USB_EPStartXfer+0xc5e>
 8007e1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e2e:	801a      	strh	r2, [r3, #0]
 8007e30:	e04d      	b.n	8007ece <USB_EPStartXfer+0xcfa>
 8007e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e36:	085b      	lsrs	r3, r3, #1
 8007e38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d004      	beq.n	8007e52 <USB_EPStartXfer+0xc7e>
 8007e48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e54:	881b      	ldrh	r3, [r3, #0]
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	029b      	lsls	r3, r3, #10
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	4313      	orrs	r3, r2
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e68:	801a      	strh	r2, [r3, #0]
 8007e6a:	e030      	b.n	8007ece <USB_EPStartXfer+0xcfa>
 8007e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	785b      	ldrb	r3, [r3, #1]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d128      	bne.n	8007ece <USB_EPStartXfer+0xcfa>
 8007e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	011a      	lsls	r2, r3, #4
 8007eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007eb8:	4413      	add	r3, r2
 8007eba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ebe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ecc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	891b      	ldrh	r3, [r3, #8]
 8007eda:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6959      	ldr	r1, [r3, #20]
 8007eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007ef4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007ef8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007efc:	6800      	ldr	r0, [r0, #0]
 8007efe:	f000 fe58 	bl	8008bb2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f28:	817b      	strh	r3, [r7, #10]
 8007f2a:	897b      	ldrh	r3, [r7, #10]
 8007f2c:	f083 0310 	eor.w	r3, r3, #16
 8007f30:	817b      	strh	r3, [r7, #10]
 8007f32:	897b      	ldrh	r3, [r7, #10]
 8007f34:	f083 0320 	eor.w	r3, r3, #32
 8007f38:	817b      	strh	r3, [r7, #10]
 8007f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	441a      	add	r2, r3
 8007f54:	897b      	ldrh	r3, [r7, #10]
 8007f56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	8013      	strh	r3, [r2, #0]
 8007f6a:	f000 bcde 	b.w	800892a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	7b1b      	ldrb	r3, [r3, #12]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f040 80bb 	bne.w	80080f6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	699a      	ldr	r2, [r3, #24]
 8007f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d917      	bls.n	8007fcc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	699a      	ldr	r2, [r3, #24]
 8007fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fbc:	1ad2      	subs	r2, r2, r3
 8007fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	619a      	str	r2, [r3, #24]
 8007fca:	e00e      	b.n	8007fea <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ffc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008006:	b29b      	uxth	r3, r3
 8008008:	461a      	mov	r2, r3
 800800a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800800e:	4413      	add	r3, r2
 8008010:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	011a      	lsls	r2, r3, #4
 8008022:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008026:	4413      	add	r3, r2
 8008028:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800802c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008030:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	b29b      	uxth	r3, r3
 8008038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800803c:	b29a      	uxth	r2, r3
 800803e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008042:	801a      	strh	r2, [r3, #0]
 8008044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008048:	2b3e      	cmp	r3, #62	@ 0x3e
 800804a:	d924      	bls.n	8008096 <USB_EPStartXfer+0xec2>
 800804c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008050:	095b      	lsrs	r3, r3, #5
 8008052:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800805a:	f003 031f 	and.w	r3, r3, #31
 800805e:	2b00      	cmp	r3, #0
 8008060:	d104      	bne.n	800806c <USB_EPStartXfer+0xe98>
 8008062:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008066:	3b01      	subs	r3, #1
 8008068:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800806c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	b29a      	uxth	r2, r3
 8008074:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008078:	b29b      	uxth	r3, r3
 800807a:	029b      	lsls	r3, r3, #10
 800807c:	b29b      	uxth	r3, r3
 800807e:	4313      	orrs	r3, r2
 8008080:	b29b      	uxth	r3, r3
 8008082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800808a:	b29a      	uxth	r2, r3
 800808c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008090:	801a      	strh	r2, [r3, #0]
 8008092:	f000 bc10 	b.w	80088b6 <USB_EPStartXfer+0x16e2>
 8008096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10c      	bne.n	80080b8 <USB_EPStartXfer+0xee4>
 800809e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080b4:	801a      	strh	r2, [r3, #0]
 80080b6:	e3fe      	b.n	80088b6 <USB_EPStartXfer+0x16e2>
 80080b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080bc:	085b      	lsrs	r3, r3, #1
 80080be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80080c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d004      	beq.n	80080d8 <USB_EPStartXfer+0xf04>
 80080ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80080d2:	3301      	adds	r3, #1
 80080d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80080d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	b29a      	uxth	r2, r3
 80080e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	029b      	lsls	r3, r3, #10
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	4313      	orrs	r3, r2
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080f2:	801a      	strh	r2, [r3, #0]
 80080f4:	e3df      	b.n	80088b6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80080f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	78db      	ldrb	r3, [r3, #3]
 8008102:	2b02      	cmp	r3, #2
 8008104:	f040 8218 	bne.w	8008538 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800810c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	785b      	ldrb	r3, [r3, #1]
 8008114:	2b00      	cmp	r3, #0
 8008116:	f040 809d 	bne.w	8008254 <USB_EPStartXfer+0x1080>
 800811a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800811e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800812c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008136:	b29b      	uxth	r3, r3
 8008138:	461a      	mov	r2, r3
 800813a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800813e:	4413      	add	r3, r2
 8008140:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	011a      	lsls	r2, r3, #4
 8008152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008156:	4413      	add	r3, r2
 8008158:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800815c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008160:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	b29b      	uxth	r3, r3
 8008168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800816c:	b29a      	uxth	r2, r3
 800816e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008172:	801a      	strh	r2, [r3, #0]
 8008174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	2b3e      	cmp	r3, #62	@ 0x3e
 8008182:	d92b      	bls.n	80081dc <USB_EPStartXfer+0x1008>
 8008184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	095b      	lsrs	r3, r3, #5
 8008192:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800819a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	f003 031f 	and.w	r3, r3, #31
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d104      	bne.n	80081b4 <USB_EPStartXfer+0xfe0>
 80081aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ae:	3b01      	subs	r3, #1
 80081b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80081b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	029b      	lsls	r3, r3, #10
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	4313      	orrs	r3, r2
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081d8:	801a      	strh	r2, [r3, #0]
 80081da:	e070      	b.n	80082be <USB_EPStartXfer+0x10ea>
 80081dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10c      	bne.n	8008206 <USB_EPStartXfer+0x1032>
 80081ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008202:	801a      	strh	r2, [r3, #0]
 8008204:	e05b      	b.n	80082be <USB_EPStartXfer+0x10ea>
 8008206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800820a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	085b      	lsrs	r3, r3, #1
 8008214:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800821c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d004      	beq.n	8008236 <USB_EPStartXfer+0x1062>
 800822c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008230:	3301      	adds	r3, #1
 8008232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008236:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	b29a      	uxth	r2, r3
 800823e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008242:	b29b      	uxth	r3, r3
 8008244:	029b      	lsls	r3, r3, #10
 8008246:	b29b      	uxth	r3, r3
 8008248:	4313      	orrs	r3, r2
 800824a:	b29a      	uxth	r2, r3
 800824c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008250:	801a      	strh	r2, [r3, #0]
 8008252:	e034      	b.n	80082be <USB_EPStartXfer+0x10ea>
 8008254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	785b      	ldrb	r3, [r3, #1]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d12c      	bne.n	80082be <USB_EPStartXfer+0x10ea>
 8008264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008268:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008276:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008280:	b29b      	uxth	r3, r3
 8008282:	461a      	mov	r2, r3
 8008284:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008288:	4413      	add	r3, r2
 800828a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800828e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	011a      	lsls	r2, r3, #4
 800829c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80082a0:	4413      	add	r3, r2
 80082a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80082a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80082aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80082bc:	801a      	strh	r2, [r3, #0]
 80082be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80082cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	785b      	ldrb	r3, [r3, #1]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f040 809d 	bne.w	8008418 <USB_EPStartXfer+0x1244>
 80082de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80082ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	461a      	mov	r2, r3
 80082fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008302:	4413      	add	r3, r2
 8008304:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800830c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	011a      	lsls	r2, r3, #4
 8008316:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800831a:	4413      	add	r3, r2
 800831c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008320:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008324:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008328:	881b      	ldrh	r3, [r3, #0]
 800832a:	b29b      	uxth	r3, r3
 800832c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008330:	b29a      	uxth	r2, r3
 8008332:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008336:	801a      	strh	r2, [r3, #0]
 8008338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800833c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	2b3e      	cmp	r3, #62	@ 0x3e
 8008346:	d92b      	bls.n	80083a0 <USB_EPStartXfer+0x11cc>
 8008348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800834c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	095b      	lsrs	r3, r3, #5
 8008356:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800835a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800835e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	f003 031f 	and.w	r3, r3, #31
 800836a:	2b00      	cmp	r3, #0
 800836c:	d104      	bne.n	8008378 <USB_EPStartXfer+0x11a4>
 800836e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008372:	3b01      	subs	r3, #1
 8008374:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008378:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	b29a      	uxth	r2, r3
 8008380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008384:	b29b      	uxth	r3, r3
 8008386:	029b      	lsls	r3, r3, #10
 8008388:	b29b      	uxth	r3, r3
 800838a:	4313      	orrs	r3, r2
 800838c:	b29b      	uxth	r3, r3
 800838e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008396:	b29a      	uxth	r2, r3
 8008398:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800839c:	801a      	strh	r2, [r3, #0]
 800839e:	e069      	b.n	8008474 <USB_EPStartXfer+0x12a0>
 80083a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10c      	bne.n	80083ca <USB_EPStartXfer+0x11f6>
 80083b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083c6:	801a      	strh	r2, [r3, #0]
 80083c8:	e054      	b.n	8008474 <USB_EPStartXfer+0x12a0>
 80083ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	085b      	lsrs	r3, r3, #1
 80083d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	f003 0301 	and.w	r3, r3, #1
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d004      	beq.n	80083fa <USB_EPStartXfer+0x1226>
 80083f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083f4:	3301      	adds	r3, #1
 80083f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	b29a      	uxth	r2, r3
 8008402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008406:	b29b      	uxth	r3, r3
 8008408:	029b      	lsls	r3, r3, #10
 800840a:	b29b      	uxth	r3, r3
 800840c:	4313      	orrs	r3, r2
 800840e:	b29a      	uxth	r2, r3
 8008410:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008414:	801a      	strh	r2, [r3, #0]
 8008416:	e02d      	b.n	8008474 <USB_EPStartXfer+0x12a0>
 8008418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800841c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	785b      	ldrb	r3, [r3, #1]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d125      	bne.n	8008474 <USB_EPStartXfer+0x12a0>
 8008428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800842c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008436:	b29b      	uxth	r3, r3
 8008438:	461a      	mov	r2, r3
 800843a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800843e:	4413      	add	r3, r2
 8008440:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	011a      	lsls	r2, r3, #4
 8008452:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008456:	4413      	add	r3, r2
 8008458:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800845c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	b29a      	uxth	r2, r3
 800846e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008472:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 8218 	beq.w	80088b6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80084a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80084aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d005      	beq.n	80084be <USB_EPStartXfer+0x12ea>
 80084b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80084b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10d      	bne.n	80084da <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80084be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80084c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f040 81f5 	bne.w	80088b6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80084cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80084d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f040 81ee 	bne.w	80088b6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80084da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008500:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008508:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	441a      	add	r2, r3
 800851e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008522:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008526:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800852a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800852e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008532:	b29b      	uxth	r3, r3
 8008534:	8013      	strh	r3, [r2, #0]
 8008536:	e1be      	b.n	80088b6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800853c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	78db      	ldrb	r3, [r3, #3]
 8008544:	2b01      	cmp	r3, #1
 8008546:	f040 81b4 	bne.w	80088b2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800854a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800854e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	699a      	ldr	r2, [r3, #24]
 8008556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800855a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	429a      	cmp	r2, r3
 8008564:	d917      	bls.n	8008596 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800856a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800857a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	699a      	ldr	r2, [r3, #24]
 8008582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008586:	1ad2      	subs	r2, r2, r3
 8008588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800858c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	619a      	str	r2, [r3, #24]
 8008594:	e00e      	b.n	80085b4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800859a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80085a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2200      	movs	r2, #0
 80085b2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80085b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	785b      	ldrb	r3, [r3, #1]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f040 8085 	bne.w	80086d0 <USB_EPStartXfer+0x14fc>
 80085c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	461a      	mov	r2, r3
 80085e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085ea:	4413      	add	r3, r2
 80085ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	011a      	lsls	r2, r3, #4
 80085fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008602:	4413      	add	r3, r2
 8008604:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008608:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800860c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	b29b      	uxth	r3, r3
 8008614:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008618:	b29a      	uxth	r2, r3
 800861a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800861e:	801a      	strh	r2, [r3, #0]
 8008620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008624:	2b3e      	cmp	r3, #62	@ 0x3e
 8008626:	d923      	bls.n	8008670 <USB_EPStartXfer+0x149c>
 8008628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800862c:	095b      	lsrs	r3, r3, #5
 800862e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008636:	f003 031f 	and.w	r3, r3, #31
 800863a:	2b00      	cmp	r3, #0
 800863c:	d104      	bne.n	8008648 <USB_EPStartXfer+0x1474>
 800863e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008642:	3b01      	subs	r3, #1
 8008644:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008648:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	b29a      	uxth	r2, r3
 8008650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008654:	b29b      	uxth	r3, r3
 8008656:	029b      	lsls	r3, r3, #10
 8008658:	b29b      	uxth	r3, r3
 800865a:	4313      	orrs	r3, r2
 800865c:	b29b      	uxth	r3, r3
 800865e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008666:	b29a      	uxth	r2, r3
 8008668:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800866c:	801a      	strh	r2, [r3, #0]
 800866e:	e060      	b.n	8008732 <USB_EPStartXfer+0x155e>
 8008670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10c      	bne.n	8008692 <USB_EPStartXfer+0x14be>
 8008678:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	b29b      	uxth	r3, r3
 8008680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008688:	b29a      	uxth	r2, r3
 800868a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800868e:	801a      	strh	r2, [r3, #0]
 8008690:	e04f      	b.n	8008732 <USB_EPStartXfer+0x155e>
 8008692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008696:	085b      	lsrs	r3, r3, #1
 8008698:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800869c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d004      	beq.n	80086b2 <USB_EPStartXfer+0x14de>
 80086a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086ac:	3301      	adds	r3, #1
 80086ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80086b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086be:	b29b      	uxth	r3, r3
 80086c0:	029b      	lsls	r3, r3, #10
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	4313      	orrs	r3, r2
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086cc:	801a      	strh	r2, [r3, #0]
 80086ce:	e030      	b.n	8008732 <USB_EPStartXfer+0x155e>
 80086d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	785b      	ldrb	r3, [r3, #1]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d128      	bne.n	8008732 <USB_EPStartXfer+0x155e>
 80086e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80086ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	461a      	mov	r2, r3
 8008700:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008704:	4413      	add	r3, r2
 8008706:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800870a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800870e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	011a      	lsls	r2, r3, #4
 8008718:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800871c:	4413      	add	r3, r2
 800871e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008722:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800872a:	b29a      	uxth	r2, r3
 800872c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008730:	801a      	strh	r2, [r3, #0]
 8008732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008736:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	785b      	ldrb	r3, [r3, #1]
 800874c:	2b00      	cmp	r3, #0
 800874e:	f040 8085 	bne.w	800885c <USB_EPStartXfer+0x1688>
 8008752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008756:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008764:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800876e:	b29b      	uxth	r3, r3
 8008770:	461a      	mov	r2, r3
 8008772:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008776:	4413      	add	r3, r2
 8008778:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800877c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	011a      	lsls	r2, r3, #4
 800878a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800878e:	4413      	add	r3, r2
 8008790:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008794:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008798:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	b29b      	uxth	r3, r3
 80087a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087aa:	801a      	strh	r2, [r3, #0]
 80087ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80087b2:	d923      	bls.n	80087fc <USB_EPStartXfer+0x1628>
 80087b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087b8:	095b      	lsrs	r3, r3, #5
 80087ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087c2:	f003 031f 	and.w	r3, r3, #31
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d104      	bne.n	80087d4 <USB_EPStartXfer+0x1600>
 80087ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087ce:	3b01      	subs	r3, #1
 80087d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	b29a      	uxth	r2, r3
 80087dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	029b      	lsls	r3, r3, #10
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	4313      	orrs	r3, r2
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087f8:	801a      	strh	r2, [r3, #0]
 80087fa:	e05c      	b.n	80088b6 <USB_EPStartXfer+0x16e2>
 80087fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10c      	bne.n	800881e <USB_EPStartXfer+0x164a>
 8008804:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	b29b      	uxth	r3, r3
 800880c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008814:	b29a      	uxth	r2, r3
 8008816:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800881a:	801a      	strh	r2, [r3, #0]
 800881c:	e04b      	b.n	80088b6 <USB_EPStartXfer+0x16e2>
 800881e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008822:	085b      	lsrs	r3, r3, #1
 8008824:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	2b00      	cmp	r3, #0
 8008832:	d004      	beq.n	800883e <USB_EPStartXfer+0x166a>
 8008834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008838:	3301      	adds	r3, #1
 800883a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800883e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	b29a      	uxth	r2, r3
 8008846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800884a:	b29b      	uxth	r3, r3
 800884c:	029b      	lsls	r3, r3, #10
 800884e:	b29b      	uxth	r3, r3
 8008850:	4313      	orrs	r3, r2
 8008852:	b29a      	uxth	r2, r3
 8008854:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008858:	801a      	strh	r2, [r3, #0]
 800885a:	e02c      	b.n	80088b6 <USB_EPStartXfer+0x16e2>
 800885c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	785b      	ldrb	r3, [r3, #1]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d124      	bne.n	80088b6 <USB_EPStartXfer+0x16e2>
 800886c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008870:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800887a:	b29b      	uxth	r3, r3
 800887c:	461a      	mov	r2, r3
 800887e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008882:	4413      	add	r3, r2
 8008884:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800888c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	011a      	lsls	r2, r3, #4
 8008896:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800889a:	4413      	add	r3, r2
 800889c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80088a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80088a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80088ae:	801a      	strh	r2, [r3, #0]
 80088b0:	e001      	b.n	80088b6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e03a      	b.n	800892c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	881b      	ldrh	r3, [r3, #0]
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80088e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80088e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80088e8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80088ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80088f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80088f4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80088f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	441a      	add	r2, r3
 8008912:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008916:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800891a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800891e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008926:	b29b      	uxth	r3, r3
 8008928:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008936:	b480      	push	{r7}
 8008938:	b085      	sub	sp, #20
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	785b      	ldrb	r3, [r3, #1]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d020      	beq.n	800898a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	b29b      	uxth	r3, r3
 8008956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800895a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800895e:	81bb      	strh	r3, [r7, #12]
 8008960:	89bb      	ldrh	r3, [r7, #12]
 8008962:	f083 0310 	eor.w	r3, r3, #16
 8008966:	81bb      	strh	r3, [r7, #12]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	441a      	add	r2, r3
 8008972:	89bb      	ldrh	r3, [r7, #12]
 8008974:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008978:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800897c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008984:	b29b      	uxth	r3, r3
 8008986:	8013      	strh	r3, [r2, #0]
 8008988:	e01f      	b.n	80089ca <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	b29b      	uxth	r3, r3
 8008998:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800899c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089a0:	81fb      	strh	r3, [r7, #14]
 80089a2:	89fb      	ldrh	r3, [r7, #14]
 80089a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80089a8:	81fb      	strh	r3, [r7, #14]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	441a      	add	r2, r3
 80089b4:	89fb      	ldrh	r3, [r7, #14]
 80089b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bc80      	pop	{r7}
 80089d4:	4770      	bx	lr

080089d6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089d6:	b480      	push	{r7}
 80089d8:	b087      	sub	sp, #28
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	7b1b      	ldrb	r3, [r3, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f040 809d 	bne.w	8008b24 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	785b      	ldrb	r3, [r3, #1]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d04c      	beq.n	8008a8c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	823b      	strh	r3, [r7, #16]
 8008a00:	8a3b      	ldrh	r3, [r7, #16]
 8008a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d01b      	beq.n	8008a42 <USB_EPClearStall+0x6c>
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	881b      	ldrh	r3, [r3, #0]
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a20:	81fb      	strh	r3, [r7, #14]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	441a      	add	r2, r3
 8008a2c:	89fb      	ldrh	r3, [r7, #14]
 8008a2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a3a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	78db      	ldrb	r3, [r3, #3]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d06c      	beq.n	8008b24 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a60:	81bb      	strh	r3, [r7, #12]
 8008a62:	89bb      	ldrh	r3, [r7, #12]
 8008a64:	f083 0320 	eor.w	r3, r3, #32
 8008a68:	81bb      	strh	r3, [r7, #12]
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	441a      	add	r2, r3
 8008a74:	89bb      	ldrh	r3, [r7, #12]
 8008a76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	8013      	strh	r3, [r2, #0]
 8008a8a:	e04b      	b.n	8008b24 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	881b      	ldrh	r3, [r3, #0]
 8008a98:	82fb      	strh	r3, [r7, #22]
 8008a9a:	8afb      	ldrh	r3, [r7, #22]
 8008a9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d01b      	beq.n	8008adc <USB_EPClearStall+0x106>
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	881b      	ldrh	r3, [r3, #0]
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aba:	82bb      	strh	r3, [r7, #20]
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	441a      	add	r2, r3
 8008ac6:	8abb      	ldrh	r3, [r7, #20]
 8008ac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008acc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ad0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	881b      	ldrh	r3, [r3, #0]
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008af2:	827b      	strh	r3, [r7, #18]
 8008af4:	8a7b      	ldrh	r3, [r7, #18]
 8008af6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008afa:	827b      	strh	r3, [r7, #18]
 8008afc:	8a7b      	ldrh	r3, [r7, #18]
 8008afe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008b02:	827b      	strh	r3, [r7, #18]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	441a      	add	r2, r3
 8008b0e:	8a7b      	ldrh	r3, [r7, #18]
 8008b10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	371c      	adds	r7, #28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bc80      	pop	{r7}
 8008b2e:	4770      	bx	lr

08008b30 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008b3c:	78fb      	ldrb	r3, [r7, #3]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d103      	bne.n	8008b4a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2280      	movs	r2, #128	@ 0x80
 8008b46:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc80      	pop	{r7}
 8008b54:	4770      	bx	lr

08008b56 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b083      	sub	sp, #12
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bc80      	pop	{r7}
 8008b68:	4770      	bx	lr

08008b6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b083      	sub	sp, #12
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bc80      	pop	{r7}
 8008b7c:	4770      	bx	lr

08008b7e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b085      	sub	sp, #20
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b90:	68fb      	ldr	r3, [r7, #12]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bc80      	pop	{r7}
 8008b9a:	4770      	bx	lr

08008b9c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bc80      	pop	{r7}
 8008bb0:	4770      	bx	lr

08008bb2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b08b      	sub	sp, #44	@ 0x2c
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	60f8      	str	r0, [r7, #12]
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	80fb      	strh	r3, [r7, #6]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008bc8:	88bb      	ldrh	r3, [r7, #4]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	085b      	lsrs	r3, r3, #1
 8008bce:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008bd8:	88fb      	ldrh	r3, [r7, #6]
 8008bda:	005a      	lsls	r2, r3, #1
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008be4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bea:	e01f      	b.n	8008c2c <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	b21b      	sxth	r3, r3
 8008bfa:	021b      	lsls	r3, r3, #8
 8008bfc:	b21a      	sxth	r2, r3
 8008bfe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	b21b      	sxth	r3, r3
 8008c06:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008c08:	6a3b      	ldr	r3, [r7, #32]
 8008c0a:	8a7a      	ldrh	r2, [r7, #18]
 8008c0c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	3302      	adds	r3, #2
 8008c12:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008c14:	6a3b      	ldr	r3, [r7, #32]
 8008c16:	3302      	adds	r3, #2
 8008c18:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	3301      	adds	r3, #1
 8008c24:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1dc      	bne.n	8008bec <USB_WritePMA+0x3a>
  }
}
 8008c32:	bf00      	nop
 8008c34:	bf00      	nop
 8008c36:	372c      	adds	r7, #44	@ 0x2c
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bc80      	pop	{r7}
 8008c3c:	4770      	bx	lr

08008c3e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b08b      	sub	sp, #44	@ 0x2c
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	60f8      	str	r0, [r7, #12]
 8008c46:	60b9      	str	r1, [r7, #8]
 8008c48:	4611      	mov	r1, r2
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	80fb      	strh	r3, [r7, #6]
 8008c50:	4613      	mov	r3, r2
 8008c52:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008c54:	88bb      	ldrh	r3, [r7, #4]
 8008c56:	085b      	lsrs	r3, r3, #1
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c64:	88fb      	ldrh	r3, [r7, #6]
 8008c66:	005a      	lsls	r2, r3, #1
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c70:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c76:	e01b      	b.n	8008cb0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008c78:	6a3b      	ldr	r3, [r7, #32]
 8008c7a:	881b      	ldrh	r3, [r3, #0]
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c80:	6a3b      	ldr	r3, [r7, #32]
 8008c82:	3302      	adds	r3, #2
 8008c84:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	3301      	adds	r3, #1
 8008c92:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	0a1b      	lsrs	r3, r3, #8
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008ca4:	6a3b      	ldr	r3, [r7, #32]
 8008ca6:	3302      	adds	r3, #2
 8008ca8:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cac:	3b01      	subs	r3, #1
 8008cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1e0      	bne.n	8008c78 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008cb6:	88bb      	ldrh	r3, [r7, #4]
 8008cb8:	f003 0301 	and.w	r3, r3, #1
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d007      	beq.n	8008cd2 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008cc2:	6a3b      	ldr	r3, [r7, #32]
 8008cc4:	881b      	ldrh	r3, [r3, #0]
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	701a      	strb	r2, [r3, #0]
  }
}
 8008cd2:	bf00      	nop
 8008cd4:	372c      	adds	r7, #44	@ 0x2c
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bc80      	pop	{r7}
 8008cda:	4770      	bx	lr

08008cdc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	7c1b      	ldrb	r3, [r3, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d115      	bne.n	8008d20 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008cf4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	2181      	movs	r1, #129	@ 0x81
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f001 fe82 	bl	800aa06 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008d08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d0c:	2202      	movs	r2, #2
 8008d0e:	2101      	movs	r1, #1
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f001 fe78 	bl	800aa06 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008d1e:	e012      	b.n	8008d46 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008d20:	2340      	movs	r3, #64	@ 0x40
 8008d22:	2202      	movs	r2, #2
 8008d24:	2181      	movs	r1, #129	@ 0x81
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f001 fe6d 	bl	800aa06 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008d32:	2340      	movs	r3, #64	@ 0x40
 8008d34:	2202      	movs	r2, #2
 8008d36:	2101      	movs	r1, #1
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f001 fe64 	bl	800aa06 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d46:	2308      	movs	r3, #8
 8008d48:	2203      	movs	r2, #3
 8008d4a:	2182      	movs	r1, #130	@ 0x82
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 fe5a 	bl	800aa06 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d58:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008d5c:	f001 ff7a 	bl	800ac54 <USBD_static_malloc>
 8008d60:	4602      	mov	r2, r0
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d102      	bne.n	8008d78 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008d72:	2301      	movs	r3, #1
 8008d74:	73fb      	strb	r3, [r7, #15]
 8008d76:	e026      	b.n	8008dc6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d7e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	7c1b      	ldrb	r3, [r3, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d109      	bne.n	8008db6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008da8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008dac:	2101      	movs	r1, #1
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f001 ff19 	bl	800abe6 <USBD_LL_PrepareReceive>
 8008db4:	e007      	b.n	8008dc6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008dbc:	2340      	movs	r3, #64	@ 0x40
 8008dbe:	2101      	movs	r1, #1
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f001 ff10 	bl	800abe6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008de0:	2181      	movs	r1, #129	@ 0x81
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f001 fe35 	bl	800aa52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008dee:	2101      	movs	r1, #1
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f001 fe2e 	bl	800aa52 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008dfe:	2182      	movs	r1, #130	@ 0x82
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f001 fe26 	bl	800aa52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00e      	beq.n	8008e34 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e26:	4618      	mov	r0, r3
 8008e28:	f001 ff20 	bl	800ac6c <USBD_static_free>
    pdev->pClassData = NULL;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b086      	sub	sp, #24
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e4e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008e50:	2300      	movs	r3, #0
 8008e52:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008e54:	2300      	movs	r3, #0
 8008e56:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d039      	beq.n	8008edc <USBD_CDC_Setup+0x9e>
 8008e68:	2b20      	cmp	r3, #32
 8008e6a:	d17f      	bne.n	8008f6c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	88db      	ldrh	r3, [r3, #6]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d029      	beq.n	8008ec8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	b25b      	sxtb	r3, r3
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	da11      	bge.n	8008ea2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008e8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e8c:	683a      	ldr	r2, [r7, #0]
 8008e8e:	88d2      	ldrh	r2, [r2, #6]
 8008e90:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e92:	6939      	ldr	r1, [r7, #16]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	88db      	ldrh	r3, [r3, #6]
 8008e98:	461a      	mov	r2, r3
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f001 fa06 	bl	800a2ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008ea0:	e06b      	b.n	8008f7a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	785a      	ldrb	r2, [r3, #1]
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	88db      	ldrh	r3, [r3, #6]
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008eb8:	6939      	ldr	r1, [r7, #16]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	88db      	ldrh	r3, [r3, #6]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f001 fa21 	bl	800a308 <USBD_CtlPrepareRx>
      break;
 8008ec6:	e058      	b.n	8008f7a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	683a      	ldr	r2, [r7, #0]
 8008ed2:	7850      	ldrb	r0, [r2, #1]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	6839      	ldr	r1, [r7, #0]
 8008ed8:	4798      	blx	r3
      break;
 8008eda:	e04e      	b.n	8008f7a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	785b      	ldrb	r3, [r3, #1]
 8008ee0:	2b0b      	cmp	r3, #11
 8008ee2:	d02e      	beq.n	8008f42 <USBD_CDC_Setup+0x104>
 8008ee4:	2b0b      	cmp	r3, #11
 8008ee6:	dc38      	bgt.n	8008f5a <USBD_CDC_Setup+0x11c>
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <USBD_CDC_Setup+0xb4>
 8008eec:	2b0a      	cmp	r3, #10
 8008eee:	d014      	beq.n	8008f1a <USBD_CDC_Setup+0xdc>
 8008ef0:	e033      	b.n	8008f5a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ef8:	2b03      	cmp	r3, #3
 8008efa:	d107      	bne.n	8008f0c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008efc:	f107 030c 	add.w	r3, r7, #12
 8008f00:	2202      	movs	r2, #2
 8008f02:	4619      	mov	r1, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f001 f9d1 	bl	800a2ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f0a:	e02e      	b.n	8008f6a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f001 f962 	bl	800a1d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f14:	2302      	movs	r3, #2
 8008f16:	75fb      	strb	r3, [r7, #23]
          break;
 8008f18:	e027      	b.n	8008f6a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f20:	2b03      	cmp	r3, #3
 8008f22:	d107      	bne.n	8008f34 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008f24:	f107 030f 	add.w	r3, r7, #15
 8008f28:	2201      	movs	r2, #1
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f001 f9bd 	bl	800a2ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f32:	e01a      	b.n	8008f6a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f001 f94e 	bl	800a1d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	75fb      	strb	r3, [r7, #23]
          break;
 8008f40:	e013      	b.n	8008f6a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f48:	2b03      	cmp	r3, #3
 8008f4a:	d00d      	beq.n	8008f68 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f001 f942 	bl	800a1d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f54:	2302      	movs	r3, #2
 8008f56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f58:	e006      	b.n	8008f68 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f001 f93b 	bl	800a1d8 <USBD_CtlError>
          ret = USBD_FAIL;
 8008f62:	2302      	movs	r3, #2
 8008f64:	75fb      	strb	r3, [r7, #23]
          break;
 8008f66:	e000      	b.n	8008f6a <USBD_CDC_Setup+0x12c>
          break;
 8008f68:	bf00      	nop
      }
      break;
 8008f6a:	e006      	b.n	8008f7a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008f6c:	6839      	ldr	r1, [r7, #0]
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f001 f932 	bl	800a1d8 <USBD_CtlError>
      ret = USBD_FAIL;
 8008f74:	2302      	movs	r3, #2
 8008f76:	75fb      	strb	r3, [r7, #23]
      break;
 8008f78:	bf00      	nop
  }

  return ret;
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3718      	adds	r7, #24
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f96:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008f9e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d03a      	beq.n	8009020 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008faa:	78fa      	ldrb	r2, [r7, #3]
 8008fac:	6879      	ldr	r1, [r7, #4]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	440b      	add	r3, r1
 8008fb8:	331c      	adds	r3, #28
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d029      	beq.n	8009014 <USBD_CDC_DataIn+0x90>
 8008fc0:	78fa      	ldrb	r2, [r7, #3]
 8008fc2:	6879      	ldr	r1, [r7, #4]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	440b      	add	r3, r1
 8008fce:	331c      	adds	r3, #28
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	78f9      	ldrb	r1, [r7, #3]
 8008fd4:	68b8      	ldr	r0, [r7, #8]
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	440b      	add	r3, r1
 8008fdc:	00db      	lsls	r3, r3, #3
 8008fde:	4403      	add	r3, r0
 8008fe0:	3320      	adds	r3, #32
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	fbb2 f1f3 	udiv	r1, r2, r3
 8008fe8:	fb01 f303 	mul.w	r3, r1, r3
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d110      	bne.n	8009014 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008ff2:	78fa      	ldrb	r2, [r7, #3]
 8008ff4:	6879      	ldr	r1, [r7, #4]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	440b      	add	r3, r1
 8009000:	331c      	adds	r3, #28
 8009002:	2200      	movs	r2, #0
 8009004:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009006:	78f9      	ldrb	r1, [r7, #3]
 8009008:	2300      	movs	r3, #0
 800900a:	2200      	movs	r2, #0
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f001 fdc7 	bl	800aba0 <USBD_LL_Transmit>
 8009012:	e003      	b.n	800901c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	e000      	b.n	8009022 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009020:	2302      	movs	r3, #2
  }
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b084      	sub	sp, #16
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	460b      	mov	r3, r1
 8009034:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800903c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800903e:	78fb      	ldrb	r3, [r7, #3]
 8009040:	4619      	mov	r1, r3
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f001 fdf2 	bl	800ac2c <USBD_LL_GetRxDataSize>
 8009048:	4602      	mov	r2, r0
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00d      	beq.n	8009076 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800906e:	4611      	mov	r1, r2
 8009070:	4798      	blx	r3

    return USBD_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	e000      	b.n	8009078 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009076:	2302      	movs	r3, #2
  }
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800908e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009096:	2b00      	cmp	r3, #0
 8009098:	d014      	beq.n	80090c4 <USBD_CDC_EP0_RxReady+0x44>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80090a0:	2bff      	cmp	r3, #255	@ 0xff
 80090a2:	d00f      	beq.n	80090c4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80090b2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80090ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	22ff      	movs	r2, #255	@ 0xff
 80090c0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2243      	movs	r2, #67	@ 0x43
 80090dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80090de:	4b03      	ldr	r3, [pc, #12]	@ (80090ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bc80      	pop	{r7}
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	200000ac 	.word	0x200000ac

080090f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2243      	movs	r2, #67	@ 0x43
 80090fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80090fe:	4b03      	ldr	r3, [pc, #12]	@ (800910c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009100:	4618      	mov	r0, r3
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	bc80      	pop	{r7}
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	20000068 	.word	0x20000068

08009110 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2243      	movs	r2, #67	@ 0x43
 800911c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800911e:	4b03      	ldr	r3, [pc, #12]	@ (800912c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009120:	4618      	mov	r0, r3
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	bc80      	pop	{r7}
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	200000f0 	.word	0x200000f0

08009130 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	220a      	movs	r2, #10
 800913c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800913e:	4b03      	ldr	r3, [pc, #12]	@ (800914c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009140:	4618      	mov	r0, r3
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	bc80      	pop	{r7}
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	20000024 	.word	0x20000024

08009150 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800915a:	2302      	movs	r3, #2
 800915c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d005      	beq.n	8009170 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009170:	7bfb      	ldrb	r3, [r7, #15]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	bc80      	pop	{r7}
 800917a:	4770      	bx	lr

0800917c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800917c:	b480      	push	{r7}
 800917e:	b087      	sub	sp, #28
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	4613      	mov	r3, r2
 8009188:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009190:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800919a:	88fa      	ldrh	r2, [r7, #6]
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	371c      	adds	r7, #28
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bc80      	pop	{r7}
 80091ac:	4770      	bx	lr

080091ae <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b085      	sub	sp, #20
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091be:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bc80      	pop	{r7}
 80091d2:	4770      	bx	lr

080091d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d01c      	beq.n	8009228 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d115      	bne.n	8009224 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009216:	b29b      	uxth	r3, r3
 8009218:	2181      	movs	r1, #129	@ 0x81
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f001 fcc0 	bl	800aba0 <USBD_LL_Transmit>

      return USBD_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	e002      	b.n	800922a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009224:	2301      	movs	r3, #1
 8009226:	e000      	b.n	800922a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009228:	2302      	movs	r3, #2
  }
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b084      	sub	sp, #16
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009240:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009248:	2b00      	cmp	r3, #0
 800924a:	d017      	beq.n	800927c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	7c1b      	ldrb	r3, [r3, #16]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d109      	bne.n	8009268 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800925a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800925e:	2101      	movs	r1, #1
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f001 fcc0 	bl	800abe6 <USBD_LL_PrepareReceive>
 8009266:	e007      	b.n	8009278 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800926e:	2340      	movs	r3, #64	@ 0x40
 8009270:	2101      	movs	r1, #1
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f001 fcb7 	bl	800abe6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	e000      	b.n	800927e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800927c:	2302      	movs	r3, #2
  }
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b084      	sub	sp, #16
 800928a:	af00      	add	r7, sp, #0
 800928c:	60f8      	str	r0, [r7, #12]
 800928e:	60b9      	str	r1, [r7, #8]
 8009290:	4613      	mov	r3, r2
 8009292:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d101      	bne.n	800929e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800929a:	2302      	movs	r3, #2
 800929c:	e01a      	b.n	80092d4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d003      	beq.n	80092b0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d003      	beq.n	80092be <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	79fa      	ldrb	r2, [r7, #7]
 80092ca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f001 fb25 	bl	800a91c <USBD_LL_Init>

  return USBD_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d006      	beq.n	80092fe <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	73fb      	strb	r3, [r7, #15]
 80092fc:	e001      	b.n	8009302 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80092fe:	2302      	movs	r3, #2
 8009300:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009302:	7bfb      	ldrb	r3, [r7, #15]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	bc80      	pop	{r7}
 800930c:	4770      	bx	lr

0800930e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b082      	sub	sp, #8
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f001 fb5a 	bl	800a9d0 <USBD_LL_Start>

  return USBD_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009326:	b480      	push	{r7}
 8009328:	b083      	sub	sp, #12
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	bc80      	pop	{r7}
 8009338:	4770      	bx	lr

0800933a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	460b      	mov	r3, r1
 8009344:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009346:	2302      	movs	r3, #2
 8009348:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00c      	beq.n	800936e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	78fa      	ldrb	r2, [r7, #3]
 800935e:	4611      	mov	r1, r2
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	4798      	blx	r3
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d101      	bne.n	800936e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800936e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	78fa      	ldrb	r2, [r7, #3]
 800938e:	4611      	mov	r1, r2
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	4798      	blx	r3

  return USBD_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b082      	sub	sp, #8
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80093ae:	6839      	ldr	r1, [r7, #0]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f000 fed8 	bl	800a166 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80093c4:	461a      	mov	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80093d2:	f003 031f 	and.w	r3, r3, #31
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d016      	beq.n	8009408 <USBD_LL_SetupStage+0x6a>
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d81c      	bhi.n	8009418 <USBD_LL_SetupStage+0x7a>
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d002      	beq.n	80093e8 <USBD_LL_SetupStage+0x4a>
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d008      	beq.n	80093f8 <USBD_LL_SetupStage+0x5a>
 80093e6:	e017      	b.n	8009418 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80093ee:	4619      	mov	r1, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f9cb 	bl	800978c <USBD_StdDevReq>
      break;
 80093f6:	e01a      	b.n	800942e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80093fe:	4619      	mov	r1, r3
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fa2d 	bl	8009860 <USBD_StdItfReq>
      break;
 8009406:	e012      	b.n	800942e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800940e:	4619      	mov	r1, r3
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fa6d 	bl	80098f0 <USBD_StdEPReq>
      break;
 8009416:	e00a      	b.n	800942e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800941e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009422:	b2db      	uxtb	r3, r3
 8009424:	4619      	mov	r1, r3
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f001 fb32 	bl	800aa90 <USBD_LL_StallEP>
      break;
 800942c:	bf00      	nop
  }

  return USBD_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	460b      	mov	r3, r1
 8009442:	607a      	str	r2, [r7, #4]
 8009444:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009446:	7afb      	ldrb	r3, [r7, #11]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d14b      	bne.n	80094e4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009452:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800945a:	2b03      	cmp	r3, #3
 800945c:	d134      	bne.n	80094c8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	68da      	ldr	r2, [r3, #12]
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	429a      	cmp	r2, r3
 8009468:	d919      	bls.n	800949e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	68da      	ldr	r2, [r3, #12]
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	1ad2      	subs	r2, r2, r3
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	68da      	ldr	r2, [r3, #12]
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009480:	429a      	cmp	r2, r3
 8009482:	d203      	bcs.n	800948c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009488:	b29b      	uxth	r3, r3
 800948a:	e002      	b.n	8009492 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009490:	b29b      	uxth	r3, r3
 8009492:	461a      	mov	r2, r3
 8009494:	6879      	ldr	r1, [r7, #4]
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f000 ff54 	bl	800a344 <USBD_CtlContinueRx>
 800949c:	e038      	b.n	8009510 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00a      	beq.n	80094c0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	d105      	bne.n	80094c0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f000 ff51 	bl	800a368 <USBD_CtlSendStatus>
 80094c6:	e023      	b.n	8009510 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094ce:	2b05      	cmp	r3, #5
 80094d0:	d11e      	bne.n	8009510 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80094da:	2100      	movs	r1, #0
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f001 fad7 	bl	800aa90 <USBD_LL_StallEP>
 80094e2:	e015      	b.n	8009510 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00d      	beq.n	800950c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80094f6:	2b03      	cmp	r3, #3
 80094f8:	d108      	bne.n	800950c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	7afa      	ldrb	r2, [r7, #11]
 8009504:	4611      	mov	r1, r2
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	4798      	blx	r3
 800950a:	e001      	b.n	8009510 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800950c:	2302      	movs	r3, #2
 800950e:	e000      	b.n	8009512 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3718      	adds	r7, #24
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b086      	sub	sp, #24
 800951e:	af00      	add	r7, sp, #0
 8009520:	60f8      	str	r0, [r7, #12]
 8009522:	460b      	mov	r3, r1
 8009524:	607a      	str	r2, [r7, #4]
 8009526:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009528:	7afb      	ldrb	r3, [r7, #11]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d17f      	bne.n	800962e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	3314      	adds	r3, #20
 8009532:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800953a:	2b02      	cmp	r3, #2
 800953c:	d15c      	bne.n	80095f8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	68da      	ldr	r2, [r3, #12]
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	429a      	cmp	r2, r3
 8009548:	d915      	bls.n	8009576 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	68da      	ldr	r2, [r3, #12]
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	1ad2      	subs	r2, r2, r3
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	b29b      	uxth	r3, r3
 800955e:	461a      	mov	r2, r3
 8009560:	6879      	ldr	r1, [r7, #4]
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f000 febe 	bl	800a2e4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009568:	2300      	movs	r3, #0
 800956a:	2200      	movs	r2, #0
 800956c:	2100      	movs	r1, #0
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f001 fb39 	bl	800abe6 <USBD_LL_PrepareReceive>
 8009574:	e04e      	b.n	8009614 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	697a      	ldr	r2, [r7, #20]
 800957c:	6912      	ldr	r2, [r2, #16]
 800957e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009582:	fb01 f202 	mul.w	r2, r1, r2
 8009586:	1a9b      	subs	r3, r3, r2
 8009588:	2b00      	cmp	r3, #0
 800958a:	d11c      	bne.n	80095c6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	689a      	ldr	r2, [r3, #8]
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009594:	429a      	cmp	r2, r3
 8009596:	d316      	bcc.n	80095c6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	689a      	ldr	r2, [r3, #8]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d20f      	bcs.n	80095c6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80095a6:	2200      	movs	r2, #0
 80095a8:	2100      	movs	r1, #0
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f000 fe9a 	bl	800a2e4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095b8:	2300      	movs	r3, #0
 80095ba:	2200      	movs	r2, #0
 80095bc:	2100      	movs	r1, #0
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f001 fb11 	bl	800abe6 <USBD_LL_PrepareReceive>
 80095c4:	e026      	b.n	8009614 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00a      	beq.n	80095e8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80095d8:	2b03      	cmp	r3, #3
 80095da:	d105      	bne.n	80095e8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80095e8:	2180      	movs	r1, #128	@ 0x80
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f001 fa50 	bl	800aa90 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f000 fecc 	bl	800a38e <USBD_CtlReceiveStatus>
 80095f6:	e00d      	b.n	8009614 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80095fe:	2b04      	cmp	r3, #4
 8009600:	d004      	beq.n	800960c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009608:	2b00      	cmp	r3, #0
 800960a:	d103      	bne.n	8009614 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800960c:	2180      	movs	r1, #128	@ 0x80
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f001 fa3e 	bl	800aa90 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800961a:	2b01      	cmp	r3, #1
 800961c:	d11d      	bne.n	800965a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f7ff fe81 	bl	8009326 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800962c:	e015      	b.n	800965a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00d      	beq.n	8009656 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009640:	2b03      	cmp	r3, #3
 8009642:	d108      	bne.n	8009656 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800964a:	695b      	ldr	r3, [r3, #20]
 800964c:	7afa      	ldrb	r2, [r7, #11]
 800964e:	4611      	mov	r1, r2
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	4798      	blx	r3
 8009654:	e001      	b.n	800965a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009656:	2302      	movs	r3, #2
 8009658:	e000      	b.n	800965c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800966c:	2340      	movs	r3, #64	@ 0x40
 800966e:	2200      	movs	r2, #0
 8009670:	2100      	movs	r1, #0
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f001 f9c7 	bl	800aa06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2240      	movs	r2, #64	@ 0x40
 8009684:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009688:	2340      	movs	r3, #64	@ 0x40
 800968a:	2200      	movs	r2, #0
 800968c:	2180      	movs	r1, #128	@ 0x80
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f001 f9b9 	bl	800aa06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2240      	movs	r2, #64	@ 0x40
 800969e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d009      	beq.n	80096dc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	6852      	ldr	r2, [r2, #4]
 80096d4:	b2d2      	uxtb	r2, r2
 80096d6:	4611      	mov	r1, r2
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	4798      	blx	r3
  }

  return USBD_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	460b      	mov	r3, r1
 80096f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	78fa      	ldrb	r2, [r7, #3]
 80096f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	bc80      	pop	{r7}
 8009702:	4770      	bx	lr

08009704 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2204      	movs	r2, #4
 800971c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	370c      	adds	r7, #12
 8009726:	46bd      	mov	sp, r7
 8009728:	bc80      	pop	{r7}
 800972a:	4770      	bx	lr

0800972c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800973a:	2b04      	cmp	r3, #4
 800973c:	d105      	bne.n	800974a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	bc80      	pop	{r7}
 8009754:	4770      	bx	lr

08009756 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b082      	sub	sp, #8
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009764:	2b03      	cmp	r3, #3
 8009766:	d10b      	bne.n	8009780 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800976e:	69db      	ldr	r3, [r3, #28]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d005      	beq.n	8009780 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800977a:	69db      	ldr	r3, [r3, #28]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
	...

0800978c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097a2:	2b40      	cmp	r3, #64	@ 0x40
 80097a4:	d005      	beq.n	80097b2 <USBD_StdDevReq+0x26>
 80097a6:	2b40      	cmp	r3, #64	@ 0x40
 80097a8:	d84f      	bhi.n	800984a <USBD_StdDevReq+0xbe>
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d009      	beq.n	80097c2 <USBD_StdDevReq+0x36>
 80097ae:	2b20      	cmp	r3, #32
 80097b0:	d14b      	bne.n	800984a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	4798      	blx	r3
      break;
 80097c0:	e048      	b.n	8009854 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	785b      	ldrb	r3, [r3, #1]
 80097c6:	2b09      	cmp	r3, #9
 80097c8:	d839      	bhi.n	800983e <USBD_StdDevReq+0xb2>
 80097ca:	a201      	add	r2, pc, #4	@ (adr r2, 80097d0 <USBD_StdDevReq+0x44>)
 80097cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d0:	08009821 	.word	0x08009821
 80097d4:	08009835 	.word	0x08009835
 80097d8:	0800983f 	.word	0x0800983f
 80097dc:	0800982b 	.word	0x0800982b
 80097e0:	0800983f 	.word	0x0800983f
 80097e4:	08009803 	.word	0x08009803
 80097e8:	080097f9 	.word	0x080097f9
 80097ec:	0800983f 	.word	0x0800983f
 80097f0:	08009817 	.word	0x08009817
 80097f4:	0800980d 	.word	0x0800980d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f9dc 	bl	8009bb8 <USBD_GetDescriptor>
          break;
 8009800:	e022      	b.n	8009848 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009802:	6839      	ldr	r1, [r7, #0]
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 fb3f 	bl	8009e88 <USBD_SetAddress>
          break;
 800980a:	e01d      	b.n	8009848 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fb7e 	bl	8009f10 <USBD_SetConfig>
          break;
 8009814:	e018      	b.n	8009848 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009816:	6839      	ldr	r1, [r7, #0]
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fc07 	bl	800a02c <USBD_GetConfig>
          break;
 800981e:	e013      	b.n	8009848 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009820:	6839      	ldr	r1, [r7, #0]
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fc37 	bl	800a096 <USBD_GetStatus>
          break;
 8009828:	e00e      	b.n	8009848 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fc65 	bl	800a0fc <USBD_SetFeature>
          break;
 8009832:	e009      	b.n	8009848 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fc74 	bl	800a124 <USBD_ClrFeature>
          break;
 800983c:	e004      	b.n	8009848 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fcc9 	bl	800a1d8 <USBD_CtlError>
          break;
 8009846:	bf00      	nop
      }
      break;
 8009848:	e004      	b.n	8009854 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fcc3 	bl	800a1d8 <USBD_CtlError>
      break;
 8009852:	bf00      	nop
  }

  return ret;
 8009854:	7bfb      	ldrb	r3, [r7, #15]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop

08009860 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009876:	2b40      	cmp	r3, #64	@ 0x40
 8009878:	d005      	beq.n	8009886 <USBD_StdItfReq+0x26>
 800987a:	2b40      	cmp	r3, #64	@ 0x40
 800987c:	d82e      	bhi.n	80098dc <USBD_StdItfReq+0x7c>
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <USBD_StdItfReq+0x26>
 8009882:	2b20      	cmp	r3, #32
 8009884:	d12a      	bne.n	80098dc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800988c:	3b01      	subs	r3, #1
 800988e:	2b02      	cmp	r3, #2
 8009890:	d81d      	bhi.n	80098ce <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	889b      	ldrh	r3, [r3, #4]
 8009896:	b2db      	uxtb	r3, r3
 8009898:	2b01      	cmp	r3, #1
 800989a:	d813      	bhi.n	80098c4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	4798      	blx	r3
 80098aa:	4603      	mov	r3, r0
 80098ac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	88db      	ldrh	r3, [r3, #6]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d110      	bne.n	80098d8 <USBD_StdItfReq+0x78>
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d10d      	bne.n	80098d8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 fd53 	bl	800a368 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80098c2:	e009      	b.n	80098d8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fc86 	bl	800a1d8 <USBD_CtlError>
          break;
 80098cc:	e004      	b.n	80098d8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80098ce:	6839      	ldr	r1, [r7, #0]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fc81 	bl	800a1d8 <USBD_CtlError>
          break;
 80098d6:	e000      	b.n	80098da <USBD_StdItfReq+0x7a>
          break;
 80098d8:	bf00      	nop
      }
      break;
 80098da:	e004      	b.n	80098e6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fc7a 	bl	800a1d8 <USBD_CtlError>
      break;
 80098e4:	bf00      	nop
  }

  return USBD_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80098fa:	2300      	movs	r3, #0
 80098fc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	889b      	ldrh	r3, [r3, #4]
 8009902:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800990c:	2b40      	cmp	r3, #64	@ 0x40
 800990e:	d007      	beq.n	8009920 <USBD_StdEPReq+0x30>
 8009910:	2b40      	cmp	r3, #64	@ 0x40
 8009912:	f200 8146 	bhi.w	8009ba2 <USBD_StdEPReq+0x2b2>
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00a      	beq.n	8009930 <USBD_StdEPReq+0x40>
 800991a:	2b20      	cmp	r3, #32
 800991c:	f040 8141 	bne.w	8009ba2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	4798      	blx	r3
      break;
 800992e:	e13d      	b.n	8009bac <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009938:	2b20      	cmp	r3, #32
 800993a:	d10a      	bne.n	8009952 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	6839      	ldr	r1, [r7, #0]
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	4798      	blx	r3
 800994a:	4603      	mov	r3, r0
 800994c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	e12d      	b.n	8009bae <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	785b      	ldrb	r3, [r3, #1]
 8009956:	2b03      	cmp	r3, #3
 8009958:	d007      	beq.n	800996a <USBD_StdEPReq+0x7a>
 800995a:	2b03      	cmp	r3, #3
 800995c:	f300 811b 	bgt.w	8009b96 <USBD_StdEPReq+0x2a6>
 8009960:	2b00      	cmp	r3, #0
 8009962:	d072      	beq.n	8009a4a <USBD_StdEPReq+0x15a>
 8009964:	2b01      	cmp	r3, #1
 8009966:	d03a      	beq.n	80099de <USBD_StdEPReq+0xee>
 8009968:	e115      	b.n	8009b96 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009970:	2b02      	cmp	r3, #2
 8009972:	d002      	beq.n	800997a <USBD_StdEPReq+0x8a>
 8009974:	2b03      	cmp	r3, #3
 8009976:	d015      	beq.n	80099a4 <USBD_StdEPReq+0xb4>
 8009978:	e02b      	b.n	80099d2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800997a:	7bbb      	ldrb	r3, [r7, #14]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00c      	beq.n	800999a <USBD_StdEPReq+0xaa>
 8009980:	7bbb      	ldrb	r3, [r7, #14]
 8009982:	2b80      	cmp	r3, #128	@ 0x80
 8009984:	d009      	beq.n	800999a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009986:	7bbb      	ldrb	r3, [r7, #14]
 8009988:	4619      	mov	r1, r3
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f001 f880 	bl	800aa90 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009990:	2180      	movs	r1, #128	@ 0x80
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f001 f87c 	bl	800aa90 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009998:	e020      	b.n	80099dc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fc1b 	bl	800a1d8 <USBD_CtlError>
              break;
 80099a2:	e01b      	b.n	80099dc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	885b      	ldrh	r3, [r3, #2]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10e      	bne.n	80099ca <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80099ac:	7bbb      	ldrb	r3, [r7, #14]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00b      	beq.n	80099ca <USBD_StdEPReq+0xda>
 80099b2:	7bbb      	ldrb	r3, [r7, #14]
 80099b4:	2b80      	cmp	r3, #128	@ 0x80
 80099b6:	d008      	beq.n	80099ca <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	88db      	ldrh	r3, [r3, #6]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d104      	bne.n	80099ca <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80099c0:	7bbb      	ldrb	r3, [r7, #14]
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 f863 	bl	800aa90 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fccc 	bl	800a368 <USBD_CtlSendStatus>

              break;
 80099d0:	e004      	b.n	80099dc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fbff 	bl	800a1d8 <USBD_CtlError>
              break;
 80099da:	bf00      	nop
          }
          break;
 80099dc:	e0e0      	b.n	8009ba0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d002      	beq.n	80099ee <USBD_StdEPReq+0xfe>
 80099e8:	2b03      	cmp	r3, #3
 80099ea:	d015      	beq.n	8009a18 <USBD_StdEPReq+0x128>
 80099ec:	e026      	b.n	8009a3c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099ee:	7bbb      	ldrb	r3, [r7, #14]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00c      	beq.n	8009a0e <USBD_StdEPReq+0x11e>
 80099f4:	7bbb      	ldrb	r3, [r7, #14]
 80099f6:	2b80      	cmp	r3, #128	@ 0x80
 80099f8:	d009      	beq.n	8009a0e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80099fa:	7bbb      	ldrb	r3, [r7, #14]
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f001 f846 	bl	800aa90 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009a04:	2180      	movs	r1, #128	@ 0x80
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f001 f842 	bl	800aa90 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a0c:	e01c      	b.n	8009a48 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009a0e:	6839      	ldr	r1, [r7, #0]
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fbe1 	bl	800a1d8 <USBD_CtlError>
              break;
 8009a16:	e017      	b.n	8009a48 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	885b      	ldrh	r3, [r3, #2]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d112      	bne.n	8009a46 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009a20:	7bbb      	ldrb	r3, [r7, #14]
 8009a22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d004      	beq.n	8009a34 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009a2a:	7bbb      	ldrb	r3, [r7, #14]
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f001 f84d 	bl	800aace <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 fc97 	bl	800a368 <USBD_CtlSendStatus>
              }
              break;
 8009a3a:	e004      	b.n	8009a46 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009a3c:	6839      	ldr	r1, [r7, #0]
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fbca 	bl	800a1d8 <USBD_CtlError>
              break;
 8009a44:	e000      	b.n	8009a48 <USBD_StdEPReq+0x158>
              break;
 8009a46:	bf00      	nop
          }
          break;
 8009a48:	e0aa      	b.n	8009ba0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d002      	beq.n	8009a5a <USBD_StdEPReq+0x16a>
 8009a54:	2b03      	cmp	r3, #3
 8009a56:	d032      	beq.n	8009abe <USBD_StdEPReq+0x1ce>
 8009a58:	e097      	b.n	8009b8a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a5a:	7bbb      	ldrb	r3, [r7, #14]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d007      	beq.n	8009a70 <USBD_StdEPReq+0x180>
 8009a60:	7bbb      	ldrb	r3, [r7, #14]
 8009a62:	2b80      	cmp	r3, #128	@ 0x80
 8009a64:	d004      	beq.n	8009a70 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fbb5 	bl	800a1d8 <USBD_CtlError>
                break;
 8009a6e:	e091      	b.n	8009b94 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	da0b      	bge.n	8009a90 <USBD_StdEPReq+0x1a0>
 8009a78:	7bbb      	ldrb	r3, [r7, #14]
 8009a7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a7e:	4613      	mov	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	3310      	adds	r3, #16
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	e00b      	b.n	8009aa8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a90:	7bbb      	ldrb	r3, [r7, #14]
 8009a92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a96:	4613      	mov	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	2200      	movs	r2, #0
 8009aae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fbf8 	bl	800a2ac <USBD_CtlSendData>
              break;
 8009abc:	e06a      	b.n	8009b94 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009abe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	da11      	bge.n	8009aea <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ac6:	7bbb      	ldrb	r3, [r7, #14]
 8009ac8:	f003 020f 	and.w	r2, r3, #15
 8009acc:	6879      	ldr	r1, [r7, #4]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4413      	add	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	440b      	add	r3, r1
 8009ad8:	3318      	adds	r3, #24
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d117      	bne.n	8009b10 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ae0:	6839      	ldr	r1, [r7, #0]
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fb78 	bl	800a1d8 <USBD_CtlError>
                  break;
 8009ae8:	e054      	b.n	8009b94 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009aea:	7bbb      	ldrb	r3, [r7, #14]
 8009aec:	f003 020f 	and.w	r2, r3, #15
 8009af0:	6879      	ldr	r1, [r7, #4]
 8009af2:	4613      	mov	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	440b      	add	r3, r1
 8009afc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d104      	bne.n	8009b10 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fb65 	bl	800a1d8 <USBD_CtlError>
                  break;
 8009b0e:	e041      	b.n	8009b94 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	da0b      	bge.n	8009b30 <USBD_StdEPReq+0x240>
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b1e:	4613      	mov	r3, r2
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	4413      	add	r3, r2
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	3310      	adds	r3, #16
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	3304      	adds	r3, #4
 8009b2e:	e00b      	b.n	8009b48 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b36:	4613      	mov	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4413      	add	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	4413      	add	r3, r2
 8009b46:	3304      	adds	r3, #4
 8009b48:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b4a:	7bbb      	ldrb	r3, [r7, #14]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d002      	beq.n	8009b56 <USBD_StdEPReq+0x266>
 8009b50:	7bbb      	ldrb	r3, [r7, #14]
 8009b52:	2b80      	cmp	r3, #128	@ 0x80
 8009b54:	d103      	bne.n	8009b5e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	e00e      	b.n	8009b7c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009b5e:	7bbb      	ldrb	r3, [r7, #14]
 8009b60:	4619      	mov	r1, r3
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 ffd2 	bl	800ab0c <USBD_LL_IsStallEP>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d003      	beq.n	8009b76 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2201      	movs	r2, #1
 8009b72:	601a      	str	r2, [r3, #0]
 8009b74:	e002      	b.n	8009b7c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2202      	movs	r2, #2
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fb92 	bl	800a2ac <USBD_CtlSendData>
              break;
 8009b88:	e004      	b.n	8009b94 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fb23 	bl	800a1d8 <USBD_CtlError>
              break;
 8009b92:	bf00      	nop
          }
          break;
 8009b94:	e004      	b.n	8009ba0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fb1d 	bl	800a1d8 <USBD_CtlError>
          break;
 8009b9e:	bf00      	nop
      }
      break;
 8009ba0:	e004      	b.n	8009bac <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009ba2:	6839      	ldr	r1, [r7, #0]
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 fb17 	bl	800a1d8 <USBD_CtlError>
      break;
 8009baa:	bf00      	nop
  }

  return ret;
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
	...

08009bb8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	885b      	ldrh	r3, [r3, #2]
 8009bd2:	0a1b      	lsrs	r3, r3, #8
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	2b06      	cmp	r3, #6
 8009bda:	f200 8128 	bhi.w	8009e2e <USBD_GetDescriptor+0x276>
 8009bde:	a201      	add	r2, pc, #4	@ (adr r2, 8009be4 <USBD_GetDescriptor+0x2c>)
 8009be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be4:	08009c01 	.word	0x08009c01
 8009be8:	08009c19 	.word	0x08009c19
 8009bec:	08009c59 	.word	0x08009c59
 8009bf0:	08009e2f 	.word	0x08009e2f
 8009bf4:	08009e2f 	.word	0x08009e2f
 8009bf8:	08009dcf 	.word	0x08009dcf
 8009bfc:	08009dfb 	.word	0x08009dfb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	7c12      	ldrb	r2, [r2, #16]
 8009c0c:	f107 0108 	add.w	r1, r7, #8
 8009c10:	4610      	mov	r0, r2
 8009c12:	4798      	blx	r3
 8009c14:	60f8      	str	r0, [r7, #12]
      break;
 8009c16:	e112      	b.n	8009e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	7c1b      	ldrb	r3, [r3, #16]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10d      	bne.n	8009c3c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c28:	f107 0208 	add.w	r2, r7, #8
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	4798      	blx	r3
 8009c30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	3301      	adds	r3, #1
 8009c36:	2202      	movs	r2, #2
 8009c38:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c3a:	e100      	b.n	8009e3e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c44:	f107 0208 	add.w	r2, r7, #8
 8009c48:	4610      	mov	r0, r2
 8009c4a:	4798      	blx	r3
 8009c4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	3301      	adds	r3, #1
 8009c52:	2202      	movs	r2, #2
 8009c54:	701a      	strb	r2, [r3, #0]
      break;
 8009c56:	e0f2      	b.n	8009e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	885b      	ldrh	r3, [r3, #2]
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	2b05      	cmp	r3, #5
 8009c60:	f200 80ac 	bhi.w	8009dbc <USBD_GetDescriptor+0x204>
 8009c64:	a201      	add	r2, pc, #4	@ (adr r2, 8009c6c <USBD_GetDescriptor+0xb4>)
 8009c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6a:	bf00      	nop
 8009c6c:	08009c85 	.word	0x08009c85
 8009c70:	08009cb9 	.word	0x08009cb9
 8009c74:	08009ced 	.word	0x08009ced
 8009c78:	08009d21 	.word	0x08009d21
 8009c7c:	08009d55 	.word	0x08009d55
 8009c80:	08009d89 	.word	0x08009d89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00b      	beq.n	8009ca8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	7c12      	ldrb	r2, [r2, #16]
 8009c9c:	f107 0108 	add.w	r1, r7, #8
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	4798      	blx	r3
 8009ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ca6:	e091      	b.n	8009dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fa94 	bl	800a1d8 <USBD_CtlError>
            err++;
 8009cb0:	7afb      	ldrb	r3, [r7, #11]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8009cb6:	e089      	b.n	8009dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00b      	beq.n	8009cdc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	7c12      	ldrb	r2, [r2, #16]
 8009cd0:	f107 0108 	add.w	r1, r7, #8
 8009cd4:	4610      	mov	r0, r2
 8009cd6:	4798      	blx	r3
 8009cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cda:	e077      	b.n	8009dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fa7a 	bl	800a1d8 <USBD_CtlError>
            err++;
 8009ce4:	7afb      	ldrb	r3, [r7, #11]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cea:	e06f      	b.n	8009dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00b      	beq.n	8009d10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	7c12      	ldrb	r2, [r2, #16]
 8009d04:	f107 0108 	add.w	r1, r7, #8
 8009d08:	4610      	mov	r0, r2
 8009d0a:	4798      	blx	r3
 8009d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d0e:	e05d      	b.n	8009dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fa60 	bl	800a1d8 <USBD_CtlError>
            err++;
 8009d18:	7afb      	ldrb	r3, [r7, #11]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d1e:	e055      	b.n	8009dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d26:	691b      	ldr	r3, [r3, #16]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00b      	beq.n	8009d44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	7c12      	ldrb	r2, [r2, #16]
 8009d38:	f107 0108 	add.w	r1, r7, #8
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	4798      	blx	r3
 8009d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d42:	e043      	b.n	8009dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d44:	6839      	ldr	r1, [r7, #0]
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fa46 	bl	800a1d8 <USBD_CtlError>
            err++;
 8009d4c:	7afb      	ldrb	r3, [r7, #11]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	72fb      	strb	r3, [r7, #11]
          break;
 8009d52:	e03b      	b.n	8009dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d5a:	695b      	ldr	r3, [r3, #20]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00b      	beq.n	8009d78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d66:	695b      	ldr	r3, [r3, #20]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	7c12      	ldrb	r2, [r2, #16]
 8009d6c:	f107 0108 	add.w	r1, r7, #8
 8009d70:	4610      	mov	r0, r2
 8009d72:	4798      	blx	r3
 8009d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d76:	e029      	b.n	8009dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d78:	6839      	ldr	r1, [r7, #0]
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 fa2c 	bl	800a1d8 <USBD_CtlError>
            err++;
 8009d80:	7afb      	ldrb	r3, [r7, #11]
 8009d82:	3301      	adds	r3, #1
 8009d84:	72fb      	strb	r3, [r7, #11]
          break;
 8009d86:	e021      	b.n	8009dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00b      	beq.n	8009dac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d9a:	699b      	ldr	r3, [r3, #24]
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	7c12      	ldrb	r2, [r2, #16]
 8009da0:	f107 0108 	add.w	r1, r7, #8
 8009da4:	4610      	mov	r0, r2
 8009da6:	4798      	blx	r3
 8009da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009daa:	e00f      	b.n	8009dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009dac:	6839      	ldr	r1, [r7, #0]
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fa12 	bl	800a1d8 <USBD_CtlError>
            err++;
 8009db4:	7afb      	ldrb	r3, [r7, #11]
 8009db6:	3301      	adds	r3, #1
 8009db8:	72fb      	strb	r3, [r7, #11]
          break;
 8009dba:	e007      	b.n	8009dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009dbc:	6839      	ldr	r1, [r7, #0]
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 fa0a 	bl	800a1d8 <USBD_CtlError>
          err++;
 8009dc4:	7afb      	ldrb	r3, [r7, #11]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009dca:	e038      	b.n	8009e3e <USBD_GetDescriptor+0x286>
 8009dcc:	e037      	b.n	8009e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	7c1b      	ldrb	r3, [r3, #16]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d109      	bne.n	8009dea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dde:	f107 0208 	add.w	r2, r7, #8
 8009de2:	4610      	mov	r0, r2
 8009de4:	4798      	blx	r3
 8009de6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009de8:	e029      	b.n	8009e3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f9f3 	bl	800a1d8 <USBD_CtlError>
        err++;
 8009df2:	7afb      	ldrb	r3, [r7, #11]
 8009df4:	3301      	adds	r3, #1
 8009df6:	72fb      	strb	r3, [r7, #11]
      break;
 8009df8:	e021      	b.n	8009e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	7c1b      	ldrb	r3, [r3, #16]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10d      	bne.n	8009e1e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e0a:	f107 0208 	add.w	r2, r7, #8
 8009e0e:	4610      	mov	r0, r2
 8009e10:	4798      	blx	r3
 8009e12:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	3301      	adds	r3, #1
 8009e18:	2207      	movs	r2, #7
 8009e1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e1c:	e00f      	b.n	8009e3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e1e:	6839      	ldr	r1, [r7, #0]
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 f9d9 	bl	800a1d8 <USBD_CtlError>
        err++;
 8009e26:	7afb      	ldrb	r3, [r7, #11]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e2c:	e007      	b.n	8009e3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e2e:	6839      	ldr	r1, [r7, #0]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f9d1 	bl	800a1d8 <USBD_CtlError>
      err++;
 8009e36:	7afb      	ldrb	r3, [r7, #11]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e3c:	bf00      	nop
  }

  if (err != 0U)
 8009e3e:	7afb      	ldrb	r3, [r7, #11]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d11c      	bne.n	8009e7e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009e44:	893b      	ldrh	r3, [r7, #8]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d011      	beq.n	8009e6e <USBD_GetDescriptor+0x2b6>
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	88db      	ldrh	r3, [r3, #6]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00d      	beq.n	8009e6e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	88da      	ldrh	r2, [r3, #6]
 8009e56:	893b      	ldrh	r3, [r7, #8]
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	bf28      	it	cs
 8009e5c:	4613      	movcs	r3, r2
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e62:	893b      	ldrh	r3, [r7, #8]
 8009e64:	461a      	mov	r2, r3
 8009e66:	68f9      	ldr	r1, [r7, #12]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 fa1f 	bl	800a2ac <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	88db      	ldrh	r3, [r3, #6]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d104      	bne.n	8009e80 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fa76 	bl	800a368 <USBD_CtlSendStatus>
 8009e7c:	e000      	b.n	8009e80 <USBD_GetDescriptor+0x2c8>
    return;
 8009e7e:	bf00      	nop
    }
  }
}
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop

08009e88 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	889b      	ldrh	r3, [r3, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d130      	bne.n	8009efc <USBD_SetAddress+0x74>
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	88db      	ldrh	r3, [r3, #6]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d12c      	bne.n	8009efc <USBD_SetAddress+0x74>
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	885b      	ldrh	r3, [r3, #2]
 8009ea6:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ea8:	d828      	bhi.n	8009efc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	885b      	ldrh	r3, [r3, #2]
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ebc:	2b03      	cmp	r3, #3
 8009ebe:	d104      	bne.n	8009eca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009ec0:	6839      	ldr	r1, [r7, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 f988 	bl	800a1d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ec8:	e01d      	b.n	8009f06 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	7bfa      	ldrb	r2, [r7, #15]
 8009ece:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fe43 	bl	800ab62 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 fa43 	bl	800a368 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ee2:	7bfb      	ldrb	r3, [r7, #15]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d004      	beq.n	8009ef2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2202      	movs	r2, #2
 8009eec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ef0:	e009      	b.n	8009f06 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009efa:	e004      	b.n	8009f06 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f96a 	bl	800a1d8 <USBD_CtlError>
  }
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
	...

08009f10 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	885b      	ldrh	r3, [r3, #2]
 8009f1e:	b2da      	uxtb	r2, r3
 8009f20:	4b41      	ldr	r3, [pc, #260]	@ (800a028 <USBD_SetConfig+0x118>)
 8009f22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f24:	4b40      	ldr	r3, [pc, #256]	@ (800a028 <USBD_SetConfig+0x118>)
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d904      	bls.n	8009f36 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f952 	bl	800a1d8 <USBD_CtlError>
 8009f34:	e075      	b.n	800a022 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d002      	beq.n	8009f46 <USBD_SetConfig+0x36>
 8009f40:	2b03      	cmp	r3, #3
 8009f42:	d023      	beq.n	8009f8c <USBD_SetConfig+0x7c>
 8009f44:	e062      	b.n	800a00c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009f46:	4b38      	ldr	r3, [pc, #224]	@ (800a028 <USBD_SetConfig+0x118>)
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d01a      	beq.n	8009f84 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009f4e:	4b36      	ldr	r3, [pc, #216]	@ (800a028 <USBD_SetConfig+0x118>)
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	461a      	mov	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2203      	movs	r2, #3
 8009f5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f60:	4b31      	ldr	r3, [pc, #196]	@ (800a028 <USBD_SetConfig+0x118>)
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	4619      	mov	r1, r3
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7ff f9e7 	bl	800933a <USBD_SetClassConfig>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d104      	bne.n	8009f7c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f92f 	bl	800a1d8 <USBD_CtlError>
            return;
 8009f7a:	e052      	b.n	800a022 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 f9f3 	bl	800a368 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f82:	e04e      	b.n	800a022 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 f9ef 	bl	800a368 <USBD_CtlSendStatus>
        break;
 8009f8a:	e04a      	b.n	800a022 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009f8c:	4b26      	ldr	r3, [pc, #152]	@ (800a028 <USBD_SetConfig+0x118>)
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d112      	bne.n	8009fba <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2202      	movs	r2, #2
 8009f98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009f9c:	4b22      	ldr	r3, [pc, #136]	@ (800a028 <USBD_SetConfig+0x118>)
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009fa6:	4b20      	ldr	r3, [pc, #128]	@ (800a028 <USBD_SetConfig+0x118>)
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	4619      	mov	r1, r3
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7ff f9e3 	bl	8009378 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 f9d8 	bl	800a368 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009fb8:	e033      	b.n	800a022 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009fba:	4b1b      	ldr	r3, [pc, #108]	@ (800a028 <USBD_SetConfig+0x118>)
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d01d      	beq.n	800a004 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7ff f9d1 	bl	8009378 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009fd6:	4b14      	ldr	r3, [pc, #80]	@ (800a028 <USBD_SetConfig+0x118>)
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	461a      	mov	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009fe0:	4b11      	ldr	r3, [pc, #68]	@ (800a028 <USBD_SetConfig+0x118>)
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f7ff f9a7 	bl	800933a <USBD_SetClassConfig>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d104      	bne.n	8009ffc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f8ef 	bl	800a1d8 <USBD_CtlError>
            return;
 8009ffa:	e012      	b.n	800a022 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f9b3 	bl	800a368 <USBD_CtlSendStatus>
        break;
 800a002:	e00e      	b.n	800a022 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 f9af 	bl	800a368 <USBD_CtlSendStatus>
        break;
 800a00a:	e00a      	b.n	800a022 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f8e2 	bl	800a1d8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a014:	4b04      	ldr	r3, [pc, #16]	@ (800a028 <USBD_SetConfig+0x118>)
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	4619      	mov	r1, r3
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f7ff f9ac 	bl	8009378 <USBD_ClrClassConfig>
        break;
 800a020:	bf00      	nop
    }
  }
}
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	20000410 	.word	0x20000410

0800a02c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	88db      	ldrh	r3, [r3, #6]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d004      	beq.n	800a048 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a03e:	6839      	ldr	r1, [r7, #0]
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 f8c9 	bl	800a1d8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a046:	e022      	b.n	800a08e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a04e:	2b02      	cmp	r3, #2
 800a050:	dc02      	bgt.n	800a058 <USBD_GetConfig+0x2c>
 800a052:	2b00      	cmp	r3, #0
 800a054:	dc03      	bgt.n	800a05e <USBD_GetConfig+0x32>
 800a056:	e015      	b.n	800a084 <USBD_GetConfig+0x58>
 800a058:	2b03      	cmp	r3, #3
 800a05a:	d00b      	beq.n	800a074 <USBD_GetConfig+0x48>
 800a05c:	e012      	b.n	800a084 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	3308      	adds	r3, #8
 800a068:	2201      	movs	r2, #1
 800a06a:	4619      	mov	r1, r3
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f91d 	bl	800a2ac <USBD_CtlSendData>
        break;
 800a072:	e00c      	b.n	800a08e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	3304      	adds	r3, #4
 800a078:	2201      	movs	r2, #1
 800a07a:	4619      	mov	r1, r3
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f915 	bl	800a2ac <USBD_CtlSendData>
        break;
 800a082:	e004      	b.n	800a08e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a084:	6839      	ldr	r1, [r7, #0]
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f8a6 	bl	800a1d8 <USBD_CtlError>
        break;
 800a08c:	bf00      	nop
}
 800a08e:	bf00      	nop
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b082      	sub	sp, #8
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d81e      	bhi.n	800a0ea <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	88db      	ldrh	r3, [r3, #6]
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d004      	beq.n	800a0be <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f88e 	bl	800a1d8 <USBD_CtlError>
        break;
 800a0bc:	e01a      	b.n	800a0f4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d005      	beq.n	800a0da <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	f043 0202 	orr.w	r2, r3, #2
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	330c      	adds	r3, #12
 800a0de:	2202      	movs	r2, #2
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f8e2 	bl	800a2ac <USBD_CtlSendData>
      break;
 800a0e8:	e004      	b.n	800a0f4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a0ea:	6839      	ldr	r1, [r7, #0]
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f873 	bl	800a1d8 <USBD_CtlError>
      break;
 800a0f2:	bf00      	nop
  }
}
 800a0f4:	bf00      	nop
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	885b      	ldrh	r3, [r3, #2]
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d106      	bne.n	800a11c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f926 	bl	800a368 <USBD_CtlSendStatus>
  }
}
 800a11c:	bf00      	nop
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a134:	3b01      	subs	r3, #1
 800a136:	2b02      	cmp	r3, #2
 800a138:	d80b      	bhi.n	800a152 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	885b      	ldrh	r3, [r3, #2]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d10c      	bne.n	800a15c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 f90c 	bl	800a368 <USBD_CtlSendStatus>
      }
      break;
 800a150:	e004      	b.n	800a15c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f83f 	bl	800a1d8 <USBD_CtlError>
      break;
 800a15a:	e000      	b.n	800a15e <USBD_ClrFeature+0x3a>
      break;
 800a15c:	bf00      	nop
  }
}
 800a15e:	bf00      	nop
 800a160:	3708      	adds	r7, #8
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a166:	b480      	push	{r7}
 800a168:	b083      	sub	sp, #12
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	781a      	ldrb	r2, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	785a      	ldrb	r2, [r3, #1]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	3302      	adds	r3, #2
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	461a      	mov	r2, r3
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	3303      	adds	r3, #3
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	021b      	lsls	r3, r3, #8
 800a190:	b29b      	uxth	r3, r3
 800a192:	4413      	add	r3, r2
 800a194:	b29a      	uxth	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	3304      	adds	r3, #4
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	3305      	adds	r3, #5
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	021b      	lsls	r3, r3, #8
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	4413      	add	r3, r2
 800a1ae:	b29a      	uxth	r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	3306      	adds	r3, #6
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	3307      	adds	r3, #7
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	021b      	lsls	r3, r3, #8
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	4413      	add	r3, r2
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	80da      	strh	r2, [r3, #6]

}
 800a1ce:	bf00      	nop
 800a1d0:	370c      	adds	r7, #12
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bc80      	pop	{r7}
 800a1d6:	4770      	bx	lr

0800a1d8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a1e2:	2180      	movs	r1, #128	@ 0x80
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 fc53 	bl	800aa90 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fc4f 	bl	800aa90 <USBD_LL_StallEP>
}
 800a1f2:	bf00      	nop
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b086      	sub	sp, #24
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	60f8      	str	r0, [r7, #12]
 800a202:	60b9      	str	r1, [r7, #8]
 800a204:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a206:	2300      	movs	r3, #0
 800a208:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d032      	beq.n	800a276 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f000 f834 	bl	800a27e <USBD_GetLen>
 800a216:	4603      	mov	r3, r0
 800a218:	3301      	adds	r3, #1
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	005b      	lsls	r3, r3, #1
 800a21e:	b29a      	uxth	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a224:	7dfb      	ldrb	r3, [r7, #23]
 800a226:	1c5a      	adds	r2, r3, #1
 800a228:	75fa      	strb	r2, [r7, #23]
 800a22a:	461a      	mov	r2, r3
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	4413      	add	r3, r2
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	7812      	ldrb	r2, [r2, #0]
 800a234:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a236:	7dfb      	ldrb	r3, [r7, #23]
 800a238:	1c5a      	adds	r2, r3, #1
 800a23a:	75fa      	strb	r2, [r7, #23]
 800a23c:	461a      	mov	r2, r3
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	4413      	add	r3, r2
 800a242:	2203      	movs	r2, #3
 800a244:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a246:	e012      	b.n	800a26e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	1c5a      	adds	r2, r3, #1
 800a24c:	60fa      	str	r2, [r7, #12]
 800a24e:	7dfa      	ldrb	r2, [r7, #23]
 800a250:	1c51      	adds	r1, r2, #1
 800a252:	75f9      	strb	r1, [r7, #23]
 800a254:	4611      	mov	r1, r2
 800a256:	68ba      	ldr	r2, [r7, #8]
 800a258:	440a      	add	r2, r1
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a25e:	7dfb      	ldrb	r3, [r7, #23]
 800a260:	1c5a      	adds	r2, r3, #1
 800a262:	75fa      	strb	r2, [r7, #23]
 800a264:	461a      	mov	r2, r3
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	4413      	add	r3, r2
 800a26a:	2200      	movs	r2, #0
 800a26c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1e8      	bne.n	800a248 <USBD_GetString+0x4e>
    }
  }
}
 800a276:	bf00      	nop
 800a278:	3718      	adds	r7, #24
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a27e:	b480      	push	{r7}
 800a280:	b085      	sub	sp, #20
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a286:	2300      	movs	r3, #0
 800a288:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a28a:	e005      	b.n	800a298 <USBD_GetLen+0x1a>
  {
    len++;
 800a28c:	7bfb      	ldrb	r3, [r7, #15]
 800a28e:	3301      	adds	r3, #1
 800a290:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	3301      	adds	r3, #1
 800a296:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d1f5      	bne.n	800a28c <USBD_GetLen+0xe>
  }

  return len;
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3714      	adds	r7, #20
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bc80      	pop	{r7}
 800a2aa:	4770      	bx	lr

0800a2ac <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2202      	movs	r2, #2
 800a2be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a2c2:	88fa      	ldrh	r2, [r7, #6]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a2c8:	88fa      	ldrh	r2, [r7, #6]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2ce:	88fb      	ldrh	r3, [r7, #6]
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	f000 fc63 	bl	800aba0 <USBD_LL_Transmit>

  return USBD_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2f2:	88fb      	ldrh	r3, [r7, #6]
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f000 fc51 	bl	800aba0 <USBD_LL_Transmit>

  return USBD_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	4613      	mov	r3, r2
 800a314:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2203      	movs	r2, #3
 800a31a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a31e:	88fa      	ldrh	r2, [r7, #6]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a326:	88fa      	ldrh	r2, [r7, #6]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a32e:	88fb      	ldrh	r3, [r7, #6]
 800a330:	68ba      	ldr	r2, [r7, #8]
 800a332:	2100      	movs	r1, #0
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	f000 fc56 	bl	800abe6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	4613      	mov	r3, r2
 800a350:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a352:	88fb      	ldrh	r3, [r7, #6]
 800a354:	68ba      	ldr	r2, [r7, #8]
 800a356:	2100      	movs	r1, #0
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f000 fc44 	bl	800abe6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2204      	movs	r2, #4
 800a374:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a378:	2300      	movs	r3, #0
 800a37a:	2200      	movs	r2, #0
 800a37c:	2100      	movs	r1, #0
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fc0e 	bl	800aba0 <USBD_LL_Transmit>

  return USBD_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3708      	adds	r7, #8
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b082      	sub	sp, #8
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2205      	movs	r2, #5
 800a39a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a39e:	2300      	movs	r3, #0
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 fc1e 	bl	800abe6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	4912      	ldr	r1, [pc, #72]	@ (800a404 <MX_USB_DEVICE_Init+0x50>)
 800a3bc:	4812      	ldr	r0, [pc, #72]	@ (800a408 <MX_USB_DEVICE_Init+0x54>)
 800a3be:	f7fe ff62 	bl	8009286 <USBD_Init>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a3c8:	f7f8 fb5e 	bl	8002a88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a3cc:	490f      	ldr	r1, [pc, #60]	@ (800a40c <MX_USB_DEVICE_Init+0x58>)
 800a3ce:	480e      	ldr	r0, [pc, #56]	@ (800a408 <MX_USB_DEVICE_Init+0x54>)
 800a3d0:	f7fe ff84 	bl	80092dc <USBD_RegisterClass>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a3da:	f7f8 fb55 	bl	8002a88 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a3de:	490c      	ldr	r1, [pc, #48]	@ (800a410 <MX_USB_DEVICE_Init+0x5c>)
 800a3e0:	4809      	ldr	r0, [pc, #36]	@ (800a408 <MX_USB_DEVICE_Init+0x54>)
 800a3e2:	f7fe feb5 	bl	8009150 <USBD_CDC_RegisterInterface>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d001      	beq.n	800a3f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a3ec:	f7f8 fb4c 	bl	8002a88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a3f0:	4805      	ldr	r0, [pc, #20]	@ (800a408 <MX_USB_DEVICE_Init+0x54>)
 800a3f2:	f7fe ff8c 	bl	800930e <USBD_Start>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d001      	beq.n	800a400 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a3fc:	f7f8 fb44 	bl	8002a88 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a400:	bf00      	nop
 800a402:	bd80      	pop	{r7, pc}
 800a404:	20000144 	.word	0x20000144
 800a408:	20000414 	.word	0x20000414
 800a40c:	20000030 	.word	0x20000030
 800a410:	20000134 	.word	0x20000134

0800a414 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a418:	2200      	movs	r2, #0
 800a41a:	4905      	ldr	r1, [pc, #20]	@ (800a430 <CDC_Init_FS+0x1c>)
 800a41c:	4805      	ldr	r0, [pc, #20]	@ (800a434 <CDC_Init_FS+0x20>)
 800a41e:	f7fe fead 	bl	800917c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a422:	4905      	ldr	r1, [pc, #20]	@ (800a438 <CDC_Init_FS+0x24>)
 800a424:	4803      	ldr	r0, [pc, #12]	@ (800a434 <CDC_Init_FS+0x20>)
 800a426:	f7fe fec2 	bl	80091ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a42a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	20000ad8 	.word	0x20000ad8
 800a434:	20000414 	.word	0x20000414
 800a438:	200006d8 	.word	0x200006d8

0800a43c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a43c:	b480      	push	{r7}
 800a43e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a440:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a442:	4618      	mov	r0, r3
 800a444:	46bd      	mov	sp, r7
 800a446:	bc80      	pop	{r7}
 800a448:	4770      	bx	lr
	...

0800a44c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	4603      	mov	r3, r0
 800a454:	6039      	str	r1, [r7, #0]
 800a456:	71fb      	strb	r3, [r7, #7]
 800a458:	4613      	mov	r3, r2
 800a45a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a45c:	79fb      	ldrb	r3, [r7, #7]
 800a45e:	2b23      	cmp	r3, #35	@ 0x23
 800a460:	d84a      	bhi.n	800a4f8 <CDC_Control_FS+0xac>
 800a462:	a201      	add	r2, pc, #4	@ (adr r2, 800a468 <CDC_Control_FS+0x1c>)
 800a464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a468:	0800a4f9 	.word	0x0800a4f9
 800a46c:	0800a4f9 	.word	0x0800a4f9
 800a470:	0800a4f9 	.word	0x0800a4f9
 800a474:	0800a4f9 	.word	0x0800a4f9
 800a478:	0800a4f9 	.word	0x0800a4f9
 800a47c:	0800a4f9 	.word	0x0800a4f9
 800a480:	0800a4f9 	.word	0x0800a4f9
 800a484:	0800a4f9 	.word	0x0800a4f9
 800a488:	0800a4f9 	.word	0x0800a4f9
 800a48c:	0800a4f9 	.word	0x0800a4f9
 800a490:	0800a4f9 	.word	0x0800a4f9
 800a494:	0800a4f9 	.word	0x0800a4f9
 800a498:	0800a4f9 	.word	0x0800a4f9
 800a49c:	0800a4f9 	.word	0x0800a4f9
 800a4a0:	0800a4f9 	.word	0x0800a4f9
 800a4a4:	0800a4f9 	.word	0x0800a4f9
 800a4a8:	0800a4f9 	.word	0x0800a4f9
 800a4ac:	0800a4f9 	.word	0x0800a4f9
 800a4b0:	0800a4f9 	.word	0x0800a4f9
 800a4b4:	0800a4f9 	.word	0x0800a4f9
 800a4b8:	0800a4f9 	.word	0x0800a4f9
 800a4bc:	0800a4f9 	.word	0x0800a4f9
 800a4c0:	0800a4f9 	.word	0x0800a4f9
 800a4c4:	0800a4f9 	.word	0x0800a4f9
 800a4c8:	0800a4f9 	.word	0x0800a4f9
 800a4cc:	0800a4f9 	.word	0x0800a4f9
 800a4d0:	0800a4f9 	.word	0x0800a4f9
 800a4d4:	0800a4f9 	.word	0x0800a4f9
 800a4d8:	0800a4f9 	.word	0x0800a4f9
 800a4dc:	0800a4f9 	.word	0x0800a4f9
 800a4e0:	0800a4f9 	.word	0x0800a4f9
 800a4e4:	0800a4f9 	.word	0x0800a4f9
 800a4e8:	0800a4f9 	.word	0x0800a4f9
 800a4ec:	0800a4f9 	.word	0x0800a4f9
 800a4f0:	0800a4f9 	.word	0x0800a4f9
 800a4f4:	0800a4f9 	.word	0x0800a4f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a4f8:	bf00      	nop
  }

  return (USBD_OK);
 800a4fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	bc80      	pop	{r7}
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop

0800a508 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a512:	6879      	ldr	r1, [r7, #4]
 800a514:	4805      	ldr	r0, [pc, #20]	@ (800a52c <CDC_Receive_FS+0x24>)
 800a516:	f7fe fe4a 	bl	80091ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a51a:	4804      	ldr	r0, [pc, #16]	@ (800a52c <CDC_Receive_FS+0x24>)
 800a51c:	f7fe fe89 	bl	8009232 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a520:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a522:	4618      	mov	r0, r3
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	20000414 	.word	0x20000414

0800a530 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	460b      	mov	r3, r1
 800a53a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a53c:	2300      	movs	r3, #0
 800a53e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a540:	4b0d      	ldr	r3, [pc, #52]	@ (800a578 <CDC_Transmit_FS+0x48>)
 800a542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a546:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d001      	beq.n	800a556 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a552:	2301      	movs	r3, #1
 800a554:	e00b      	b.n	800a56e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a556:	887b      	ldrh	r3, [r7, #2]
 800a558:	461a      	mov	r2, r3
 800a55a:	6879      	ldr	r1, [r7, #4]
 800a55c:	4806      	ldr	r0, [pc, #24]	@ (800a578 <CDC_Transmit_FS+0x48>)
 800a55e:	f7fe fe0d 	bl	800917c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a562:	4805      	ldr	r0, [pc, #20]	@ (800a578 <CDC_Transmit_FS+0x48>)
 800a564:	f7fe fe36 	bl	80091d4 <USBD_CDC_TransmitPacket>
 800a568:	4603      	mov	r3, r0
 800a56a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	20000414 	.word	0x20000414

0800a57c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	4603      	mov	r3, r0
 800a584:	6039      	str	r1, [r7, #0]
 800a586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	2212      	movs	r2, #18
 800a58c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a58e:	4b03      	ldr	r3, [pc, #12]	@ (800a59c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a590:	4618      	mov	r0, r3
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	bc80      	pop	{r7}
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	20000160 	.word	0x20000160

0800a5a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	6039      	str	r1, [r7, #0]
 800a5aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	2204      	movs	r2, #4
 800a5b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a5b2:	4b03      	ldr	r3, [pc, #12]	@ (800a5c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bc80      	pop	{r7}
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	20000174 	.word	0x20000174

0800a5c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	6039      	str	r1, [r7, #0]
 800a5ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5d0:	79fb      	ldrb	r3, [r7, #7]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d105      	bne.n	800a5e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	4907      	ldr	r1, [pc, #28]	@ (800a5f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a5da:	4808      	ldr	r0, [pc, #32]	@ (800a5fc <USBD_FS_ProductStrDescriptor+0x38>)
 800a5dc:	f7ff fe0d 	bl	800a1fa <USBD_GetString>
 800a5e0:	e004      	b.n	800a5ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5e2:	683a      	ldr	r2, [r7, #0]
 800a5e4:	4904      	ldr	r1, [pc, #16]	@ (800a5f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a5e6:	4805      	ldr	r0, [pc, #20]	@ (800a5fc <USBD_FS_ProductStrDescriptor+0x38>)
 800a5e8:	f7ff fe07 	bl	800a1fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5ec:	4b02      	ldr	r3, [pc, #8]	@ (800a5f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3708      	adds	r7, #8
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	20000ed8 	.word	0x20000ed8
 800a5fc:	0800b748 	.word	0x0800b748

0800a600 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	4603      	mov	r3, r0
 800a608:	6039      	str	r1, [r7, #0]
 800a60a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a60c:	683a      	ldr	r2, [r7, #0]
 800a60e:	4904      	ldr	r1, [pc, #16]	@ (800a620 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a610:	4804      	ldr	r0, [pc, #16]	@ (800a624 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a612:	f7ff fdf2 	bl	800a1fa <USBD_GetString>
  return USBD_StrDesc;
 800a616:	4b02      	ldr	r3, [pc, #8]	@ (800a620 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	20000ed8 	.word	0x20000ed8
 800a624:	0800b760 	.word	0x0800b760

0800a628 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	4603      	mov	r3, r0
 800a630:	6039      	str	r1, [r7, #0]
 800a632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	221a      	movs	r2, #26
 800a638:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a63a:	f000 f843 	bl	800a6c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a63e:	4b02      	ldr	r3, [pc, #8]	@ (800a648 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a640:	4618      	mov	r0, r3
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	20000178 	.word	0x20000178

0800a64c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	4603      	mov	r3, r0
 800a654:	6039      	str	r1, [r7, #0]
 800a656:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a658:	79fb      	ldrb	r3, [r7, #7]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d105      	bne.n	800a66a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	4907      	ldr	r1, [pc, #28]	@ (800a680 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a662:	4808      	ldr	r0, [pc, #32]	@ (800a684 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a664:	f7ff fdc9 	bl	800a1fa <USBD_GetString>
 800a668:	e004      	b.n	800a674 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a66a:	683a      	ldr	r2, [r7, #0]
 800a66c:	4904      	ldr	r1, [pc, #16]	@ (800a680 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a66e:	4805      	ldr	r0, [pc, #20]	@ (800a684 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a670:	f7ff fdc3 	bl	800a1fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a674:	4b02      	ldr	r3, [pc, #8]	@ (800a680 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a676:	4618      	mov	r0, r3
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	20000ed8 	.word	0x20000ed8
 800a684:	0800b768 	.word	0x0800b768

0800a688 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	4603      	mov	r3, r0
 800a690:	6039      	str	r1, [r7, #0]
 800a692:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a694:	79fb      	ldrb	r3, [r7, #7]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d105      	bne.n	800a6a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	4907      	ldr	r1, [pc, #28]	@ (800a6bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a69e:	4808      	ldr	r0, [pc, #32]	@ (800a6c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a6a0:	f7ff fdab 	bl	800a1fa <USBD_GetString>
 800a6a4:	e004      	b.n	800a6b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	4904      	ldr	r1, [pc, #16]	@ (800a6bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a6aa:	4805      	ldr	r0, [pc, #20]	@ (800a6c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a6ac:	f7ff fda5 	bl	800a1fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6b0:	4b02      	ldr	r3, [pc, #8]	@ (800a6bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	20000ed8 	.word	0x20000ed8
 800a6c0:	0800b774 	.word	0x0800b774

0800a6c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a6ca:	4b0f      	ldr	r3, [pc, #60]	@ (800a708 <Get_SerialNum+0x44>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a6d0:	4b0e      	ldr	r3, [pc, #56]	@ (800a70c <Get_SerialNum+0x48>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a6d6:	4b0e      	ldr	r3, [pc, #56]	@ (800a710 <Get_SerialNum+0x4c>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d009      	beq.n	800a6fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a6ea:	2208      	movs	r2, #8
 800a6ec:	4909      	ldr	r1, [pc, #36]	@ (800a714 <Get_SerialNum+0x50>)
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f000 f814 	bl	800a71c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a6f4:	2204      	movs	r2, #4
 800a6f6:	4908      	ldr	r1, [pc, #32]	@ (800a718 <Get_SerialNum+0x54>)
 800a6f8:	68b8      	ldr	r0, [r7, #8]
 800a6fa:	f000 f80f 	bl	800a71c <IntToUnicode>
  }
}
 800a6fe:	bf00      	nop
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	1ffff7e8 	.word	0x1ffff7e8
 800a70c:	1ffff7ec 	.word	0x1ffff7ec
 800a710:	1ffff7f0 	.word	0x1ffff7f0
 800a714:	2000017a 	.word	0x2000017a
 800a718:	2000018a 	.word	0x2000018a

0800a71c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b087      	sub	sp, #28
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	4613      	mov	r3, r2
 800a728:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a72e:	2300      	movs	r3, #0
 800a730:	75fb      	strb	r3, [r7, #23]
 800a732:	e027      	b.n	800a784 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	0f1b      	lsrs	r3, r3, #28
 800a738:	2b09      	cmp	r3, #9
 800a73a:	d80b      	bhi.n	800a754 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	0f1b      	lsrs	r3, r3, #28
 800a740:	b2da      	uxtb	r2, r3
 800a742:	7dfb      	ldrb	r3, [r7, #23]
 800a744:	005b      	lsls	r3, r3, #1
 800a746:	4619      	mov	r1, r3
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	440b      	add	r3, r1
 800a74c:	3230      	adds	r2, #48	@ 0x30
 800a74e:	b2d2      	uxtb	r2, r2
 800a750:	701a      	strb	r2, [r3, #0]
 800a752:	e00a      	b.n	800a76a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	0f1b      	lsrs	r3, r3, #28
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	7dfb      	ldrb	r3, [r7, #23]
 800a75c:	005b      	lsls	r3, r3, #1
 800a75e:	4619      	mov	r1, r3
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	440b      	add	r3, r1
 800a764:	3237      	adds	r2, #55	@ 0x37
 800a766:	b2d2      	uxtb	r2, r2
 800a768:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	011b      	lsls	r3, r3, #4
 800a76e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a770:	7dfb      	ldrb	r3, [r7, #23]
 800a772:	005b      	lsls	r3, r3, #1
 800a774:	3301      	adds	r3, #1
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	4413      	add	r3, r2
 800a77a:	2200      	movs	r2, #0
 800a77c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a77e:	7dfb      	ldrb	r3, [r7, #23]
 800a780:	3301      	adds	r3, #1
 800a782:	75fb      	strb	r3, [r7, #23]
 800a784:	7dfa      	ldrb	r2, [r7, #23]
 800a786:	79fb      	ldrb	r3, [r7, #7]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d3d3      	bcc.n	800a734 <IntToUnicode+0x18>
  }
}
 800a78c:	bf00      	nop
 800a78e:	bf00      	nop
 800a790:	371c      	adds	r7, #28
 800a792:	46bd      	mov	sp, r7
 800a794:	bc80      	pop	{r7}
 800a796:	4770      	bx	lr

0800a798 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a0d      	ldr	r2, [pc, #52]	@ (800a7dc <HAL_PCD_MspInit+0x44>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d113      	bne.n	800a7d2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a7aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a7e0 <HAL_PCD_MspInit+0x48>)
 800a7ac:	69db      	ldr	r3, [r3, #28]
 800a7ae:	4a0c      	ldr	r2, [pc, #48]	@ (800a7e0 <HAL_PCD_MspInit+0x48>)
 800a7b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a7b4:	61d3      	str	r3, [r2, #28]
 800a7b6:	4b0a      	ldr	r3, [pc, #40]	@ (800a7e0 <HAL_PCD_MspInit+0x48>)
 800a7b8:	69db      	ldr	r3, [r3, #28]
 800a7ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7be:	60fb      	str	r3, [r7, #12]
 800a7c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	2014      	movs	r0, #20
 800a7c8:	f7f8 fc47 	bl	800305a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a7cc:	2014      	movs	r0, #20
 800a7ce:	f7f8 fc60 	bl	8003092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a7d2:	bf00      	nop
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	40005c00 	.word	0x40005c00
 800a7e0:	40021000 	.word	0x40021000

0800a7e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4610      	mov	r0, r2
 800a7fc:	f7fe fdcf 	bl	800939e <USBD_LL_SetupStage>
}
 800a800:	bf00      	nop
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	460b      	mov	r3, r1
 800a812:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a81a:	78fa      	ldrb	r2, [r7, #3]
 800a81c:	6879      	ldr	r1, [r7, #4]
 800a81e:	4613      	mov	r3, r2
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	4413      	add	r3, r2
 800a824:	00db      	lsls	r3, r3, #3
 800a826:	440b      	add	r3, r1
 800a828:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	78fb      	ldrb	r3, [r7, #3]
 800a830:	4619      	mov	r1, r3
 800a832:	f7fe fe01 	bl	8009438 <USBD_LL_DataOutStage>
}
 800a836:	bf00      	nop
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b082      	sub	sp, #8
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	460b      	mov	r3, r1
 800a848:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a850:	78fa      	ldrb	r2, [r7, #3]
 800a852:	6879      	ldr	r1, [r7, #4]
 800a854:	4613      	mov	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4413      	add	r3, r2
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	440b      	add	r3, r1
 800a85e:	3324      	adds	r3, #36	@ 0x24
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	78fb      	ldrb	r3, [r7, #3]
 800a864:	4619      	mov	r1, r3
 800a866:	f7fe fe58 	bl	800951a <USBD_LL_DataInStage>
}
 800a86a:	bf00      	nop
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b082      	sub	sp, #8
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a880:	4618      	mov	r0, r3
 800a882:	f7fe ff68 	bl	8009756 <USBD_LL_SOF>
}
 800a886:	bf00      	nop
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b084      	sub	sp, #16
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a896:	2301      	movs	r3, #1
 800a898:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	799b      	ldrb	r3, [r3, #6]
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	d001      	beq.n	800a8a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a8a2:	f7f8 f8f1 	bl	8002a88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8ac:	7bfa      	ldrb	r2, [r7, #15]
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fe ff18 	bl	80096e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fe fed1 	bl	8009664 <USBD_LL_Reset>
}
 800a8c2:	bf00      	nop
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
	...

0800a8cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fe ff12 	bl	8009704 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	7a9b      	ldrb	r3, [r3, #10]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d005      	beq.n	800a8f4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a8e8:	4b04      	ldr	r3, [pc, #16]	@ (800a8fc <HAL_PCD_SuspendCallback+0x30>)
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	4a03      	ldr	r2, [pc, #12]	@ (800a8fc <HAL_PCD_SuspendCallback+0x30>)
 800a8ee:	f043 0306 	orr.w	r3, r3, #6
 800a8f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a8f4:	bf00      	nop
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	e000ed00 	.word	0xe000ed00

0800a900 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fe ff0c 	bl	800972c <USBD_LL_Resume>
}
 800a914:	bf00      	nop
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a924:	4a28      	ldr	r2, [pc, #160]	@ (800a9c8 <USBD_LL_Init+0xac>)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a26      	ldr	r2, [pc, #152]	@ (800a9c8 <USBD_LL_Init+0xac>)
 800a930:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a934:	4b24      	ldr	r3, [pc, #144]	@ (800a9c8 <USBD_LL_Init+0xac>)
 800a936:	4a25      	ldr	r2, [pc, #148]	@ (800a9cc <USBD_LL_Init+0xb0>)
 800a938:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a93a:	4b23      	ldr	r3, [pc, #140]	@ (800a9c8 <USBD_LL_Init+0xac>)
 800a93c:	2208      	movs	r2, #8
 800a93e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a940:	4b21      	ldr	r3, [pc, #132]	@ (800a9c8 <USBD_LL_Init+0xac>)
 800a942:	2202      	movs	r2, #2
 800a944:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a946:	4b20      	ldr	r3, [pc, #128]	@ (800a9c8 <USBD_LL_Init+0xac>)
 800a948:	2200      	movs	r2, #0
 800a94a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a94c:	4b1e      	ldr	r3, [pc, #120]	@ (800a9c8 <USBD_LL_Init+0xac>)
 800a94e:	2200      	movs	r2, #0
 800a950:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a952:	4b1d      	ldr	r3, [pc, #116]	@ (800a9c8 <USBD_LL_Init+0xac>)
 800a954:	2200      	movs	r2, #0
 800a956:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a958:	481b      	ldr	r0, [pc, #108]	@ (800a9c8 <USBD_LL_Init+0xac>)
 800a95a:	f7f8 fd8f 	bl	800347c <HAL_PCD_Init>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d001      	beq.n	800a968 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a964:	f7f8 f890 	bl	8002a88 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a96e:	2318      	movs	r3, #24
 800a970:	2200      	movs	r2, #0
 800a972:	2100      	movs	r1, #0
 800a974:	f7fa faa0 	bl	8004eb8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a97e:	2358      	movs	r3, #88	@ 0x58
 800a980:	2200      	movs	r2, #0
 800a982:	2180      	movs	r1, #128	@ 0x80
 800a984:	f7fa fa98 	bl	8004eb8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a98e:	23c0      	movs	r3, #192	@ 0xc0
 800a990:	2200      	movs	r2, #0
 800a992:	2181      	movs	r1, #129	@ 0x81
 800a994:	f7fa fa90 	bl	8004eb8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a99e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	f7fa fa87 	bl	8004eb8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a9b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	2182      	movs	r1, #130	@ 0x82
 800a9b8:	f7fa fa7e 	bl	8004eb8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	200010d8 	.word	0x200010d8
 800a9cc:	40005c00 	.word	0x40005c00

0800a9d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7f8 fe3e 	bl	8003668 <HAL_PCD_Start>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 f94e 	bl	800ac94 <USBD_Get_USB_Status>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b084      	sub	sp, #16
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
 800aa0e:	4608      	mov	r0, r1
 800aa10:	4611      	mov	r1, r2
 800aa12:	461a      	mov	r2, r3
 800aa14:	4603      	mov	r3, r0
 800aa16:	70fb      	strb	r3, [r7, #3]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	70bb      	strb	r3, [r7, #2]
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa24:	2300      	movs	r3, #0
 800aa26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aa2e:	78bb      	ldrb	r3, [r7, #2]
 800aa30:	883a      	ldrh	r2, [r7, #0]
 800aa32:	78f9      	ldrb	r1, [r7, #3]
 800aa34:	f7f8 ff92 	bl	800395c <HAL_PCD_EP_Open>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa3c:	7bfb      	ldrb	r3, [r7, #15]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f000 f928 	bl	800ac94 <USBD_Get_USB_Status>
 800aa44:	4603      	mov	r3, r0
 800aa46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa48:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b084      	sub	sp, #16
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa62:	2300      	movs	r3, #0
 800aa64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa6c:	78fa      	ldrb	r2, [r7, #3]
 800aa6e:	4611      	mov	r1, r2
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7f8 ffd0 	bl	8003a16 <HAL_PCD_EP_Close>
 800aa76:	4603      	mov	r3, r0
 800aa78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa7a:	7bfb      	ldrb	r3, [r7, #15]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f000 f909 	bl	800ac94 <USBD_Get_USB_Status>
 800aa82:	4603      	mov	r3, r0
 800aa84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa86:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	460b      	mov	r3, r1
 800aa9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aaaa:	78fa      	ldrb	r2, [r7, #3]
 800aaac:	4611      	mov	r1, r2
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7f9 f878 	bl	8003ba4 <HAL_PCD_EP_SetStall>
 800aab4:	4603      	mov	r3, r0
 800aab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aab8:	7bfb      	ldrb	r3, [r7, #15]
 800aaba:	4618      	mov	r0, r3
 800aabc:	f000 f8ea 	bl	800ac94 <USBD_Get_USB_Status>
 800aac0:	4603      	mov	r3, r0
 800aac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aac4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b084      	sub	sp, #16
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	460b      	mov	r3, r1
 800aad8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aada:	2300      	movs	r3, #0
 800aadc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aae8:	78fa      	ldrb	r2, [r7, #3]
 800aaea:	4611      	mov	r1, r2
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7f9 f8b9 	bl	8003c64 <HAL_PCD_EP_ClrStall>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaf6:	7bfb      	ldrb	r3, [r7, #15]
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f000 f8cb 	bl	800ac94 <USBD_Get_USB_Status>
 800aafe:	4603      	mov	r3, r0
 800ab00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab02:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ab20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	da0b      	bge.n	800ab40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab28:	78fb      	ldrb	r3, [r7, #3]
 800ab2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab2e:	68f9      	ldr	r1, [r7, #12]
 800ab30:	4613      	mov	r3, r2
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	4413      	add	r3, r2
 800ab36:	00db      	lsls	r3, r3, #3
 800ab38:	440b      	add	r3, r1
 800ab3a:	3312      	adds	r3, #18
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	e00b      	b.n	800ab58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab40:	78fb      	ldrb	r3, [r7, #3]
 800ab42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab46:	68f9      	ldr	r1, [r7, #12]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	00db      	lsls	r3, r3, #3
 800ab50:	440b      	add	r3, r1
 800ab52:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ab56:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3714      	adds	r7, #20
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bc80      	pop	{r7}
 800ab60:	4770      	bx	lr

0800ab62 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b084      	sub	sp, #16
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab7c:	78fa      	ldrb	r2, [r7, #3]
 800ab7e:	4611      	mov	r1, r2
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7f8 fec7 	bl	8003914 <HAL_PCD_SetAddress>
 800ab86:	4603      	mov	r3, r0
 800ab88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab8a:	7bfb      	ldrb	r3, [r7, #15]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f000 f881 	bl	800ac94 <USBD_Get_USB_Status>
 800ab92:	4603      	mov	r3, r0
 800ab94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab96:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b086      	sub	sp, #24
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	607a      	str	r2, [r7, #4]
 800abaa:	461a      	mov	r2, r3
 800abac:	460b      	mov	r3, r1
 800abae:	72fb      	strb	r3, [r7, #11]
 800abb0:	4613      	mov	r3, r2
 800abb2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb8:	2300      	movs	r3, #0
 800abba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800abc2:	893b      	ldrh	r3, [r7, #8]
 800abc4:	7af9      	ldrb	r1, [r7, #11]
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	f7f8 ffb5 	bl	8003b36 <HAL_PCD_EP_Transmit>
 800abcc:	4603      	mov	r3, r0
 800abce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abd0:	7dfb      	ldrb	r3, [r7, #23]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f000 f85e 	bl	800ac94 <USBD_Get_USB_Status>
 800abd8:	4603      	mov	r3, r0
 800abda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abdc:	7dbb      	ldrb	r3, [r7, #22]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b086      	sub	sp, #24
 800abea:	af00      	add	r7, sp, #0
 800abec:	60f8      	str	r0, [r7, #12]
 800abee:	607a      	str	r2, [r7, #4]
 800abf0:	461a      	mov	r2, r3
 800abf2:	460b      	mov	r3, r1
 800abf4:	72fb      	strb	r3, [r7, #11]
 800abf6:	4613      	mov	r3, r2
 800abf8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abfa:	2300      	movs	r3, #0
 800abfc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abfe:	2300      	movs	r3, #0
 800ac00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ac08:	893b      	ldrh	r3, [r7, #8]
 800ac0a:	7af9      	ldrb	r1, [r7, #11]
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	f7f8 ff4a 	bl	8003aa6 <HAL_PCD_EP_Receive>
 800ac12:	4603      	mov	r3, r0
 800ac14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac16:	7dfb      	ldrb	r3, [r7, #23]
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f000 f83b 	bl	800ac94 <USBD_Get_USB_Status>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac22:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3718      	adds	r7, #24
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	460b      	mov	r3, r1
 800ac36:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ac3e:	78fa      	ldrb	r2, [r7, #3]
 800ac40:	4611      	mov	r1, r2
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7f8 ff60 	bl	8003b08 <HAL_PCD_EP_GetRxCount>
 800ac48:	4603      	mov	r3, r0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3708      	adds	r7, #8
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
	...

0800ac54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ac5c:	4b02      	ldr	r3, [pc, #8]	@ (800ac68 <USBD_static_malloc+0x14>)
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	370c      	adds	r7, #12
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bc80      	pop	{r7}
 800ac66:	4770      	bx	lr
 800ac68:	200013b0 	.word	0x200013b0

0800ac6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]

}
 800ac74:	bf00      	nop
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bc80      	pop	{r7}
 800ac7c:	4770      	bx	lr

0800ac7e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b083      	sub	sp, #12
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	460b      	mov	r3, r1
 800ac88:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ac8a:	bf00      	nop
 800ac8c:	370c      	adds	r7, #12
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bc80      	pop	{r7}
 800ac92:	4770      	bx	lr

0800ac94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aca2:	79fb      	ldrb	r3, [r7, #7]
 800aca4:	2b03      	cmp	r3, #3
 800aca6:	d817      	bhi.n	800acd8 <USBD_Get_USB_Status+0x44>
 800aca8:	a201      	add	r2, pc, #4	@ (adr r2, 800acb0 <USBD_Get_USB_Status+0x1c>)
 800acaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acae:	bf00      	nop
 800acb0:	0800acc1 	.word	0x0800acc1
 800acb4:	0800acc7 	.word	0x0800acc7
 800acb8:	0800accd 	.word	0x0800accd
 800acbc:	0800acd3 	.word	0x0800acd3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800acc0:	2300      	movs	r3, #0
 800acc2:	73fb      	strb	r3, [r7, #15]
    break;
 800acc4:	e00b      	b.n	800acde <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800acc6:	2302      	movs	r3, #2
 800acc8:	73fb      	strb	r3, [r7, #15]
    break;
 800acca:	e008      	b.n	800acde <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800accc:	2301      	movs	r3, #1
 800acce:	73fb      	strb	r3, [r7, #15]
    break;
 800acd0:	e005      	b.n	800acde <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800acd2:	2302      	movs	r3, #2
 800acd4:	73fb      	strb	r3, [r7, #15]
    break;
 800acd6:	e002      	b.n	800acde <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800acd8:	2302      	movs	r3, #2
 800acda:	73fb      	strb	r3, [r7, #15]
    break;
 800acdc:	bf00      	nop
  }
  return usb_status;
 800acde:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3714      	adds	r7, #20
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bc80      	pop	{r7}
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop

0800acec <siprintf>:
 800acec:	b40e      	push	{r1, r2, r3}
 800acee:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800acf2:	b510      	push	{r4, lr}
 800acf4:	2400      	movs	r4, #0
 800acf6:	b09d      	sub	sp, #116	@ 0x74
 800acf8:	ab1f      	add	r3, sp, #124	@ 0x7c
 800acfa:	9002      	str	r0, [sp, #8]
 800acfc:	9006      	str	r0, [sp, #24]
 800acfe:	9107      	str	r1, [sp, #28]
 800ad00:	9104      	str	r1, [sp, #16]
 800ad02:	4809      	ldr	r0, [pc, #36]	@ (800ad28 <siprintf+0x3c>)
 800ad04:	4909      	ldr	r1, [pc, #36]	@ (800ad2c <siprintf+0x40>)
 800ad06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad0a:	9105      	str	r1, [sp, #20]
 800ad0c:	6800      	ldr	r0, [r0, #0]
 800ad0e:	a902      	add	r1, sp, #8
 800ad10:	9301      	str	r3, [sp, #4]
 800ad12:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ad14:	f000 f99a 	bl	800b04c <_svfiprintf_r>
 800ad18:	9b02      	ldr	r3, [sp, #8]
 800ad1a:	701c      	strb	r4, [r3, #0]
 800ad1c:	b01d      	add	sp, #116	@ 0x74
 800ad1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad22:	b003      	add	sp, #12
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop
 800ad28:	20000194 	.word	0x20000194
 800ad2c:	ffff0208 	.word	0xffff0208

0800ad30 <memset>:
 800ad30:	4603      	mov	r3, r0
 800ad32:	4402      	add	r2, r0
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d100      	bne.n	800ad3a <memset+0xa>
 800ad38:	4770      	bx	lr
 800ad3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad3e:	e7f9      	b.n	800ad34 <memset+0x4>

0800ad40 <__errno>:
 800ad40:	4b01      	ldr	r3, [pc, #4]	@ (800ad48 <__errno+0x8>)
 800ad42:	6818      	ldr	r0, [r3, #0]
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	20000194 	.word	0x20000194

0800ad4c <__libc_init_array>:
 800ad4c:	b570      	push	{r4, r5, r6, lr}
 800ad4e:	2600      	movs	r6, #0
 800ad50:	4d0c      	ldr	r5, [pc, #48]	@ (800ad84 <__libc_init_array+0x38>)
 800ad52:	4c0d      	ldr	r4, [pc, #52]	@ (800ad88 <__libc_init_array+0x3c>)
 800ad54:	1b64      	subs	r4, r4, r5
 800ad56:	10a4      	asrs	r4, r4, #2
 800ad58:	42a6      	cmp	r6, r4
 800ad5a:	d109      	bne.n	800ad70 <__libc_init_array+0x24>
 800ad5c:	f000 fc7e 	bl	800b65c <_init>
 800ad60:	2600      	movs	r6, #0
 800ad62:	4d0a      	ldr	r5, [pc, #40]	@ (800ad8c <__libc_init_array+0x40>)
 800ad64:	4c0a      	ldr	r4, [pc, #40]	@ (800ad90 <__libc_init_array+0x44>)
 800ad66:	1b64      	subs	r4, r4, r5
 800ad68:	10a4      	asrs	r4, r4, #2
 800ad6a:	42a6      	cmp	r6, r4
 800ad6c:	d105      	bne.n	800ad7a <__libc_init_array+0x2e>
 800ad6e:	bd70      	pop	{r4, r5, r6, pc}
 800ad70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad74:	4798      	blx	r3
 800ad76:	3601      	adds	r6, #1
 800ad78:	e7ee      	b.n	800ad58 <__libc_init_array+0xc>
 800ad7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad7e:	4798      	blx	r3
 800ad80:	3601      	adds	r6, #1
 800ad82:	e7f2      	b.n	800ad6a <__libc_init_array+0x1e>
 800ad84:	0800b7f4 	.word	0x0800b7f4
 800ad88:	0800b7f4 	.word	0x0800b7f4
 800ad8c:	0800b7f4 	.word	0x0800b7f4
 800ad90:	0800b7f8 	.word	0x0800b7f8

0800ad94 <__retarget_lock_acquire_recursive>:
 800ad94:	4770      	bx	lr

0800ad96 <__retarget_lock_release_recursive>:
 800ad96:	4770      	bx	lr

0800ad98 <strcpy>:
 800ad98:	4603      	mov	r3, r0
 800ad9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad9e:	f803 2b01 	strb.w	r2, [r3], #1
 800ada2:	2a00      	cmp	r2, #0
 800ada4:	d1f9      	bne.n	800ad9a <strcpy+0x2>
 800ada6:	4770      	bx	lr

0800ada8 <_free_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4605      	mov	r5, r0
 800adac:	2900      	cmp	r1, #0
 800adae:	d040      	beq.n	800ae32 <_free_r+0x8a>
 800adb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adb4:	1f0c      	subs	r4, r1, #4
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	bfb8      	it	lt
 800adba:	18e4      	addlt	r4, r4, r3
 800adbc:	f000 f8de 	bl	800af7c <__malloc_lock>
 800adc0:	4a1c      	ldr	r2, [pc, #112]	@ (800ae34 <_free_r+0x8c>)
 800adc2:	6813      	ldr	r3, [r2, #0]
 800adc4:	b933      	cbnz	r3, 800add4 <_free_r+0x2c>
 800adc6:	6063      	str	r3, [r4, #4]
 800adc8:	6014      	str	r4, [r2, #0]
 800adca:	4628      	mov	r0, r5
 800adcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800add0:	f000 b8da 	b.w	800af88 <__malloc_unlock>
 800add4:	42a3      	cmp	r3, r4
 800add6:	d908      	bls.n	800adea <_free_r+0x42>
 800add8:	6820      	ldr	r0, [r4, #0]
 800adda:	1821      	adds	r1, r4, r0
 800addc:	428b      	cmp	r3, r1
 800adde:	bf01      	itttt	eq
 800ade0:	6819      	ldreq	r1, [r3, #0]
 800ade2:	685b      	ldreq	r3, [r3, #4]
 800ade4:	1809      	addeq	r1, r1, r0
 800ade6:	6021      	streq	r1, [r4, #0]
 800ade8:	e7ed      	b.n	800adc6 <_free_r+0x1e>
 800adea:	461a      	mov	r2, r3
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	b10b      	cbz	r3, 800adf4 <_free_r+0x4c>
 800adf0:	42a3      	cmp	r3, r4
 800adf2:	d9fa      	bls.n	800adea <_free_r+0x42>
 800adf4:	6811      	ldr	r1, [r2, #0]
 800adf6:	1850      	adds	r0, r2, r1
 800adf8:	42a0      	cmp	r0, r4
 800adfa:	d10b      	bne.n	800ae14 <_free_r+0x6c>
 800adfc:	6820      	ldr	r0, [r4, #0]
 800adfe:	4401      	add	r1, r0
 800ae00:	1850      	adds	r0, r2, r1
 800ae02:	4283      	cmp	r3, r0
 800ae04:	6011      	str	r1, [r2, #0]
 800ae06:	d1e0      	bne.n	800adca <_free_r+0x22>
 800ae08:	6818      	ldr	r0, [r3, #0]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	4408      	add	r0, r1
 800ae0e:	6010      	str	r0, [r2, #0]
 800ae10:	6053      	str	r3, [r2, #4]
 800ae12:	e7da      	b.n	800adca <_free_r+0x22>
 800ae14:	d902      	bls.n	800ae1c <_free_r+0x74>
 800ae16:	230c      	movs	r3, #12
 800ae18:	602b      	str	r3, [r5, #0]
 800ae1a:	e7d6      	b.n	800adca <_free_r+0x22>
 800ae1c:	6820      	ldr	r0, [r4, #0]
 800ae1e:	1821      	adds	r1, r4, r0
 800ae20:	428b      	cmp	r3, r1
 800ae22:	bf01      	itttt	eq
 800ae24:	6819      	ldreq	r1, [r3, #0]
 800ae26:	685b      	ldreq	r3, [r3, #4]
 800ae28:	1809      	addeq	r1, r1, r0
 800ae2a:	6021      	streq	r1, [r4, #0]
 800ae2c:	6063      	str	r3, [r4, #4]
 800ae2e:	6054      	str	r4, [r2, #4]
 800ae30:	e7cb      	b.n	800adca <_free_r+0x22>
 800ae32:	bd38      	pop	{r3, r4, r5, pc}
 800ae34:	20001714 	.word	0x20001714

0800ae38 <sbrk_aligned>:
 800ae38:	b570      	push	{r4, r5, r6, lr}
 800ae3a:	4e0f      	ldr	r6, [pc, #60]	@ (800ae78 <sbrk_aligned+0x40>)
 800ae3c:	460c      	mov	r4, r1
 800ae3e:	6831      	ldr	r1, [r6, #0]
 800ae40:	4605      	mov	r5, r0
 800ae42:	b911      	cbnz	r1, 800ae4a <sbrk_aligned+0x12>
 800ae44:	f000 fba8 	bl	800b598 <_sbrk_r>
 800ae48:	6030      	str	r0, [r6, #0]
 800ae4a:	4621      	mov	r1, r4
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	f000 fba3 	bl	800b598 <_sbrk_r>
 800ae52:	1c43      	adds	r3, r0, #1
 800ae54:	d103      	bne.n	800ae5e <sbrk_aligned+0x26>
 800ae56:	f04f 34ff 	mov.w	r4, #4294967295
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	bd70      	pop	{r4, r5, r6, pc}
 800ae5e:	1cc4      	adds	r4, r0, #3
 800ae60:	f024 0403 	bic.w	r4, r4, #3
 800ae64:	42a0      	cmp	r0, r4
 800ae66:	d0f8      	beq.n	800ae5a <sbrk_aligned+0x22>
 800ae68:	1a21      	subs	r1, r4, r0
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	f000 fb94 	bl	800b598 <_sbrk_r>
 800ae70:	3001      	adds	r0, #1
 800ae72:	d1f2      	bne.n	800ae5a <sbrk_aligned+0x22>
 800ae74:	e7ef      	b.n	800ae56 <sbrk_aligned+0x1e>
 800ae76:	bf00      	nop
 800ae78:	20001710 	.word	0x20001710

0800ae7c <_malloc_r>:
 800ae7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae80:	1ccd      	adds	r5, r1, #3
 800ae82:	f025 0503 	bic.w	r5, r5, #3
 800ae86:	3508      	adds	r5, #8
 800ae88:	2d0c      	cmp	r5, #12
 800ae8a:	bf38      	it	cc
 800ae8c:	250c      	movcc	r5, #12
 800ae8e:	2d00      	cmp	r5, #0
 800ae90:	4606      	mov	r6, r0
 800ae92:	db01      	blt.n	800ae98 <_malloc_r+0x1c>
 800ae94:	42a9      	cmp	r1, r5
 800ae96:	d904      	bls.n	800aea2 <_malloc_r+0x26>
 800ae98:	230c      	movs	r3, #12
 800ae9a:	6033      	str	r3, [r6, #0]
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aea2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af78 <_malloc_r+0xfc>
 800aea6:	f000 f869 	bl	800af7c <__malloc_lock>
 800aeaa:	f8d8 3000 	ldr.w	r3, [r8]
 800aeae:	461c      	mov	r4, r3
 800aeb0:	bb44      	cbnz	r4, 800af04 <_malloc_r+0x88>
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	f7ff ffbf 	bl	800ae38 <sbrk_aligned>
 800aeba:	1c43      	adds	r3, r0, #1
 800aebc:	4604      	mov	r4, r0
 800aebe:	d158      	bne.n	800af72 <_malloc_r+0xf6>
 800aec0:	f8d8 4000 	ldr.w	r4, [r8]
 800aec4:	4627      	mov	r7, r4
 800aec6:	2f00      	cmp	r7, #0
 800aec8:	d143      	bne.n	800af52 <_malloc_r+0xd6>
 800aeca:	2c00      	cmp	r4, #0
 800aecc:	d04b      	beq.n	800af66 <_malloc_r+0xea>
 800aece:	6823      	ldr	r3, [r4, #0]
 800aed0:	4639      	mov	r1, r7
 800aed2:	4630      	mov	r0, r6
 800aed4:	eb04 0903 	add.w	r9, r4, r3
 800aed8:	f000 fb5e 	bl	800b598 <_sbrk_r>
 800aedc:	4581      	cmp	r9, r0
 800aede:	d142      	bne.n	800af66 <_malloc_r+0xea>
 800aee0:	6821      	ldr	r1, [r4, #0]
 800aee2:	4630      	mov	r0, r6
 800aee4:	1a6d      	subs	r5, r5, r1
 800aee6:	4629      	mov	r1, r5
 800aee8:	f7ff ffa6 	bl	800ae38 <sbrk_aligned>
 800aeec:	3001      	adds	r0, #1
 800aeee:	d03a      	beq.n	800af66 <_malloc_r+0xea>
 800aef0:	6823      	ldr	r3, [r4, #0]
 800aef2:	442b      	add	r3, r5
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	f8d8 3000 	ldr.w	r3, [r8]
 800aefa:	685a      	ldr	r2, [r3, #4]
 800aefc:	bb62      	cbnz	r2, 800af58 <_malloc_r+0xdc>
 800aefe:	f8c8 7000 	str.w	r7, [r8]
 800af02:	e00f      	b.n	800af24 <_malloc_r+0xa8>
 800af04:	6822      	ldr	r2, [r4, #0]
 800af06:	1b52      	subs	r2, r2, r5
 800af08:	d420      	bmi.n	800af4c <_malloc_r+0xd0>
 800af0a:	2a0b      	cmp	r2, #11
 800af0c:	d917      	bls.n	800af3e <_malloc_r+0xc2>
 800af0e:	1961      	adds	r1, r4, r5
 800af10:	42a3      	cmp	r3, r4
 800af12:	6025      	str	r5, [r4, #0]
 800af14:	bf18      	it	ne
 800af16:	6059      	strne	r1, [r3, #4]
 800af18:	6863      	ldr	r3, [r4, #4]
 800af1a:	bf08      	it	eq
 800af1c:	f8c8 1000 	streq.w	r1, [r8]
 800af20:	5162      	str	r2, [r4, r5]
 800af22:	604b      	str	r3, [r1, #4]
 800af24:	4630      	mov	r0, r6
 800af26:	f000 f82f 	bl	800af88 <__malloc_unlock>
 800af2a:	f104 000b 	add.w	r0, r4, #11
 800af2e:	1d23      	adds	r3, r4, #4
 800af30:	f020 0007 	bic.w	r0, r0, #7
 800af34:	1ac2      	subs	r2, r0, r3
 800af36:	bf1c      	itt	ne
 800af38:	1a1b      	subne	r3, r3, r0
 800af3a:	50a3      	strne	r3, [r4, r2]
 800af3c:	e7af      	b.n	800ae9e <_malloc_r+0x22>
 800af3e:	6862      	ldr	r2, [r4, #4]
 800af40:	42a3      	cmp	r3, r4
 800af42:	bf0c      	ite	eq
 800af44:	f8c8 2000 	streq.w	r2, [r8]
 800af48:	605a      	strne	r2, [r3, #4]
 800af4a:	e7eb      	b.n	800af24 <_malloc_r+0xa8>
 800af4c:	4623      	mov	r3, r4
 800af4e:	6864      	ldr	r4, [r4, #4]
 800af50:	e7ae      	b.n	800aeb0 <_malloc_r+0x34>
 800af52:	463c      	mov	r4, r7
 800af54:	687f      	ldr	r7, [r7, #4]
 800af56:	e7b6      	b.n	800aec6 <_malloc_r+0x4a>
 800af58:	461a      	mov	r2, r3
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	42a3      	cmp	r3, r4
 800af5e:	d1fb      	bne.n	800af58 <_malloc_r+0xdc>
 800af60:	2300      	movs	r3, #0
 800af62:	6053      	str	r3, [r2, #4]
 800af64:	e7de      	b.n	800af24 <_malloc_r+0xa8>
 800af66:	230c      	movs	r3, #12
 800af68:	4630      	mov	r0, r6
 800af6a:	6033      	str	r3, [r6, #0]
 800af6c:	f000 f80c 	bl	800af88 <__malloc_unlock>
 800af70:	e794      	b.n	800ae9c <_malloc_r+0x20>
 800af72:	6005      	str	r5, [r0, #0]
 800af74:	e7d6      	b.n	800af24 <_malloc_r+0xa8>
 800af76:	bf00      	nop
 800af78:	20001714 	.word	0x20001714

0800af7c <__malloc_lock>:
 800af7c:	4801      	ldr	r0, [pc, #4]	@ (800af84 <__malloc_lock+0x8>)
 800af7e:	f7ff bf09 	b.w	800ad94 <__retarget_lock_acquire_recursive>
 800af82:	bf00      	nop
 800af84:	2000170c 	.word	0x2000170c

0800af88 <__malloc_unlock>:
 800af88:	4801      	ldr	r0, [pc, #4]	@ (800af90 <__malloc_unlock+0x8>)
 800af8a:	f7ff bf04 	b.w	800ad96 <__retarget_lock_release_recursive>
 800af8e:	bf00      	nop
 800af90:	2000170c 	.word	0x2000170c

0800af94 <__ssputs_r>:
 800af94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af98:	461f      	mov	r7, r3
 800af9a:	688e      	ldr	r6, [r1, #8]
 800af9c:	4682      	mov	sl, r0
 800af9e:	42be      	cmp	r6, r7
 800afa0:	460c      	mov	r4, r1
 800afa2:	4690      	mov	r8, r2
 800afa4:	680b      	ldr	r3, [r1, #0]
 800afa6:	d82d      	bhi.n	800b004 <__ssputs_r+0x70>
 800afa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800afb0:	d026      	beq.n	800b000 <__ssputs_r+0x6c>
 800afb2:	6965      	ldr	r5, [r4, #20]
 800afb4:	6909      	ldr	r1, [r1, #16]
 800afb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afba:	eba3 0901 	sub.w	r9, r3, r1
 800afbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800afc2:	1c7b      	adds	r3, r7, #1
 800afc4:	444b      	add	r3, r9
 800afc6:	106d      	asrs	r5, r5, #1
 800afc8:	429d      	cmp	r5, r3
 800afca:	bf38      	it	cc
 800afcc:	461d      	movcc	r5, r3
 800afce:	0553      	lsls	r3, r2, #21
 800afd0:	d527      	bpl.n	800b022 <__ssputs_r+0x8e>
 800afd2:	4629      	mov	r1, r5
 800afd4:	f7ff ff52 	bl	800ae7c <_malloc_r>
 800afd8:	4606      	mov	r6, r0
 800afda:	b360      	cbz	r0, 800b036 <__ssputs_r+0xa2>
 800afdc:	464a      	mov	r2, r9
 800afde:	6921      	ldr	r1, [r4, #16]
 800afe0:	f000 faf8 	bl	800b5d4 <memcpy>
 800afe4:	89a3      	ldrh	r3, [r4, #12]
 800afe6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800afea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afee:	81a3      	strh	r3, [r4, #12]
 800aff0:	6126      	str	r6, [r4, #16]
 800aff2:	444e      	add	r6, r9
 800aff4:	6026      	str	r6, [r4, #0]
 800aff6:	463e      	mov	r6, r7
 800aff8:	6165      	str	r5, [r4, #20]
 800affa:	eba5 0509 	sub.w	r5, r5, r9
 800affe:	60a5      	str	r5, [r4, #8]
 800b000:	42be      	cmp	r6, r7
 800b002:	d900      	bls.n	800b006 <__ssputs_r+0x72>
 800b004:	463e      	mov	r6, r7
 800b006:	4632      	mov	r2, r6
 800b008:	4641      	mov	r1, r8
 800b00a:	6820      	ldr	r0, [r4, #0]
 800b00c:	f000 faaa 	bl	800b564 <memmove>
 800b010:	2000      	movs	r0, #0
 800b012:	68a3      	ldr	r3, [r4, #8]
 800b014:	1b9b      	subs	r3, r3, r6
 800b016:	60a3      	str	r3, [r4, #8]
 800b018:	6823      	ldr	r3, [r4, #0]
 800b01a:	4433      	add	r3, r6
 800b01c:	6023      	str	r3, [r4, #0]
 800b01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b022:	462a      	mov	r2, r5
 800b024:	f000 fae4 	bl	800b5f0 <_realloc_r>
 800b028:	4606      	mov	r6, r0
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d1e0      	bne.n	800aff0 <__ssputs_r+0x5c>
 800b02e:	4650      	mov	r0, sl
 800b030:	6921      	ldr	r1, [r4, #16]
 800b032:	f7ff feb9 	bl	800ada8 <_free_r>
 800b036:	230c      	movs	r3, #12
 800b038:	f8ca 3000 	str.w	r3, [sl]
 800b03c:	89a3      	ldrh	r3, [r4, #12]
 800b03e:	f04f 30ff 	mov.w	r0, #4294967295
 800b042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b046:	81a3      	strh	r3, [r4, #12]
 800b048:	e7e9      	b.n	800b01e <__ssputs_r+0x8a>
	...

0800b04c <_svfiprintf_r>:
 800b04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b050:	4698      	mov	r8, r3
 800b052:	898b      	ldrh	r3, [r1, #12]
 800b054:	4607      	mov	r7, r0
 800b056:	061b      	lsls	r3, r3, #24
 800b058:	460d      	mov	r5, r1
 800b05a:	4614      	mov	r4, r2
 800b05c:	b09d      	sub	sp, #116	@ 0x74
 800b05e:	d510      	bpl.n	800b082 <_svfiprintf_r+0x36>
 800b060:	690b      	ldr	r3, [r1, #16]
 800b062:	b973      	cbnz	r3, 800b082 <_svfiprintf_r+0x36>
 800b064:	2140      	movs	r1, #64	@ 0x40
 800b066:	f7ff ff09 	bl	800ae7c <_malloc_r>
 800b06a:	6028      	str	r0, [r5, #0]
 800b06c:	6128      	str	r0, [r5, #16]
 800b06e:	b930      	cbnz	r0, 800b07e <_svfiprintf_r+0x32>
 800b070:	230c      	movs	r3, #12
 800b072:	603b      	str	r3, [r7, #0]
 800b074:	f04f 30ff 	mov.w	r0, #4294967295
 800b078:	b01d      	add	sp, #116	@ 0x74
 800b07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b07e:	2340      	movs	r3, #64	@ 0x40
 800b080:	616b      	str	r3, [r5, #20]
 800b082:	2300      	movs	r3, #0
 800b084:	9309      	str	r3, [sp, #36]	@ 0x24
 800b086:	2320      	movs	r3, #32
 800b088:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b08c:	2330      	movs	r3, #48	@ 0x30
 800b08e:	f04f 0901 	mov.w	r9, #1
 800b092:	f8cd 800c 	str.w	r8, [sp, #12]
 800b096:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b230 <_svfiprintf_r+0x1e4>
 800b09a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b09e:	4623      	mov	r3, r4
 800b0a0:	469a      	mov	sl, r3
 800b0a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0a6:	b10a      	cbz	r2, 800b0ac <_svfiprintf_r+0x60>
 800b0a8:	2a25      	cmp	r2, #37	@ 0x25
 800b0aa:	d1f9      	bne.n	800b0a0 <_svfiprintf_r+0x54>
 800b0ac:	ebba 0b04 	subs.w	fp, sl, r4
 800b0b0:	d00b      	beq.n	800b0ca <_svfiprintf_r+0x7e>
 800b0b2:	465b      	mov	r3, fp
 800b0b4:	4622      	mov	r2, r4
 800b0b6:	4629      	mov	r1, r5
 800b0b8:	4638      	mov	r0, r7
 800b0ba:	f7ff ff6b 	bl	800af94 <__ssputs_r>
 800b0be:	3001      	adds	r0, #1
 800b0c0:	f000 80a7 	beq.w	800b212 <_svfiprintf_r+0x1c6>
 800b0c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0c6:	445a      	add	r2, fp
 800b0c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f000 809f 	beq.w	800b212 <_svfiprintf_r+0x1c6>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0de:	f10a 0a01 	add.w	sl, sl, #1
 800b0e2:	9304      	str	r3, [sp, #16]
 800b0e4:	9307      	str	r3, [sp, #28]
 800b0e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0ea:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0ec:	4654      	mov	r4, sl
 800b0ee:	2205      	movs	r2, #5
 800b0f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0f4:	484e      	ldr	r0, [pc, #312]	@ (800b230 <_svfiprintf_r+0x1e4>)
 800b0f6:	f000 fa5f 	bl	800b5b8 <memchr>
 800b0fa:	9a04      	ldr	r2, [sp, #16]
 800b0fc:	b9d8      	cbnz	r0, 800b136 <_svfiprintf_r+0xea>
 800b0fe:	06d0      	lsls	r0, r2, #27
 800b100:	bf44      	itt	mi
 800b102:	2320      	movmi	r3, #32
 800b104:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b108:	0711      	lsls	r1, r2, #28
 800b10a:	bf44      	itt	mi
 800b10c:	232b      	movmi	r3, #43	@ 0x2b
 800b10e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b112:	f89a 3000 	ldrb.w	r3, [sl]
 800b116:	2b2a      	cmp	r3, #42	@ 0x2a
 800b118:	d015      	beq.n	800b146 <_svfiprintf_r+0xfa>
 800b11a:	4654      	mov	r4, sl
 800b11c:	2000      	movs	r0, #0
 800b11e:	f04f 0c0a 	mov.w	ip, #10
 800b122:	9a07      	ldr	r2, [sp, #28]
 800b124:	4621      	mov	r1, r4
 800b126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b12a:	3b30      	subs	r3, #48	@ 0x30
 800b12c:	2b09      	cmp	r3, #9
 800b12e:	d94b      	bls.n	800b1c8 <_svfiprintf_r+0x17c>
 800b130:	b1b0      	cbz	r0, 800b160 <_svfiprintf_r+0x114>
 800b132:	9207      	str	r2, [sp, #28]
 800b134:	e014      	b.n	800b160 <_svfiprintf_r+0x114>
 800b136:	eba0 0308 	sub.w	r3, r0, r8
 800b13a:	fa09 f303 	lsl.w	r3, r9, r3
 800b13e:	4313      	orrs	r3, r2
 800b140:	46a2      	mov	sl, r4
 800b142:	9304      	str	r3, [sp, #16]
 800b144:	e7d2      	b.n	800b0ec <_svfiprintf_r+0xa0>
 800b146:	9b03      	ldr	r3, [sp, #12]
 800b148:	1d19      	adds	r1, r3, #4
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	9103      	str	r1, [sp, #12]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	bfbb      	ittet	lt
 800b152:	425b      	neglt	r3, r3
 800b154:	f042 0202 	orrlt.w	r2, r2, #2
 800b158:	9307      	strge	r3, [sp, #28]
 800b15a:	9307      	strlt	r3, [sp, #28]
 800b15c:	bfb8      	it	lt
 800b15e:	9204      	strlt	r2, [sp, #16]
 800b160:	7823      	ldrb	r3, [r4, #0]
 800b162:	2b2e      	cmp	r3, #46	@ 0x2e
 800b164:	d10a      	bne.n	800b17c <_svfiprintf_r+0x130>
 800b166:	7863      	ldrb	r3, [r4, #1]
 800b168:	2b2a      	cmp	r3, #42	@ 0x2a
 800b16a:	d132      	bne.n	800b1d2 <_svfiprintf_r+0x186>
 800b16c:	9b03      	ldr	r3, [sp, #12]
 800b16e:	3402      	adds	r4, #2
 800b170:	1d1a      	adds	r2, r3, #4
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	9203      	str	r2, [sp, #12]
 800b176:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b17a:	9305      	str	r3, [sp, #20]
 800b17c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b234 <_svfiprintf_r+0x1e8>
 800b180:	2203      	movs	r2, #3
 800b182:	4650      	mov	r0, sl
 800b184:	7821      	ldrb	r1, [r4, #0]
 800b186:	f000 fa17 	bl	800b5b8 <memchr>
 800b18a:	b138      	cbz	r0, 800b19c <_svfiprintf_r+0x150>
 800b18c:	2240      	movs	r2, #64	@ 0x40
 800b18e:	9b04      	ldr	r3, [sp, #16]
 800b190:	eba0 000a 	sub.w	r0, r0, sl
 800b194:	4082      	lsls	r2, r0
 800b196:	4313      	orrs	r3, r2
 800b198:	3401      	adds	r4, #1
 800b19a:	9304      	str	r3, [sp, #16]
 800b19c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1a0:	2206      	movs	r2, #6
 800b1a2:	4825      	ldr	r0, [pc, #148]	@ (800b238 <_svfiprintf_r+0x1ec>)
 800b1a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1a8:	f000 fa06 	bl	800b5b8 <memchr>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d036      	beq.n	800b21e <_svfiprintf_r+0x1d2>
 800b1b0:	4b22      	ldr	r3, [pc, #136]	@ (800b23c <_svfiprintf_r+0x1f0>)
 800b1b2:	bb1b      	cbnz	r3, 800b1fc <_svfiprintf_r+0x1b0>
 800b1b4:	9b03      	ldr	r3, [sp, #12]
 800b1b6:	3307      	adds	r3, #7
 800b1b8:	f023 0307 	bic.w	r3, r3, #7
 800b1bc:	3308      	adds	r3, #8
 800b1be:	9303      	str	r3, [sp, #12]
 800b1c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1c2:	4433      	add	r3, r6
 800b1c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1c6:	e76a      	b.n	800b09e <_svfiprintf_r+0x52>
 800b1c8:	460c      	mov	r4, r1
 800b1ca:	2001      	movs	r0, #1
 800b1cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1d0:	e7a8      	b.n	800b124 <_svfiprintf_r+0xd8>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	f04f 0c0a 	mov.w	ip, #10
 800b1d8:	4619      	mov	r1, r3
 800b1da:	3401      	adds	r4, #1
 800b1dc:	9305      	str	r3, [sp, #20]
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1e4:	3a30      	subs	r2, #48	@ 0x30
 800b1e6:	2a09      	cmp	r2, #9
 800b1e8:	d903      	bls.n	800b1f2 <_svfiprintf_r+0x1a6>
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d0c6      	beq.n	800b17c <_svfiprintf_r+0x130>
 800b1ee:	9105      	str	r1, [sp, #20]
 800b1f0:	e7c4      	b.n	800b17c <_svfiprintf_r+0x130>
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1fa:	e7f0      	b.n	800b1de <_svfiprintf_r+0x192>
 800b1fc:	ab03      	add	r3, sp, #12
 800b1fe:	9300      	str	r3, [sp, #0]
 800b200:	462a      	mov	r2, r5
 800b202:	4638      	mov	r0, r7
 800b204:	4b0e      	ldr	r3, [pc, #56]	@ (800b240 <_svfiprintf_r+0x1f4>)
 800b206:	a904      	add	r1, sp, #16
 800b208:	f3af 8000 	nop.w
 800b20c:	1c42      	adds	r2, r0, #1
 800b20e:	4606      	mov	r6, r0
 800b210:	d1d6      	bne.n	800b1c0 <_svfiprintf_r+0x174>
 800b212:	89ab      	ldrh	r3, [r5, #12]
 800b214:	065b      	lsls	r3, r3, #25
 800b216:	f53f af2d 	bmi.w	800b074 <_svfiprintf_r+0x28>
 800b21a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b21c:	e72c      	b.n	800b078 <_svfiprintf_r+0x2c>
 800b21e:	ab03      	add	r3, sp, #12
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	462a      	mov	r2, r5
 800b224:	4638      	mov	r0, r7
 800b226:	4b06      	ldr	r3, [pc, #24]	@ (800b240 <_svfiprintf_r+0x1f4>)
 800b228:	a904      	add	r1, sp, #16
 800b22a:	f000 f87d 	bl	800b328 <_printf_i>
 800b22e:	e7ed      	b.n	800b20c <_svfiprintf_r+0x1c0>
 800b230:	0800b7b6 	.word	0x0800b7b6
 800b234:	0800b7bc 	.word	0x0800b7bc
 800b238:	0800b7c0 	.word	0x0800b7c0
 800b23c:	00000000 	.word	0x00000000
 800b240:	0800af95 	.word	0x0800af95

0800b244 <_printf_common>:
 800b244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b248:	4616      	mov	r6, r2
 800b24a:	4698      	mov	r8, r3
 800b24c:	688a      	ldr	r2, [r1, #8]
 800b24e:	690b      	ldr	r3, [r1, #16]
 800b250:	4607      	mov	r7, r0
 800b252:	4293      	cmp	r3, r2
 800b254:	bfb8      	it	lt
 800b256:	4613      	movlt	r3, r2
 800b258:	6033      	str	r3, [r6, #0]
 800b25a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b25e:	460c      	mov	r4, r1
 800b260:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b264:	b10a      	cbz	r2, 800b26a <_printf_common+0x26>
 800b266:	3301      	adds	r3, #1
 800b268:	6033      	str	r3, [r6, #0]
 800b26a:	6823      	ldr	r3, [r4, #0]
 800b26c:	0699      	lsls	r1, r3, #26
 800b26e:	bf42      	ittt	mi
 800b270:	6833      	ldrmi	r3, [r6, #0]
 800b272:	3302      	addmi	r3, #2
 800b274:	6033      	strmi	r3, [r6, #0]
 800b276:	6825      	ldr	r5, [r4, #0]
 800b278:	f015 0506 	ands.w	r5, r5, #6
 800b27c:	d106      	bne.n	800b28c <_printf_common+0x48>
 800b27e:	f104 0a19 	add.w	sl, r4, #25
 800b282:	68e3      	ldr	r3, [r4, #12]
 800b284:	6832      	ldr	r2, [r6, #0]
 800b286:	1a9b      	subs	r3, r3, r2
 800b288:	42ab      	cmp	r3, r5
 800b28a:	dc2b      	bgt.n	800b2e4 <_printf_common+0xa0>
 800b28c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b290:	6822      	ldr	r2, [r4, #0]
 800b292:	3b00      	subs	r3, #0
 800b294:	bf18      	it	ne
 800b296:	2301      	movne	r3, #1
 800b298:	0692      	lsls	r2, r2, #26
 800b29a:	d430      	bmi.n	800b2fe <_printf_common+0xba>
 800b29c:	4641      	mov	r1, r8
 800b29e:	4638      	mov	r0, r7
 800b2a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2a4:	47c8      	blx	r9
 800b2a6:	3001      	adds	r0, #1
 800b2a8:	d023      	beq.n	800b2f2 <_printf_common+0xae>
 800b2aa:	6823      	ldr	r3, [r4, #0]
 800b2ac:	6922      	ldr	r2, [r4, #16]
 800b2ae:	f003 0306 	and.w	r3, r3, #6
 800b2b2:	2b04      	cmp	r3, #4
 800b2b4:	bf14      	ite	ne
 800b2b6:	2500      	movne	r5, #0
 800b2b8:	6833      	ldreq	r3, [r6, #0]
 800b2ba:	f04f 0600 	mov.w	r6, #0
 800b2be:	bf08      	it	eq
 800b2c0:	68e5      	ldreq	r5, [r4, #12]
 800b2c2:	f104 041a 	add.w	r4, r4, #26
 800b2c6:	bf08      	it	eq
 800b2c8:	1aed      	subeq	r5, r5, r3
 800b2ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b2ce:	bf08      	it	eq
 800b2d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	bfc4      	itt	gt
 800b2d8:	1a9b      	subgt	r3, r3, r2
 800b2da:	18ed      	addgt	r5, r5, r3
 800b2dc:	42b5      	cmp	r5, r6
 800b2de:	d11a      	bne.n	800b316 <_printf_common+0xd2>
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	e008      	b.n	800b2f6 <_printf_common+0xb2>
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	4652      	mov	r2, sl
 800b2e8:	4641      	mov	r1, r8
 800b2ea:	4638      	mov	r0, r7
 800b2ec:	47c8      	blx	r9
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	d103      	bne.n	800b2fa <_printf_common+0xb6>
 800b2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2fa:	3501      	adds	r5, #1
 800b2fc:	e7c1      	b.n	800b282 <_printf_common+0x3e>
 800b2fe:	2030      	movs	r0, #48	@ 0x30
 800b300:	18e1      	adds	r1, r4, r3
 800b302:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b306:	1c5a      	adds	r2, r3, #1
 800b308:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b30c:	4422      	add	r2, r4
 800b30e:	3302      	adds	r3, #2
 800b310:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b314:	e7c2      	b.n	800b29c <_printf_common+0x58>
 800b316:	2301      	movs	r3, #1
 800b318:	4622      	mov	r2, r4
 800b31a:	4641      	mov	r1, r8
 800b31c:	4638      	mov	r0, r7
 800b31e:	47c8      	blx	r9
 800b320:	3001      	adds	r0, #1
 800b322:	d0e6      	beq.n	800b2f2 <_printf_common+0xae>
 800b324:	3601      	adds	r6, #1
 800b326:	e7d9      	b.n	800b2dc <_printf_common+0x98>

0800b328 <_printf_i>:
 800b328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b32c:	7e0f      	ldrb	r7, [r1, #24]
 800b32e:	4691      	mov	r9, r2
 800b330:	2f78      	cmp	r7, #120	@ 0x78
 800b332:	4680      	mov	r8, r0
 800b334:	460c      	mov	r4, r1
 800b336:	469a      	mov	sl, r3
 800b338:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b33a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b33e:	d807      	bhi.n	800b350 <_printf_i+0x28>
 800b340:	2f62      	cmp	r7, #98	@ 0x62
 800b342:	d80a      	bhi.n	800b35a <_printf_i+0x32>
 800b344:	2f00      	cmp	r7, #0
 800b346:	f000 80d1 	beq.w	800b4ec <_printf_i+0x1c4>
 800b34a:	2f58      	cmp	r7, #88	@ 0x58
 800b34c:	f000 80b8 	beq.w	800b4c0 <_printf_i+0x198>
 800b350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b354:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b358:	e03a      	b.n	800b3d0 <_printf_i+0xa8>
 800b35a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b35e:	2b15      	cmp	r3, #21
 800b360:	d8f6      	bhi.n	800b350 <_printf_i+0x28>
 800b362:	a101      	add	r1, pc, #4	@ (adr r1, 800b368 <_printf_i+0x40>)
 800b364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b368:	0800b3c1 	.word	0x0800b3c1
 800b36c:	0800b3d5 	.word	0x0800b3d5
 800b370:	0800b351 	.word	0x0800b351
 800b374:	0800b351 	.word	0x0800b351
 800b378:	0800b351 	.word	0x0800b351
 800b37c:	0800b351 	.word	0x0800b351
 800b380:	0800b3d5 	.word	0x0800b3d5
 800b384:	0800b351 	.word	0x0800b351
 800b388:	0800b351 	.word	0x0800b351
 800b38c:	0800b351 	.word	0x0800b351
 800b390:	0800b351 	.word	0x0800b351
 800b394:	0800b4d3 	.word	0x0800b4d3
 800b398:	0800b3ff 	.word	0x0800b3ff
 800b39c:	0800b48d 	.word	0x0800b48d
 800b3a0:	0800b351 	.word	0x0800b351
 800b3a4:	0800b351 	.word	0x0800b351
 800b3a8:	0800b4f5 	.word	0x0800b4f5
 800b3ac:	0800b351 	.word	0x0800b351
 800b3b0:	0800b3ff 	.word	0x0800b3ff
 800b3b4:	0800b351 	.word	0x0800b351
 800b3b8:	0800b351 	.word	0x0800b351
 800b3bc:	0800b495 	.word	0x0800b495
 800b3c0:	6833      	ldr	r3, [r6, #0]
 800b3c2:	1d1a      	adds	r2, r3, #4
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6032      	str	r2, [r6, #0]
 800b3c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e09c      	b.n	800b50e <_printf_i+0x1e6>
 800b3d4:	6833      	ldr	r3, [r6, #0]
 800b3d6:	6820      	ldr	r0, [r4, #0]
 800b3d8:	1d19      	adds	r1, r3, #4
 800b3da:	6031      	str	r1, [r6, #0]
 800b3dc:	0606      	lsls	r6, r0, #24
 800b3de:	d501      	bpl.n	800b3e4 <_printf_i+0xbc>
 800b3e0:	681d      	ldr	r5, [r3, #0]
 800b3e2:	e003      	b.n	800b3ec <_printf_i+0xc4>
 800b3e4:	0645      	lsls	r5, r0, #25
 800b3e6:	d5fb      	bpl.n	800b3e0 <_printf_i+0xb8>
 800b3e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3ec:	2d00      	cmp	r5, #0
 800b3ee:	da03      	bge.n	800b3f8 <_printf_i+0xd0>
 800b3f0:	232d      	movs	r3, #45	@ 0x2d
 800b3f2:	426d      	negs	r5, r5
 800b3f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3f8:	230a      	movs	r3, #10
 800b3fa:	4858      	ldr	r0, [pc, #352]	@ (800b55c <_printf_i+0x234>)
 800b3fc:	e011      	b.n	800b422 <_printf_i+0xfa>
 800b3fe:	6821      	ldr	r1, [r4, #0]
 800b400:	6833      	ldr	r3, [r6, #0]
 800b402:	0608      	lsls	r0, r1, #24
 800b404:	f853 5b04 	ldr.w	r5, [r3], #4
 800b408:	d402      	bmi.n	800b410 <_printf_i+0xe8>
 800b40a:	0649      	lsls	r1, r1, #25
 800b40c:	bf48      	it	mi
 800b40e:	b2ad      	uxthmi	r5, r5
 800b410:	2f6f      	cmp	r7, #111	@ 0x6f
 800b412:	6033      	str	r3, [r6, #0]
 800b414:	bf14      	ite	ne
 800b416:	230a      	movne	r3, #10
 800b418:	2308      	moveq	r3, #8
 800b41a:	4850      	ldr	r0, [pc, #320]	@ (800b55c <_printf_i+0x234>)
 800b41c:	2100      	movs	r1, #0
 800b41e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b422:	6866      	ldr	r6, [r4, #4]
 800b424:	2e00      	cmp	r6, #0
 800b426:	60a6      	str	r6, [r4, #8]
 800b428:	db05      	blt.n	800b436 <_printf_i+0x10e>
 800b42a:	6821      	ldr	r1, [r4, #0]
 800b42c:	432e      	orrs	r6, r5
 800b42e:	f021 0104 	bic.w	r1, r1, #4
 800b432:	6021      	str	r1, [r4, #0]
 800b434:	d04b      	beq.n	800b4ce <_printf_i+0x1a6>
 800b436:	4616      	mov	r6, r2
 800b438:	fbb5 f1f3 	udiv	r1, r5, r3
 800b43c:	fb03 5711 	mls	r7, r3, r1, r5
 800b440:	5dc7      	ldrb	r7, [r0, r7]
 800b442:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b446:	462f      	mov	r7, r5
 800b448:	42bb      	cmp	r3, r7
 800b44a:	460d      	mov	r5, r1
 800b44c:	d9f4      	bls.n	800b438 <_printf_i+0x110>
 800b44e:	2b08      	cmp	r3, #8
 800b450:	d10b      	bne.n	800b46a <_printf_i+0x142>
 800b452:	6823      	ldr	r3, [r4, #0]
 800b454:	07df      	lsls	r7, r3, #31
 800b456:	d508      	bpl.n	800b46a <_printf_i+0x142>
 800b458:	6923      	ldr	r3, [r4, #16]
 800b45a:	6861      	ldr	r1, [r4, #4]
 800b45c:	4299      	cmp	r1, r3
 800b45e:	bfde      	ittt	le
 800b460:	2330      	movle	r3, #48	@ 0x30
 800b462:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b466:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b46a:	1b92      	subs	r2, r2, r6
 800b46c:	6122      	str	r2, [r4, #16]
 800b46e:	464b      	mov	r3, r9
 800b470:	4621      	mov	r1, r4
 800b472:	4640      	mov	r0, r8
 800b474:	f8cd a000 	str.w	sl, [sp]
 800b478:	aa03      	add	r2, sp, #12
 800b47a:	f7ff fee3 	bl	800b244 <_printf_common>
 800b47e:	3001      	adds	r0, #1
 800b480:	d14a      	bne.n	800b518 <_printf_i+0x1f0>
 800b482:	f04f 30ff 	mov.w	r0, #4294967295
 800b486:	b004      	add	sp, #16
 800b488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b48c:	6823      	ldr	r3, [r4, #0]
 800b48e:	f043 0320 	orr.w	r3, r3, #32
 800b492:	6023      	str	r3, [r4, #0]
 800b494:	2778      	movs	r7, #120	@ 0x78
 800b496:	4832      	ldr	r0, [pc, #200]	@ (800b560 <_printf_i+0x238>)
 800b498:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b49c:	6823      	ldr	r3, [r4, #0]
 800b49e:	6831      	ldr	r1, [r6, #0]
 800b4a0:	061f      	lsls	r7, r3, #24
 800b4a2:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4a6:	d402      	bmi.n	800b4ae <_printf_i+0x186>
 800b4a8:	065f      	lsls	r7, r3, #25
 800b4aa:	bf48      	it	mi
 800b4ac:	b2ad      	uxthmi	r5, r5
 800b4ae:	6031      	str	r1, [r6, #0]
 800b4b0:	07d9      	lsls	r1, r3, #31
 800b4b2:	bf44      	itt	mi
 800b4b4:	f043 0320 	orrmi.w	r3, r3, #32
 800b4b8:	6023      	strmi	r3, [r4, #0]
 800b4ba:	b11d      	cbz	r5, 800b4c4 <_printf_i+0x19c>
 800b4bc:	2310      	movs	r3, #16
 800b4be:	e7ad      	b.n	800b41c <_printf_i+0xf4>
 800b4c0:	4826      	ldr	r0, [pc, #152]	@ (800b55c <_printf_i+0x234>)
 800b4c2:	e7e9      	b.n	800b498 <_printf_i+0x170>
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	f023 0320 	bic.w	r3, r3, #32
 800b4ca:	6023      	str	r3, [r4, #0]
 800b4cc:	e7f6      	b.n	800b4bc <_printf_i+0x194>
 800b4ce:	4616      	mov	r6, r2
 800b4d0:	e7bd      	b.n	800b44e <_printf_i+0x126>
 800b4d2:	6833      	ldr	r3, [r6, #0]
 800b4d4:	6825      	ldr	r5, [r4, #0]
 800b4d6:	1d18      	adds	r0, r3, #4
 800b4d8:	6961      	ldr	r1, [r4, #20]
 800b4da:	6030      	str	r0, [r6, #0]
 800b4dc:	062e      	lsls	r6, r5, #24
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	d501      	bpl.n	800b4e6 <_printf_i+0x1be>
 800b4e2:	6019      	str	r1, [r3, #0]
 800b4e4:	e002      	b.n	800b4ec <_printf_i+0x1c4>
 800b4e6:	0668      	lsls	r0, r5, #25
 800b4e8:	d5fb      	bpl.n	800b4e2 <_printf_i+0x1ba>
 800b4ea:	8019      	strh	r1, [r3, #0]
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	4616      	mov	r6, r2
 800b4f0:	6123      	str	r3, [r4, #16]
 800b4f2:	e7bc      	b.n	800b46e <_printf_i+0x146>
 800b4f4:	6833      	ldr	r3, [r6, #0]
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	1d1a      	adds	r2, r3, #4
 800b4fa:	6032      	str	r2, [r6, #0]
 800b4fc:	681e      	ldr	r6, [r3, #0]
 800b4fe:	6862      	ldr	r2, [r4, #4]
 800b500:	4630      	mov	r0, r6
 800b502:	f000 f859 	bl	800b5b8 <memchr>
 800b506:	b108      	cbz	r0, 800b50c <_printf_i+0x1e4>
 800b508:	1b80      	subs	r0, r0, r6
 800b50a:	6060      	str	r0, [r4, #4]
 800b50c:	6863      	ldr	r3, [r4, #4]
 800b50e:	6123      	str	r3, [r4, #16]
 800b510:	2300      	movs	r3, #0
 800b512:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b516:	e7aa      	b.n	800b46e <_printf_i+0x146>
 800b518:	4632      	mov	r2, r6
 800b51a:	4649      	mov	r1, r9
 800b51c:	4640      	mov	r0, r8
 800b51e:	6923      	ldr	r3, [r4, #16]
 800b520:	47d0      	blx	sl
 800b522:	3001      	adds	r0, #1
 800b524:	d0ad      	beq.n	800b482 <_printf_i+0x15a>
 800b526:	6823      	ldr	r3, [r4, #0]
 800b528:	079b      	lsls	r3, r3, #30
 800b52a:	d413      	bmi.n	800b554 <_printf_i+0x22c>
 800b52c:	68e0      	ldr	r0, [r4, #12]
 800b52e:	9b03      	ldr	r3, [sp, #12]
 800b530:	4298      	cmp	r0, r3
 800b532:	bfb8      	it	lt
 800b534:	4618      	movlt	r0, r3
 800b536:	e7a6      	b.n	800b486 <_printf_i+0x15e>
 800b538:	2301      	movs	r3, #1
 800b53a:	4632      	mov	r2, r6
 800b53c:	4649      	mov	r1, r9
 800b53e:	4640      	mov	r0, r8
 800b540:	47d0      	blx	sl
 800b542:	3001      	adds	r0, #1
 800b544:	d09d      	beq.n	800b482 <_printf_i+0x15a>
 800b546:	3501      	adds	r5, #1
 800b548:	68e3      	ldr	r3, [r4, #12]
 800b54a:	9903      	ldr	r1, [sp, #12]
 800b54c:	1a5b      	subs	r3, r3, r1
 800b54e:	42ab      	cmp	r3, r5
 800b550:	dcf2      	bgt.n	800b538 <_printf_i+0x210>
 800b552:	e7eb      	b.n	800b52c <_printf_i+0x204>
 800b554:	2500      	movs	r5, #0
 800b556:	f104 0619 	add.w	r6, r4, #25
 800b55a:	e7f5      	b.n	800b548 <_printf_i+0x220>
 800b55c:	0800b7c7 	.word	0x0800b7c7
 800b560:	0800b7d8 	.word	0x0800b7d8

0800b564 <memmove>:
 800b564:	4288      	cmp	r0, r1
 800b566:	b510      	push	{r4, lr}
 800b568:	eb01 0402 	add.w	r4, r1, r2
 800b56c:	d902      	bls.n	800b574 <memmove+0x10>
 800b56e:	4284      	cmp	r4, r0
 800b570:	4623      	mov	r3, r4
 800b572:	d807      	bhi.n	800b584 <memmove+0x20>
 800b574:	1e43      	subs	r3, r0, #1
 800b576:	42a1      	cmp	r1, r4
 800b578:	d008      	beq.n	800b58c <memmove+0x28>
 800b57a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b57e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b582:	e7f8      	b.n	800b576 <memmove+0x12>
 800b584:	4601      	mov	r1, r0
 800b586:	4402      	add	r2, r0
 800b588:	428a      	cmp	r2, r1
 800b58a:	d100      	bne.n	800b58e <memmove+0x2a>
 800b58c:	bd10      	pop	{r4, pc}
 800b58e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b596:	e7f7      	b.n	800b588 <memmove+0x24>

0800b598 <_sbrk_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	2300      	movs	r3, #0
 800b59c:	4d05      	ldr	r5, [pc, #20]	@ (800b5b4 <_sbrk_r+0x1c>)
 800b59e:	4604      	mov	r4, r0
 800b5a0:	4608      	mov	r0, r1
 800b5a2:	602b      	str	r3, [r5, #0]
 800b5a4:	f7f7 fb7c 	bl	8002ca0 <_sbrk>
 800b5a8:	1c43      	adds	r3, r0, #1
 800b5aa:	d102      	bne.n	800b5b2 <_sbrk_r+0x1a>
 800b5ac:	682b      	ldr	r3, [r5, #0]
 800b5ae:	b103      	cbz	r3, 800b5b2 <_sbrk_r+0x1a>
 800b5b0:	6023      	str	r3, [r4, #0]
 800b5b2:	bd38      	pop	{r3, r4, r5, pc}
 800b5b4:	20001708 	.word	0x20001708

0800b5b8 <memchr>:
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	b510      	push	{r4, lr}
 800b5bc:	b2c9      	uxtb	r1, r1
 800b5be:	4402      	add	r2, r0
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	d101      	bne.n	800b5ca <memchr+0x12>
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	e003      	b.n	800b5d2 <memchr+0x1a>
 800b5ca:	7804      	ldrb	r4, [r0, #0]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	428c      	cmp	r4, r1
 800b5d0:	d1f6      	bne.n	800b5c0 <memchr+0x8>
 800b5d2:	bd10      	pop	{r4, pc}

0800b5d4 <memcpy>:
 800b5d4:	440a      	add	r2, r1
 800b5d6:	4291      	cmp	r1, r2
 800b5d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5dc:	d100      	bne.n	800b5e0 <memcpy+0xc>
 800b5de:	4770      	bx	lr
 800b5e0:	b510      	push	{r4, lr}
 800b5e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5e6:	4291      	cmp	r1, r2
 800b5e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ec:	d1f9      	bne.n	800b5e2 <memcpy+0xe>
 800b5ee:	bd10      	pop	{r4, pc}

0800b5f0 <_realloc_r>:
 800b5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f4:	4607      	mov	r7, r0
 800b5f6:	4614      	mov	r4, r2
 800b5f8:	460d      	mov	r5, r1
 800b5fa:	b921      	cbnz	r1, 800b606 <_realloc_r+0x16>
 800b5fc:	4611      	mov	r1, r2
 800b5fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b602:	f7ff bc3b 	b.w	800ae7c <_malloc_r>
 800b606:	b92a      	cbnz	r2, 800b614 <_realloc_r+0x24>
 800b608:	f7ff fbce 	bl	800ada8 <_free_r>
 800b60c:	4625      	mov	r5, r4
 800b60e:	4628      	mov	r0, r5
 800b610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b614:	f000 f81a 	bl	800b64c <_malloc_usable_size_r>
 800b618:	4284      	cmp	r4, r0
 800b61a:	4606      	mov	r6, r0
 800b61c:	d802      	bhi.n	800b624 <_realloc_r+0x34>
 800b61e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b622:	d8f4      	bhi.n	800b60e <_realloc_r+0x1e>
 800b624:	4621      	mov	r1, r4
 800b626:	4638      	mov	r0, r7
 800b628:	f7ff fc28 	bl	800ae7c <_malloc_r>
 800b62c:	4680      	mov	r8, r0
 800b62e:	b908      	cbnz	r0, 800b634 <_realloc_r+0x44>
 800b630:	4645      	mov	r5, r8
 800b632:	e7ec      	b.n	800b60e <_realloc_r+0x1e>
 800b634:	42b4      	cmp	r4, r6
 800b636:	4622      	mov	r2, r4
 800b638:	4629      	mov	r1, r5
 800b63a:	bf28      	it	cs
 800b63c:	4632      	movcs	r2, r6
 800b63e:	f7ff ffc9 	bl	800b5d4 <memcpy>
 800b642:	4629      	mov	r1, r5
 800b644:	4638      	mov	r0, r7
 800b646:	f7ff fbaf 	bl	800ada8 <_free_r>
 800b64a:	e7f1      	b.n	800b630 <_realloc_r+0x40>

0800b64c <_malloc_usable_size_r>:
 800b64c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b650:	1f18      	subs	r0, r3, #4
 800b652:	2b00      	cmp	r3, #0
 800b654:	bfbc      	itt	lt
 800b656:	580b      	ldrlt	r3, [r1, r0]
 800b658:	18c0      	addlt	r0, r0, r3
 800b65a:	4770      	bx	lr

0800b65c <_init>:
 800b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65e:	bf00      	nop
 800b660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b662:	bc08      	pop	{r3}
 800b664:	469e      	mov	lr, r3
 800b666:	4770      	bx	lr

0800b668 <_fini>:
 800b668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66a:	bf00      	nop
 800b66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b66e:	bc08      	pop	{r3}
 800b670:	469e      	mov	lr, r3
 800b672:	4770      	bx	lr
