
DECAWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b540  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800b64c  0800b64c  0000c64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7d4  0800b7d4  0000d1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b7d4  0800b7d4  0000c7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7dc  0800b7dc  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7dc  0800b7dc  0000c7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7e0  0800b7e0  0000c7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800b7e4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001530  200001e8  0800b9c8  0000d1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001718  0800b9c8  0000d718  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001438f  00000000  00000000  0000d20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003793  00000000  00000000  0002159c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00024d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e05  00000000  00000000  00025fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa3b  00000000  00000000  00026dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015562  00000000  00000000  00041808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b6d2  00000000  00000000  00056d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e243c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005180  00000000  00000000  000e2480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e7600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e8 	.word	0x200001e8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b634 	.word	0x0800b634

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ec 	.word	0x200001ec
 8000148:	0800b634 	.word	0x0800b634

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <dummy>:
static void writeValueToBytes(uint8_t data[], long val, unsigned int n);
static bool getBit(uint8_t data[], unsigned int n, unsigned int bit);

static void readBytesOTP(dwDevice_t* dev, uint16_t address, uint8_t data[]);

static void dummy(){
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
	;
}
 8000160:	bf00      	nop
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr

08000168 <dwInit>:

void dwInit(dwDevice_t* dev, dwOps_t* ops)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
 800016e:	6078      	str	r0, [r7, #4]
 8000170:	6039      	str	r1, [r7, #0]
	dev->ops = ops;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	683a      	ldr	r2, [r7, #0]
 8000176:	601a      	str	r2, [r3, #0]
	dev->userdata = NULL;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2200      	movs	r2, #0
 800017c:	605a      	str	r2, [r3, #4]

	/* Device default state */
	dev->extendedFrameLength = FRAME_LENGTH_NORMAL;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2200      	movs	r2, #0
 8000182:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	dev->pacSize = PAC_SIZE_8;
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	2208      	movs	r2, #8
 800018a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	dev->pulseFrequency = TX_PULSE_FREQ_16MHZ;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	2201      	movs	r2, #1
 8000192:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	dev->dataRate = TRX_RATE_6800KBPS;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2202      	movs	r2, #2
 800019a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	dev->preambleLength = TX_PREAMBLE_LEN_128;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2205      	movs	r2, #5
 80001a2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	dev->preambleCode = PREAMBLE_CODE_16MHZ_4;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2204      	movs	r2, #4
 80001aa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	dev->channel = CHANNEL_5;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2205      	movs	r2, #5
 80001b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	dev->smartPower = false;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	dev->frameCheck = true;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2201      	movs	r2, #1
 80001c2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	dev->permanentReceive = false;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2200      	movs	r2, #0
 80001ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	dev->deviceMode = IDLE_MODE;
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2200      	movs	r2, #0
 80001d2:	731a      	strb	r2, [r3, #12]

	dev->forceTxPower = false;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2200      	movs	r2, #0
 80001d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

	writeValueToBytes(dev->antennaDelay.raw, 16384, LEN_STAMP);
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	3338      	adds	r3, #56	@ 0x38
 80001e0:	2205      	movs	r2, #5
 80001e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 ff3a 	bl	8002060 <writeValueToBytes>

	// Dummy callback handlers
	dev->handleSent = dummy;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000218 <dwInit+0xb0>)
 80001f0:	641a      	str	r2, [r3, #64]	@ 0x40
	dev->handleError = dummy;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	4a08      	ldr	r2, [pc, #32]	@ (8000218 <dwInit+0xb0>)
 80001f6:	645a      	str	r2, [r3, #68]	@ 0x44
	dev->handleReceived = dummy;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	4a07      	ldr	r2, [pc, #28]	@ (8000218 <dwInit+0xb0>)
 80001fc:	649a      	str	r2, [r3, #72]	@ 0x48
	dev->handleReceiveTimeout = dummy;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4a05      	ldr	r2, [pc, #20]	@ (8000218 <dwInit+0xb0>)
 8000202:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->handleReceiveFailed = dummy;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a04      	ldr	r2, [pc, #16]	@ (8000218 <dwInit+0xb0>)
 8000208:	651a      	str	r2, [r3, #80]	@ 0x50
	dev->handleReceiveTimestampAvailable = dummy;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a02      	ldr	r2, [pc, #8]	@ (8000218 <dwInit+0xb0>)
 800020e:	655a      	str	r2, [r3, #84]	@ 0x54

}
 8000210:	bf00      	nop
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	0800015d 	.word	0x0800015d

0800021c <dwConfigure>:
{
	return dev->userdata;
}

int dwConfigure(dwDevice_t* dev)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af02      	add	r7, sp, #8
 8000222:	6078      	str	r0, [r7, #4]
	dwEnableClock(dev, dwClockAuto);
 8000224:	2100      	movs	r1, #0
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f000 f916 	bl	8000458 <dwEnableClock>
	delayms(5);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	2105      	movs	r1, #5
 8000234:	6878      	ldr	r0, [r7, #4]
 8000236:	4798      	blx	r3

	// Reset the chip
	if (dev->ops->reset) {
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	691b      	ldr	r3, [r3, #16]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d005      	beq.n	800024e <dwConfigure+0x32>
		dev->ops->reset(dev);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	691b      	ldr	r3, [r3, #16]
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	4798      	blx	r3
 800024c:	e002      	b.n	8000254 <dwConfigure+0x38>
	} else {
		dwSoftReset(dev);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 f966 	bl	8000520 <dwSoftReset>
	}

	if (dwGetDeviceId(dev) != 0xdeca0130) {
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 f8a8 	bl	80003aa <dwGetDeviceId>
 800025a:	4603      	mov	r3, r0
 800025c:	4a27      	ldr	r2, [pc, #156]	@ (80002fc <dwConfigure+0xe0>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d001      	beq.n	8000266 <dwConfigure+0x4a>
		return DW_ERROR_WRONG_ID;
 8000262:	2301      	movs	r3, #1
 8000264:	e045      	b.n	80002f2 <dwConfigure+0xd6>
	}

	// Set default address
	memset(dev->networkAndAddress, 0xff, LEN_PANADR);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	330d      	adds	r3, #13
 800026a:	2204      	movs	r2, #4
 800026c:	21ff      	movs	r1, #255	@ 0xff
 800026e:	4618      	mov	r0, r3
 8000270:	f00a fd52 	bl	800ad18 <memset>
	dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	330d      	adds	r3, #13
 8000278:	2204      	movs	r2, #4
 800027a:	9200      	str	r2, [sp, #0]
 800027c:	2200      	movs	r2, #0
 800027e:	2103      	movs	r1, #3
 8000280:	6878      	ldr	r0, [r7, #4]
 8000282:	f001 ff96 	bl	80021b2 <dwSpiWrite>

	// default configuration
	memset(dev->syscfg, 0, LEN_SYS_CFG);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	3311      	adds	r3, #17
 800028a:	2204      	movs	r2, #4
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f00a fd42 	bl	800ad18 <memset>
	dwSetDoubleBuffering(dev, false);
 8000294:	2100      	movs	r1, #0
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f000 fa9d 	bl	80007d6 <dwSetDoubleBuffering>
	dwSetInterruptPolarity(dev, true);
 800029c:	2101      	movs	r1, #1
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f000 fab6 	bl	8000810 <dwSetInterruptPolarity>
	dwWriteSystemConfigurationRegister(dev);
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f000 f9b6 	bl	8000616 <dwWriteSystemConfigurationRegister>
	// default interrupt mask, i.e. no interrupts
	dwClearInterrupts(dev);
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f000 fb78 	bl	80009a0 <dwClearInterrupts>
	dwWriteSystemEventMaskRegister(dev);
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f000 fa05 	bl	80006c0 <dwWriteSystemEventMaskRegister>
	// load LDE micro-code
	dwEnableClock(dev, dwClockXti);
 80002b6:	2101      	movs	r1, #1
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f000 f8cd 	bl	8000458 <dwEnableClock>
	delayms(5);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	2105      	movs	r1, #5
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	4798      	blx	r3
	dwManageLDE(dev);
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f000 f818 	bl	8000300 <dwManageLDE>
	delayms(5);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	68db      	ldr	r3, [r3, #12]
 80002d6:	2105      	movs	r1, #5
 80002d8:	6878      	ldr	r0, [r7, #4]
 80002da:	4798      	blx	r3
	dwEnableClock(dev, dwClockPll);
 80002dc:	2102      	movs	r1, #2
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f000 f8ba 	bl	8000458 <dwEnableClock>
	delayms(5);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	2105      	movs	r1, #5
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	4798      	blx	r3
	//
	// delayms(1);

	// Initialize for default configuration (as per datasheet)

	return DW_ERROR_OK;
 80002f0:	2300      	movs	r3, #0
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	deca0130 	.word	0xdeca0130

08000300 <dwManageLDE>:

void dwManageLDE(dwDevice_t* dev) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af02      	add	r7, sp, #8
 8000306:	6078      	str	r0, [r7, #4]
	// }
	// tell the chip to load the LDE microcode
	// TODO remove clock-related code (PMSC_CTRL) as handled separately
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	uint8_t otpctrl[LEN_OTP_CTRL];
	memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 8000308:	f107 030c 	add.w	r3, r7, #12
 800030c:	2204      	movs	r2, #4
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f00a fd01 	bl	800ad18 <memset>
	memset(otpctrl, 0, LEN_OTP_CTRL);
 8000316:	f107 0308 	add.w	r3, r7, #8
 800031a:	2202      	movs	r2, #2
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f00a fcfa 	bl	800ad18 <memset>
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000324:	f107 030c 	add.w	r3, r7, #12
 8000328:	2204      	movs	r2, #4
 800032a:	9200      	str	r2, [sp, #0]
 800032c:	2200      	movs	r2, #0
 800032e:	2136      	movs	r1, #54	@ 0x36
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f001 feeb 	bl	800210c <dwSpiRead>
	dwSpiRead(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	2202      	movs	r2, #2
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	2206      	movs	r2, #6
 8000340:	212d      	movs	r1, #45	@ 0x2d
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f001 fee2 	bl	800210c <dwSpiRead>
	pmscctrl0[0] = 0x01;
 8000348:	2301      	movs	r3, #1
 800034a:	733b      	strb	r3, [r7, #12]
	pmscctrl0[1] = 0x03;
 800034c:	2303      	movs	r3, #3
 800034e:	737b      	strb	r3, [r7, #13]
	otpctrl[0] = 0x00;
 8000350:	2300      	movs	r3, #0
 8000352:	723b      	strb	r3, [r7, #8]
	otpctrl[1] = 0x80;
 8000354:	2380      	movs	r3, #128	@ 0x80
 8000356:	727b      	strb	r3, [r7, #9]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	2204      	movs	r2, #4
 800035e:	9200      	str	r2, [sp, #0]
 8000360:	2200      	movs	r2, #0
 8000362:	2136      	movs	r1, #54	@ 0x36
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f001 ff24 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	2202      	movs	r2, #2
 8000370:	9200      	str	r2, [sp, #0]
 8000372:	2206      	movs	r2, #6
 8000374:	212d      	movs	r1, #45	@ 0x2d
 8000376:	6878      	ldr	r0, [r7, #4]
 8000378:	f001 ff1b 	bl	80021b2 <dwSpiWrite>
	delayms(5);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	68db      	ldr	r3, [r3, #12]
 8000382:	2105      	movs	r1, #5
 8000384:	6878      	ldr	r0, [r7, #4]
 8000386:	4798      	blx	r3
	pmscctrl0[0] = 0x00;
 8000388:	2300      	movs	r3, #0
 800038a:	733b      	strb	r3, [r7, #12]
	pmscctrl0[1] = 0x02;
 800038c:	2302      	movs	r3, #2
 800038e:	737b      	strb	r3, [r7, #13]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000390:	f107 030c 	add.w	r3, r7, #12
 8000394:	2204      	movs	r2, #4
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	2200      	movs	r2, #0
 800039a:	2136      	movs	r1, #54	@ 0x36
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f001 ff08 	bl	80021b2 <dwSpiWrite>
}
 80003a2:	bf00      	nop
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <dwGetDeviceId>:


uint32_t dwGetDeviceId(dwDevice_t* dev)
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
	return dwSpiRead32(dev, DEV_ID, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2100      	movs	r1, #0
 80003b6:	6878      	ldr	r0, [r7, #4]
 80003b8:	f001 fee6 	bl	8002188 <dwSpiRead32>
 80003bc:	4603      	mov	r3, r0
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <dwEnableAllLeds>:

void dwEnableAllLeds(dwDevice_t* dev)
{
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b084      	sub	sp, #16
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
	uint32_t reg;

	// Set all 4 GPIO in LED mode
	reg = dwSpiRead32(dev, GPIO_CTRL, GPIO_MODE_SUB);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2126      	movs	r1, #38	@ 0x26
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f001 fed8 	bl	8002188 <dwSpiRead32>
 80003d8:	60f8      	str	r0, [r7, #12]
	reg &= ~0x00003FC0ul;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80003e0:	60fb      	str	r3, [r7, #12]
	reg |= 0x00001540ul;
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	f443 53aa 	orr.w	r3, r3, #5440	@ 0x1540
 80003e8:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, GPIO_CTRL, GPIO_MODE_SUB, reg);
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	2200      	movs	r2, #0
 80003ee:	2126      	movs	r1, #38	@ 0x26
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f001 ff38 	bl	8002266 <dwSpiWrite32>

	// Enable debounce clock (used to clock the LED blinking)
	reg = dwSpiRead32(dev, PMSC, PMSC_CTRL0_SUB);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2136      	movs	r1, #54	@ 0x36
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f001 fec4 	bl	8002188 <dwSpiRead32>
 8000400:	60f8      	str	r0, [r7, #12]
	reg |= 0x00840000ul;
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	f443 0304 	orr.w	r3, r3, #8650752	@ 0x840000
 8000408:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_CTRL0_SUB, reg);
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	2200      	movs	r2, #0
 800040e:	2136      	movs	r1, #54	@ 0x36
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f001 ff28 	bl	8002266 <dwSpiWrite32>

	// Enable LED blinking and set the rate
	reg = 0x00000110ul;
 8000416:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800041a:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	2228      	movs	r2, #40	@ 0x28
 8000420:	2136      	movs	r1, #54	@ 0x36
 8000422:	6878      	ldr	r0, [r7, #4]
 8000424:	f001 ff1f 	bl	8002266 <dwSpiWrite32>

	// Trigger a manual blink of the LEDs for test
	reg |= 0x000f0000ul;
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 800042e:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	2228      	movs	r2, #40	@ 0x28
 8000434:	2136      	movs	r1, #54	@ 0x36
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	f001 ff15 	bl	8002266 <dwSpiWrite32>
	reg &= ~0x000f0000ul;
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000442:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	2228      	movs	r2, #40	@ 0x28
 8000448:	2136      	movs	r1, #54	@ 0x36
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f001 ff0b 	bl	8002266 <dwSpiWrite32>
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <dwEnableClock>:

void dwEnableClock(dwDevice_t* dev, dwClock_t clock) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af02      	add	r7, sp, #8
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 8000464:	f107 030c 	add.w	r3, r7, #12
 8000468:	2204      	movs	r2, #4
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f00a fc53 	bl	800ad18 <memset>
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000472:	f107 030c 	add.w	r3, r7, #12
 8000476:	2204      	movs	r2, #4
 8000478:	9200      	str	r2, [sp, #0]
 800047a:	2200      	movs	r2, #0
 800047c:	2136      	movs	r1, #54	@ 0x36
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f001 fe44 	bl	800210c <dwSpiRead>
	if(clock == dwClockAuto) {
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d10d      	bne.n	80004a6 <dwEnableClock+0x4e>
		dev->ops->spiSetSpeed(dev, dwSpiSpeedLow);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	2100      	movs	r1, #0
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	4798      	blx	r3
		pmscctrl0[0] = dwClockAuto;
 8000496:	2300      	movs	r3, #0
 8000498:	733b      	strb	r3, [r7, #12]
		pmscctrl0[1] &= 0xFE;
 800049a:	7b7b      	ldrb	r3, [r7, #13]
 800049c:	f023 0301 	bic.w	r3, r3, #1
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	737b      	strb	r3, [r7, #13]
 80004a4:	e026      	b.n	80004f4 <dwEnableClock+0x9c>
	} else if(clock == dwClockXti) {
 80004a6:	78fb      	ldrb	r3, [r7, #3]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d110      	bne.n	80004ce <dwEnableClock+0x76>
		dev->ops->spiSetSpeed(dev, dwSpiSpeedLow);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	2100      	movs	r1, #0
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	4798      	blx	r3
		pmscctrl0[0] &= 0xFC;
 80004b8:	7b3b      	ldrb	r3, [r7, #12]
 80004ba:	f023 0303 	bic.w	r3, r3, #3
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	733b      	strb	r3, [r7, #12]
		pmscctrl0[0] |= dwClockXti;
 80004c2:	7b3b      	ldrb	r3, [r7, #12]
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	733b      	strb	r3, [r7, #12]
 80004cc:	e012      	b.n	80004f4 <dwEnableClock+0x9c>
	} else if(clock == dwClockPll) {
 80004ce:	78fb      	ldrb	r3, [r7, #3]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d10f      	bne.n	80004f4 <dwEnableClock+0x9c>
		dev->ops->spiSetSpeed(dev, dwSpiSpeedHigh);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	2101      	movs	r1, #1
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	4798      	blx	r3
		pmscctrl0[0] &= 0xFC;
 80004e0:	7b3b      	ldrb	r3, [r7, #12]
 80004e2:	f023 0303 	bic.w	r3, r3, #3
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	733b      	strb	r3, [r7, #12]
		pmscctrl0[0] |= dwClockPll;
 80004ea:	7b3b      	ldrb	r3, [r7, #12]
 80004ec:	f043 0302 	orr.w	r3, r3, #2
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	733b      	strb	r3, [r7, #12]
	} else {
		// TODO deliver proper warning
	}
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, 1);
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	2201      	movs	r2, #1
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	2200      	movs	r2, #0
 80004fe:	2136      	movs	r1, #54	@ 0x36
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f001 fe56 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	2204      	movs	r2, #4
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	2200      	movs	r2, #0
 8000510:	2136      	movs	r1, #54	@ 0x36
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f001 fe4d 	bl	80021b2 <dwSpiWrite>
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <dwSoftReset>:

void dwSoftReset(dwDevice_t* dev)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af02      	add	r7, sp, #8
 8000526:	6078      	str	r0, [r7, #4]
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2204      	movs	r2, #4
 800052e:	9200      	str	r2, [sp, #0]
 8000530:	2200      	movs	r2, #0
 8000532:	2136      	movs	r1, #54	@ 0x36
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f001 fde9 	bl	800210c <dwSpiRead>
	pmscctrl0[0] = 0x01;
 800053a:	2301      	movs	r3, #1
 800053c:	733b      	strb	r3, [r7, #12]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 800053e:	f107 030c 	add.w	r3, r7, #12
 8000542:	2204      	movs	r2, #4
 8000544:	9200      	str	r2, [sp, #0]
 8000546:	2200      	movs	r2, #0
 8000548:	2136      	movs	r1, #54	@ 0x36
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f001 fe31 	bl	80021b2 <dwSpiWrite>
	pmscctrl0[3] = 0x00;
 8000550:	2300      	movs	r3, #0
 8000552:	73fb      	strb	r3, [r7, #15]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2204      	movs	r2, #4
 800055a:	9200      	str	r2, [sp, #0]
 800055c:	2200      	movs	r2, #0
 800055e:	2136      	movs	r1, #54	@ 0x36
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f001 fe26 	bl	80021b2 <dwSpiWrite>
	delayms(10);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	210a      	movs	r1, #10
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	4798      	blx	r3
	pmscctrl0[0] = 0x00;
 8000572:	2300      	movs	r3, #0
 8000574:	733b      	strb	r3, [r7, #12]
	pmscctrl0[3] = 0xF0;
 8000576:	23f0      	movs	r3, #240	@ 0xf0
 8000578:	73fb      	strb	r3, [r7, #15]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	2204      	movs	r2, #4
 8000580:	9200      	str	r2, [sp, #0]
 8000582:	2200      	movs	r2, #0
 8000584:	2136      	movs	r1, #54	@ 0x36
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f001 fe13 	bl	80021b2 <dwSpiWrite>
	// force into idle mode
	dwIdle(dev);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 fa16 	bl	80009be <dwIdle>
}
 8000592:	bf00      	nop
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <dwRxSoftReset>:

/**
 Reset the receiver. Needed after errors or timeouts.
 From the DW1000 User Manual, v2.13 page 35: "Due to an issue in the re-initialisation of the receiver, it is necessary to apply a receiver reset after certain receiver error or timeout events (i.e. RXPHE (PHY Header Error), RXRFSL (Reed Solomon error), RXRFTO (Frame wait timeout), etc.). This ensures that the next good frame will have correctly calculated timestamp. It is not necessary to do this in the cases of RXPTO (Preamble detection Timeout) and RXSFDTO (SFD timeout). For details on how to apply a receiver-only reset see SOFTRESET field of Sub- Register 0x36:00 – PMSC_CTRL0."
 */
void dwRxSoftReset(dwDevice_t* dev) {
 800059a:	b580      	push	{r7, lr}
 800059c:	b086      	sub	sp, #24
 800059e:	af02      	add	r7, sp, #8
 80005a0:	6078      	str	r0, [r7, #4]
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	2204      	movs	r2, #4
 80005a8:	9200      	str	r2, [sp, #0]
 80005aa:	2200      	movs	r2, #0
 80005ac:	2136      	movs	r1, #54	@ 0x36
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f001 fdac 	bl	800210c <dwSpiRead>

	pmscctrl0[3] = pmscctrl0[3] & 0xEF;
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	f023 0310 	bic.w	r3, r3, #16
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	73fb      	strb	r3, [r7, #15]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	2204      	movs	r2, #4
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	2200      	movs	r2, #0
 80005c8:	2136      	movs	r1, #54	@ 0x36
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f001 fdf1 	bl	80021b2 <dwSpiWrite>
	pmscctrl0[3] = pmscctrl0[3] | 0x10;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f043 0310 	orr.w	r3, r3, #16
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	73fb      	strb	r3, [r7, #15]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2204      	movs	r2, #4
 80005e0:	9200      	str	r2, [sp, #0]
 80005e2:	2200      	movs	r2, #0
 80005e4:	2136      	movs	r1, #54	@ 0x36
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f001 fde3 	bl	80021b2 <dwSpiWrite>
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <dwReadSystemConfigurationRegister>:

/* ###########################################################################
 * #### DW1000 register read/write ###########################################
 * ######################################################################### */

void dwReadSystemConfigurationRegister(dwDevice_t* dev) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3311      	adds	r3, #17
 8000600:	2204      	movs	r2, #4
 8000602:	9200      	str	r2, [sp, #0]
 8000604:	2200      	movs	r2, #0
 8000606:	2104      	movs	r1, #4
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f001 fd7f 	bl	800210c <dwSpiRead>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <dwWriteSystemConfigurationRegister>:

void dwWriteSystemConfigurationRegister(dwDevice_t* dev) {
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af02      	add	r7, sp, #8
 800061c:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3311      	adds	r3, #17
 8000622:	2204      	movs	r2, #4
 8000624:	9200      	str	r2, [sp, #0]
 8000626:	2200      	movs	r2, #0
 8000628:	2104      	movs	r1, #4
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f001 fdc1 	bl	80021b2 <dwSpiWrite>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <dwReadSystemEventStatusRegister>:

void dwReadSystemEventStatusRegister(dwDevice_t* dev) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af02      	add	r7, sp, #8
 800063e:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, SYS_STATUS, NO_SUB, dev->sysstatus, LEN_SYS_STATUS);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	331d      	adds	r3, #29
 8000644:	2205      	movs	r2, #5
 8000646:	9200      	str	r2, [sp, #0]
 8000648:	2200      	movs	r2, #0
 800064a:	210f      	movs	r1, #15
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f001 fd5d 	bl	800210c <dwSpiRead>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <dwReadNetworkIdAndDeviceAddress>:

void dwReadNetworkIdAndDeviceAddress(dwDevice_t* dev) {
 800065a:	b580      	push	{r7, lr}
 800065c:	b084      	sub	sp, #16
 800065e:	af02      	add	r7, sp, #8
 8000660:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	330d      	adds	r3, #13
 8000666:	2204      	movs	r2, #4
 8000668:	9200      	str	r2, [sp, #0]
 800066a:	2200      	movs	r2, #0
 800066c:	2103      	movs	r1, #3
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f001 fd4c 	bl	800210c <dwSpiRead>
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <dwWriteNetworkIdAndDeviceAddress>:

void dwWriteNetworkIdAndDeviceAddress(dwDevice_t* dev) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af02      	add	r7, sp, #8
 8000682:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	330d      	adds	r3, #13
 8000688:	2204      	movs	r2, #4
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	2103      	movs	r1, #3
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f001 fd8e 	bl	80021b2 <dwSpiWrite>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <dwReadSystemEventMaskRegister>:

void dwReadSystemEventMaskRegister(dwDevice_t* dev) {
 800069e:	b580      	push	{r7, lr}
 80006a0:	b084      	sub	sp, #16
 80006a2:	af02      	add	r7, sp, #8
 80006a4:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	3315      	adds	r3, #21
 80006aa:	2204      	movs	r2, #4
 80006ac:	9200      	str	r2, [sp, #0]
 80006ae:	2200      	movs	r2, #0
 80006b0:	210e      	movs	r1, #14
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f001 fd2a 	bl	800210c <dwSpiRead>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <dwWriteSystemEventMaskRegister>:

void dwWriteSystemEventMaskRegister(dwDevice_t* dev) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3315      	adds	r3, #21
 80006cc:	2204      	movs	r2, #4
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	2200      	movs	r2, #0
 80006d2:	210e      	movs	r1, #14
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f001 fd6c 	bl	80021b2 <dwSpiWrite>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <dwReadChannelControlRegister>:

void dwReadChannelControlRegister(dwDevice_t* dev) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b084      	sub	sp, #16
 80006e6:	af02      	add	r7, sp, #8
 80006e8:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	3319      	adds	r3, #25
 80006ee:	2204      	movs	r2, #4
 80006f0:	9200      	str	r2, [sp, #0]
 80006f2:	2200      	movs	r2, #0
 80006f4:	211f      	movs	r1, #31
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f001 fd08 	bl	800210c <dwSpiRead>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <dwWriteChannelControlRegister>:

void dwWriteChannelControlRegister(dwDevice_t* dev) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3319      	adds	r3, #25
 8000710:	2204      	movs	r2, #4
 8000712:	9200      	str	r2, [sp, #0]
 8000714:	2200      	movs	r2, #0
 8000716:	211f      	movs	r1, #31
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f001 fd4a 	bl	80021b2 <dwSpiWrite>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <dwReadTransmitFrameControlRegister>:

void dwReadTransmitFrameControlRegister(dwDevice_t* dev) {
 8000726:	b580      	push	{r7, lr}
 8000728:	b084      	sub	sp, #16
 800072a:	af02      	add	r7, sp, #8
 800072c:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	3322      	adds	r3, #34	@ 0x22
 8000732:	2205      	movs	r2, #5
 8000734:	9200      	str	r2, [sp, #0]
 8000736:	2200      	movs	r2, #0
 8000738:	2108      	movs	r1, #8
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f001 fce6 	bl	800210c <dwSpiRead>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <dwWriteTransmitFrameControlRegister>:

void dwWriteTransmitFrameControlRegister(dwDevice_t* dev) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af02      	add	r7, sp, #8
 800074e:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3322      	adds	r3, #34	@ 0x22
 8000754:	2205      	movs	r2, #5
 8000756:	9200      	str	r2, [sp, #0]
 8000758:	2200      	movs	r2, #0
 800075a:	2108      	movs	r1, #8
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f001 fd28 	bl	80021b2 <dwSpiWrite>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <dwSetFrameFilter>:
void dwSetReceiveWaitTimeout(dwDevice_t *dev, uint16_t timeout) {
	dwSpiWrite(dev, RX_FWTO, NO_SUB, &timeout, 2);
	setBit(dev->syscfg, LEN_SYS_CFG, RXWTOE_BIT, timeout!=0);
}

void dwSetFrameFilter(dwDevice_t* dev, bool val) {
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	460b      	mov	r3, r1
 8000774:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, FFEN_BIT, val);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f103 0011 	add.w	r0, r3, #17
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2200      	movs	r2, #0
 8000780:	2104      	movs	r1, #4
 8000782:	f001 fc09 	bl	8001f98 <setBit>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <dwSetFrameFilterAllowData>:

void dwSetFrameFilterAllowBeacon(dwDevice_t* dev, bool val) {
	setBit(dev->syscfg, LEN_SYS_CFG, FFAB_BIT, val);
}

void dwSetFrameFilterAllowData(dwDevice_t* dev, bool val) {
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
 8000796:	460b      	mov	r3, r1
 8000798:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, FFAD_BIT, val);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f103 0011 	add.w	r0, r3, #17
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	2203      	movs	r2, #3
 80007a4:	2104      	movs	r1, #4
 80007a6:	f001 fbf7 	bl	8001f98 <setBit>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <dwSetFrameFilterAllowReserved>:

void dwSetFrameFilterAllowMAC(dwDevice_t* dev, bool val) {
	setBit(dev->syscfg, LEN_SYS_CFG, FFAM_BIT, val);
}

void dwSetFrameFilterAllowReserved(dwDevice_t* dev, bool val) {
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, FFAR_BIT, val);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f103 0011 	add.w	r0, r3, #17
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	2206      	movs	r2, #6
 80007c8:	2104      	movs	r1, #4
 80007ca:	f001 fbe5 	bl	8001f98 <setBit>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <dwSetDoubleBuffering>:

void dwSetDoubleBuffering(dwDevice_t* dev, bool val) {
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	460b      	mov	r3, r1
 80007e0:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, DIS_DRXB_BIT, !val);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f103 0011 	add.w	r0, r3, #17
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	bf14      	ite	ne
 80007ee:	2301      	movne	r3, #1
 80007f0:	2300      	moveq	r3, #0
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	f083 0301 	eor.w	r3, r3, #1
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	220c      	movs	r2, #12
 8000802:	2104      	movs	r1, #4
 8000804:	f001 fbc8 	bl	8001f98 <setBit>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <dwSetInterruptPolarity>:

void dwSetInterruptPolarity(dwDevice_t* dev, bool val) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, HIRQ_POL_BIT, val);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f103 0011 	add.w	r0, r3, #17
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	2209      	movs	r2, #9
 8000826:	2104      	movs	r1, #4
 8000828:	f001 fbb6 	bl	8001f98 <setBit>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <dwSetReceiverAutoReenable>:

void dwSetReceiverAutoReenable(dwDevice_t* dev, bool val) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, RXAUTR_BIT, val);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f103 0011 	add.w	r0, r3, #17
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	221d      	movs	r2, #29
 800084a:	2104      	movs	r1, #4
 800084c:	f001 fba4 	bl	8001f98 <setBit>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <dwInterruptOnSent>:

void dwInterruptOnSent(dwDevice_t* dev, bool val) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, TXFRS_BIT, val);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f103 0015 	add.w	r0, r3, #21
 800086a:	78fb      	ldrb	r3, [r7, #3]
 800086c:	2207      	movs	r2, #7
 800086e:	2104      	movs	r1, #4
 8000870:	f001 fb92 	bl	8001f98 <setBit>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <dwInterruptOnReceived>:

void dwInterruptOnReceived(dwDevice_t* dev, bool val) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, RXDFR_BIT, val);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f103 0015 	add.w	r0, r3, #21
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	220d      	movs	r2, #13
 8000892:	2104      	movs	r1, #4
 8000894:	f001 fb80 	bl	8001f98 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, RXFCG_BIT, val);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f103 0015 	add.w	r0, r3, #21
 800089e:	78fb      	ldrb	r3, [r7, #3]
 80008a0:	220e      	movs	r2, #14
 80008a2:	2104      	movs	r1, #4
 80008a4:	f001 fb78 	bl	8001f98 <setBit>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <dwInterruptOnReceiveFailed>:

void dwInterruptOnReceiveFailed(dwDevice_t* dev, bool val) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_STATUS, LDEERR_BIT, val);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f103 0015 	add.w	r0, r3, #21
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	2212      	movs	r2, #18
 80008c6:	2105      	movs	r1, #5
 80008c8:	f001 fb66 	bl	8001f98 <setBit>
	setBit(dev->sysmask, LEN_SYS_STATUS, RXFCE_BIT, val);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f103 0015 	add.w	r0, r3, #21
 80008d2:	78fb      	ldrb	r3, [r7, #3]
 80008d4:	220f      	movs	r2, #15
 80008d6:	2105      	movs	r1, #5
 80008d8:	f001 fb5e 	bl	8001f98 <setBit>
	setBit(dev->sysmask, LEN_SYS_STATUS, RXPHE_BIT, val);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f103 0015 	add.w	r0, r3, #21
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	220c      	movs	r2, #12
 80008e6:	2105      	movs	r1, #5
 80008e8:	f001 fb56 	bl	8001f98 <setBit>
	setBit(dev->sysmask, LEN_SYS_STATUS, RXRFSL_BIT, val);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f103 0015 	add.w	r0, r3, #21
 80008f2:	78fb      	ldrb	r3, [r7, #3]
 80008f4:	2210      	movs	r2, #16
 80008f6:	2105      	movs	r1, #5
 80008f8:	f001 fb4e 	bl	8001f98 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, RXSFDTO_BIT, val);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f103 0015 	add.w	r0, r3, #21
 8000902:	78fb      	ldrb	r3, [r7, #3]
 8000904:	221a      	movs	r2, #26
 8000906:	2104      	movs	r1, #4
 8000908:	f001 fb46 	bl	8001f98 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, AFFREJ_BIT, val);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f103 0015 	add.w	r0, r3, #21
 8000912:	78fb      	ldrb	r3, [r7, #3]
 8000914:	221d      	movs	r2, #29
 8000916:	2104      	movs	r1, #4
 8000918:	f001 fb3e 	bl	8001f98 <setBit>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <dwInterruptOnReceiveTimeout>:

void dwInterruptOnReceiveTimeout(dwDevice_t* dev, bool val) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, RXRFTO_BIT, val);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f103 0015 	add.w	r0, r3, #21
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	2211      	movs	r2, #17
 800093a:	2104      	movs	r1, #4
 800093c:	f001 fb2c 	bl	8001f98 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, RXPTO_BIT, val);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f103 0015 	add.w	r0, r3, #21
 8000946:	78fb      	ldrb	r3, [r7, #3]
 8000948:	2215      	movs	r2, #21
 800094a:	2104      	movs	r1, #4
 800094c:	f001 fb24 	bl	8001f98 <setBit>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <dwInterruptOnReceiveTimestampAvailable>:

void dwInterruptOnReceiveTimestampAvailable(dwDevice_t* dev, bool val) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, LDEDONE_BIT, val);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f103 0015 	add.w	r0, r3, #21
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	220a      	movs	r2, #10
 800096e:	2104      	movs	r1, #4
 8000970:	f001 fb12 	bl	8001f98 <setBit>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <dwInterruptOnAutomaticAcknowledgeTrigger>:

void dwInterruptOnAutomaticAcknowledgeTrigger(dwDevice_t* dev, bool val) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, AAT_BIT, val);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f103 0015 	add.w	r0, r3, #21
 800098e:	78fb      	ldrb	r3, [r7, #3]
 8000990:	2203      	movs	r2, #3
 8000992:	2104      	movs	r1, #4
 8000994:	f001 fb00 	bl	8001f98 <setBit>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <dwClearInterrupts>:

void dwClearInterrupts(dwDevice_t* dev) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	memset(dev->sysmask, 0, LEN_SYS_MASK);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3315      	adds	r3, #21
 80009ac:	2204      	movs	r2, #4
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f00a f9b1 	bl	800ad18 <memset>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <dwIdle>:

void dwIdle(dwDevice_t* dev)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b084      	sub	sp, #16
 80009c2:	af02      	add	r7, sp, #8
 80009c4:	6078      	str	r0, [r7, #4]
	 memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3308      	adds	r3, #8
 80009ca:	2204      	movs	r2, #4
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f00a f9a2 	bl	800ad18 <memset>
	 dev->sysctrl[0] |= 1<<TRXOFF_BIT;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	7a1b      	ldrb	r3, [r3, #8]
 80009d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	721a      	strb	r2, [r3, #8]
	 dev->deviceMode = IDLE_MODE;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	731a      	strb	r2, [r3, #12]
	 dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3308      	adds	r3, #8
 80009ec:	2204      	movs	r2, #4
 80009ee:	9200      	str	r2, [sp, #0]
 80009f0:	2200      	movs	r2, #0
 80009f2:	210d      	movs	r1, #13
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f001 fbdc 	bl	80021b2 <dwSpiWrite>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <dwNewReceive>:

void dwNewReceive(dwDevice_t* dev) {
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
	dwIdle(dev);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ffd7 	bl	80009be <dwIdle>
	memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3308      	adds	r3, #8
 8000a14:	2204      	movs	r2, #4
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f00a f97d 	bl	800ad18 <memset>
	dwClearReceiveStatus(dev);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f000 fb68 	bl	80010f4 <dwClearReceiveStatus>
	dev->deviceMode = RX_MODE;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2201      	movs	r2, #1
 8000a28:	731a      	strb	r2, [r3, #12]
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <dwStartReceive>:

void dwStartReceive(dwDevice_t* dev) {
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af02      	add	r7, sp, #8
 8000a38:	6078      	str	r0, [r7, #4]
	setBit(dev->sysctrl, LEN_SYS_CTRL, SFCST_BIT, !dev->frameCheck);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f103 0008 	add.w	r0, r3, #8
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	bf14      	ite	ne
 8000a4a:	2301      	movne	r3, #1
 8000a4c:	2300      	moveq	r3, #0
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	f083 0301 	eor.w	r3, r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2104      	movs	r1, #4
 8000a60:	f001 fa9a 	bl	8001f98 <setBit>
	setBit(dev->sysctrl, LEN_SYS_CTRL, RXENAB_BIT, true);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f103 0008 	add.w	r0, r3, #8
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	2104      	movs	r1, #4
 8000a70:	f001 fa92 	bl	8001f98 <setBit>
	dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3308      	adds	r3, #8
 8000a78:	2204      	movs	r2, #4
 8000a7a:	9200      	str	r2, [sp, #0]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	210d      	movs	r1, #13
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f001 fb96 	bl	80021b2 <dwSpiWrite>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <dwNewConfiguration>:
	} else {
		dev->deviceMode = IDLE_MODE;
	}
}

void dwNewConfiguration(dwDevice_t* dev) {
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
	dwIdle(dev);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ff91 	bl	80009be <dwIdle>
	dwReadNetworkIdAndDeviceAddress(dev);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff fddc 	bl	800065a <dwReadNetworkIdAndDeviceAddress>
	dwReadSystemConfigurationRegister(dev);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fda6 	bl	80005f4 <dwReadSystemConfigurationRegister>
	dwReadChannelControlRegister(dev);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff fe1a 	bl	80006e2 <dwReadChannelControlRegister>
	dwReadTransmitFrameControlRegister(dev);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff fe39 	bl	8000726 <dwReadTransmitFrameControlRegister>
	dwReadSystemEventMaskRegister(dev);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff fdf2 	bl	800069e <dwReadSystemEventMaskRegister>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <dwCommitConfiguration>:

void dwCommitConfiguration(dwDevice_t* dev) {
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b084      	sub	sp, #16
 8000ac6:	af02      	add	r7, sp, #8
 8000ac8:	6078      	str	r0, [r7, #4]
	// write all configurations back to device
	dwWriteNetworkIdAndDeviceAddress(dev);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fdd6 	bl	800067c <dwWriteNetworkIdAndDeviceAddress>
	dwWriteSystemConfigurationRegister(dev);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff fda0 	bl	8000616 <dwWriteSystemConfigurationRegister>
	dwWriteChannelControlRegister(dev);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff fe14 	bl	8000704 <dwWriteChannelControlRegister>
	dwWriteTransmitFrameControlRegister(dev);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff fe33 	bl	8000748 <dwWriteTransmitFrameControlRegister>
	dwWriteSystemEventMaskRegister(dev);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff fdec 	bl	80006c0 <dwWriteSystemEventMaskRegister>
	// tune according to configuration
	dwTune(dev);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f000 fb55 	bl	8001198 <dwTune>
	// uint8_t antennaDelayBytes[LEN_STAMP];
	// writeValueToBytes(antennaDelayBytes, 16384, LEN_STAMP);
	// dev->antennaDelay.setTimestamp(antennaDelayBytes);
	// dwSpiRead(dev, TX_ANTD, NO_SUB, antennaDelayBytes, LEN_TX_ANTD);
	// dwSpiRead(dev, LDE_IF, LDE_RXANTD_SUB, antennaDelayBytes, LEN_LDE_RXANTD);
	dwSpiWrite(dev, TX_ANTD, NO_SUB, dev->antennaDelay.raw, LEN_TX_ANTD);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3338      	adds	r3, #56	@ 0x38
 8000af2:	2202      	movs	r2, #2
 8000af4:	9200      	str	r2, [sp, #0]
 8000af6:	2200      	movs	r2, #0
 8000af8:	2118      	movs	r1, #24
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f001 fb59 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_RXANTD_SUB, dev->antennaDelay.raw, LEN_LDE_RXANTD);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3338      	adds	r3, #56	@ 0x38
 8000b04:	2202      	movs	r2, #2
 8000b06:	9200      	str	r2, [sp, #0]
 8000b08:	f641 0204 	movw	r2, #6148	@ 0x1804
 8000b0c:	212e      	movs	r1, #46	@ 0x2e
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f001 fb4f 	bl	80021b2 <dwSpiWrite>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <dwSuppressFrameCheck>:
void dwWaitForResponse(dwDevice_t* dev, bool val) {
	dev->wait4resp = val;
	setBit(dev->sysctrl, LEN_SYS_CTRL, WAIT4RESP_BIT, val);
}

void dwSuppressFrameCheck(dwDevice_t* dev, bool val) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	70fb      	strb	r3, [r7, #3]
	dev->frameCheck = !val;
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	bf14      	ite	ne
 8000b2e:	2301      	movne	r3, #1
 8000b30:	2300      	moveq	r3, #0
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	f083 0301 	eor.w	r3, r3, #1
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <dwUseSmartPower>:

void dwUseSmartPower(dwDevice_t* dev, bool smartPower) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	70fb      	strb	r3, [r7, #3]
	dev->smartPower = smartPower;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	78fa      	ldrb	r2, [r7, #3]
 8000b60:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	setBit(dev->syscfg, LEN_SYS_CFG, DIS_STXP_BIT, !smartPower);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f103 0011 	add.w	r0, r3, #17
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	bf14      	ite	ne
 8000b70:	2301      	movne	r3, #1
 8000b72:	2300      	moveq	r3, #0
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	f083 0301 	eor.w	r3, r3, #1
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2212      	movs	r2, #18
 8000b84:	2104      	movs	r1, #4
 8000b86:	f001 fa07 	bl	8001f98 <setBit>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <dwSetDataRate>:
	delayBytes[1] &= 0xFE;
	dwSpiWrite(dev, DX_TIME, NO_SUB, delayBytes, LEN_DX_TIME);
}


void dwSetDataRate(dwDevice_t* dev, uint8_t rate) {
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af02      	add	r7, sp, #8
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	70fb      	strb	r3, [r7, #3]
	rate &= 0x03;
 8000b9e:	78fb      	ldrb	r3, [r7, #3]
 8000ba0:	f003 0303 	and.w	r3, r3, #3
 8000ba4:	70fb      	strb	r3, [r7, #3]
	dev->txfctrl[1] &= 0x83;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000bac:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	dev->txfctrl[1] |= (uint8_t)((rate << 5) & 0xFF);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	015b      	lsls	r3, r3, #5
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	// special 110kbps flag
	if(rate == TRX_RATE_110KBPS) {
 8000bce:	78fb      	ldrb	r3, [r7, #3]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d108      	bne.n	8000be6 <dwSetDataRate+0x54>
		setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, true);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f103 0011 	add.w	r0, r3, #17
 8000bda:	2301      	movs	r3, #1
 8000bdc:	2216      	movs	r2, #22
 8000bde:	2104      	movs	r1, #4
 8000be0:	f001 f9da 	bl	8001f98 <setBit>
 8000be4:	e007      	b.n	8000bf6 <dwSetDataRate+0x64>
	} else {
		setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, false);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f103 0011 	add.w	r0, r3, #17
 8000bec:	2300      	movs	r3, #0
 8000bee:	2216      	movs	r2, #22
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	f001 f9d1 	bl	8001f98 <setBit>
	}
	// SFD mode and type (non-configurable, as in Table )
	if(rate == TRX_RATE_6800KBPS) {
 8000bf6:	78fb      	ldrb	r3, [r7, #3]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d118      	bne.n	8000c2e <dwSetDataRate+0x9c>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, false);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f103 0019 	add.w	r0, r3, #25
 8000c02:	2300      	movs	r3, #0
 8000c04:	2211      	movs	r2, #17
 8000c06:	2104      	movs	r1, #4
 8000c08:	f001 f9c6 	bl	8001f98 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, false);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f103 0019 	add.w	r0, r3, #25
 8000c12:	2300      	movs	r3, #0
 8000c14:	2214      	movs	r2, #20
 8000c16:	2104      	movs	r1, #4
 8000c18:	f001 f9be 	bl	8001f98 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, false);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f103 0019 	add.w	r0, r3, #25
 8000c22:	2300      	movs	r3, #0
 8000c24:	2215      	movs	r2, #21
 8000c26:	2104      	movs	r1, #4
 8000c28:	f001 f9b6 	bl	8001f98 <setBit>
 8000c2c:	e017      	b.n	8000c5e <dwSetDataRate+0xcc>
	} else {
		setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, true);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f103 0019 	add.w	r0, r3, #25
 8000c34:	2301      	movs	r3, #1
 8000c36:	2211      	movs	r2, #17
 8000c38:	2104      	movs	r1, #4
 8000c3a:	f001 f9ad 	bl	8001f98 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, true);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f103 0019 	add.w	r0, r3, #25
 8000c44:	2301      	movs	r3, #1
 8000c46:	2214      	movs	r2, #20
 8000c48:	2104      	movs	r1, #4
 8000c4a:	f001 f9a5 	bl	8001f98 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, true);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f103 0019 	add.w	r0, r3, #25
 8000c54:	2301      	movs	r3, #1
 8000c56:	2215      	movs	r2, #21
 8000c58:	2104      	movs	r1, #4
 8000c5a:	f001 f99d 	bl	8001f98 <setBit>

	}
	uint8_t sfdLength;
	if(rate == TRX_RATE_6800KBPS) {
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d102      	bne.n	8000c6a <dwSetDataRate+0xd8>
		sfdLength = 0x08;
 8000c64:	2308      	movs	r3, #8
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e007      	b.n	8000c7a <dwSetDataRate+0xe8>
	} else if(rate == TRX_RATE_850KBPS) {
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d102      	bne.n	8000c76 <dwSetDataRate+0xe4>
		sfdLength = 0x10;
 8000c70:	2310      	movs	r3, #16
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	e001      	b.n	8000c7a <dwSetDataRate+0xe8>
	} else {
		sfdLength = 0x40;
 8000c76:	2340      	movs	r3, #64	@ 0x40
 8000c78:	73fb      	strb	r3, [r7, #15]
	}
	dwSpiWrite(dev, USR_SFD, SFD_LENGTH_SUB, &sfdLength, LEN_SFD_LENGTH);
 8000c7a:	f107 030f 	add.w	r3, r7, #15
 8000c7e:	2201      	movs	r2, #1
 8000c80:	9200      	str	r2, [sp, #0]
 8000c82:	2200      	movs	r2, #0
 8000c84:	2121      	movs	r1, #33	@ 0x21
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f001 fa93 	bl	80021b2 <dwSpiWrite>
	dev->dataRate = rate;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	78fa      	ldrb	r2, [r7, #3]
 8000c90:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <dwSetPulseFrequency>:

void dwSetPulseFrequency(dwDevice_t* dev, uint8_t freq) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
	freq &= 0x03;
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	70fb      	strb	r3, [r7, #3]
	dev->txfctrl[2] &= 0xFC;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000cb6:	f023 0303 	bic.w	r3, r3, #3
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	dev->txfctrl[2] |= (uint8_t)(freq & 0xFF);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	dev->chanctrl[2] &= 0xF3;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7edb      	ldrb	r3, [r3, #27]
 8000cd8:	f023 030c 	bic.w	r3, r3, #12
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	76da      	strb	r2, [r3, #27]
	dev->chanctrl[2] |= (uint8_t)((freq << 2) & 0xFF);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	7eda      	ldrb	r2, [r3, #27]
 8000ce6:	78fb      	ldrb	r3, [r7, #3]
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	76da      	strb	r2, [r3, #27]
	dev->pulseFrequency = freq;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	78fa      	ldrb	r2, [r7, #3]
 8000cf8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <dwSetPreambleLength>:

uint8_t dwGetPulseFrequency(dwDevice_t* dev) {
	return dev->pulseFrequency;
}

void dwSetPreambleLength(dwDevice_t* dev, uint8_t prealen) {
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	70fb      	strb	r3, [r7, #3]
	prealen &= 0x0F;
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	f003 030f 	and.w	r3, r3, #15
 8000d18:	70fb      	strb	r3, [r7, #3]
	dev->txfctrl[2] &= 0xC3;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d20:	f023 033c 	bic.w	r3, r3, #60	@ 0x3c
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	dev->txfctrl[2] |= (uint8_t)((prealen << 2) & 0xFF);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000d32:	78fb      	ldrb	r3, [r7, #3]
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	if(prealen == TX_PREAMBLE_LEN_64 || prealen == TX_PREAMBLE_LEN_128) {
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d002      	beq.n	8000d4e <dwSetPreambleLength+0x48>
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	2b05      	cmp	r3, #5
 8000d4c:	d104      	bne.n	8000d58 <dwSetPreambleLength+0x52>
		dev->pacSize = PAC_SIZE_8;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2208      	movs	r2, #8
 8000d52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8000d56:	e016      	b.n	8000d86 <dwSetPreambleLength+0x80>
	} else if(prealen == TX_PREAMBLE_LEN_256 || prealen == TX_PREAMBLE_LEN_512) {
 8000d58:	78fb      	ldrb	r3, [r7, #3]
 8000d5a:	2b09      	cmp	r3, #9
 8000d5c:	d002      	beq.n	8000d64 <dwSetPreambleLength+0x5e>
 8000d5e:	78fb      	ldrb	r3, [r7, #3]
 8000d60:	2b0d      	cmp	r3, #13
 8000d62:	d104      	bne.n	8000d6e <dwSetPreambleLength+0x68>
		dev->pacSize = PAC_SIZE_16;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2210      	movs	r2, #16
 8000d68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8000d6c:	e00b      	b.n	8000d86 <dwSetPreambleLength+0x80>
	} else if(prealen == TX_PREAMBLE_LEN_1024) {
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d104      	bne.n	8000d7e <dwSetPreambleLength+0x78>
		dev->pacSize = PAC_SIZE_32;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2220      	movs	r2, #32
 8000d78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8000d7c:	e003      	b.n	8000d86 <dwSetPreambleLength+0x80>
	} else {
		dev->pacSize = PAC_SIZE_64;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2240      	movs	r2, #64	@ 0x40
 8000d82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}
	dev->preambleLength = prealen;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	78fa      	ldrb	r2, [r7, #3]
 8000d8a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <dwUseExtendedFrameLength>:

void dwUseExtendedFrameLength(dwDevice_t* dev, bool val) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	70fb      	strb	r3, [r7, #3]
	dev->extendedFrameLength = (val ? FRAME_LENGTH_EXTENDED : FRAME_LENGTH_NORMAL);
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <dwUseExtendedFrameLength+0x16>
 8000daa:	2203      	movs	r2, #3
 8000dac:	e000      	b.n	8000db0 <dwUseExtendedFrameLength+0x18>
 8000dae:	2200      	movs	r2, #0
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	dev->syscfg[2] &= 0xFC;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7cdb      	ldrb	r3, [r3, #19]
 8000dba:	f023 0303 	bic.w	r3, r3, #3
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	74da      	strb	r2, [r3, #19]
	dev->syscfg[2] |= dev->extendedFrameLength;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7cda      	ldrb	r2, [r3, #19]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	74da      	strb	r2, [r3, #19]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <dwSetChannel>:

void dwReceivePermanently(dwDevice_t* dev, bool val) {
	dev->permanentReceive = val;
}

void dwSetChannel(dwDevice_t* dev, uint8_t channel) {
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	70fb      	strb	r3, [r7, #3]
	channel &= 0xF;
 8000dec:	78fb      	ldrb	r3, [r7, #3]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	70fb      	strb	r3, [r7, #3]
	dev->chanctrl[0] = ((channel | (channel << 4)) & 0xFF);
 8000df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000df8:	011b      	lsls	r3, r3, #4
 8000dfa:	b25a      	sxtb	r2, r3
 8000dfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	765a      	strb	r2, [r3, #25]
	dev->channel = channel;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	78fa      	ldrb	r2, [r7, #3]
 8000e0e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <dwSetPreambleCode>:

void dwSetPreambleCode(dwDevice_t* dev, uint8_t preacode) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	70fb      	strb	r3, [r7, #3]
	preacode &= 0x1F;
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	f003 031f 	and.w	r3, r3, #31
 8000e2e:	70fb      	strb	r3, [r7, #3]
	dev->chanctrl[2] &= 0x3F;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7edb      	ldrb	r3, [r3, #27]
 8000e34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	76da      	strb	r2, [r3, #27]
	dev->chanctrl[2] |= ((preacode << 6) & 0xFF);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7edb      	ldrb	r3, [r3, #27]
 8000e42:	b25a      	sxtb	r2, r3
 8000e44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e48:	019b      	lsls	r3, r3, #6
 8000e4a:	b25b      	sxtb	r3, r3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	b25b      	sxtb	r3, r3
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	76da      	strb	r2, [r3, #27]
	dev->chanctrl[3] = 0x00;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	771a      	strb	r2, [r3, #28]
	dev->chanctrl[3] = ((((preacode >> 2) & 0x07) | (preacode << 3)) & 0xFF);
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	b25a      	sxtb	r2, r3
 8000e6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	4313      	orrs	r3, r2
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	771a      	strb	r2, [r3, #28]
	dev->preambleCode = preacode;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	78fa      	ldrb	r2, [r7, #3]
 8000e80:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
	...

08000e90 <dwSetDefaults>:

void dwSetDefaults(dwDevice_t* dev) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	if(dev->deviceMode == TX_MODE) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7b1b      	ldrb	r3, [r3, #12]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d03f      	beq.n	8000f20 <dwSetDefaults+0x90>

	} else if(dev->deviceMode == RX_MODE) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	7b1b      	ldrb	r3, [r3, #12]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d03b      	beq.n	8000f20 <dwSetDefaults+0x90>

	} else if(dev->deviceMode == IDLE_MODE) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7b1b      	ldrb	r3, [r3, #12]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d137      	bne.n	8000f20 <dwSetDefaults+0x90>
		dwUseExtendedFrameLength(dev, false);
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff70 	bl	8000d98 <dwUseExtendedFrameLength>
		dwUseSmartPower(dev, false);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff fe48 	bl	8000b50 <dwUseSmartPower>
		dwSuppressFrameCheck(dev, false);
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fe2a 	bl	8000b1c <dwSuppressFrameCheck>
		//for global frame filtering
		dwSetFrameFilter(dev, false);
 8000ec8:	2100      	movs	r1, #0
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fc4d 	bl	800076a <dwSetFrameFilter>
		//for data frame (poll, poll_ack, range, range report, range failed) filtering
		dwSetFrameFilterAllowData(dev, false);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff fc5b 	bl	800078e <dwSetFrameFilterAllowData>
		//for reserved (blink) frame filtering
		dwSetFrameFilterAllowReserved(dev, false);
 8000ed8:	2100      	movs	r1, #0
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff fc69 	bl	80007b2 <dwSetFrameFilterAllowReserved>
		//setFrameFilterAllowMAC(true);
		//setFrameFilterAllowBeacon(true);
		//setFrameFilterAllowAcknowledgement(true);
		dwInterruptOnSent(dev, true);
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff fcb8 	bl	8000858 <dwInterruptOnSent>
		dwInterruptOnReceived(dev, true);
 8000ee8:	2101      	movs	r1, #1
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff fcc6 	bl	800087c <dwInterruptOnReceived>
		dwInterruptOnReceiveTimeout(dev, true);
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fd16 	bl	8000924 <dwInterruptOnReceiveTimeout>
		dwInterruptOnReceiveFailed(dev, false);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fcd8 	bl	80008b0 <dwInterruptOnReceiveFailed>
		dwInterruptOnReceiveTimestampAvailable(dev, false);
 8000f00:	2100      	movs	r1, #0
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff fd28 	bl	8000958 <dwInterruptOnReceiveTimestampAvailable>
		dwInterruptOnAutomaticAcknowledgeTrigger(dev, false);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff fd36 	bl	800097c <dwInterruptOnAutomaticAcknowledgeTrigger>
		dwSetReceiverAutoReenable(dev, true);
 8000f10:	2101      	movs	r1, #1
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff fc8e 	bl	8000834 <dwSetReceiverAutoReenable>
		// default mode when powering up the chip
		// still explicitly selected for later tuning
		dwEnableMode(dev, MODE_LONGDATA_RANGE_LOWPOWER);
 8000f18:	4903      	ldr	r1, [pc, #12]	@ (8000f28 <dwSetDefaults+0x98>)
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f90c 	bl	8001138 <dwEnableMode>
	}
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	0800b76c 	.word	0x0800b76c

08000f2c <dwIsTransmitDone>:

void dwGetSystemTimestamp(dwDevice_t* dev, dwTime_t* time) {
	dwSpiRead(dev, SYS_TIME, NO_SUB, time->raw, LEN_SYS_TIME);
}

bool dwIsTransmitDone(dwDevice_t* dev) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	return getBit(dev->sysstatus, LEN_SYS_STATUS, TXFRS_BIT);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	331d      	adds	r3, #29
 8000f38:	2207      	movs	r2, #7
 8000f3a:	2105      	movs	r1, #5
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f001 f867 	bl	8002010 <getBit>
 8000f42:	4603      	mov	r3, r0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <dwIsReceiveTimestampAvailable>:

bool dwIsReceiveTimestampAvailable(dwDevice_t* dev) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	return getBit(dev->sysstatus, LEN_SYS_STATUS, LDEDONE_BIT);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	331d      	adds	r3, #29
 8000f58:	220a      	movs	r2, #10
 8000f5a:	2105      	movs	r1, #5
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 f857 	bl	8002010 <getBit>
 8000f62:	4603      	mov	r3, r0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <dwIsReceiveDone>:

bool dwIsReceiveDone(dwDevice_t* dev) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	if(dev->frameCheck) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d008      	beq.n	8000f90 <dwIsReceiveDone+0x24>
		return getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCG_BIT);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	331d      	adds	r3, #29
 8000f82:	220e      	movs	r2, #14
 8000f84:	2105      	movs	r1, #5
 8000f86:	4618      	mov	r0, r3
 8000f88:	f001 f842 	bl	8002010 <getBit>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	e007      	b.n	8000fa0 <dwIsReceiveDone+0x34>
	}
	return getBit(dev->sysstatus, LEN_SYS_STATUS, RXDFR_BIT);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	331d      	adds	r3, #29
 8000f94:	220d      	movs	r2, #13
 8000f96:	2105      	movs	r1, #5
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 f839 	bl	8002010 <getBit>
 8000f9e:	4603      	mov	r3, r0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <dwIsReceiveFailed>:

bool dwIsReceiveFailed(dwDevice_t *dev) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	bool ldeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, LDEERR_BIT);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	331d      	adds	r3, #29
 8000fb4:	2212      	movs	r2, #18
 8000fb6:	2105      	movs	r1, #5
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 f829 	bl	8002010 <getBit>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]
	bool rxCRCErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCE_BIT);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	331d      	adds	r3, #29
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	2105      	movs	r1, #5
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 f820 	bl	8002010 <getBit>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	73bb      	strb	r3, [r7, #14]
	bool rxHeaderErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXPHE_BIT);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	331d      	adds	r3, #29
 8000fd8:	220c      	movs	r2, #12
 8000fda:	2105      	movs	r1, #5
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f001 f817 	bl	8002010 <getBit>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	737b      	strb	r3, [r7, #13]
	bool rxDecodeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFSL_BIT);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	331d      	adds	r3, #29
 8000fea:	2210      	movs	r2, #16
 8000fec:	2105      	movs	r1, #5
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 f80e 	bl	8002010 <getBit>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	733b      	strb	r3, [r7, #12]


	bool rxSfdto = getBit(dev->sysstatus, LEN_SYS_STATUS, RXSFDTO_BIT);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	331d      	adds	r3, #29
 8000ffc:	221a      	movs	r2, #26
 8000ffe:	2105      	movs	r1, #5
 8001000:	4618      	mov	r0, r3
 8001002:	f001 f805 	bl	8002010 <getBit>
 8001006:	4603      	mov	r3, r0
 8001008:	72fb      	strb	r3, [r7, #11]
	bool affrej = getBit(dev->sysstatus, LEN_SYS_STATUS, AFFREJ_BIT);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	331d      	adds	r3, #29
 800100e:	221d      	movs	r2, #29
 8001010:	2105      	movs	r1, #5
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fffc 	bl	8002010 <getBit>
 8001018:	4603      	mov	r3, r0
 800101a:	72bb      	strb	r3, [r7, #10]

	return (ldeErr || rxCRCErr || rxHeaderErr || rxDecodeErr || rxSfdto || affrej);
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10e      	bne.n	8001040 <dwIsReceiveFailed+0x98>
 8001022:	7bbb      	ldrb	r3, [r7, #14]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d10b      	bne.n	8001040 <dwIsReceiveFailed+0x98>
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d108      	bne.n	8001040 <dwIsReceiveFailed+0x98>
 800102e:	7b3b      	ldrb	r3, [r7, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d105      	bne.n	8001040 <dwIsReceiveFailed+0x98>
 8001034:	7afb      	ldrb	r3, [r7, #11]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d102      	bne.n	8001040 <dwIsReceiveFailed+0x98>
 800103a:	7abb      	ldrb	r3, [r7, #10]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <dwIsReceiveFailed+0x9c>
 8001040:	2301      	movs	r3, #1
 8001042:	e000      	b.n	8001046 <dwIsReceiveFailed+0x9e>
 8001044:	2300      	movs	r3, #0
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	b2db      	uxtb	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <dwIsReceiveTimeout>:

bool dwIsReceiveTimeout(dwDevice_t* dev) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	return getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFTO_BIT);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	331d      	adds	r3, #29
 8001060:	2211      	movs	r2, #17
 8001062:	2105      	movs	r1, #5
 8001064:	4618      	mov	r0, r3
 8001066:	f000 ffd3 	bl	8002010 <getBit>
 800106a:	4603      	mov	r3, r0
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <dwIsClockProblem>:

bool dwIsClockProblem(dwDevice_t* dev) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	bool clkllErr, rfllErr;
	clkllErr = getBit(dev->sysstatus, LEN_SYS_STATUS, CLKPLL_LL_BIT);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	331d      	adds	r3, #29
 8001080:	2219      	movs	r2, #25
 8001082:	2105      	movs	r1, #5
 8001084:	4618      	mov	r0, r3
 8001086:	f000 ffc3 	bl	8002010 <getBit>
 800108a:	4603      	mov	r3, r0
 800108c:	73fb      	strb	r3, [r7, #15]
	rfllErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RFPLL_LL_BIT);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	331d      	adds	r3, #29
 8001092:	2218      	movs	r2, #24
 8001094:	2105      	movs	r1, #5
 8001096:	4618      	mov	r0, r3
 8001098:	f000 ffba 	bl	8002010 <getBit>
 800109c:	4603      	mov	r3, r0
 800109e:	73bb      	strb	r3, [r7, #14]
	if(clkllErr || rfllErr) {
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d102      	bne.n	80010ac <dwIsClockProblem+0x38>
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <dwIsClockProblem+0x3c>
		return true;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <dwIsClockProblem+0x3e>
	}
	return false;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <dwClearReceiveTimestampAvailableStatus>:
	memset(dev->sysstatus, 0, LEN_SYS_STATUS);
	uint32_t reg = 0xffffffff;
	dwSpiWrite(dev, SYS_STATUS, NO_SUB,  &reg, LEN_SYS_STATUS);
}

void dwClearReceiveTimestampAvailableStatus(dwDevice_t* dev) {
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af02      	add	r7, sp, #8
 80010c0:	6078      	str	r0, [r7, #4]
	uint8_t reg[LEN_SYS_STATUS] = {0};
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	711a      	strb	r2, [r3, #4]
	setBit(reg, LEN_SYS_STATUS, LDEDONE_BIT, true);
 80010cc:	f107 0008 	add.w	r0, r7, #8
 80010d0:	2301      	movs	r3, #1
 80010d2:	220a      	movs	r2, #10
 80010d4:	2105      	movs	r1, #5
 80010d6:	f000 ff5f 	bl	8001f98 <setBit>
	dwSpiWrite(dev, SYS_STATUS, NO_SUB, reg, LEN_SYS_STATUS);
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	2205      	movs	r2, #5
 80010e0:	9200      	str	r2, [sp, #0]
 80010e2:	2200      	movs	r2, #0
 80010e4:	210f      	movs	r1, #15
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f001 f863 	bl	80021b2 <dwSpiWrite>
}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <dwClearReceiveStatus>:

void dwClearReceiveStatus(dwDevice_t* dev) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	// clear latched RX bits (i.e. write 1 to clear)
	uint32_t regData = SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_GOOD;
 80010fc:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <dwClearReceiveStatus+0x20>)
 80010fe:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2200      	movs	r2, #0
 8001104:	210f      	movs	r1, #15
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f001 f8ad 	bl	8002266 <dwSpiWrite32>
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2427ff00 	.word	0x2427ff00

08001118 <dwClearTransmitStatus>:

void dwClearTransmitStatus(dwDevice_t* dev) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	// clear latched TX bits
	uint32_t regData = SYS_STATUS_ALL_TX;
 8001120:	23f8      	movs	r3, #248	@ 0xf8
 8001122:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2200      	movs	r2, #0
 8001128:	210f      	movs	r1, #15
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f001 f89b 	bl	8002266 <dwSpiWrite32>
}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <dwEnableMode>:
	float twoPower17 = 131072.0f;

	return calculatePower(C * twoPower17, N, dev->pulseFrequency);
}

void dwEnableMode(dwDevice_t *dev, const uint8_t mode[]) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
	dwSetDataRate(dev, mode[0]);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4619      	mov	r1, r3
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff fd22 	bl	8000b92 <dwSetDataRate>
	dwSetPulseFrequency(dev, mode[1]);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fda0 	bl	8000c9c <dwSetPulseFrequency>
	dwSetPreambleLength(dev, mode[2]);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	3302      	adds	r3, #2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4619      	mov	r1, r3
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff fdce 	bl	8000d06 <dwSetPreambleLength>
	// TODO add channel and code to mode tuples
	// TODO add channel and code settings with checks (see Table 58)
	dwSetChannel(dev, CHANNEL_5);
 800116a:	2105      	movs	r1, #5
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff fe37 	bl	8000de0 <dwSetChannel>
	if(mode[1] == TX_PULSE_FREQ_16MHZ) {
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d104      	bne.n	8001186 <dwEnableMode+0x4e>
		dwSetPreambleCode(dev, PREAMBLE_CODE_16MHZ_4);
 800117c:	2104      	movs	r1, #4
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff fe4c 	bl	8000e1c <dwSetPreambleCode>
	} else {
		dwSetPreambleCode(dev, PREAMBLE_CODE_64MHZ_10);
	}
}
 8001184:	e003      	b.n	800118e <dwEnableMode+0x56>
		dwSetPreambleCode(dev, PREAMBLE_CODE_64MHZ_10);
 8001186:	210a      	movs	r1, #10
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff fe47 	bl	8000e1c <dwSetPreambleCode>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <dwTune>:

void dwTune(dwDevice_t *dev) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b098      	sub	sp, #96	@ 0x60
 800119c:	af02      	add	r7, sp, #8
 800119e:	6078      	str	r0, [r7, #4]
	uint8_t tcpgdelay[LEN_TC_PGDELAY];
	uint8_t fspllcfg[LEN_FS_PLLCFG];
	uint8_t fsplltune[LEN_FS_PLLTUNE];
	uint8_t fsxtalt[LEN_FS_XTALT];
	// AGC_TUNE1
	if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d108      	bne.n	80011bc <dwTune+0x24>
		writeValueToBytes(agctune1, 0x8870, LEN_AGC_TUNE1);
 80011aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011ae:	2202      	movs	r2, #2
 80011b0:	f648 0170 	movw	r1, #34928	@ 0x8870
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 ff53 	bl	8002060 <writeValueToBytes>
 80011ba:	e00c      	b.n	80011d6 <dwTune+0x3e>
	} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d107      	bne.n	80011d6 <dwTune+0x3e>
		writeValueToBytes(agctune1, 0x889B, LEN_AGC_TUNE1);
 80011c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011ca:	2202      	movs	r2, #2
 80011cc:	f648 019b 	movw	r1, #34971	@ 0x889b
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 ff45 	bl	8002060 <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// AGC_TUNE2
	writeValueToBytes(agctune2, 0x2502A907L, LEN_AGC_TUNE2);
 80011d6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80011da:	2204      	movs	r2, #4
 80011dc:	49b9      	ldr	r1, [pc, #740]	@ (80014c4 <dwTune+0x32c>)
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 ff3e 	bl	8002060 <writeValueToBytes>
	// AGC_TUNE3
	writeValueToBytes(agctune3, 0x0035, LEN_AGC_TUNE3);
 80011e4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011e8:	2202      	movs	r2, #2
 80011ea:	2135      	movs	r1, #53	@ 0x35
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 ff37 	bl	8002060 <writeValueToBytes>
	// DRX_TUNE0b (already optimized according to Table 20 of user manual)
	if(dev->dataRate == TRX_RATE_110KBPS) {
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d107      	bne.n	800120c <dwTune+0x74>
		writeValueToBytes(drxtune0b, 0x0016, LEN_DRX_TUNE0b);
 80011fc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001200:	2202      	movs	r2, #2
 8001202:	2116      	movs	r1, #22
 8001204:	4618      	mov	r0, r3
 8001206:	f000 ff2b 	bl	8002060 <writeValueToBytes>
 800120a:	e018      	b.n	800123e <dwTune+0xa6>
	} else if(dev->dataRate == TRX_RATE_850KBPS) {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001212:	2b01      	cmp	r3, #1
 8001214:	d107      	bne.n	8001226 <dwTune+0x8e>
		writeValueToBytes(drxtune0b, 0x0006, LEN_DRX_TUNE0b);
 8001216:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800121a:	2202      	movs	r2, #2
 800121c:	2106      	movs	r1, #6
 800121e:	4618      	mov	r0, r3
 8001220:	f000 ff1e 	bl	8002060 <writeValueToBytes>
 8001224:	e00b      	b.n	800123e <dwTune+0xa6>
	} else if(dev->dataRate == TRX_RATE_6800KBPS) {
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800122c:	2b02      	cmp	r3, #2
 800122e:	d106      	bne.n	800123e <dwTune+0xa6>
		writeValueToBytes(drxtune0b, 0x0001, LEN_DRX_TUNE0b);
 8001230:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001234:	2202      	movs	r2, #2
 8001236:	2101      	movs	r1, #1
 8001238:	4618      	mov	r0, r3
 800123a:	f000 ff11 	bl	8002060 <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// DRX_TUNE1a
	if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001244:	2b01      	cmp	r3, #1
 8001246:	d107      	bne.n	8001258 <dwTune+0xc0>
		writeValueToBytes(drxtune1a, 0x0087, LEN_DRX_TUNE1a);
 8001248:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800124c:	2202      	movs	r2, #2
 800124e:	2187      	movs	r1, #135	@ 0x87
 8001250:	4618      	mov	r0, r3
 8001252:	f000 ff05 	bl	8002060 <writeValueToBytes>
 8001256:	e00b      	b.n	8001270 <dwTune+0xd8>
	} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800125e:	2b02      	cmp	r3, #2
 8001260:	d106      	bne.n	8001270 <dwTune+0xd8>
		writeValueToBytes(drxtune1a, 0x008D, LEN_DRX_TUNE1a);
 8001262:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001266:	2202      	movs	r2, #2
 8001268:	218d      	movs	r1, #141	@ 0x8d
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fef8 	bl	8002060 <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// DRX_TUNE1b
	if(dev->preambleLength ==  TX_PREAMBLE_LEN_1536 || dev->preambleLength ==  TX_PREAMBLE_LEN_2048 ||
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001276:	2b06      	cmp	r3, #6
 8001278:	d009      	beq.n	800128e <dwTune+0xf6>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001280:	2b0a      	cmp	r3, #10
 8001282:	d004      	beq.n	800128e <dwTune+0xf6>
			dev->preambleLength ==  TX_PREAMBLE_LEN_4096) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	if(dev->preambleLength ==  TX_PREAMBLE_LEN_1536 || dev->preambleLength ==  TX_PREAMBLE_LEN_2048 ||
 800128a:	2b03      	cmp	r3, #3
 800128c:	d10c      	bne.n	80012a8 <dwTune+0x110>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001294:	2b00      	cmp	r3, #0
 8001296:	d12a      	bne.n	80012ee <dwTune+0x156>
			writeValueToBytes(drxtune1b, 0x0064, LEN_DRX_TUNE1b);
 8001298:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800129c:	2202      	movs	r2, #2
 800129e:	2164      	movs	r1, #100	@ 0x64
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fedd 	bl	8002060 <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80012a6:	e022      	b.n	80012ee <dwTune+0x156>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->preambleLength != TX_PREAMBLE_LEN_64) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d011      	beq.n	80012d6 <dwTune+0x13e>
		if(dev->dataRate == TRX_RATE_850KBPS || dev->dataRate == TRX_RATE_6800KBPS) {
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d004      	beq.n	80012c6 <dwTune+0x12e>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d113      	bne.n	80012ee <dwTune+0x156>
			writeValueToBytes(drxtune1b, 0x0020, LEN_DRX_TUNE1b);
 80012c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012ca:	2202      	movs	r2, #2
 80012cc:	2120      	movs	r1, #32
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 fec6 	bl	8002060 <writeValueToBytes>
 80012d4:	e00b      	b.n	80012ee <dwTune+0x156>
		} else {
			// TODO proper error/warning handling
		}
	} else {
		if(dev->dataRate == TRX_RATE_6800KBPS) {
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d106      	bne.n	80012ee <dwTune+0x156>
			writeValueToBytes(drxtune1b, 0x0010, LEN_DRX_TUNE1b);
 80012e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012e4:	2202      	movs	r2, #2
 80012e6:	2110      	movs	r1, #16
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 feb9 	bl	8002060 <writeValueToBytes>
		} else {
			// TODO proper error/warning handling
		}
	}
	// DRX_TUNE2
	if(dev->pacSize == PAC_SIZE_8) {
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	d119      	bne.n	800132c <dwTune+0x194>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d107      	bne.n	8001312 <dwTune+0x17a>
			writeValueToBytes(drxtune2, 0x311A002DL, LEN_DRX_TUNE2);
 8001302:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001306:	2204      	movs	r2, #4
 8001308:	496f      	ldr	r1, [pc, #444]	@ (80014c8 <dwTune+0x330>)
 800130a:	4618      	mov	r0, r3
 800130c:	f000 fea8 	bl	8002060 <writeValueToBytes>
 8001310:	e068      	b.n	80013e4 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001318:	2b02      	cmp	r3, #2
 800131a:	d163      	bne.n	80013e4 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x313B006BL, LEN_DRX_TUNE2);
 800131c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001320:	2204      	movs	r2, #4
 8001322:	496a      	ldr	r1, [pc, #424]	@ (80014cc <dwTune+0x334>)
 8001324:	4618      	mov	r0, r3
 8001326:	f000 fe9b 	bl	8002060 <writeValueToBytes>
 800132a:	e05b      	b.n	80013e4 <dwTune+0x24c>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->pacSize == PAC_SIZE_16) {
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001332:	2b10      	cmp	r3, #16
 8001334:	d119      	bne.n	800136a <dwTune+0x1d2>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800133c:	2b01      	cmp	r3, #1
 800133e:	d107      	bne.n	8001350 <dwTune+0x1b8>
			writeValueToBytes(drxtune2, 0x331A0052L, LEN_DRX_TUNE2);
 8001340:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001344:	2204      	movs	r2, #4
 8001346:	4962      	ldr	r1, [pc, #392]	@ (80014d0 <dwTune+0x338>)
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fe89 	bl	8002060 <writeValueToBytes>
 800134e:	e049      	b.n	80013e4 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001356:	2b02      	cmp	r3, #2
 8001358:	d144      	bne.n	80013e4 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x333B00BEL, LEN_DRX_TUNE2);
 800135a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800135e:	2204      	movs	r2, #4
 8001360:	495c      	ldr	r1, [pc, #368]	@ (80014d4 <dwTune+0x33c>)
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fe7c 	bl	8002060 <writeValueToBytes>
 8001368:	e03c      	b.n	80013e4 <dwTune+0x24c>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->pacSize == PAC_SIZE_32) {
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001370:	2b20      	cmp	r3, #32
 8001372:	d119      	bne.n	80013a8 <dwTune+0x210>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800137a:	2b01      	cmp	r3, #1
 800137c:	d107      	bne.n	800138e <dwTune+0x1f6>
			writeValueToBytes(drxtune2, 0x351A009AL, LEN_DRX_TUNE2);
 800137e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001382:	2204      	movs	r2, #4
 8001384:	4954      	ldr	r1, [pc, #336]	@ (80014d8 <dwTune+0x340>)
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fe6a 	bl	8002060 <writeValueToBytes>
 800138c:	e02a      	b.n	80013e4 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001394:	2b02      	cmp	r3, #2
 8001396:	d125      	bne.n	80013e4 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x353B015EL, LEN_DRX_TUNE2);
 8001398:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800139c:	2204      	movs	r2, #4
 800139e:	494f      	ldr	r1, [pc, #316]	@ (80014dc <dwTune+0x344>)
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fe5d 	bl	8002060 <writeValueToBytes>
 80013a6:	e01d      	b.n	80013e4 <dwTune+0x24c>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->pacSize == PAC_SIZE_64) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80013ae:	2b40      	cmp	r3, #64	@ 0x40
 80013b0:	d118      	bne.n	80013e4 <dwTune+0x24c>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d107      	bne.n	80013cc <dwTune+0x234>
			writeValueToBytes(drxtune2, 0x371A011DL, LEN_DRX_TUNE2);
 80013bc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013c0:	2204      	movs	r2, #4
 80013c2:	4947      	ldr	r1, [pc, #284]	@ (80014e0 <dwTune+0x348>)
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 fe4b 	bl	8002060 <writeValueToBytes>
 80013ca:	e00b      	b.n	80013e4 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d106      	bne.n	80013e4 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x373B0296L, LEN_DRX_TUNE2);
 80013d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013da:	2204      	movs	r2, #4
 80013dc:	4941      	ldr	r1, [pc, #260]	@ (80014e4 <dwTune+0x34c>)
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 fe3e 	bl	8002060 <writeValueToBytes>
		}
	} else {
		// TODO proper error/warning handling
	}
	// DRX_TUNE4H
	if(dev->preambleLength == TX_PREAMBLE_LEN_64) {
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d107      	bne.n	80013fe <dwTune+0x266>
		writeValueToBytes(drxtune4H, 0x0010, LEN_DRX_TUNE4H);
 80013ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013f2:	2202      	movs	r2, #2
 80013f4:	2110      	movs	r1, #16
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fe32 	bl	8002060 <writeValueToBytes>
 80013fc:	e006      	b.n	800140c <dwTune+0x274>
	} else {
		writeValueToBytes(drxtune4H, 0x0028, LEN_DRX_TUNE4H);
 80013fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001402:	2202      	movs	r2, #2
 8001404:	2128      	movs	r1, #40	@ 0x28
 8001406:	4618      	mov	r0, r3
 8001408:	f000 fe2a 	bl	8002060 <writeValueToBytes>
	}
	// RF_RXCTRLH
	if(dev->channel != CHANNEL_4 && dev->channel != CHANNEL_7) {
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001412:	2b04      	cmp	r3, #4
 8001414:	d00c      	beq.n	8001430 <dwTune+0x298>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800141c:	2b07      	cmp	r3, #7
 800141e:	d007      	beq.n	8001430 <dwTune+0x298>
		writeValueToBytes(rfrxctrlh, 0xD8, LEN_RF_RXCTRLH);
 8001420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001424:	2201      	movs	r2, #1
 8001426:	21d8      	movs	r1, #216	@ 0xd8
 8001428:	4618      	mov	r0, r3
 800142a:	f000 fe19 	bl	8002060 <writeValueToBytes>
 800142e:	e006      	b.n	800143e <dwTune+0x2a6>
	} else {
		writeValueToBytes(rfrxctrlh, 0xBC, LEN_RF_RXCTRLH);
 8001430:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001434:	2201      	movs	r2, #1
 8001436:	21bc      	movs	r1, #188	@ 0xbc
 8001438:	4618      	mov	r0, r3
 800143a:	f000 fe11 	bl	8002060 <writeValueToBytes>
	}
	// RX_TXCTRL
	if(dev->channel == CHANNEL_1) {
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001444:	2b01      	cmp	r3, #1
 8001446:	d108      	bne.n	800145a <dwTune+0x2c2>
		writeValueToBytes(rftxctrl, 0x00005C40L, LEN_RF_TXCTRL);
 8001448:	f107 0320 	add.w	r3, r7, #32
 800144c:	2204      	movs	r2, #4
 800144e:	f645 4140 	movw	r1, #23616	@ 0x5c40
 8001452:	4618      	mov	r0, r3
 8001454:	f000 fe04 	bl	8002060 <writeValueToBytes>
 8001458:	e05a      	b.n	8001510 <dwTune+0x378>
	} else if(dev->channel == CHANNEL_2) {
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001460:	2b02      	cmp	r3, #2
 8001462:	d107      	bne.n	8001474 <dwTune+0x2dc>
		writeValueToBytes(rftxctrl, 0x00045CA0L, LEN_RF_TXCTRL);
 8001464:	f107 0320 	add.w	r3, r7, #32
 8001468:	2204      	movs	r2, #4
 800146a:	491f      	ldr	r1, [pc, #124]	@ (80014e8 <dwTune+0x350>)
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fdf7 	bl	8002060 <writeValueToBytes>
 8001472:	e04d      	b.n	8001510 <dwTune+0x378>
	} else if(dev->channel == CHANNEL_3) {
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800147a:	2b03      	cmp	r3, #3
 800147c:	d107      	bne.n	800148e <dwTune+0x2f6>
		writeValueToBytes(rftxctrl, 0x00086CC0L, LEN_RF_TXCTRL);
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	2204      	movs	r2, #4
 8001484:	4919      	ldr	r1, [pc, #100]	@ (80014ec <dwTune+0x354>)
 8001486:	4618      	mov	r0, r3
 8001488:	f000 fdea 	bl	8002060 <writeValueToBytes>
 800148c:	e040      	b.n	8001510 <dwTune+0x378>
	} else if(dev->channel == CHANNEL_4) {
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001494:	2b04      	cmp	r3, #4
 8001496:	d107      	bne.n	80014a8 <dwTune+0x310>
		writeValueToBytes(rftxctrl, 0x00045C80L, LEN_RF_TXCTRL);
 8001498:	f107 0320 	add.w	r3, r7, #32
 800149c:	2204      	movs	r2, #4
 800149e:	4914      	ldr	r1, [pc, #80]	@ (80014f0 <dwTune+0x358>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fddd 	bl	8002060 <writeValueToBytes>
 80014a6:	e033      	b.n	8001510 <dwTune+0x378>
	} else if(dev->channel == CHANNEL_5) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80014ae:	2b05      	cmp	r3, #5
 80014b0:	d122      	bne.n	80014f8 <dwTune+0x360>
		writeValueToBytes(rftxctrl, 0x001E3FE0L, LEN_RF_TXCTRL);
 80014b2:	f107 0320 	add.w	r3, r7, #32
 80014b6:	2204      	movs	r2, #4
 80014b8:	490e      	ldr	r1, [pc, #56]	@ (80014f4 <dwTune+0x35c>)
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fdd0 	bl	8002060 <writeValueToBytes>
 80014c0:	e026      	b.n	8001510 <dwTune+0x378>
 80014c2:	bf00      	nop
 80014c4:	2502a907 	.word	0x2502a907
 80014c8:	311a002d 	.word	0x311a002d
 80014cc:	313b006b 	.word	0x313b006b
 80014d0:	331a0052 	.word	0x331a0052
 80014d4:	333b00be 	.word	0x333b00be
 80014d8:	351a009a 	.word	0x351a009a
 80014dc:	353b015e 	.word	0x353b015e
 80014e0:	371a011d 	.word	0x371a011d
 80014e4:	373b0296 	.word	0x373b0296
 80014e8:	00045ca0 	.word	0x00045ca0
 80014ec:	00086cc0 	.word	0x00086cc0
 80014f0:	00045c80 	.word	0x00045c80
 80014f4:	001e3fe0 	.word	0x001e3fe0
	} else if(dev->channel == CHANNEL_7) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80014fe:	2b07      	cmp	r3, #7
 8001500:	d106      	bne.n	8001510 <dwTune+0x378>
		writeValueToBytes(rftxctrl, 0x001E7DE0L, LEN_RF_TXCTRL);
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	2204      	movs	r2, #4
 8001508:	49be      	ldr	r1, [pc, #760]	@ (8001804 <dwTune+0x66c>)
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fda8 	bl	8002060 <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// TC_PGDELAY
	if(dev->channel == CHANNEL_1) {
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001516:	2b01      	cmp	r3, #1
 8001518:	d107      	bne.n	800152a <dwTune+0x392>
		writeValueToBytes(tcpgdelay, 0xC9, LEN_TC_PGDELAY);
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	2201      	movs	r2, #1
 8001520:	21c9      	movs	r1, #201	@ 0xc9
 8001522:	4618      	mov	r0, r3
 8001524:	f000 fd9c 	bl	8002060 <writeValueToBytes>
 8001528:	e03f      	b.n	80015aa <dwTune+0x412>
	} else if(dev->channel == CHANNEL_2) {
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001530:	2b02      	cmp	r3, #2
 8001532:	d107      	bne.n	8001544 <dwTune+0x3ac>
		writeValueToBytes(tcpgdelay, 0xC2, LEN_TC_PGDELAY);
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	2201      	movs	r2, #1
 800153a:	21c2      	movs	r1, #194	@ 0xc2
 800153c:	4618      	mov	r0, r3
 800153e:	f000 fd8f 	bl	8002060 <writeValueToBytes>
 8001542:	e032      	b.n	80015aa <dwTune+0x412>
	} else if(dev->channel == CHANNEL_3) {
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800154a:	2b03      	cmp	r3, #3
 800154c:	d107      	bne.n	800155e <dwTune+0x3c6>
		writeValueToBytes(tcpgdelay, 0xC5, LEN_TC_PGDELAY);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	2201      	movs	r2, #1
 8001554:	21c5      	movs	r1, #197	@ 0xc5
 8001556:	4618      	mov	r0, r3
 8001558:	f000 fd82 	bl	8002060 <writeValueToBytes>
 800155c:	e025      	b.n	80015aa <dwTune+0x412>
	} else if(dev->channel == CHANNEL_4) {
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001564:	2b04      	cmp	r3, #4
 8001566:	d107      	bne.n	8001578 <dwTune+0x3e0>
		writeValueToBytes(tcpgdelay, 0x95, LEN_TC_PGDELAY);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	2201      	movs	r2, #1
 800156e:	2195      	movs	r1, #149	@ 0x95
 8001570:	4618      	mov	r0, r3
 8001572:	f000 fd75 	bl	8002060 <writeValueToBytes>
 8001576:	e018      	b.n	80015aa <dwTune+0x412>
	} else if(dev->channel == CHANNEL_5) {
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800157e:	2b05      	cmp	r3, #5
 8001580:	d107      	bne.n	8001592 <dwTune+0x3fa>
		writeValueToBytes(tcpgdelay, 0xC0, LEN_TC_PGDELAY);
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	2201      	movs	r2, #1
 8001588:	21c0      	movs	r1, #192	@ 0xc0
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fd68 	bl	8002060 <writeValueToBytes>
 8001590:	e00b      	b.n	80015aa <dwTune+0x412>
	} else if(dev->channel == CHANNEL_7) {
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001598:	2b07      	cmp	r3, #7
 800159a:	d106      	bne.n	80015aa <dwTune+0x412>
		writeValueToBytes(tcpgdelay, 0x93, LEN_TC_PGDELAY);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	2201      	movs	r2, #1
 80015a2:	2193      	movs	r1, #147	@ 0x93
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 fd5b 	bl	8002060 <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// FS_PLLCFG and FS_PLLTUNE
	if(dev->channel == CHANNEL_1) {
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d10e      	bne.n	80015d2 <dwTune+0x43a>
		writeValueToBytes(fspllcfg, 0x09000407L, LEN_FS_PLLCFG);
 80015b4:	f107 0318 	add.w	r3, r7, #24
 80015b8:	2204      	movs	r2, #4
 80015ba:	4993      	ldr	r1, [pc, #588]	@ (8001808 <dwTune+0x670>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fd4f 	bl	8002060 <writeValueToBytes>
		writeValueToBytes(fsplltune, 0x1E, LEN_FS_PLLTUNE);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	2201      	movs	r2, #1
 80015c8:	211e      	movs	r1, #30
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fd48 	bl	8002060 <writeValueToBytes>
 80015d0:	e044      	b.n	800165c <dwTune+0x4c4>
	} else if(dev->channel == CHANNEL_2 || dev->channel == CHANNEL_4) {
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d004      	beq.n	80015e6 <dwTune+0x44e>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d10e      	bne.n	8001604 <dwTune+0x46c>
		writeValueToBytes(fspllcfg, 0x08400508L, LEN_FS_PLLCFG);
 80015e6:	f107 0318 	add.w	r3, r7, #24
 80015ea:	2204      	movs	r2, #4
 80015ec:	4987      	ldr	r1, [pc, #540]	@ (800180c <dwTune+0x674>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 fd36 	bl	8002060 <writeValueToBytes>
		writeValueToBytes(fsplltune, 0x26, LEN_FS_PLLTUNE);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2201      	movs	r2, #1
 80015fa:	2126      	movs	r1, #38	@ 0x26
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fd2f 	bl	8002060 <writeValueToBytes>
 8001602:	e02b      	b.n	800165c <dwTune+0x4c4>
	} else if(dev->channel == CHANNEL_3) {
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800160a:	2b03      	cmp	r3, #3
 800160c:	d10e      	bne.n	800162c <dwTune+0x494>
		writeValueToBytes(fspllcfg, 0x08401009L, LEN_FS_PLLCFG);
 800160e:	f107 0318 	add.w	r3, r7, #24
 8001612:	2204      	movs	r2, #4
 8001614:	497e      	ldr	r1, [pc, #504]	@ (8001810 <dwTune+0x678>)
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fd22 	bl	8002060 <writeValueToBytes>
		writeValueToBytes(fsplltune, 0x56, LEN_FS_PLLTUNE);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2201      	movs	r2, #1
 8001622:	2156      	movs	r1, #86	@ 0x56
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fd1b 	bl	8002060 <writeValueToBytes>
 800162a:	e017      	b.n	800165c <dwTune+0x4c4>
	} else if(dev->channel == CHANNEL_5 || dev->channel == CHANNEL_7) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001632:	2b05      	cmp	r3, #5
 8001634:	d004      	beq.n	8001640 <dwTune+0x4a8>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800163c:	2b07      	cmp	r3, #7
 800163e:	d10d      	bne.n	800165c <dwTune+0x4c4>
		writeValueToBytes(fspllcfg, 0x0800041DL, LEN_FS_PLLCFG);
 8001640:	f107 0318 	add.w	r3, r7, #24
 8001644:	2204      	movs	r2, #4
 8001646:	4973      	ldr	r1, [pc, #460]	@ (8001814 <dwTune+0x67c>)
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fd09 	bl	8002060 <writeValueToBytes>
		writeValueToBytes(fsplltune, 0xA6, LEN_FS_PLLTUNE);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	2201      	movs	r2, #1
 8001654:	21a6      	movs	r1, #166	@ 0xa6
 8001656:	4618      	mov	r0, r3
 8001658:	f000 fd02 	bl	8002060 <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// LDE_CFG1
	writeValueToBytes(ldecfg1, 0xD, LEN_LDE_CFG1);
 800165c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001660:	2201      	movs	r2, #1
 8001662:	210d      	movs	r1, #13
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fcfb 	bl	8002060 <writeValueToBytes>
	// LDE_CFG2
	if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001670:	2b01      	cmp	r3, #1
 8001672:	d108      	bne.n	8001686 <dwTune+0x4ee>
		writeValueToBytes(ldecfg2, 0x1607, LEN_LDE_CFG2);
 8001674:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001678:	2202      	movs	r2, #2
 800167a:	f241 6107 	movw	r1, #5639	@ 0x1607
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fcee 	bl	8002060 <writeValueToBytes>
 8001684:	e00c      	b.n	80016a0 <dwTune+0x508>
	} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800168c:	2b02      	cmp	r3, #2
 800168e:	d107      	bne.n	80016a0 <dwTune+0x508>
		writeValueToBytes(ldecfg2, 0x0607, LEN_LDE_CFG2);
 8001690:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001694:	2202      	movs	r2, #2
 8001696:	f240 6107 	movw	r1, #1543	@ 0x607
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fce0 	bl	8002060 <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// LDE_REPC
	if(dev->preambleCode == PREAMBLE_CODE_16MHZ_1 || dev->preambleCode == PREAMBLE_CODE_16MHZ_2) {
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d004      	beq.n	80016b4 <dwTune+0x51c>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d116      	bne.n	80016e2 <dwTune+0x54a>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d108      	bne.n	80016d0 <dwTune+0x538>
			writeValueToBytes(lderepc, ((0x5998 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80016be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016c2:	2202      	movs	r2, #2
 80016c4:	f640 3133 	movw	r1, #2867	@ 0xb33
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fcc9 	bl	8002060 <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80016ce:	e154      	b.n	800197a <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x5998, LEN_LDE_REPC);
 80016d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016d4:	2202      	movs	r2, #2
 80016d6:	f645 1198 	movw	r1, #22936	@ 0x5998
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 fcc0 	bl	8002060 <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80016e0:	e14b      	b.n	800197a <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_3 || dev->preambleCode == PREAMBLE_CODE_16MHZ_8) {
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d004      	beq.n	80016f6 <dwTune+0x55e>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d116      	bne.n	8001724 <dwTune+0x58c>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d108      	bne.n	8001712 <dwTune+0x57a>
			writeValueToBytes(lderepc, ((0x51EA >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001700:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001704:	2202      	movs	r2, #2
 8001706:	f640 213d 	movw	r1, #2621	@ 0xa3d
 800170a:	4618      	mov	r0, r3
 800170c:	f000 fca8 	bl	8002060 <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001710:	e133      	b.n	800197a <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x51EA, LEN_LDE_REPC);
 8001712:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001716:	2202      	movs	r2, #2
 8001718:	f245 11ea 	movw	r1, #20970	@ 0x51ea
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fc9f 	bl	8002060 <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001722:	e12a      	b.n	800197a <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_4) {
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800172a:	2b04      	cmp	r3, #4
 800172c:	d116      	bne.n	800175c <dwTune+0x5c4>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001734:	2b00      	cmp	r3, #0
 8001736:	d108      	bne.n	800174a <dwTune+0x5b2>
			writeValueToBytes(lderepc, ((0x428E >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001738:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800173c:	2202      	movs	r2, #2
 800173e:	f640 0151 	movw	r1, #2129	@ 0x851
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fc8c 	bl	8002060 <writeValueToBytes>
 8001748:	e117      	b.n	800197a <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x428E, LEN_LDE_REPC);
 800174a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800174e:	2202      	movs	r2, #2
 8001750:	f244 218e 	movw	r1, #17038	@ 0x428e
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fc83 	bl	8002060 <writeValueToBytes>
 800175a:	e10e      	b.n	800197a <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_5) {
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001762:	2b05      	cmp	r3, #5
 8001764:	d116      	bne.n	8001794 <dwTune+0x5fc>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800176c:	2b00      	cmp	r3, #0
 800176e:	d108      	bne.n	8001782 <dwTune+0x5ea>
			writeValueToBytes(lderepc, ((0x451E >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001770:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001774:	2202      	movs	r2, #2
 8001776:	f640 01a3 	movw	r1, #2211	@ 0x8a3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 fc70 	bl	8002060 <writeValueToBytes>
 8001780:	e0fb      	b.n	800197a <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x451E, LEN_LDE_REPC);
 8001782:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001786:	2202      	movs	r2, #2
 8001788:	f244 511e 	movw	r1, #17694	@ 0x451e
 800178c:	4618      	mov	r0, r3
 800178e:	f000 fc67 	bl	8002060 <writeValueToBytes>
 8001792:	e0f2      	b.n	800197a <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_6) {
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800179a:	2b06      	cmp	r3, #6
 800179c:	d116      	bne.n	80017cc <dwTune+0x634>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d108      	bne.n	80017ba <dwTune+0x622>
			writeValueToBytes(lderepc, ((0x2E14 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80017a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017ac:	2202      	movs	r2, #2
 80017ae:	f240 51c2 	movw	r1, #1474	@ 0x5c2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 fc54 	bl	8002060 <writeValueToBytes>
 80017b8:	e0df      	b.n	800197a <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x2E14, LEN_LDE_REPC);
 80017ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017be:	2202      	movs	r2, #2
 80017c0:	f642 6114 	movw	r1, #11796	@ 0x2e14
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fc4b 	bl	8002060 <writeValueToBytes>
 80017ca:	e0d6      	b.n	800197a <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_7) {
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80017d2:	2b07      	cmp	r3, #7
 80017d4:	d120      	bne.n	8001818 <dwTune+0x680>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d108      	bne.n	80017f2 <dwTune+0x65a>
			writeValueToBytes(lderepc, ((0x8000 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80017e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017e4:	2202      	movs	r2, #2
 80017e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 fc38 	bl	8002060 <writeValueToBytes>
 80017f0:	e0c3      	b.n	800197a <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x8000, LEN_LDE_REPC);
 80017f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017f6:	2202      	movs	r2, #2
 80017f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 fc2f 	bl	8002060 <writeValueToBytes>
 8001802:	e0ba      	b.n	800197a <dwTune+0x7e2>
 8001804:	001e7de0 	.word	0x001e7de0
 8001808:	09000407 	.word	0x09000407
 800180c:	08400508 	.word	0x08400508
 8001810:	08401009 	.word	0x08401009
 8001814:	0800041d 	.word	0x0800041d
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_9) {
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800181e:	2b09      	cmp	r3, #9
 8001820:	d116      	bne.n	8001850 <dwTune+0x6b8>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001828:	2b00      	cmp	r3, #0
 800182a:	d108      	bne.n	800183e <dwTune+0x6a6>
			writeValueToBytes(lderepc, ((0x28F4 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800182c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001830:	2202      	movs	r2, #2
 8001832:	f240 511e 	movw	r1, #1310	@ 0x51e
 8001836:	4618      	mov	r0, r3
 8001838:	f000 fc12 	bl	8002060 <writeValueToBytes>
 800183c:	e09d      	b.n	800197a <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x28F4, LEN_LDE_REPC);
 800183e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001842:	2202      	movs	r2, #2
 8001844:	f642 01f4 	movw	r1, #10484	@ 0x28f4
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fc09 	bl	8002060 <writeValueToBytes>
 800184e:	e094      	b.n	800197a <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_10 || dev->preambleCode == PREAMBLE_CODE_64MHZ_17) {
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001856:	2b0a      	cmp	r3, #10
 8001858:	d004      	beq.n	8001864 <dwTune+0x6cc>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001860:	2b11      	cmp	r3, #17
 8001862:	d116      	bne.n	8001892 <dwTune+0x6fa>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800186a:	2b00      	cmp	r3, #0
 800186c:	d108      	bne.n	8001880 <dwTune+0x6e8>
			writeValueToBytes(lderepc, ((0x3332 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800186e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001872:	2202      	movs	r2, #2
 8001874:	f240 6166 	movw	r1, #1638	@ 0x666
 8001878:	4618      	mov	r0, r3
 800187a:	f000 fbf1 	bl	8002060 <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800187e:	e07c      	b.n	800197a <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x3332, LEN_LDE_REPC);
 8001880:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001884:	2202      	movs	r2, #2
 8001886:	f243 3132 	movw	r1, #13106	@ 0x3332
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fbe8 	bl	8002060 <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001890:	e073      	b.n	800197a <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_11) {
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001898:	2b0b      	cmp	r3, #11
 800189a:	d116      	bne.n	80018ca <dwTune+0x732>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d108      	bne.n	80018b8 <dwTune+0x720>
			writeValueToBytes(lderepc, ((0x3AE0 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80018a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018aa:	2202      	movs	r2, #2
 80018ac:	f240 715c 	movw	r1, #1884	@ 0x75c
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 fbd5 	bl	8002060 <writeValueToBytes>
 80018b6:	e060      	b.n	800197a <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x3AE0, LEN_LDE_REPC);
 80018b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018bc:	2202      	movs	r2, #2
 80018be:	f643 21e0 	movw	r1, #15072	@ 0x3ae0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fbcc 	bl	8002060 <writeValueToBytes>
 80018c8:	e057      	b.n	800197a <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_12) {
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	d116      	bne.n	8001902 <dwTune+0x76a>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d108      	bne.n	80018f0 <dwTune+0x758>
			writeValueToBytes(lderepc, ((0x3D70 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80018de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018e2:	2202      	movs	r2, #2
 80018e4:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fbb9 	bl	8002060 <writeValueToBytes>
 80018ee:	e044      	b.n	800197a <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x3D70, LEN_LDE_REPC);
 80018f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018f4:	2202      	movs	r2, #2
 80018f6:	f643 5170 	movw	r1, #15728	@ 0x3d70
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 fbb0 	bl	8002060 <writeValueToBytes>
 8001900:	e03b      	b.n	800197a <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_18 || dev->preambleCode == PREAMBLE_CODE_64MHZ_19) {
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001908:	2b12      	cmp	r3, #18
 800190a:	d004      	beq.n	8001916 <dwTune+0x77e>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001912:	2b13      	cmp	r3, #19
 8001914:	d116      	bne.n	8001944 <dwTune+0x7ac>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800191c:	2b00      	cmp	r3, #0
 800191e:	d108      	bne.n	8001932 <dwTune+0x79a>
			writeValueToBytes(lderepc, ((0x35C2 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001920:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001924:	2202      	movs	r2, #2
 8001926:	f44f 61d7 	mov.w	r1, #1720	@ 0x6b8
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fb98 	bl	8002060 <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001930:	e023      	b.n	800197a <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x35C2, LEN_LDE_REPC);
 8001932:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001936:	2202      	movs	r2, #2
 8001938:	f243 51c2 	movw	r1, #13762	@ 0x35c2
 800193c:	4618      	mov	r0, r3
 800193e:	f000 fb8f 	bl	8002060 <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001942:	e01a      	b.n	800197a <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_20) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800194a:	2b14      	cmp	r3, #20
 800194c:	d115      	bne.n	800197a <dwTune+0x7e2>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001954:	2b00      	cmp	r3, #0
 8001956:	d108      	bne.n	800196a <dwTune+0x7d2>
			writeValueToBytes(lderepc, ((0x47AE >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001958:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800195c:	2202      	movs	r2, #2
 800195e:	f640 01f5 	movw	r1, #2293	@ 0x8f5
 8001962:	4618      	mov	r0, r3
 8001964:	f000 fb7c 	bl	8002060 <writeValueToBytes>
 8001968:	e007      	b.n	800197a <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x47AE, LEN_LDE_REPC);
 800196a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800196e:	2202      	movs	r2, #2
 8001970:	f244 71ae 	movw	r1, #18350	@ 0x47ae
 8001974:	4618      	mov	r0, r3
 8001976:	f000 fb73 	bl	8002060 <writeValueToBytes>
		}
	} else {
		// TODO proper error/warning handling
	}
	// TX_POWER (enabled smart transmit power control)
	if(dev->forceTxPower) {
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001980:	2b00      	cmp	r3, #0
 8001982:	d009      	beq.n	8001998 <dwTune+0x800>
		writeValueToBytes(txpower, dev->txPower, LEN_TX_POWER);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001988:	4619      	mov	r1, r3
 800198a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800198e:	2204      	movs	r2, #4
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fb65 	bl	8002060 <writeValueToBytes>
 8001996:	e12f      	b.n	8001bf8 <dwTune+0xa60>
	} else if(dev->channel == CHANNEL_1 || dev->channel == CHANNEL_2) {
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d004      	beq.n	80019ac <dwTune+0x814>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d136      	bne.n	8001a1a <dwTune+0x882>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d115      	bne.n	80019e2 <dwTune+0x84a>
			if(dev->smartPower) {
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <dwTune+0x838>
				writeValueToBytes(txpower, 0x15355575L, LEN_TX_POWER);
 80019c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019c4:	2204      	movs	r2, #4
 80019c6:	4995      	ldr	r1, [pc, #596]	@ (8001c1c <dwTune+0xa84>)
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fb49 	bl	8002060 <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80019ce:	e112      	b.n	8001bf6 <dwTune+0xa5e>
			} else {
				writeValueToBytes(txpower, 0x75757575L, LEN_TX_POWER);
 80019d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019d4:	2204      	movs	r2, #4
 80019d6:	f04f 3175 	mov.w	r1, #1970632053	@ 0x75757575
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fb40 	bl	8002060 <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80019e0:	e109      	b.n	8001bf6 <dwTune+0xa5e>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	f040 8104 	bne.w	8001bf6 <dwTune+0xa5e>
			if(dev->smartPower) {
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d007      	beq.n	8001a08 <dwTune+0x870>
				writeValueToBytes(txpower, 0x07274767L, LEN_TX_POWER);
 80019f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019fc:	2204      	movs	r2, #4
 80019fe:	4988      	ldr	r1, [pc, #544]	@ (8001c20 <dwTune+0xa88>)
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fb2d 	bl	8002060 <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001a06:	e0f6      	b.n	8001bf6 <dwTune+0xa5e>
			} else {
				writeValueToBytes(txpower, 0x67676767L, LEN_TX_POWER);
 8001a08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	f04f 3167 	mov.w	r1, #1734829927	@ 0x67676767
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 fb24 	bl	8002060 <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001a18:	e0ed      	b.n	8001bf6 <dwTune+0xa5e>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_3) {
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d136      	bne.n	8001a92 <dwTune+0x8fa>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d115      	bne.n	8001a5a <dwTune+0x8c2>
			if(dev->smartPower) {
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d007      	beq.n	8001a48 <dwTune+0x8b0>
				writeValueToBytes(txpower, 0x0F2F4F6FL, LEN_TX_POWER);
 8001a38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	4979      	ldr	r1, [pc, #484]	@ (8001c24 <dwTune+0xa8c>)
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 fb0d 	bl	8002060 <writeValueToBytes>
 8001a46:	e0d7      	b.n	8001bf8 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x6F6F6F6FL, LEN_TX_POWER);
 8001a48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	f04f 316f 	mov.w	r1, #1869573999	@ 0x6f6f6f6f
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 fb04 	bl	8002060 <writeValueToBytes>
 8001a58:	e0ce      	b.n	8001bf8 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	f040 80c9 	bne.w	8001bf8 <dwTune+0xa60>
			if(dev->smartPower) {
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d007      	beq.n	8001a80 <dwTune+0x8e8>
				writeValueToBytes(txpower, 0x2B4B6B8BL, LEN_TX_POWER);
 8001a70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a74:	2204      	movs	r2, #4
 8001a76:	496c      	ldr	r1, [pc, #432]	@ (8001c28 <dwTune+0xa90>)
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 faf1 	bl	8002060 <writeValueToBytes>
 8001a7e:	e0bb      	b.n	8001bf8 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x8B8B8B8BL, LEN_TX_POWER);
 8001a80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a84:	2204      	movs	r2, #4
 8001a86:	f04f 318b 	mov.w	r1, #2341178251	@ 0x8b8b8b8b
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fae8 	bl	8002060 <writeValueToBytes>
 8001a90:	e0b2      	b.n	8001bf8 <dwTune+0xa60>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_4) {
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d136      	bne.n	8001b0a <dwTune+0x972>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d115      	bne.n	8001ad2 <dwTune+0x93a>
			if(dev->smartPower) {
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d007      	beq.n	8001ac0 <dwTune+0x928>
				writeValueToBytes(txpower, 0x1F1F3F5FL, LEN_TX_POWER);
 8001ab0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	495d      	ldr	r1, [pc, #372]	@ (8001c2c <dwTune+0xa94>)
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 fad1 	bl	8002060 <writeValueToBytes>
 8001abe:	e09b      	b.n	8001bf8 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x5F5F5F5FL, LEN_TX_POWER);
 8001ac0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	f04f 315f 	mov.w	r1, #1600085855	@ 0x5f5f5f5f
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fac8 	bl	8002060 <writeValueToBytes>
 8001ad0:	e092      	b.n	8001bf8 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	f040 808d 	bne.w	8001bf8 <dwTune+0xa60>
			if(dev->smartPower) {
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d007      	beq.n	8001af8 <dwTune+0x960>
				writeValueToBytes(txpower, 0x3A5A7A9AL, LEN_TX_POWER);
 8001ae8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aec:	2204      	movs	r2, #4
 8001aee:	4950      	ldr	r1, [pc, #320]	@ (8001c30 <dwTune+0xa98>)
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fab5 	bl	8002060 <writeValueToBytes>
 8001af6:	e07f      	b.n	8001bf8 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x9A9A9A9AL, LEN_TX_POWER);
 8001af8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001afc:	2204      	movs	r2, #4
 8001afe:	f04f 319a 	mov.w	r1, #2593823386	@ 0x9a9a9a9a
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 faac 	bl	8002060 <writeValueToBytes>
 8001b08:	e076      	b.n	8001bf8 <dwTune+0xa60>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_5) {
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001b10:	2b05      	cmp	r3, #5
 8001b12:	d135      	bne.n	8001b80 <dwTune+0x9e8>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d115      	bne.n	8001b4a <dwTune+0x9b2>
			if(dev->smartPower) {
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <dwTune+0x9a0>
				writeValueToBytes(txpower, 0x0E082848L, LEN_TX_POWER);
 8001b28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	4941      	ldr	r1, [pc, #260]	@ (8001c34 <dwTune+0xa9c>)
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fa95 	bl	8002060 <writeValueToBytes>
 8001b36:	e05f      	b.n	8001bf8 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x48484848L, LEN_TX_POWER);
 8001b38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	f04f 3148 	mov.w	r1, #1212696648	@ 0x48484848
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 fa8c 	bl	8002060 <writeValueToBytes>
 8001b48:	e056      	b.n	8001bf8 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d151      	bne.n	8001bf8 <dwTune+0xa60>
			if(dev->smartPower) {
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <dwTune+0x9d6>
				writeValueToBytes(txpower, 0x25456585L, LEN_TX_POWER);
 8001b5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b62:	2204      	movs	r2, #4
 8001b64:	4934      	ldr	r1, [pc, #208]	@ (8001c38 <dwTune+0xaa0>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 fa7a 	bl	8002060 <writeValueToBytes>
 8001b6c:	e044      	b.n	8001bf8 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x85858585L, LEN_TX_POWER);
 8001b6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b72:	2204      	movs	r2, #4
 8001b74:	f04f 3185 	mov.w	r1, #2240120197	@ 0x85858585
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fa71 	bl	8002060 <writeValueToBytes>
 8001b7e:	e03b      	b.n	8001bf8 <dwTune+0xa60>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_7) {
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001b86:	2b07      	cmp	r3, #7
 8001b88:	d136      	bne.n	8001bf8 <dwTune+0xa60>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d115      	bne.n	8001bc0 <dwTune+0xa28>
			if(dev->smartPower) {
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <dwTune+0xa16>
				writeValueToBytes(txpower, 0x32527292L, LEN_TX_POWER);
 8001b9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	4925      	ldr	r1, [pc, #148]	@ (8001c3c <dwTune+0xaa4>)
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 fa5a 	bl	8002060 <writeValueToBytes>
 8001bac:	e024      	b.n	8001bf8 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x92929292L, LEN_TX_POWER);
 8001bae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	f04f 3192 	mov.w	r1, #2459079314	@ 0x92929292
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fa51 	bl	8002060 <writeValueToBytes>
 8001bbe:	e01b      	b.n	8001bf8 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d116      	bne.n	8001bf8 <dwTune+0xa60>
			if(dev->smartPower) {
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <dwTune+0xa4c>
				writeValueToBytes(txpower, 0x5171B1D1L, LEN_TX_POWER);
 8001bd4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bd8:	2204      	movs	r2, #4
 8001bda:	4919      	ldr	r1, [pc, #100]	@ (8001c40 <dwTune+0xaa8>)
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 fa3f 	bl	8002060 <writeValueToBytes>
 8001be2:	e009      	b.n	8001bf8 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0xD1D1D1D1L, LEN_TX_POWER);
 8001be4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001be8:	2204      	movs	r2, #4
 8001bea:	f04f 31d1 	mov.w	r1, #3520188881	@ 0xd1d1d1d1
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 fa36 	bl	8002060 <writeValueToBytes>
 8001bf4:	e000      	b.n	8001bf8 <dwTune+0xa60>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001bf6:	bf00      	nop
	} else {
		// TODO proper error/warning handling
	}
	// Crystal calibration from OTP (if available)
	uint8_t buf_otp[4];
	readBytesOTP(dev, 0x01E, buf_otp);
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	211e      	movs	r1, #30
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 fa4d 	bl	80020a0 <readBytesOTP>
	if (buf_otp[0] == 0) {
 8001c06:	7b3b      	ldrb	r3, [r7, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d11b      	bne.n	8001c44 <dwTune+0xaac>
		// No trim value available from OTP, use midrange value of 0x10
		writeValueToBytes(fsxtalt, ((0x10 & 0x1F) | 0x60), LEN_FS_XTALT);
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	2201      	movs	r2, #1
 8001c12:	2170      	movs	r1, #112	@ 0x70
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fa23 	bl	8002060 <writeValueToBytes>
 8001c1a:	e01e      	b.n	8001c5a <dwTune+0xac2>
 8001c1c:	15355575 	.word	0x15355575
 8001c20:	07274767 	.word	0x07274767
 8001c24:	0f2f4f6f 	.word	0x0f2f4f6f
 8001c28:	2b4b6b8b 	.word	0x2b4b6b8b
 8001c2c:	1f1f3f5f 	.word	0x1f1f3f5f
 8001c30:	3a5a7a9a 	.word	0x3a5a7a9a
 8001c34:	0e082848 	.word	0x0e082848
 8001c38:	25456585 	.word	0x25456585
 8001c3c:	32527292 	.word	0x32527292
 8001c40:	5171b1d1 	.word	0x5171b1d1
	} else {
		writeValueToBytes(fsxtalt, ((buf_otp[0] & 0x1F) | 0x60), LEN_FS_XTALT);
 8001c44:	7b3b      	ldrb	r3, [r7, #12]
 8001c46:	f003 031f 	and.w	r3, r3, #31
 8001c4a:	f043 0160 	orr.w	r1, r3, #96	@ 0x60
 8001c4e:	f107 0310 	add.w	r3, r7, #16
 8001c52:	2201      	movs	r2, #1
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 fa03 	bl	8002060 <writeValueToBytes>
	}
	// write configuration back to chip
	dwSpiWrite(dev, AGC_TUNE, AGC_TUNE1_SUB, agctune1, LEN_AGC_TUNE1);
 8001c5a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c5e:	2202      	movs	r2, #2
 8001c60:	9200      	str	r2, [sp, #0]
 8001c62:	2204      	movs	r2, #4
 8001c64:	2123      	movs	r1, #35	@ 0x23
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 faa3 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, AGC_TUNE, AGC_TUNE2_SUB, agctune2, LEN_AGC_TUNE2);
 8001c6c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001c70:	2204      	movs	r2, #4
 8001c72:	9200      	str	r2, [sp, #0]
 8001c74:	220c      	movs	r2, #12
 8001c76:	2123      	movs	r1, #35	@ 0x23
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 fa9a 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, AGC_TUNE, AGC_TUNE3_SUB, agctune3, LEN_AGC_TUNE3);
 8001c7e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c82:	2202      	movs	r2, #2
 8001c84:	9200      	str	r2, [sp, #0]
 8001c86:	2212      	movs	r2, #18
 8001c88:	2123      	movs	r1, #35	@ 0x23
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 fa91 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE0b_SUB, drxtune0b, LEN_DRX_TUNE0b);
 8001c90:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c94:	2202      	movs	r2, #2
 8001c96:	9200      	str	r2, [sp, #0]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	2127      	movs	r1, #39	@ 0x27
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 fa88 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1a_SUB, drxtune1a, LEN_DRX_TUNE1a);
 8001ca2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	9200      	str	r2, [sp, #0]
 8001caa:	2204      	movs	r2, #4
 8001cac:	2127      	movs	r1, #39	@ 0x27
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fa7f 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1b_SUB, drxtune1b, LEN_DRX_TUNE1b);
 8001cb4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cb8:	2202      	movs	r2, #2
 8001cba:	9200      	str	r2, [sp, #0]
 8001cbc:	2206      	movs	r2, #6
 8001cbe:	2127      	movs	r1, #39	@ 0x27
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fa76 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE2_SUB, drxtune2, LEN_DRX_TUNE2);
 8001cc6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001cca:	2204      	movs	r2, #4
 8001ccc:	9200      	str	r2, [sp, #0]
 8001cce:	2208      	movs	r2, #8
 8001cd0:	2127      	movs	r1, #39	@ 0x27
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fa6d 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE4H_SUB, drxtune4H, LEN_DRX_TUNE4H);
 8001cd8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cdc:	2202      	movs	r2, #2
 8001cde:	9200      	str	r2, [sp, #0]
 8001ce0:	2226      	movs	r2, #38	@ 0x26
 8001ce2:	2127      	movs	r1, #39	@ 0x27
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 fa64 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_CFG1_SUB, ldecfg1, LEN_LDE_CFG1);
 8001cea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001cee:	2201      	movs	r2, #1
 8001cf0:	9200      	str	r2, [sp, #0]
 8001cf2:	f640 0206 	movw	r2, #2054	@ 0x806
 8001cf6:	212e      	movs	r1, #46	@ 0x2e
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fa5a 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_CFG2_SUB, ldecfg2, LEN_LDE_CFG2);
 8001cfe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d02:	2202      	movs	r2, #2
 8001d04:	9200      	str	r2, [sp, #0]
 8001d06:	f641 0206 	movw	r2, #6150	@ 0x1806
 8001d0a:	212e      	movs	r1, #46	@ 0x2e
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fa50 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_REPC_SUB, lderepc, LEN_LDE_REPC);
 8001d12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d16:	2202      	movs	r2, #2
 8001d18:	9200      	str	r2, [sp, #0]
 8001d1a:	f642 0204 	movw	r2, #10244	@ 0x2804
 8001d1e:	212e      	movs	r1, #46	@ 0x2e
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 fa46 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, TX_POWER, NO_SUB, txpower, LEN_TX_POWER);
 8001d26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	9200      	str	r2, [sp, #0]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	211e      	movs	r1, #30
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fa3d 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, RF_CONF, RF_RXCTRLH_SUB, rfrxctrlh, LEN_RF_RXCTRLH);
 8001d38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	9200      	str	r2, [sp, #0]
 8001d40:	220b      	movs	r2, #11
 8001d42:	2128      	movs	r1, #40	@ 0x28
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fa34 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, RF_CONF, RF_TXCTRL_SUB, rftxctrl, LEN_RF_TXCTRL);
 8001d4a:	f107 0320 	add.w	r3, r7, #32
 8001d4e:	2204      	movs	r2, #4
 8001d50:	9200      	str	r2, [sp, #0]
 8001d52:	220c      	movs	r2, #12
 8001d54:	2128      	movs	r1, #40	@ 0x28
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fa2b 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, TX_CAL, TC_PGDELAY_SUB, tcpgdelay, LEN_TC_PGDELAY);
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	2201      	movs	r2, #1
 8001d62:	9200      	str	r2, [sp, #0]
 8001d64:	220b      	movs	r2, #11
 8001d66:	212a      	movs	r1, #42	@ 0x2a
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fa22 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, FS_CTRL, FS_PLLTUNE_SUB, fsplltune, LEN_FS_PLLTUNE);
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	2201      	movs	r2, #1
 8001d74:	9200      	str	r2, [sp, #0]
 8001d76:	220b      	movs	r2, #11
 8001d78:	212b      	movs	r1, #43	@ 0x2b
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 fa19 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, FS_CTRL, FS_PLLCFG_SUB, fspllcfg, LEN_FS_PLLCFG);
 8001d80:	f107 0318 	add.w	r3, r7, #24
 8001d84:	2204      	movs	r2, #4
 8001d86:	9200      	str	r2, [sp, #0]
 8001d88:	2207      	movs	r2, #7
 8001d8a:	212b      	movs	r1, #43	@ 0x2b
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 fa10 	bl	80021b2 <dwSpiWrite>
	dwSpiWrite(dev, FS_CTRL, FS_XTALT_SUB, fsxtalt, LEN_FS_XTALT);
 8001d92:	f107 0310 	add.w	r3, r7, #16
 8001d96:	2201      	movs	r2, #1
 8001d98:	9200      	str	r2, [sp, #0]
 8001d9a:	220e      	movs	r2, #14
 8001d9c:	212b      	movs	r1, #43	@ 0x2b
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 fa07 	bl	80021b2 <dwSpiWrite>
}
 8001da4:	bf00      	nop
 8001da6:	3758      	adds	r7, #88	@ 0x58
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <dwHandleInterrupt>:

void dwHandleInterrupt(dwDevice_t *dev) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	// read current status and handle via callbacks
	dwReadSystemEventStatusRegister(dev);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7fe fc3f 	bl	8000638 <dwReadSystemEventStatusRegister>
	if(dwIsClockProblem(dev) /* TODO and others */ && dev->handleError != 0) {
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff f95a 	bl	8001074 <dwIsClockProblem>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d007      	beq.n	8001dd6 <dwHandleInterrupt+0x2a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <dwHandleInterrupt+0x2a>
		(*dev->handleError)(dev);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	4798      	blx	r3
	}
	if(dwIsTransmitDone(dev) && dev->handleSent != 0) {
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff f8a8 	bl	8000f2c <dwIsTransmitDone>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <dwHandleInterrupt+0x4c>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d006      	beq.n	8001df8 <dwHandleInterrupt+0x4c>
		dwClearTransmitStatus(dev);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff f994 	bl	8001118 <dwClearTransmitStatus>
		(*dev->handleSent)(dev);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
	}
	if(dwIsReceiveTimestampAvailable(dev) && dev->handleReceiveTimestampAvailable != 0) {
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff f8a7 	bl	8000f4c <dwIsReceiveTimestampAvailable>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <dwHandleInterrupt+0x6e>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d006      	beq.n	8001e1a <dwHandleInterrupt+0x6e>
		dwClearReceiveTimestampAvailableStatus(dev);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff f954 	bl	80010ba <dwClearReceiveTimestampAvailableStatus>
		(*dev->handleReceiveTimestampAvailable)(dev);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	4798      	blx	r3
	}
	if(dwIsReceiveFailed(dev)) {
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff f8c4 	bl	8000fa8 <dwIsReceiveFailed>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d019      	beq.n	8001e5a <dwHandleInterrupt+0xae>
		dwClearReceiveStatus(dev);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff f964 	bl	80010f4 <dwClearReceiveStatus>
		dwRxSoftReset(dev); // Needed due to error in the RX auto-re-enable functionality. See page 35 of DW1000 manual, v2.13.
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7fe fbb4 	bl	800059a <dwRxSoftReset>
		if(dev->handleReceiveFailed != 0) {
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d04b      	beq.n	8001ed2 <dwHandleInterrupt+0x126>
			dev->handleReceiveFailed(dev);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	4798      	blx	r3
			if(dev->permanentReceive) {
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d042      	beq.n	8001ed2 <dwHandleInterrupt+0x126>
				dwNewReceive(dev);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7fe fdd8 	bl	8000a02 <dwNewReceive>
				dwStartReceive(dev);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7fe fded 	bl	8000a32 <dwStartReceive>
		if(dev->permanentReceive) {
			dwNewReceive(dev);
			dwStartReceive(dev);
		}
	}
}
 8001e58:	e03b      	b.n	8001ed2 <dwHandleInterrupt+0x126>
	} else if(dwIsReceiveTimeout(dev)) {
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff f8fa 	bl	8001054 <dwIsReceiveTimeout>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d019      	beq.n	8001e9a <dwHandleInterrupt+0xee>
		dwClearReceiveStatus(dev);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff f944 	bl	80010f4 <dwClearReceiveStatus>
		dwRxSoftReset(dev); // Needed due to error in the RX auto-re-enable functionality. See page 35 of DW1000 manual, v2.13.
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7fe fb94 	bl	800059a <dwRxSoftReset>
		if(dev->handleReceiveTimeout != 0) {
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d02b      	beq.n	8001ed2 <dwHandleInterrupt+0x126>
			(*dev->handleReceiveTimeout)(dev);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	4798      	blx	r3
			if(dev->permanentReceive) {
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d022      	beq.n	8001ed2 <dwHandleInterrupt+0x126>
				dwNewReceive(dev);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7fe fdb8 	bl	8000a02 <dwNewReceive>
				dwStartReceive(dev);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7fe fdcd 	bl	8000a32 <dwStartReceive>
}
 8001e98:	e01b      	b.n	8001ed2 <dwHandleInterrupt+0x126>
	} else if(dwIsReceiveDone(dev) && dev->handleReceived != 0) {
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff f866 	bl	8000f6c <dwIsReceiveDone>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d015      	beq.n	8001ed2 <dwHandleInterrupt+0x126>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d011      	beq.n	8001ed2 <dwHandleInterrupt+0x126>
		dwClearReceiveStatus(dev);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff f920 	bl	80010f4 <dwClearReceiveStatus>
		(*dev->handleReceived)(dev);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	4798      	blx	r3
		if(dev->permanentReceive) {
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d005      	beq.n	8001ed2 <dwHandleInterrupt+0x126>
			dwNewReceive(dev);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe fd9b 	bl	8000a02 <dwNewReceive>
			dwStartReceive(dev);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7fe fdb0 	bl	8000a32 <dwStartReceive>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <dwAttachSentHandler>:
{
	dev->forceTxPower = true;
	dev->txPower = txPower;
}

void dwAttachSentHandler(dwDevice_t *dev, dwHandler_t handler) {
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
	dev->handleSent = handler;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <dwAttachErrorHandler>:

void dwAttachErrorHandler(dwDevice_t *dev, dwHandler_t handler) {
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
	dev->handleError = handler;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <dwAttachReceivedHandler>:

void dwAttachReceivedHandler(dwDevice_t *dev, dwHandler_t handler) {
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	6039      	str	r1, [r7, #0]
	dev->handleReceived = handler;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <dwAttachReceiveFailedHandler>:

void dwAttachReceiveTimeoutHandler(dwDevice_t *dev, dwHandler_t handler) {
	dev->handleReceiveTimeout = handler;
}

void dwAttachReceiveFailedHandler(dwDevice_t *dev, dwHandler_t handler) {
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
	dev->handleReceiveFailed = handler;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr

08001f42 <dwSetAntenaDelay>:

void dwAttachReceiveTimestampAvailable(dwDevice_t *dev, dwHandler_t handler) {
	dev->handleReceiveTimestampAvailable = handler;
}

void dwSetAntenaDelay(dwDevice_t *dev, dwTime_t delay) {
 8001f42:	b480      	push	{r7}
 8001f44:	b085      	sub	sp, #20
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	4639      	mov	r1, r7
 8001f4c:	e881 000c 	stmia.w	r1, {r2, r3}
	dev->antennaDelay.full = delay.full;
 8001f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f54:	68f9      	ldr	r1, [r7, #12]
 8001f56:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <dwStrError>:

char* dwStrError(int error)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	if (error == DW_ERROR_OK) return "No error";
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <dwStrError+0x12>
 8001f72:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <dwStrError+0x28>)
 8001f74:	e005      	b.n	8001f82 <dwStrError+0x1e>
	else if (error == DW_ERROR_WRONG_ID) return "Wrong chip ID";
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <dwStrError+0x1c>
 8001f7c:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <dwStrError+0x2c>)
 8001f7e:	e000      	b.n	8001f82 <dwStrError+0x1e>
	else return "Uknown error";
 8001f80:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <dwStrError+0x30>)
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	0800b64c 	.word	0x0800b64c
 8001f90:	0800b658 	.word	0x0800b658
 8001f94:	0800b668 	.word	0x0800b668

08001f98 <setBit>:

static void setBit(uint8_t data[], unsigned int n, unsigned int bit, bool val) {
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	@ 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	70fb      	strb	r3, [r7, #3]
	unsigned int idx;
	unsigned int shift;

	idx = bit / 8;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	08db      	lsrs	r3, r3, #3
 8001faa:	61fb      	str	r3, [r7, #28]
	if(idx >= n) {
 8001fac:	69fa      	ldr	r2, [r7, #28]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d228      	bcs.n	8002006 <setBit+0x6e>
		return; // TODO proper error handling: out of bounds
	}
	uint8_t* targetByte = &data[idx];
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	4413      	add	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
	shift = bit % 8;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	617b      	str	r3, [r7, #20]
	if(val) {
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00d      	beq.n	8001fe6 <setBit+0x4e>
		*targetByte |= (1<<shift);
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b25a      	sxtb	r2, r3
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	b25b      	sxtb	r3, r3
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	b25b      	sxtb	r3, r3
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	701a      	strb	r2, [r3, #0]
 8001fe4:	e010      	b.n	8002008 <setBit+0x70>
	} else {
		*targetByte &= ~(1<<shift);
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b25a      	sxtb	r2, r3
 8001fec:	2101      	movs	r1, #1
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	b25b      	sxtb	r3, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	b25b      	sxtb	r3, r3
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	e000      	b.n	8002008 <setBit+0x70>
		return; // TODO proper error handling: out of bounds
 8002006:	bf00      	nop
	}
}
 8002008:	3724      	adds	r7, #36	@ 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <getBit>:

static bool getBit(uint8_t data[], unsigned int n, unsigned int bit) {
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	@ 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
	unsigned int idx;
	unsigned int shift;

	idx = bit / 8;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	08db      	lsrs	r3, r3, #3
 8002020:	61fb      	str	r3, [r7, #28]
	if(idx >= n) {
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	429a      	cmp	r2, r3
 8002028:	d301      	bcc.n	800202e <getBit+0x1e>
		return false; // TODO proper error handling: out of bounds
 800202a:	2300      	movs	r3, #0
 800202c:	e013      	b.n	8002056 <getBit+0x46>
	}
	uint8_t targetByte = data[idx];
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	4413      	add	r3, r2
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	76fb      	strb	r3, [r7, #27]
	shift = bit % 8;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	617b      	str	r3, [r7, #20]

	return (targetByte>>shift)&0x01;
 8002040:	7efa      	ldrb	r2, [r7, #27]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	fa42 f303 	asr.w	r3, r2, r3
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf14      	ite	ne
 8002050:	2301      	movne	r3, #1
 8002052:	2300      	moveq	r3, #0
 8002054:	b2db      	uxtb	r3, r3
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	@ 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <writeValueToBytes>:

static void writeValueToBytes(uint8_t data[], long val, unsigned int n) {
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
	unsigned int i;
	for(i = 0; i < n; i++) {
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	e00c      	b.n	800208c <writeValueToBytes+0x2c>
		data[i] = ((val >> (i * 8)) & 0xFF);
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	fa42 f103 	asr.w	r1, r2, r3
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	4413      	add	r3, r2
 8002082:	b2ca      	uxtb	r2, r1
 8002084:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < n; i++) {
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3301      	adds	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	d3ee      	bcc.n	8002072 <writeValueToBytes+0x12>
	}
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <readBytesOTP>:

static void readBytesOTP(dwDevice_t* dev, uint16_t address, uint8_t data[]) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	460b      	mov	r3, r1
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	817b      	strh	r3, [r7, #10]
	uint8_t addressBytes[LEN_OTP_ADDR];

	// p60 - 6.3.3 Reading a value from OTP memory
	// bytes of address
	addressBytes[0] = (address & 0xFF);
 80020ae:	897b      	ldrh	r3, [r7, #10]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	753b      	strb	r3, [r7, #20]
	addressBytes[1] = ((address >> 8) & 0xFF);
 80020b4:	897b      	ldrh	r3, [r7, #10]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	757b      	strb	r3, [r7, #21]
	// set address
	dwSpiWrite(dev, OTP_IF, OTP_ADDR_SUB, addressBytes, LEN_OTP_ADDR);
 80020be:	f107 0314 	add.w	r3, r7, #20
 80020c2:	2202      	movs	r2, #2
 80020c4:	9200      	str	r2, [sp, #0]
 80020c6:	2204      	movs	r2, #4
 80020c8:	212d      	movs	r1, #45	@ 0x2d
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f871 	bl	80021b2 <dwSpiWrite>
	// switch into read mode
	dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x03); // OTPRDEN | OTPREAD
 80020d0:	2303      	movs	r3, #3
 80020d2:	2206      	movs	r2, #6
 80020d4:	212d      	movs	r1, #45	@ 0x2d
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f8ae 	bl	8002238 <dwSpiWrite8>
	dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x01); // OTPRDEN
 80020dc:	2301      	movs	r3, #1
 80020de:	2206      	movs	r2, #6
 80020e0:	212d      	movs	r1, #45	@ 0x2d
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 f8a8 	bl	8002238 <dwSpiWrite8>
	// read value/block - 4 bytes
	dwSpiRead(dev, OTP_IF, OTP_RDAT_SUB, data, LEN_OTP_RDAT);
 80020e8:	2304      	movs	r3, #4
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	220a      	movs	r2, #10
 80020f0:	212d      	movs	r1, #45	@ 0x2d
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f80a 	bl	800210c <dwSpiRead>
	// end read mode
	dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x00);
 80020f8:	2300      	movs	r3, #0
 80020fa:	2206      	movs	r2, #6
 80020fc:	212d      	movs	r1, #45	@ 0x2d
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f89a 	bl	8002238 <dwSpiWrite8>
}
 8002104:	bf00      	nop
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <dwSpiRead>:

#include "libdw1000Spi.h"


void dwSpiRead(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                void* data, size_t length) {
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b089      	sub	sp, #36	@ 0x24
 8002110:	af02      	add	r7, sp, #8
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	460b      	mov	r3, r1
 800211a:	72fb      	strb	r3, [r7, #11]
	uint8_t header[3];
 	size_t headerLength=1;
 800211c:	2301      	movs	r3, #1
 800211e:	617b      	str	r3, [r7, #20]

	header[0] = regid & 0x3f;
 8002120:	7afb      	ldrb	r3, [r7, #11]
 8002122:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002126:	b2db      	uxtb	r3, r3
 8002128:	743b      	strb	r3, [r7, #16]

	if (address != 0) {
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01c      	beq.n	800216a <dwSpiRead+0x5e>
		header[0] |= 0x40;
 8002130:	7c3b      	ldrb	r3, [r7, #16]
 8002132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002136:	b2db      	uxtb	r3, r3
 8002138:	743b      	strb	r3, [r7, #16]

		header[1] = address & 0x7f;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002142:	b2db      	uxtb	r3, r3
 8002144:	747b      	strb	r3, [r7, #17]
		address >>= 7;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	09db      	lsrs	r3, r3, #7
 800214a:	607b      	str	r3, [r7, #4]
		headerLength = 2;
 800214c:	2302      	movs	r3, #2
 800214e:	617b      	str	r3, [r7, #20]

		if (address != 0) {
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d009      	beq.n	800216a <dwSpiRead+0x5e>
			header[1] |= 0x80;
 8002156:	7c7b      	ldrb	r3, [r7, #17]
 8002158:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800215c:	b2db      	uxtb	r3, r3
 800215e:	747b      	strb	r3, [r7, #17]
			header[2] = address & 0xff;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	74bb      	strb	r3, [r7, #18]
			headerLength = 3;
 8002166:	2303      	movs	r3, #3
 8002168:	617b      	str	r3, [r7, #20]
		}
	}

	dev->ops->spiRead(dev, header, headerLength, data, length);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681c      	ldr	r4, [r3, #0]
 8002170:	f107 0110 	add.w	r1, r7, #16
 8002174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	47a0      	blx	r4
}
 8002180:	bf00      	nop
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd90      	pop	{r4, r7, pc}

08002188 <dwSpiRead32>:
	uint16_t data;
	dwSpiRead(dev, regid, address, &data, sizeof(data));
	return data;
}

uint32_t dwSpiRead32(dwDevice_t *dev, uint8_t regid, uint32_t address) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af02      	add	r7, sp, #8
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	460b      	mov	r3, r1
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	72fb      	strb	r3, [r7, #11]
	uint32_t data;
	dwSpiRead(dev, regid, address, &data, sizeof(data));
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	7af9      	ldrb	r1, [r7, #11]
 800219c:	2204      	movs	r2, #4
 800219e:	9200      	str	r2, [sp, #0]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7ff ffb2 	bl	800210c <dwSpiRead>
	return data;
 80021a8:	697b      	ldr	r3, [r7, #20]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <dwSpiWrite>:

void dwSpiWrite(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                 const void* data, size_t length) {
 80021b2:	b590      	push	{r4, r7, lr}
 80021b4:	b089      	sub	sp, #36	@ 0x24
 80021b6:	af02      	add	r7, sp, #8
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	460b      	mov	r3, r1
 80021c0:	72fb      	strb	r3, [r7, #11]
	uint8_t header[3];
	size_t headerLength=1;
 80021c2:	2301      	movs	r3, #1
 80021c4:	617b      	str	r3, [r7, #20]

	header[0] = regid & 0x3f;
 80021c6:	7afb      	ldrb	r3, [r7, #11]
 80021c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	743b      	strb	r3, [r7, #16]
	header[0] |= 0x80;
 80021d0:	7c3b      	ldrb	r3, [r7, #16]
 80021d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	743b      	strb	r3, [r7, #16]

	if (address != 0) {
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d01c      	beq.n	800221a <dwSpiWrite+0x68>
		header[0] |= 0x40;
 80021e0:	7c3b      	ldrb	r3, [r7, #16]
 80021e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	743b      	strb	r3, [r7, #16]

		header[1] = address & 0x7f;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	747b      	strb	r3, [r7, #17]
		address >>= 7;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	09db      	lsrs	r3, r3, #7
 80021fa:	607b      	str	r3, [r7, #4]
		headerLength = 2;
 80021fc:	2302      	movs	r3, #2
 80021fe:	617b      	str	r3, [r7, #20]

		if (address != 0) {
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <dwSpiWrite+0x68>
			header[1] |= 0x80;
 8002206:	7c7b      	ldrb	r3, [r7, #17]
 8002208:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800220c:	b2db      	uxtb	r3, r3
 800220e:	747b      	strb	r3, [r7, #17]
			header[2] = address & 0xff;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	74bb      	strb	r3, [r7, #18]
			headerLength = 3;
 8002216:	2303      	movs	r3, #3
 8002218:	617b      	str	r3, [r7, #20]
		}
	}

	dev->ops->spiWrite(dev, header, headerLength, data, length);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685c      	ldr	r4, [r3, #4]
 8002220:	f107 0110 	add.w	r1, r7, #16
 8002224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	47a0      	blx	r4
}
 8002230:	bf00      	nop
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	bd90      	pop	{r4, r7, pc}

08002238 <dwSpiWrite8>:

void dwSpiWrite8(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                   uint8_t data) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af02      	add	r7, sp, #8
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	461a      	mov	r2, r3
 8002244:	460b      	mov	r3, r1
 8002246:	72fb      	strb	r3, [r7, #11]
 8002248:	4613      	mov	r3, r2
 800224a:	72bb      	strb	r3, [r7, #10]
	dwSpiWrite(dev, regid, address, &data, sizeof(data));
 800224c:	f107 030a 	add.w	r3, r7, #10
 8002250:	7af9      	ldrb	r1, [r7, #11]
 8002252:	2201      	movs	r2, #1
 8002254:	9200      	str	r2, [sp, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f7ff ffaa 	bl	80021b2 <dwSpiWrite>
}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <dwSpiWrite32>:

void dwSpiWrite32(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                   uint32_t data) {
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af02      	add	r7, sp, #8
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	460b      	mov	r3, r1
 8002274:	72fb      	strb	r3, [r7, #11]
	dwSpiWrite(dev, regid, address, &data, sizeof(data));
 8002276:	463b      	mov	r3, r7
 8002278:	7af9      	ldrb	r1, [r7, #11]
 800227a:	2204      	movs	r2, #4
 800227c:	9200      	str	r2, [sp, #0]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f7ff ff96 	bl	80021b2 <dwSpiWrite>
}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db0b      	blt.n	80022ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	4906      	ldr	r1, [pc, #24]	@ (80022c4 <__NVIC_EnableIRQ+0x34>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2001      	movs	r0, #1
 80022b2:	fa00 f202 	lsl.w	r2, r0, r2
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	e000e100 	.word	0xe000e100

080022c8 <spiRead>:
char USB_TX_Buffer[255] = "\0";
#define SPI_Transmit_Timeout  100
//Timeout for transmission, in ms

void spiRead(dwDevice_t *dev, const void *header, size_t headerLength,
		void *data, size_t dataLength) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]
	//Function for SPI_Read for decawave device, member of dw_ops .spiRead field
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80022d6:	2201      	movs	r2, #1
 80022d8:	2140      	movs	r1, #64	@ 0x40
 80022da:	4812      	ldr	r0, [pc, #72]	@ (8002324 <spiRead+0x5c>)
 80022dc:	f001 f879 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80022e0:	2200      	movs	r2, #0
 80022e2:	2110      	movs	r1, #16
 80022e4:	4810      	ldr	r0, [pc, #64]	@ (8002328 <spiRead+0x60>)
 80022e6:	f001 f874 	bl	80033d2 <HAL_GPIO_WritePin>
	//Led ON

	HAL_SPI_Transmit(&hspi1, (uint8_t*) header, headerLength,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	2364      	movs	r3, #100	@ 0x64
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	480e      	ldr	r0, [pc, #56]	@ (800232c <spiRead+0x64>)
 80022f4:	f003 fb60 	bl	80059b8 <HAL_SPI_Transmit>
	SPI_Transmit_Timeout);

	HAL_SPI_Receive(&hspi1, (uint8_t*) data, dataLength, SPI_Transmit_Timeout);
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	2364      	movs	r3, #100	@ 0x64
 80022fe:	6839      	ldr	r1, [r7, #0]
 8002300:	480a      	ldr	r0, [pc, #40]	@ (800232c <spiRead+0x64>)
 8002302:	f003 fc9d 	bl	8005c40 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	2140      	movs	r1, #64	@ 0x40
 800230a:	4806      	ldr	r0, [pc, #24]	@ (8002324 <spiRead+0x5c>)
 800230c:	f001 f861 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002310:	2201      	movs	r2, #1
 8002312:	2110      	movs	r1, #16
 8002314:	4804      	ldr	r0, [pc, #16]	@ (8002328 <spiRead+0x60>)
 8002316:	f001 f85c 	bl	80033d2 <HAL_GPIO_WritePin>
	//Led OFF
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40010c00 	.word	0x40010c00
 8002328:	40010800 	.word	0x40010800
 800232c:	20000204 	.word	0x20000204

08002330 <spiWrite>:

void spiWrite(dwDevice_t *dev, const void *header, size_t headerLength,
		const void *data, size_t dataLength) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	603b      	str	r3, [r7, #0]
	//Function for SPI_Write for decawave device, member of dw_ops .spiWrite field
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800233e:	2201      	movs	r2, #1
 8002340:	2140      	movs	r1, #64	@ 0x40
 8002342:	4812      	ldr	r0, [pc, #72]	@ (800238c <spiWrite+0x5c>)
 8002344:	f001 f845 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002348:	2200      	movs	r2, #0
 800234a:	2110      	movs	r1, #16
 800234c:	4810      	ldr	r0, [pc, #64]	@ (8002390 <spiWrite+0x60>)
 800234e:	f001 f840 	bl	80033d2 <HAL_GPIO_WritePin>
	//Led ON

	HAL_SPI_Transmit(&hspi1, (uint8_t*) header, headerLength,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	b29a      	uxth	r2, r3
 8002356:	2364      	movs	r3, #100	@ 0x64
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	480e      	ldr	r0, [pc, #56]	@ (8002394 <spiWrite+0x64>)
 800235c:	f003 fb2c 	bl	80059b8 <HAL_SPI_Transmit>
	SPI_Transmit_Timeout);

	HAL_SPI_Transmit(&hspi1, (uint8_t*) data, dataLength, SPI_Transmit_Timeout);
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	b29a      	uxth	r2, r3
 8002364:	2364      	movs	r3, #100	@ 0x64
 8002366:	6839      	ldr	r1, [r7, #0]
 8002368:	480a      	ldr	r0, [pc, #40]	@ (8002394 <spiWrite+0x64>)
 800236a:	f003 fb25 	bl	80059b8 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	2140      	movs	r1, #64	@ 0x40
 8002372:	4806      	ldr	r0, [pc, #24]	@ (800238c <spiWrite+0x5c>)
 8002374:	f001 f82d 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002378:	2201      	movs	r2, #1
 800237a:	2110      	movs	r1, #16
 800237c:	4804      	ldr	r0, [pc, #16]	@ (8002390 <spiWrite+0x60>)
 800237e:	f001 f828 	bl	80033d2 <HAL_GPIO_WritePin>
	//Led OFF
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40010c00 	.word	0x40010c00
 8002390:	40010800 	.word	0x40010800
 8002394:	20000204 	.word	0x20000204

08002398 <spiSetSpeed>:

void spiSetSpeed(dwDevice_t *dev, dwSpiSpeed_t speed) {
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	70fb      	strb	r3, [r7, #3]
// Needs to restart SPI using HAL, future improvement
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <delayms>:
void delayms(dwDevice_t *dev, unsigned int delay) {
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
	HAL_Delay(delay);
 80023b8:	6838      	ldr	r0, [r7, #0]
 80023ba:	f000 fd11 	bl	8002de0 <HAL_Delay>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <reset>:

void reset(dwDevice_t *dev) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80023d0:	2201      	movs	r2, #1
 80023d2:	2101      	movs	r1, #1
 80023d4:	4807      	ldr	r0, [pc, #28]	@ (80023f4 <reset+0x2c>)
 80023d6:	f000 fffc 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80023da:	200a      	movs	r0, #10
 80023dc:	f000 fd00 	bl	8002de0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80023e0:	2200      	movs	r2, #0
 80023e2:	2102      	movs	r1, #2
 80023e4:	4803      	ldr	r0, [pc, #12]	@ (80023f4 <reset+0x2c>)
 80023e6:	f000 fff4 	bl	80033d2 <HAL_GPIO_WritePin>
	//Open drain output, must not be driven High externally
	//See: DW1000 datasheet, page 8
//Hardware RST pin
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40010800 	.word	0x40010800

080023f8 <TX_Callback>:

dwOps_t dw_ops = { .spiRead = spiRead, .spiWrite = spiWrite, .spiSetSpeed =
		spiSetSpeed, .delayms = delayms, .reset = reset };

//RX and TX callbacks
void TX_Callback(dwDevice_t *dev) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	sprintf((char*) USB_TX_Buffer, "TX Complete %d \n\r\0", HAL_GetTick());
 8002400:	f000 fce4 	bl	8002dcc <HAL_GetTick>
 8002404:	4603      	mov	r3, r0
 8002406:	461a      	mov	r2, r3
 8002408:	4908      	ldr	r1, [pc, #32]	@ (800242c <TX_Callback+0x34>)
 800240a:	4809      	ldr	r0, [pc, #36]	@ (8002430 <TX_Callback+0x38>)
 800240c:	f008 fc62 	bl	800acd4 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002410:	4807      	ldr	r0, [pc, #28]	@ (8002430 <TX_Callback+0x38>)
 8002412:	f7fd fe9b 	bl	800014c <strlen>
 8002416:	4603      	mov	r3, r0
 8002418:	b29b      	uxth	r3, r3
 800241a:	4619      	mov	r1, r3
 800241c:	4804      	ldr	r0, [pc, #16]	@ (8002430 <TX_Callback+0x38>)
 800241e:	f008 f87b 	bl	800a518 <CDC_Transmit_FS>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	0800b678 	.word	0x0800b678
 8002430:	200002a4 	.word	0x200002a4

08002434 <RX_Callback>:
void RX_Callback(dwDevice_t *dev) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	sprintf((char*) USB_TX_Buffer, "RX Complete %d \n\r\0", HAL_GetTick());
 800243c:	f000 fcc6 	bl	8002dcc <HAL_GetTick>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	4908      	ldr	r1, [pc, #32]	@ (8002468 <RX_Callback+0x34>)
 8002446:	4809      	ldr	r0, [pc, #36]	@ (800246c <RX_Callback+0x38>)
 8002448:	f008 fc44 	bl	800acd4 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 800244c:	4807      	ldr	r0, [pc, #28]	@ (800246c <RX_Callback+0x38>)
 800244e:	f7fd fe7d 	bl	800014c <strlen>
 8002452:	4603      	mov	r3, r0
 8002454:	b29b      	uxth	r3, r3
 8002456:	4619      	mov	r1, r3
 8002458:	4804      	ldr	r0, [pc, #16]	@ (800246c <RX_Callback+0x38>)
 800245a:	f008 f85d 	bl	800a518 <CDC_Transmit_FS>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	0800b68c 	.word	0x0800b68c
 800246c:	200002a4 	.word	0x200002a4

08002470 <receivedFailedCallback>:
void receivedFailedCallback(dwDevice_t *dev){
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	sprintf((char*) USB_TX_Buffer, "RX Failed %d \n\r\0", HAL_GetTick());
 8002478:	f000 fca8 	bl	8002dcc <HAL_GetTick>
 800247c:	4603      	mov	r3, r0
 800247e:	461a      	mov	r2, r3
 8002480:	490a      	ldr	r1, [pc, #40]	@ (80024ac <receivedFailedCallback+0x3c>)
 8002482:	480b      	ldr	r0, [pc, #44]	@ (80024b0 <receivedFailedCallback+0x40>)
 8002484:	f008 fc26 	bl	800acd4 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002488:	4809      	ldr	r0, [pc, #36]	@ (80024b0 <receivedFailedCallback+0x40>)
 800248a:	f7fd fe5f 	bl	800014c <strlen>
 800248e:	4603      	mov	r3, r0
 8002490:	b29b      	uxth	r3, r3
 8002492:	4619      	mov	r1, r3
 8002494:	4806      	ldr	r0, [pc, #24]	@ (80024b0 <receivedFailedCallback+0x40>)
 8002496:	f008 f83f 	bl	800a518 <CDC_Transmit_FS>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 800249a:	2201      	movs	r2, #1
 800249c:	2140      	movs	r1, #64	@ 0x40
 800249e:	4805      	ldr	r0, [pc, #20]	@ (80024b4 <receivedFailedCallback+0x44>)
 80024a0:	f000 ff97 	bl	80033d2 <HAL_GPIO_WritePin>
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	0800b6a0 	.word	0x0800b6a0
 80024b0:	200002a4 	.word	0x200002a4
 80024b4:	40010c00 	.word	0x40010c00

080024b8 <DW1000_Error_Handler>:
	sprintf((char*) USB_TX_Buffer, "RX Error %d \n\r\0", HAL_GetTick());
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
}

void DW1000_Error_Handler(dwDevice_t *dev) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	sprintf((char*) USB_TX_Buffer, "DW1000 Error %d \n\r\0", HAL_GetTick());
 80024c0:	f000 fc84 	bl	8002dcc <HAL_GetTick>
 80024c4:	4603      	mov	r3, r0
 80024c6:	461a      	mov	r2, r3
 80024c8:	490a      	ldr	r1, [pc, #40]	@ (80024f4 <DW1000_Error_Handler+0x3c>)
 80024ca:	480b      	ldr	r0, [pc, #44]	@ (80024f8 <DW1000_Error_Handler+0x40>)
 80024cc:	f008 fc02 	bl	800acd4 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 80024d0:	4809      	ldr	r0, [pc, #36]	@ (80024f8 <DW1000_Error_Handler+0x40>)
 80024d2:	f7fd fe3b 	bl	800014c <strlen>
 80024d6:	4603      	mov	r3, r0
 80024d8:	b29b      	uxth	r3, r3
 80024da:	4619      	mov	r1, r3
 80024dc:	4806      	ldr	r0, [pc, #24]	@ (80024f8 <DW1000_Error_Handler+0x40>)
 80024de:	f008 f81b 	bl	800a518 <CDC_Transmit_FS>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80024e2:	2201      	movs	r2, #1
 80024e4:	2140      	movs	r1, #64	@ 0x40
 80024e6:	4805      	ldr	r0, [pc, #20]	@ (80024fc <DW1000_Error_Handler+0x44>)
 80024e8:	f000 ff73 	bl	80033d2 <HAL_GPIO_WritePin>
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	0800b6c4 	.word	0x0800b6c4
 80024f8:	200002a4 	.word	0x200002a4
 80024fc:	40010c00 	.word	0x40010c00

08002500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	@ 0x28
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002506:	f000 fc09 	bl	8002d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800250a:	f000 f91d 	bl	8002748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800250e:	f000 f9d7 	bl	80028c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002512:	f000 f975 	bl	8002800 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8002516:	f007 ff41 	bl	800a39c <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 800251a:	f000 f9a7 	bl	800286c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	sprintf((char*) USB_TX_Buffer, "Starting test \n\r\0");
 800251e:	497c      	ldr	r1, [pc, #496]	@ (8002710 <main+0x210>)
 8002520:	487c      	ldr	r0, [pc, #496]	@ (8002714 <main+0x214>)
 8002522:	f008 fbd7 	bl	800acd4 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002526:	487b      	ldr	r0, [pc, #492]	@ (8002714 <main+0x214>)
 8002528:	f7fd fe10 	bl	800014c <strlen>
 800252c:	4603      	mov	r3, r0
 800252e:	b29b      	uxth	r3, r3
 8002530:	4619      	mov	r1, r3
 8002532:	4878      	ldr	r0, [pc, #480]	@ (8002714 <main+0x214>)
 8002534:	f007 fff0 	bl	800a518 <CDC_Transmit_FS>
//		HAL_Delay(5);
//		sprintf((char*) USB_TX_Buffer, "Waiting %d \n\r\0", i);
//		CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
//	}

	sprintf((char*) USB_TX_Buffer, "Test:Init for DW1000 \n\r\0");
 8002538:	4977      	ldr	r1, [pc, #476]	@ (8002718 <main+0x218>)
 800253a:	4876      	ldr	r0, [pc, #472]	@ (8002714 <main+0x214>)
 800253c:	f008 fbca 	bl	800acd4 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002540:	4874      	ldr	r0, [pc, #464]	@ (8002714 <main+0x214>)
 8002542:	f7fd fe03 	bl	800014c <strlen>
 8002546:	4603      	mov	r3, r0
 8002548:	b29b      	uxth	r3, r3
 800254a:	4619      	mov	r1, r3
 800254c:	4871      	ldr	r0, [pc, #452]	@ (8002714 <main+0x214>)
 800254e:	f007 ffe3 	bl	800a518 <CDC_Transmit_FS>
	HAL_Delay(1000);
 8002552:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002556:	f000 fc43 	bl	8002de0 <HAL_Delay>
	//Initialize Decawave

	dwInit(dwm, &dw_ops);
 800255a:	4b70      	ldr	r3, [pc, #448]	@ (800271c <main+0x21c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4970      	ldr	r1, [pc, #448]	@ (8002720 <main+0x220>)
 8002560:	4618      	mov	r0, r3
 8002562:	f7fd fe01 	bl	8000168 <dwInit>

	// Enable NVIC interrupt for DW1000
	dwOpsInit(dwm);
 8002566:	4b6d      	ldr	r3, [pc, #436]	@ (800271c <main+0x21c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fa5c 	bl	8002a28 <dwOpsInit>

	uint8_t result = dwConfigure(dwm); // Configure the dw1000 chip
 8002570:	4b6a      	ldr	r3, [pc, #424]	@ (800271c <main+0x21c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7fd fe51 	bl	800021c <dwConfigure>
 800257a:	4603      	mov	r3, r0
 800257c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (result == 0) {
 8002580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002584:	2b00      	cmp	r3, #0
 8002586:	d112      	bne.n	80025ae <main+0xae>
		sprintf((char*) USB_TX_Buffer, "Ok \n\r\0");
 8002588:	4966      	ldr	r1, [pc, #408]	@ (8002724 <main+0x224>)
 800258a:	4862      	ldr	r0, [pc, #392]	@ (8002714 <main+0x214>)
 800258c:	f008 fba2 	bl	800acd4 <siprintf>
		CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002590:	4860      	ldr	r0, [pc, #384]	@ (8002714 <main+0x214>)
 8002592:	f7fd fddb 	bl	800014c <strlen>
 8002596:	4603      	mov	r3, r0
 8002598:	b29b      	uxth	r3, r3
 800259a:	4619      	mov	r1, r3
 800259c:	485d      	ldr	r0, [pc, #372]	@ (8002714 <main+0x214>)
 800259e:	f007 ffbb 	bl	800a518 <CDC_Transmit_FS>
		dwEnableAllLeds(dwm);
 80025a2:	4b5e      	ldr	r3, [pc, #376]	@ (800271c <main+0x21c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fd ff0d 	bl	80003c6 <dwEnableAllLeds>
 80025ac:	e013      	b.n	80025d6 <main+0xd6>
	} else {
		sprintf((char*) USB_TX_Buffer, "[ERROR]: %s\n\r\0", dwStrError(result));
 80025ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fcd6 	bl	8001f64 <dwStrError>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461a      	mov	r2, r3
 80025bc:	495a      	ldr	r1, [pc, #360]	@ (8002728 <main+0x228>)
 80025be:	4855      	ldr	r0, [pc, #340]	@ (8002714 <main+0x214>)
 80025c0:	f008 fb88 	bl	800acd4 <siprintf>
		CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 80025c4:	4853      	ldr	r0, [pc, #332]	@ (8002714 <main+0x214>)
 80025c6:	f7fd fdc1 	bl	800014c <strlen>
 80025ca:	4603      	mov	r3, r0
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	4619      	mov	r1, r3
 80025d0:	4850      	ldr	r0, [pc, #320]	@ (8002714 <main+0x214>)
 80025d2:	f007 ffa1 	bl	800a518 <CDC_Transmit_FS>
	}
	//Decawave config end

	sprintf((char*) USB_TX_Buffer, "Config End \n\r\0");
 80025d6:	4955      	ldr	r1, [pc, #340]	@ (800272c <main+0x22c>)
 80025d8:	484e      	ldr	r0, [pc, #312]	@ (8002714 <main+0x214>)
 80025da:	f008 fb7b 	bl	800acd4 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 80025de:	484d      	ldr	r0, [pc, #308]	@ (8002714 <main+0x214>)
 80025e0:	f7fd fdb4 	bl	800014c <strlen>
 80025e4:	4603      	mov	r3, r0
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	4619      	mov	r1, r3
 80025ea:	484a      	ldr	r0, [pc, #296]	@ (8002714 <main+0x214>)
 80025ec:	f007 ff94 	bl	800a518 <CDC_Transmit_FS>
	HAL_Delay(1000);
 80025f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025f4:	f000 fbf4 	bl	8002de0 <HAL_Delay>

	//Continue with config:
	dwTime_t delay = { .full = 0 };
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	e9c7 2306 	strd	r2, r3, [r7, #24]
	dwSetAntenaDelay(dwm, delay);
 8002604:	4b45      	ldr	r3, [pc, #276]	@ (800271c <main+0x21c>)
 8002606:	6819      	ldr	r1, [r3, #0]
 8002608:	f107 0318 	add.w	r3, r7, #24
 800260c:	cb0c      	ldmia	r3, {r2, r3}
 800260e:	4608      	mov	r0, r1
 8002610:	f7ff fc97 	bl	8001f42 <dwSetAntenaDelay>

	dwAttachSentHandler(dwm, TX_Callback);
 8002614:	4b41      	ldr	r3, [pc, #260]	@ (800271c <main+0x21c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4945      	ldr	r1, [pc, #276]	@ (8002730 <main+0x230>)
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fc5d 	bl	8001eda <dwAttachSentHandler>
	dwAttachReceivedHandler(dwm, RX_Callback);
 8002620:	4b3e      	ldr	r3, [pc, #248]	@ (800271c <main+0x21c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4943      	ldr	r1, [pc, #268]	@ (8002734 <main+0x234>)
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fc71 	bl	8001f0e <dwAttachReceivedHandler>
	dwAttachErrorHandler(dwm, DW1000_Error_Handler);
 800262c:	4b3b      	ldr	r3, [pc, #236]	@ (800271c <main+0x21c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4941      	ldr	r1, [pc, #260]	@ (8002738 <main+0x238>)
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fc5e 	bl	8001ef4 <dwAttachErrorHandler>
	dwAttachReceiveFailedHandler(dwm, receivedFailedCallback);
 8002638:	4b38      	ldr	r3, [pc, #224]	@ (800271c <main+0x21c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	493f      	ldr	r1, [pc, #252]	@ (800273c <main+0x23c>)
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fc72 	bl	8001f28 <dwAttachReceiveFailedHandler>

	dwNewConfiguration(dwm);
 8002644:	4b35      	ldr	r3, [pc, #212]	@ (800271c <main+0x21c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe fa20 	bl	8000a8e <dwNewConfiguration>
	dwSetDefaults(dwm);
 800264e:	4b33      	ldr	r3, [pc, #204]	@ (800271c <main+0x21c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fc1c 	bl	8000e90 <dwSetDefaults>

	dwEnableMode(dwm, MODE_SHORTDATA_FAST_ACCURACY);
 8002658:	4b30      	ldr	r3, [pc, #192]	@ (800271c <main+0x21c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4938      	ldr	r1, [pc, #224]	@ (8002740 <main+0x240>)
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fd6a 	bl	8001138 <dwEnableMode>
	dwSetChannel(dwm, CHANNEL_2);
 8002664:	4b2d      	ldr	r3, [pc, #180]	@ (800271c <main+0x21c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2102      	movs	r1, #2
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fbb8 	bl	8000de0 <dwSetChannel>
	dwSetPreambleCode(dwm, PREAMBLE_CODE_64MHZ_9);
 8002670:	4b2a      	ldr	r3, [pc, #168]	@ (800271c <main+0x21c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2109      	movs	r1, #9
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fbd0 	bl	8000e1c <dwSetPreambleCode>

	dwCommitConfiguration(dwm);
 800267c:	4b27      	ldr	r3, [pc, #156]	@ (800271c <main+0x21c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fa1e 	bl	8000ac2 <dwCommitConfiguration>

	// Enable DW1000 interrupts for receive operations
	dwInterruptOnReceived(dwm, true);
 8002686:	4b25      	ldr	r3, [pc, #148]	@ (800271c <main+0x21c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2101      	movs	r1, #1
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe f8f5 	bl	800087c <dwInterruptOnReceived>
	dwInterruptOnReceiveFailed(dwm, true);
 8002692:	4b22      	ldr	r3, [pc, #136]	@ (800271c <main+0x21c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2101      	movs	r1, #1
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe f909 	bl	80008b0 <dwInterruptOnReceiveFailed>
	dwInterruptOnReceiveTimeout(dwm, true);
 800269e:	4b1f      	ldr	r3, [pc, #124]	@ (800271c <main+0x21c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2101      	movs	r1, #1
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe f93d 	bl	8000924 <dwInterruptOnReceiveTimeout>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int i = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	623b      	str	r3, [r7, #32]

			char mesaj[] = "Hello UWB World! \n\r\0";
			send_Data_Over_UWB(mesaj);
			HAL_Delay(100);
		} else {
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80026ae:	2180      	movs	r1, #128	@ 0x80
 80026b0:	4824      	ldr	r0, [pc, #144]	@ (8002744 <main+0x244>)
 80026b2:	f000 fea6 	bl	8003402 <HAL_GPIO_TogglePin>
			
			// Only start new receive if not already receiving
			if (!dwIsReceiveDone(dwm) && !dwIsReceiveFailed(dwm)) {
 80026b6:	4b19      	ldr	r3, [pc, #100]	@ (800271c <main+0x21c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fc56 	bl	8000f6c <dwIsReceiveDone>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f083 0301 	eor.w	r3, r3, #1
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00e      	beq.n	80026ea <main+0x1ea>
 80026cc:	4b13      	ldr	r3, [pc, #76]	@ (800271c <main+0x21c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fe fc69 	bl	8000fa8 <dwIsReceiveFailed>
 80026d6:	4603      	mov	r3, r0
 80026d8:	f083 0301 	eor.w	r3, r3, #1
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <main+0x1ea>
				// Already receiving, just wait
				HAL_Delay(10);
 80026e2:	200a      	movs	r0, #10
 80026e4:	f000 fb7c 	bl	8002de0 <HAL_Delay>
 80026e8:	e011      	b.n	800270e <main+0x20e>
			} else {
				// Start new receive cycle
				dwNewReceive(dwm);
 80026ea:	4b0c      	ldr	r3, [pc, #48]	@ (800271c <main+0x21c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe f987 	bl	8000a02 <dwNewReceive>
				dwSetDefaults(dwm);
 80026f4:	4b09      	ldr	r3, [pc, #36]	@ (800271c <main+0x21c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe fbc9 	bl	8000e90 <dwSetDefaults>
				dwStartReceive(dwm);
 80026fe:	4b07      	ldr	r3, [pc, #28]	@ (800271c <main+0x21c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe f995 	bl	8000a32 <dwStartReceive>
				HAL_Delay(10);
 8002708:	200a      	movs	r0, #10
 800270a:	f000 fb69 	bl	8002de0 <HAL_Delay>
		if (TRANSMITTER == 1) {
 800270e:	e7ce      	b.n	80026ae <main+0x1ae>
 8002710:	0800b6d8 	.word	0x0800b6d8
 8002714:	200002a4 	.word	0x200002a4
 8002718:	0800b6ec 	.word	0x0800b6ec
 800271c:	20000000 	.word	0x20000000
 8002720:	20000004 	.word	0x20000004
 8002724:	0800b708 	.word	0x0800b708
 8002728:	0800b710 	.word	0x0800b710
 800272c:	0800b720 	.word	0x0800b720
 8002730:	080023f9 	.word	0x080023f9
 8002734:	08002435 	.word	0x08002435
 8002738:	080024b9 	.word	0x080024b9
 800273c:	08002471 	.word	0x08002471
 8002740:	0800b770 	.word	0x0800b770
 8002744:	40010c00 	.word	0x40010c00

08002748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b094      	sub	sp, #80	@ 0x50
 800274c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800274e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002752:	2228      	movs	r2, #40	@ 0x28
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f008 fade 	bl	800ad18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800276c:	1d3b      	adds	r3, r7, #4
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002778:	2301      	movs	r3, #1
 800277a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800277c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002782:	2300      	movs	r3, #0
 8002784:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002786:	2301      	movs	r3, #1
 8002788:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800278a:	2302      	movs	r3, #2
 800278c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800278e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002792:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002794:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002798:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800279a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800279e:	4618      	mov	r0, r3
 80027a0:	f002 fbc0 	bl	8004f24 <HAL_RCC_OscConfig>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80027aa:	f000 f948 	bl	8002a3e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027ae:	230f      	movs	r3, #15
 80027b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027b2:	2302      	movs	r3, #2
 80027b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027c0:	2300      	movs	r3, #0
 80027c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	2101      	movs	r1, #1
 80027ca:	4618      	mov	r0, r3
 80027cc:	f002 fe2c 	bl	8005428 <HAL_RCC_ClockConfig>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <SystemClock_Config+0x92>
  {
    Error_Handler();
 80027d6:	f000 f932 	bl	8002a3e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80027da:	2310      	movs	r3, #16
 80027dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80027de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80027e2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027e4:	1d3b      	adds	r3, r7, #4
 80027e6:	4618      	mov	r0, r3
 80027e8:	f002 ffac 	bl	8005744 <HAL_RCCEx_PeriphCLKConfig>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80027f2:	f000 f924 	bl	8002a3e <Error_Handler>
  }
}
 80027f6:	bf00      	nop
 80027f8:	3750      	adds	r7, #80	@ 0x50
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002804:	4b17      	ldr	r3, [pc, #92]	@ (8002864 <MX_SPI1_Init+0x64>)
 8002806:	4a18      	ldr	r2, [pc, #96]	@ (8002868 <MX_SPI1_Init+0x68>)
 8002808:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800280a:	4b16      	ldr	r3, [pc, #88]	@ (8002864 <MX_SPI1_Init+0x64>)
 800280c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002810:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002812:	4b14      	ldr	r3, [pc, #80]	@ (8002864 <MX_SPI1_Init+0x64>)
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002818:	4b12      	ldr	r3, [pc, #72]	@ (8002864 <MX_SPI1_Init+0x64>)
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800281e:	4b11      	ldr	r3, [pc, #68]	@ (8002864 <MX_SPI1_Init+0x64>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002824:	4b0f      	ldr	r3, [pc, #60]	@ (8002864 <MX_SPI1_Init+0x64>)
 8002826:	2200      	movs	r2, #0
 8002828:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800282a:	4b0e      	ldr	r3, [pc, #56]	@ (8002864 <MX_SPI1_Init+0x64>)
 800282c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002830:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002832:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <MX_SPI1_Init+0x64>)
 8002834:	2218      	movs	r2, #24
 8002836:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002838:	4b0a      	ldr	r3, [pc, #40]	@ (8002864 <MX_SPI1_Init+0x64>)
 800283a:	2200      	movs	r2, #0
 800283c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800283e:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <MX_SPI1_Init+0x64>)
 8002840:	2200      	movs	r2, #0
 8002842:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002844:	4b07      	ldr	r3, [pc, #28]	@ (8002864 <MX_SPI1_Init+0x64>)
 8002846:	2200      	movs	r2, #0
 8002848:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800284a:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <MX_SPI1_Init+0x64>)
 800284c:	220a      	movs	r2, #10
 800284e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002850:	4804      	ldr	r0, [pc, #16]	@ (8002864 <MX_SPI1_Init+0x64>)
 8002852:	f003 f82d 	bl	80058b0 <HAL_SPI_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800285c:	f000 f8ef 	bl	8002a3e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002860:	bf00      	nop
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20000204 	.word	0x20000204
 8002868:	40013000 	.word	0x40013000

0800286c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002870:	4b11      	ldr	r3, [pc, #68]	@ (80028b8 <MX_USART1_UART_Init+0x4c>)
 8002872:	4a12      	ldr	r2, [pc, #72]	@ (80028bc <MX_USART1_UART_Init+0x50>)
 8002874:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002876:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <MX_USART1_UART_Init+0x4c>)
 8002878:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800287c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800287e:	4b0e      	ldr	r3, [pc, #56]	@ (80028b8 <MX_USART1_UART_Init+0x4c>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002884:	4b0c      	ldr	r3, [pc, #48]	@ (80028b8 <MX_USART1_UART_Init+0x4c>)
 8002886:	2200      	movs	r2, #0
 8002888:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800288a:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <MX_USART1_UART_Init+0x4c>)
 800288c:	2200      	movs	r2, #0
 800288e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002890:	4b09      	ldr	r3, [pc, #36]	@ (80028b8 <MX_USART1_UART_Init+0x4c>)
 8002892:	220c      	movs	r2, #12
 8002894:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002896:	4b08      	ldr	r3, [pc, #32]	@ (80028b8 <MX_USART1_UART_Init+0x4c>)
 8002898:	2200      	movs	r2, #0
 800289a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800289c:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <MX_USART1_UART_Init+0x4c>)
 800289e:	2200      	movs	r2, #0
 80028a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028a2:	4805      	ldr	r0, [pc, #20]	@ (80028b8 <MX_USART1_UART_Init+0x4c>)
 80028a4:	f003 fd99 	bl	80063da <HAL_UART_Init>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028ae:	f000 f8c6 	bl	8002a3e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	2000025c 	.word	0x2000025c
 80028bc:	40013800 	.word	0x40013800

080028c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c6:	f107 0310 	add.w	r3, r7, #16
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	609a      	str	r2, [r3, #8]
 80028d2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d4:	4b3c      	ldr	r3, [pc, #240]	@ (80029c8 <MX_GPIO_Init+0x108>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	4a3b      	ldr	r2, [pc, #236]	@ (80029c8 <MX_GPIO_Init+0x108>)
 80028da:	f043 0320 	orr.w	r3, r3, #32
 80028de:	6193      	str	r3, [r2, #24]
 80028e0:	4b39      	ldr	r3, [pc, #228]	@ (80029c8 <MX_GPIO_Init+0x108>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ec:	4b36      	ldr	r3, [pc, #216]	@ (80029c8 <MX_GPIO_Init+0x108>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	4a35      	ldr	r2, [pc, #212]	@ (80029c8 <MX_GPIO_Init+0x108>)
 80028f2:	f043 0304 	orr.w	r3, r3, #4
 80028f6:	6193      	str	r3, [r2, #24]
 80028f8:	4b33      	ldr	r3, [pc, #204]	@ (80029c8 <MX_GPIO_Init+0x108>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002904:	4b30      	ldr	r3, [pc, #192]	@ (80029c8 <MX_GPIO_Init+0x108>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	4a2f      	ldr	r2, [pc, #188]	@ (80029c8 <MX_GPIO_Init+0x108>)
 800290a:	f043 0308 	orr.w	r3, r3, #8
 800290e:	6193      	str	r3, [r2, #24]
 8002910:	4b2d      	ldr	r3, [pc, #180]	@ (80029c8 <MX_GPIO_Init+0x108>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	607b      	str	r3, [r7, #4]
 800291a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_RSTn_GPIO_Port, DW_RSTn_Pin, GPIO_PIN_RESET);
 800291c:	2200      	movs	r2, #0
 800291e:	2101      	movs	r1, #1
 8002920:	482a      	ldr	r0, [pc, #168]	@ (80029cc <MX_GPIO_Init+0x10c>)
 8002922:	f000 fd56 	bl	80033d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USB_EN_Pin|NSS_Pin, GPIO_PIN_SET);
 8002926:	2201      	movs	r2, #1
 8002928:	2118      	movs	r1, #24
 800292a:	4828      	ldr	r0, [pc, #160]	@ (80029cc <MX_GPIO_Init+0x10c>)
 800292c:	f000 fd51 	bl	80033d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8002930:	2201      	movs	r2, #1
 8002932:	2140      	movs	r1, #64	@ 0x40
 8002934:	4826      	ldr	r0, [pc, #152]	@ (80029d0 <MX_GPIO_Init+0x110>)
 8002936:	f000 fd4c 	bl	80033d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800293a:	2200      	movs	r2, #0
 800293c:	2180      	movs	r1, #128	@ 0x80
 800293e:	4824      	ldr	r0, [pc, #144]	@ (80029d0 <MX_GPIO_Init+0x110>)
 8002940:	f000 fd47 	bl	80033d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DW_RSTn_Pin */
  GPIO_InitStruct.Pin = DW_RSTn_Pin;
 8002944:	2301      	movs	r3, #1
 8002946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002948:	2311      	movs	r3, #17
 800294a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002950:	2302      	movs	r3, #2
 8002952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_RSTn_GPIO_Port, &GPIO_InitStruct);
 8002954:	f107 0310 	add.w	r3, r7, #16
 8002958:	4619      	mov	r1, r3
 800295a:	481c      	ldr	r0, [pc, #112]	@ (80029cc <MX_GPIO_Init+0x10c>)
 800295c:	f000 fb9e 	bl	800309c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_EN_Pin NSS_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin|NSS_Pin;
 8002960:	2318      	movs	r3, #24
 8002962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002964:	2301      	movs	r3, #1
 8002966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296c:	2302      	movs	r3, #2
 800296e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002970:	f107 0310 	add.w	r3, r7, #16
 8002974:	4619      	mov	r1, r3
 8002976:	4815      	ldr	r0, [pc, #84]	@ (80029cc <MX_GPIO_Init+0x10c>)
 8002978:	f000 fb90 	bl	800309c <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 800297c:	2320      	movs	r3, #32
 800297e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002980:	4b14      	ldr	r3, [pc, #80]	@ (80029d4 <MX_GPIO_Init+0x114>)
 8002982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8002988:	f107 0310 	add.w	r3, r7, #16
 800298c:	4619      	mov	r1, r3
 800298e:	4810      	ldr	r0, [pc, #64]	@ (80029d0 <MX_GPIO_Init+0x110>)
 8002990:	f000 fb84 	bl	800309c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8002994:	23c0      	movs	r3, #192	@ 0xc0
 8002996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002998:	2301      	movs	r3, #1
 800299a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a0:	2302      	movs	r3, #2
 80029a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a4:	f107 0310 	add.w	r3, r7, #16
 80029a8:	4619      	mov	r1, r3
 80029aa:	4809      	ldr	r0, [pc, #36]	@ (80029d0 <MX_GPIO_Init+0x110>)
 80029ac:	f000 fb76 	bl	800309c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80029b0:	2200      	movs	r2, #0
 80029b2:	2100      	movs	r1, #0
 80029b4:	2017      	movs	r0, #23
 80029b6:	f000 fb2c 	bl	8003012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80029ba:	2017      	movs	r0, #23
 80029bc:	f000 fb45 	bl	800304a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80029c0:	bf00      	nop
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40010800 	.word	0x40010800
 80029d0:	40010c00 	.word	0x40010c00
 80029d4:	10310000 	.word	0x10310000

080029d8 <checkIrq>:
/* USER CODE BEGIN 4 */
//External interrupt handle
#define DWM_IRQn EXTI9_5_IRQn
#define DWM_IRQ_PIN GPIO_PIN_5
static int checkIrq()
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80029dc:	2120      	movs	r1, #32
 80029de:	4803      	ldr	r0, [pc, #12]	@ (80029ec <checkIrq+0x14>)
 80029e0:	f000 fce0 	bl	80033a4 <HAL_GPIO_ReadPin>
 80029e4:	4603      	mov	r3, r0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40010c00 	.word	0x40010c00

080029f0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == DWM_IRQ_PIN) // If The INT Source Is EXTI Line9 (A9 Pin)
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	d10c      	bne.n	8002a1a <HAL_GPIO_EXTI_Callback+0x2a>
	{ //GPIO_PIN_5- PB5
		do{
			dwHandleInterrupt(dwm);
 8002a00:	4b08      	ldr	r3, [pc, #32]	@ (8002a24 <HAL_GPIO_EXTI_Callback+0x34>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff f9d1 	bl	8001dac <dwHandleInterrupt>
		}while(checkIrq() != 0);
 8002a0a:	f7ff ffe5 	bl	80029d8 <checkIrq>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f5      	bne.n	8002a00 <HAL_GPIO_EXTI_Callback+0x10>
		HAL_NVIC_ClearPendingIRQ(DWM_IRQn);
 8002a14:	2017      	movs	r0, #23
 8002a16:	f000 fb32 	bl	800307e <HAL_NVIC_ClearPendingIRQ>
	}
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000000 	.word	0x20000000

08002a28 <dwOpsInit>:

void dwOpsInit(dwDevice_t *device) {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	//dev = device;

	NVIC_EnableIRQ(DWM_IRQn);
 8002a30:	2017      	movs	r0, #23
 8002a32:	f7ff fc2d 	bl	8002290 <__NVIC_EnableIRQ>
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a42:	b672      	cpsid	i
}
 8002a44:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a46:	bf00      	nop
 8002a48:	e7fd      	b.n	8002a46 <Error_Handler+0x8>
	...

08002a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a52:	4b15      	ldr	r3, [pc, #84]	@ (8002aa8 <HAL_MspInit+0x5c>)
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	4a14      	ldr	r2, [pc, #80]	@ (8002aa8 <HAL_MspInit+0x5c>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6193      	str	r3, [r2, #24]
 8002a5e:	4b12      	ldr	r3, [pc, #72]	@ (8002aa8 <HAL_MspInit+0x5c>)
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa8 <HAL_MspInit+0x5c>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8002aa8 <HAL_MspInit+0x5c>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a74:	61d3      	str	r3, [r2, #28]
 8002a76:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa8 <HAL_MspInit+0x5c>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	607b      	str	r3, [r7, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a82:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <HAL_MspInit+0x60>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	4a04      	ldr	r2, [pc, #16]	@ (8002aac <HAL_MspInit+0x60>)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40010000 	.word	0x40010000

08002ab0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 0310 	add.w	r3, r7, #16
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1b      	ldr	r2, [pc, #108]	@ (8002b38 <HAL_SPI_MspInit+0x88>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d12f      	bne.n	8002b30 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b3c <HAL_SPI_MspInit+0x8c>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	4a19      	ldr	r2, [pc, #100]	@ (8002b3c <HAL_SPI_MspInit+0x8c>)
 8002ad6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ada:	6193      	str	r3, [r2, #24]
 8002adc:	4b17      	ldr	r3, [pc, #92]	@ (8002b3c <HAL_SPI_MspInit+0x8c>)
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae8:	4b14      	ldr	r3, [pc, #80]	@ (8002b3c <HAL_SPI_MspInit+0x8c>)
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	4a13      	ldr	r2, [pc, #76]	@ (8002b3c <HAL_SPI_MspInit+0x8c>)
 8002aee:	f043 0304 	orr.w	r3, r3, #4
 8002af2:	6193      	str	r3, [r2, #24]
 8002af4:	4b11      	ldr	r3, [pc, #68]	@ (8002b3c <HAL_SPI_MspInit+0x8c>)
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b00:	23a0      	movs	r3, #160	@ 0xa0
 8002b02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b04:	2302      	movs	r3, #2
 8002b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0c:	f107 0310 	add.w	r3, r7, #16
 8002b10:	4619      	mov	r1, r3
 8002b12:	480b      	ldr	r0, [pc, #44]	@ (8002b40 <HAL_SPI_MspInit+0x90>)
 8002b14:	f000 fac2 	bl	800309c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b18:	2340      	movs	r3, #64	@ 0x40
 8002b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b24:	f107 0310 	add.w	r3, r7, #16
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4805      	ldr	r0, [pc, #20]	@ (8002b40 <HAL_SPI_MspInit+0x90>)
 8002b2c:	f000 fab6 	bl	800309c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002b30:	bf00      	nop
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40013000 	.word	0x40013000
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40010800 	.word	0x40010800

08002b44 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 0310 	add.w	r3, r7, #16
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd0 <HAL_UART_MspInit+0x8c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d131      	bne.n	8002bc8 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b64:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd4 <HAL_UART_MspInit+0x90>)
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	4a1a      	ldr	r2, [pc, #104]	@ (8002bd4 <HAL_UART_MspInit+0x90>)
 8002b6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b6e:	6193      	str	r3, [r2, #24]
 8002b70:	4b18      	ldr	r3, [pc, #96]	@ (8002bd4 <HAL_UART_MspInit+0x90>)
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7c:	4b15      	ldr	r3, [pc, #84]	@ (8002bd4 <HAL_UART_MspInit+0x90>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	4a14      	ldr	r2, [pc, #80]	@ (8002bd4 <HAL_UART_MspInit+0x90>)
 8002b82:	f043 0304 	orr.w	r3, r3, #4
 8002b86:	6193      	str	r3, [r2, #24]
 8002b88:	4b12      	ldr	r3, [pc, #72]	@ (8002bd4 <HAL_UART_MspInit+0x90>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba2:	f107 0310 	add.w	r3, r7, #16
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	480b      	ldr	r0, [pc, #44]	@ (8002bd8 <HAL_UART_MspInit+0x94>)
 8002baa:	f000 fa77 	bl	800309c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbc:	f107 0310 	add.w	r3, r7, #16
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4805      	ldr	r0, [pc, #20]	@ (8002bd8 <HAL_UART_MspInit+0x94>)
 8002bc4:	f000 fa6a 	bl	800309c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002bc8:	bf00      	nop
 8002bca:	3720      	adds	r7, #32
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40013800 	.word	0x40013800
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40010800 	.word	0x40010800

08002bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002be0:	bf00      	nop
 8002be2:	e7fd      	b.n	8002be0 <NMI_Handler+0x4>

08002be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002be8:	bf00      	nop
 8002bea:	e7fd      	b.n	8002be8 <HardFault_Handler+0x4>

08002bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bf0:	bf00      	nop
 8002bf2:	e7fd      	b.n	8002bf0 <MemManage_Handler+0x4>

08002bf4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bf8:	bf00      	nop
 8002bfa:	e7fd      	b.n	8002bf8 <BusFault_Handler+0x4>

08002bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c00:	bf00      	nop
 8002c02:	e7fd      	b.n	8002c00 <UsageFault_Handler+0x4>

08002c04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr

08002c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c2c:	f000 f8bc 	bl	8002da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8002c30:	bf00      	nop
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c38:	4802      	ldr	r0, [pc, #8]	@ (8002c44 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002c3a:	f000 fd2f 	bl	800369c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200010d8 	.word	0x200010d8

08002c48 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 8002c4c:	2020      	movs	r0, #32
 8002c4e:	f000 fbf1 	bl	8003434 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c60:	4a14      	ldr	r2, [pc, #80]	@ (8002cb4 <_sbrk+0x5c>)
 8002c62:	4b15      	ldr	r3, [pc, #84]	@ (8002cb8 <_sbrk+0x60>)
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c6c:	4b13      	ldr	r3, [pc, #76]	@ (8002cbc <_sbrk+0x64>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c74:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <_sbrk+0x64>)
 8002c76:	4a12      	ldr	r2, [pc, #72]	@ (8002cc0 <_sbrk+0x68>)
 8002c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c7a:	4b10      	ldr	r3, [pc, #64]	@ (8002cbc <_sbrk+0x64>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d207      	bcs.n	8002c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c88:	f008 f84e 	bl	800ad28 <__errno>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	220c      	movs	r2, #12
 8002c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c92:	f04f 33ff 	mov.w	r3, #4294967295
 8002c96:	e009      	b.n	8002cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c98:	4b08      	ldr	r3, [pc, #32]	@ (8002cbc <_sbrk+0x64>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c9e:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <_sbrk+0x64>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	4a05      	ldr	r2, [pc, #20]	@ (8002cbc <_sbrk+0x64>)
 8002ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002caa:	68fb      	ldr	r3, [r7, #12]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20005000 	.word	0x20005000
 8002cb8:	00000400 	.word	0x00000400
 8002cbc:	20000408 	.word	0x20000408
 8002cc0:	20001718 	.word	0x20001718

08002cc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cd0:	f7ff fff8 	bl	8002cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cd4:	480b      	ldr	r0, [pc, #44]	@ (8002d04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002cd6:	490c      	ldr	r1, [pc, #48]	@ (8002d08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8002d0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cdc:	e002      	b.n	8002ce4 <LoopCopyDataInit>

08002cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ce2:	3304      	adds	r3, #4

08002ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce8:	d3f9      	bcc.n	8002cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cea:	4a09      	ldr	r2, [pc, #36]	@ (8002d10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002cec:	4c09      	ldr	r4, [pc, #36]	@ (8002d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cf0:	e001      	b.n	8002cf6 <LoopFillZerobss>

08002cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf4:	3204      	adds	r2, #4

08002cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf8:	d3fb      	bcc.n	8002cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cfa:	f008 f81b 	bl	800ad34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cfe:	f7ff fbff 	bl	8002500 <main>
  bx lr
 8002d02:	4770      	bx	lr
  ldr r0, =_sdata
 8002d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d08:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002d0c:	0800b7e4 	.word	0x0800b7e4
  ldr r2, =_sbss
 8002d10:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002d14:	20001718 	.word	0x20001718

08002d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d18:	e7fe      	b.n	8002d18 <ADC1_2_IRQHandler>
	...

08002d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d20:	4b08      	ldr	r3, [pc, #32]	@ (8002d44 <HAL_Init+0x28>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a07      	ldr	r2, [pc, #28]	@ (8002d44 <HAL_Init+0x28>)
 8002d26:	f043 0310 	orr.w	r3, r3, #16
 8002d2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d2c:	2003      	movs	r0, #3
 8002d2e:	f000 f965 	bl	8002ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d32:	200f      	movs	r0, #15
 8002d34:	f000 f808 	bl	8002d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d38:	f7ff fe88 	bl	8002a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40022000 	.word	0x40022000

08002d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d50:	4b12      	ldr	r3, [pc, #72]	@ (8002d9c <HAL_InitTick+0x54>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b12      	ldr	r3, [pc, #72]	@ (8002da0 <HAL_InitTick+0x58>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 f97d 	bl	8003066 <HAL_SYSTICK_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e00e      	b.n	8002d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b0f      	cmp	r3, #15
 8002d7a:	d80a      	bhi.n	8002d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	f04f 30ff 	mov.w	r0, #4294967295
 8002d84:	f000 f945 	bl	8003012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d88:	4a06      	ldr	r2, [pc, #24]	@ (8002da4 <HAL_InitTick+0x5c>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e000      	b.n	8002d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20000018 	.word	0x20000018
 8002da0:	20000020 	.word	0x20000020
 8002da4:	2000001c 	.word	0x2000001c

08002da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dac:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <HAL_IncTick+0x1c>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <HAL_IncTick+0x20>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4413      	add	r3, r2
 8002db8:	4a03      	ldr	r2, [pc, #12]	@ (8002dc8 <HAL_IncTick+0x20>)
 8002dba:	6013      	str	r3, [r2, #0]
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr
 8002dc4:	20000020 	.word	0x20000020
 8002dc8:	2000040c 	.word	0x2000040c

08002dcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd0:	4b02      	ldr	r3, [pc, #8]	@ (8002ddc <HAL_GetTick+0x10>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	2000040c 	.word	0x2000040c

08002de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de8:	f7ff fff0 	bl	8002dcc <HAL_GetTick>
 8002dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d005      	beq.n	8002e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <HAL_Delay+0x44>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e06:	bf00      	nop
 8002e08:	f7ff ffe0 	bl	8002dcc <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d8f7      	bhi.n	8002e08 <HAL_Delay+0x28>
  {
  }
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000020 	.word	0x20000020

08002e28 <__NVIC_SetPriorityGrouping>:
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e38:	4b0c      	ldr	r3, [pc, #48]	@ (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e44:	4013      	ands	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e5a:	4a04      	ldr	r2, [pc, #16]	@ (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	60d3      	str	r3, [r2, #12]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <__NVIC_GetPriorityGrouping>:
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e74:	4b04      	ldr	r3, [pc, #16]	@ (8002e88 <__NVIC_GetPriorityGrouping+0x18>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	f003 0307 	and.w	r3, r3, #7
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_EnableIRQ>:
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	db0b      	blt.n	8002eb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	f003 021f 	and.w	r2, r3, #31
 8002ea4:	4906      	ldr	r1, [pc, #24]	@ (8002ec0 <__NVIC_EnableIRQ+0x34>)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2001      	movs	r0, #1
 8002eae:	fa00 f202 	lsl.w	r2, r0, r2
 8002eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	e000e100 	.word	0xe000e100

08002ec4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	db0c      	blt.n	8002ef0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	f003 021f 	and.w	r2, r3, #31
 8002edc:	4907      	ldr	r1, [pc, #28]	@ (8002efc <__NVIC_ClearPendingIRQ+0x38>)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eea:	3360      	adds	r3, #96	@ 0x60
 8002eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	e000e100 	.word	0xe000e100

08002f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	6039      	str	r1, [r7, #0]
 8002f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	db0a      	blt.n	8002f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	490c      	ldr	r1, [pc, #48]	@ (8002f4c <__NVIC_SetPriority+0x4c>)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	0112      	lsls	r2, r2, #4
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	440b      	add	r3, r1
 8002f24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f28:	e00a      	b.n	8002f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	4908      	ldr	r1, [pc, #32]	@ (8002f50 <__NVIC_SetPriority+0x50>)
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	3b04      	subs	r3, #4
 8002f38:	0112      	lsls	r2, r2, #4
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	761a      	strb	r2, [r3, #24]
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000e100 	.word	0xe000e100
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	@ 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f1c3 0307 	rsb	r3, r3, #7
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	bf28      	it	cs
 8002f72:	2304      	movcs	r3, #4
 8002f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	2b06      	cmp	r3, #6
 8002f7c:	d902      	bls.n	8002f84 <NVIC_EncodePriority+0x30>
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3b03      	subs	r3, #3
 8002f82:	e000      	b.n	8002f86 <NVIC_EncodePriority+0x32>
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f88:	f04f 32ff 	mov.w	r2, #4294967295
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43da      	mvns	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	401a      	ands	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	43d9      	mvns	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fac:	4313      	orrs	r3, r2
         );
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3724      	adds	r7, #36	@ 0x24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fc8:	d301      	bcc.n	8002fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e00f      	b.n	8002fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fce:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff8 <SysTick_Config+0x40>)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fd6:	210f      	movs	r1, #15
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	f7ff ff90 	bl	8002f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe0:	4b05      	ldr	r3, [pc, #20]	@ (8002ff8 <SysTick_Config+0x40>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fe6:	4b04      	ldr	r3, [pc, #16]	@ (8002ff8 <SysTick_Config+0x40>)
 8002fe8:	2207      	movs	r2, #7
 8002fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	e000e010 	.word	0xe000e010

08002ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff ff0f 	bl	8002e28 <__NVIC_SetPriorityGrouping>
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af00      	add	r7, sp, #0
 8003018:	4603      	mov	r3, r0
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003024:	f7ff ff24 	bl	8002e70 <__NVIC_GetPriorityGrouping>
 8003028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	6978      	ldr	r0, [r7, #20]
 8003030:	f7ff ff90 	bl	8002f54 <NVIC_EncodePriority>
 8003034:	4602      	mov	r2, r0
 8003036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff ff5f 	bl	8002f00 <__NVIC_SetPriority>
}
 8003042:	bf00      	nop
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	4603      	mov	r3, r0
 8003052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff17 	bl	8002e8c <__NVIC_EnableIRQ>
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff ffa2 	bl	8002fb8 <SysTick_Config>
 8003074:	4603      	mov	r3, r0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff19 	bl	8002ec4 <__NVIC_ClearPendingIRQ>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800309c:	b480      	push	{r7}
 800309e:	b08b      	sub	sp, #44	@ 0x2c
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030a6:	2300      	movs	r3, #0
 80030a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030aa:	2300      	movs	r3, #0
 80030ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ae:	e169      	b.n	8003384 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030b0:	2201      	movs	r2, #1
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	f040 8158 	bne.w	800337e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4a9a      	ldr	r2, [pc, #616]	@ (800333c <HAL_GPIO_Init+0x2a0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d05e      	beq.n	8003196 <HAL_GPIO_Init+0xfa>
 80030d8:	4a98      	ldr	r2, [pc, #608]	@ (800333c <HAL_GPIO_Init+0x2a0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d875      	bhi.n	80031ca <HAL_GPIO_Init+0x12e>
 80030de:	4a98      	ldr	r2, [pc, #608]	@ (8003340 <HAL_GPIO_Init+0x2a4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d058      	beq.n	8003196 <HAL_GPIO_Init+0xfa>
 80030e4:	4a96      	ldr	r2, [pc, #600]	@ (8003340 <HAL_GPIO_Init+0x2a4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d86f      	bhi.n	80031ca <HAL_GPIO_Init+0x12e>
 80030ea:	4a96      	ldr	r2, [pc, #600]	@ (8003344 <HAL_GPIO_Init+0x2a8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d052      	beq.n	8003196 <HAL_GPIO_Init+0xfa>
 80030f0:	4a94      	ldr	r2, [pc, #592]	@ (8003344 <HAL_GPIO_Init+0x2a8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d869      	bhi.n	80031ca <HAL_GPIO_Init+0x12e>
 80030f6:	4a94      	ldr	r2, [pc, #592]	@ (8003348 <HAL_GPIO_Init+0x2ac>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d04c      	beq.n	8003196 <HAL_GPIO_Init+0xfa>
 80030fc:	4a92      	ldr	r2, [pc, #584]	@ (8003348 <HAL_GPIO_Init+0x2ac>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d863      	bhi.n	80031ca <HAL_GPIO_Init+0x12e>
 8003102:	4a92      	ldr	r2, [pc, #584]	@ (800334c <HAL_GPIO_Init+0x2b0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d046      	beq.n	8003196 <HAL_GPIO_Init+0xfa>
 8003108:	4a90      	ldr	r2, [pc, #576]	@ (800334c <HAL_GPIO_Init+0x2b0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d85d      	bhi.n	80031ca <HAL_GPIO_Init+0x12e>
 800310e:	2b12      	cmp	r3, #18
 8003110:	d82a      	bhi.n	8003168 <HAL_GPIO_Init+0xcc>
 8003112:	2b12      	cmp	r3, #18
 8003114:	d859      	bhi.n	80031ca <HAL_GPIO_Init+0x12e>
 8003116:	a201      	add	r2, pc, #4	@ (adr r2, 800311c <HAL_GPIO_Init+0x80>)
 8003118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311c:	08003197 	.word	0x08003197
 8003120:	08003171 	.word	0x08003171
 8003124:	08003183 	.word	0x08003183
 8003128:	080031c5 	.word	0x080031c5
 800312c:	080031cb 	.word	0x080031cb
 8003130:	080031cb 	.word	0x080031cb
 8003134:	080031cb 	.word	0x080031cb
 8003138:	080031cb 	.word	0x080031cb
 800313c:	080031cb 	.word	0x080031cb
 8003140:	080031cb 	.word	0x080031cb
 8003144:	080031cb 	.word	0x080031cb
 8003148:	080031cb 	.word	0x080031cb
 800314c:	080031cb 	.word	0x080031cb
 8003150:	080031cb 	.word	0x080031cb
 8003154:	080031cb 	.word	0x080031cb
 8003158:	080031cb 	.word	0x080031cb
 800315c:	080031cb 	.word	0x080031cb
 8003160:	08003179 	.word	0x08003179
 8003164:	0800318d 	.word	0x0800318d
 8003168:	4a79      	ldr	r2, [pc, #484]	@ (8003350 <HAL_GPIO_Init+0x2b4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800316e:	e02c      	b.n	80031ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	623b      	str	r3, [r7, #32]
          break;
 8003176:	e029      	b.n	80031cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	3304      	adds	r3, #4
 800317e:	623b      	str	r3, [r7, #32]
          break;
 8003180:	e024      	b.n	80031cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	3308      	adds	r3, #8
 8003188:	623b      	str	r3, [r7, #32]
          break;
 800318a:	e01f      	b.n	80031cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	330c      	adds	r3, #12
 8003192:	623b      	str	r3, [r7, #32]
          break;
 8003194:	e01a      	b.n	80031cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d102      	bne.n	80031a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800319e:	2304      	movs	r3, #4
 80031a0:	623b      	str	r3, [r7, #32]
          break;
 80031a2:	e013      	b.n	80031cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031ac:	2308      	movs	r3, #8
 80031ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	611a      	str	r2, [r3, #16]
          break;
 80031b6:	e009      	b.n	80031cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031b8:	2308      	movs	r3, #8
 80031ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	615a      	str	r2, [r3, #20]
          break;
 80031c2:	e003      	b.n	80031cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031c4:	2300      	movs	r3, #0
 80031c6:	623b      	str	r3, [r7, #32]
          break;
 80031c8:	e000      	b.n	80031cc <HAL_GPIO_Init+0x130>
          break;
 80031ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	2bff      	cmp	r3, #255	@ 0xff
 80031d0:	d801      	bhi.n	80031d6 <HAL_GPIO_Init+0x13a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	e001      	b.n	80031da <HAL_GPIO_Init+0x13e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3304      	adds	r3, #4
 80031da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	2bff      	cmp	r3, #255	@ 0xff
 80031e0:	d802      	bhi.n	80031e8 <HAL_GPIO_Init+0x14c>
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	e002      	b.n	80031ee <HAL_GPIO_Init+0x152>
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	3b08      	subs	r3, #8
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	210f      	movs	r1, #15
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	fa01 f303 	lsl.w	r3, r1, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	401a      	ands	r2, r3
 8003200:	6a39      	ldr	r1, [r7, #32]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	fa01 f303 	lsl.w	r3, r1, r3
 8003208:	431a      	orrs	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 80b1 	beq.w	800337e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800321c:	4b4d      	ldr	r3, [pc, #308]	@ (8003354 <HAL_GPIO_Init+0x2b8>)
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	4a4c      	ldr	r2, [pc, #304]	@ (8003354 <HAL_GPIO_Init+0x2b8>)
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	6193      	str	r3, [r2, #24]
 8003228:	4b4a      	ldr	r3, [pc, #296]	@ (8003354 <HAL_GPIO_Init+0x2b8>)
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003234:	4a48      	ldr	r2, [pc, #288]	@ (8003358 <HAL_GPIO_Init+0x2bc>)
 8003236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	3302      	adds	r3, #2
 800323c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003240:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	220f      	movs	r2, #15
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4013      	ands	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a40      	ldr	r2, [pc, #256]	@ (800335c <HAL_GPIO_Init+0x2c0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d013      	beq.n	8003288 <HAL_GPIO_Init+0x1ec>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a3f      	ldr	r2, [pc, #252]	@ (8003360 <HAL_GPIO_Init+0x2c4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00d      	beq.n	8003284 <HAL_GPIO_Init+0x1e8>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a3e      	ldr	r2, [pc, #248]	@ (8003364 <HAL_GPIO_Init+0x2c8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d007      	beq.n	8003280 <HAL_GPIO_Init+0x1e4>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a3d      	ldr	r2, [pc, #244]	@ (8003368 <HAL_GPIO_Init+0x2cc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d101      	bne.n	800327c <HAL_GPIO_Init+0x1e0>
 8003278:	2303      	movs	r3, #3
 800327a:	e006      	b.n	800328a <HAL_GPIO_Init+0x1ee>
 800327c:	2304      	movs	r3, #4
 800327e:	e004      	b.n	800328a <HAL_GPIO_Init+0x1ee>
 8003280:	2302      	movs	r3, #2
 8003282:	e002      	b.n	800328a <HAL_GPIO_Init+0x1ee>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <HAL_GPIO_Init+0x1ee>
 8003288:	2300      	movs	r3, #0
 800328a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800328c:	f002 0203 	and.w	r2, r2, #3
 8003290:	0092      	lsls	r2, r2, #2
 8003292:	4093      	lsls	r3, r2
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800329a:	492f      	ldr	r1, [pc, #188]	@ (8003358 <HAL_GPIO_Init+0x2bc>)
 800329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	3302      	adds	r3, #2
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d006      	beq.n	80032c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032b4:	4b2d      	ldr	r3, [pc, #180]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	492c      	ldr	r1, [pc, #176]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	608b      	str	r3, [r1, #8]
 80032c0:	e006      	b.n	80032d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032c2:	4b2a      	ldr	r3, [pc, #168]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	4928      	ldr	r1, [pc, #160]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d006      	beq.n	80032ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032dc:	4b23      	ldr	r3, [pc, #140]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	4922      	ldr	r1, [pc, #136]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60cb      	str	r3, [r1, #12]
 80032e8:	e006      	b.n	80032f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032ea:	4b20      	ldr	r3, [pc, #128]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	491e      	ldr	r1, [pc, #120]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d006      	beq.n	8003312 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003304:	4b19      	ldr	r3, [pc, #100]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	4918      	ldr	r1, [pc, #96]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	604b      	str	r3, [r1, #4]
 8003310:	e006      	b.n	8003320 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003312:	4b16      	ldr	r3, [pc, #88]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	43db      	mvns	r3, r3
 800331a:	4914      	ldr	r1, [pc, #80]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 800331c:	4013      	ands	r3, r2
 800331e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d021      	beq.n	8003370 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800332c:	4b0f      	ldr	r3, [pc, #60]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	490e      	ldr	r1, [pc, #56]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]
 8003338:	e021      	b.n	800337e <HAL_GPIO_Init+0x2e2>
 800333a:	bf00      	nop
 800333c:	10320000 	.word	0x10320000
 8003340:	10310000 	.word	0x10310000
 8003344:	10220000 	.word	0x10220000
 8003348:	10210000 	.word	0x10210000
 800334c:	10120000 	.word	0x10120000
 8003350:	10110000 	.word	0x10110000
 8003354:	40021000 	.word	0x40021000
 8003358:	40010000 	.word	0x40010000
 800335c:	40010800 	.word	0x40010800
 8003360:	40010c00 	.word	0x40010c00
 8003364:	40011000 	.word	0x40011000
 8003368:	40011400 	.word	0x40011400
 800336c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003370:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <HAL_GPIO_Init+0x304>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	43db      	mvns	r3, r3
 8003378:	4909      	ldr	r1, [pc, #36]	@ (80033a0 <HAL_GPIO_Init+0x304>)
 800337a:	4013      	ands	r3, r2
 800337c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	3301      	adds	r3, #1
 8003382:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	fa22 f303 	lsr.w	r3, r2, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	f47f ae8e 	bne.w	80030b0 <HAL_GPIO_Init+0x14>
  }
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	372c      	adds	r7, #44	@ 0x2c
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	40010400 	.word	0x40010400

080033a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	887b      	ldrh	r3, [r7, #2]
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
 80033c0:	e001      	b.n	80033c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	460b      	mov	r3, r1
 80033dc:	807b      	strh	r3, [r7, #2]
 80033de:	4613      	mov	r3, r2
 80033e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033e2:	787b      	ldrb	r3, [r7, #1]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033e8:	887a      	ldrh	r2, [r7, #2]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033ee:	e003      	b.n	80033f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033f0:	887b      	ldrh	r3, [r7, #2]
 80033f2:	041a      	lsls	r2, r3, #16
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	611a      	str	r2, [r3, #16]
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr

08003402 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	460b      	mov	r3, r1
 800340c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003414:	887a      	ldrh	r2, [r7, #2]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4013      	ands	r3, r2
 800341a:	041a      	lsls	r2, r3, #16
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	43d9      	mvns	r1, r3
 8003420:	887b      	ldrh	r3, [r7, #2]
 8003422:	400b      	ands	r3, r1
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	611a      	str	r2, [r3, #16]
}
 800342a:	bf00      	nop
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr

08003434 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800343e:	4b08      	ldr	r3, [pc, #32]	@ (8003460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d006      	beq.n	8003458 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800344a:	4a05      	ldr	r2, [pc, #20]	@ (8003460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff facc 	bl	80029f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40010400 	.word	0x40010400

08003464 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e0e8      	b.n	8003648 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f007 f978 	bl	800a780 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2203      	movs	r2, #3
 8003494:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f003 f89b 	bl	80065de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034b2:	f003 f871 	bl	8006598 <USB_CoreInit>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0bf      	b.n	8003648 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2100      	movs	r1, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	f003 f89f 	bl	8006612 <USB_SetCurrentMode>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2202      	movs	r2, #2
 80034de:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e0b0      	b.n	8003648 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	73fb      	strb	r3, [r7, #15]
 80034ea:	e03e      	b.n	800356a <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034ec:	7bfa      	ldrb	r2, [r7, #15]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	440b      	add	r3, r1
 80034fa:	3311      	adds	r3, #17
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	440b      	add	r3, r1
 800350e:	3310      	adds	r3, #16
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	440b      	add	r3, r1
 8003522:	3313      	adds	r3, #19
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	3320      	adds	r3, #32
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800353c:	7bfa      	ldrb	r2, [r7, #15]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	440b      	add	r3, r1
 800354a:	3324      	adds	r3, #36	@ 0x24
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	440b      	add	r3, r1
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	3301      	adds	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	791b      	ldrb	r3, [r3, #4]
 800356e:	7bfa      	ldrb	r2, [r7, #15]
 8003570:	429a      	cmp	r2, r3
 8003572:	d3bb      	bcc.n	80034ec <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003574:	2300      	movs	r3, #0
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	e044      	b.n	8003604 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800357a:	7bfa      	ldrb	r2, [r7, #15]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	440b      	add	r3, r1
 8003588:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	440b      	add	r3, r1
 800359e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	440b      	add	r3, r1
 80035b4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	440b      	add	r3, r1
 80035ca:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	440b      	add	r3, r1
 80035e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	440b      	add	r3, r1
 80035f6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	3301      	adds	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	791b      	ldrb	r3, [r3, #4]
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	429a      	cmp	r2, r3
 800360c:	d3b5      	bcc.n	800357a <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003618:	f003 f807 	bl	800662a <USB_DevInit>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2202      	movs	r2, #2
 8003626:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e00c      	b.n	8003648 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f005 fa86 	bl	8008b52 <USB_DevDisconnect>

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_PCD_Start+0x16>
 8003662:	2302      	movs	r3, #2
 8003664:	e016      	b.n	8003694 <HAL_PCD_Start+0x44>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f002 ff9d 	bl	80065b2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003678:	2101      	movs	r1, #1
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f007 faf3 	bl	800ac66 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f005 fa5a 	bl	8008b3e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f005 fa5c 	bl	8008b66 <USB_ReadInterrupts>
 80036ae:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fb1a 	bl	8003cf4 <PCD_EP_ISR_Handler>

    return;
 80036c0:	e119      	b.n	80038f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d013      	beq.n	80036f4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036de:	b292      	uxth	r2, r2
 80036e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f007 f8c6 	bl	800a876 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80036ea:	2100      	movs	r1, #0
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f905 	bl	80038fc <HAL_PCD_SetAddress>

    return;
 80036f2:	e100      	b.n	80038f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00c      	beq.n	8003718 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003706:	b29a      	uxth	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003710:	b292      	uxth	r2, r2
 8003712:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003716:	e0ee      	b.n	80038f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00c      	beq.n	800373c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003734:	b292      	uxth	r2, r2
 8003736:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800373a:	e0dc      	b.n	80038f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d027      	beq.n	8003796 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800374e:	b29a      	uxth	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0204 	bic.w	r2, r2, #4
 8003758:	b292      	uxth	r2, r2
 800375a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003766:	b29a      	uxth	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0208 	bic.w	r2, r2, #8
 8003770:	b292      	uxth	r2, r2
 8003772:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f007 f8b6 	bl	800a8e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003784:	b29a      	uxth	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800378e:	b292      	uxth	r2, r2
 8003790:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003794:	e0af      	b.n	80038f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8083 	beq.w	80038a8 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	77fb      	strb	r3, [r7, #31]
 80037a6:	e010      	b.n	80037ca <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	7ffb      	ldrb	r3, [r7, #31]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	441a      	add	r2, r3
 80037b4:	7ffb      	ldrb	r3, [r7, #31]
 80037b6:	8812      	ldrh	r2, [r2, #0]
 80037b8:	b292      	uxth	r2, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	3320      	adds	r3, #32
 80037be:	443b      	add	r3, r7
 80037c0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80037c4:	7ffb      	ldrb	r3, [r7, #31]
 80037c6:	3301      	adds	r3, #1
 80037c8:	77fb      	strb	r3, [r7, #31]
 80037ca:	7ffb      	ldrb	r3, [r7, #31]
 80037cc:	2b07      	cmp	r3, #7
 80037ce:	d9eb      	bls.n	80037a8 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037d8:	b29a      	uxth	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	b292      	uxth	r2, r2
 80037e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0201 	bic.w	r2, r2, #1
 80037fa:	b292      	uxth	r2, r2
 80037fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003800:	bf00      	nop
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800380a:	b29b      	uxth	r3, r3
 800380c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f6      	beq.n	8003802 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800381c:	b29a      	uxth	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003826:	b292      	uxth	r2, r2
 8003828:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800382c:	2300      	movs	r3, #0
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e00f      	b.n	8003852 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003832:	7ffb      	ldrb	r3, [r7, #31]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	4611      	mov	r1, r2
 800383a:	7ffa      	ldrb	r2, [r7, #31]
 800383c:	0092      	lsls	r2, r2, #2
 800383e:	440a      	add	r2, r1
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	3320      	adds	r3, #32
 8003844:	443b      	add	r3, r7
 8003846:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800384a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800384c:	7ffb      	ldrb	r3, [r7, #31]
 800384e:	3301      	adds	r3, #1
 8003850:	77fb      	strb	r3, [r7, #31]
 8003852:	7ffb      	ldrb	r3, [r7, #31]
 8003854:	2b07      	cmp	r3, #7
 8003856:	d9ec      	bls.n	8003832 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003860:	b29a      	uxth	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0208 	orr.w	r2, r2, #8
 800386a:	b292      	uxth	r2, r2
 800386c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003878:	b29a      	uxth	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003882:	b292      	uxth	r2, r2
 8003884:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003890:	b29a      	uxth	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0204 	orr.w	r2, r2, #4
 800389a:	b292      	uxth	r2, r2
 800389c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f007 f807 	bl	800a8b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038a6:	e026      	b.n	80038f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00f      	beq.n	80038d2 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038c4:	b292      	uxth	r2, r2
 80038c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f006 ffc5 	bl	800a85a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038d0:	e011      	b.n	80038f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00c      	beq.n	80038f6 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038ee:	b292      	uxth	r2, r2
 80038f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80038f4:	bf00      	nop
  }
}
 80038f6:	3720      	adds	r7, #32
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_PCD_SetAddress+0x1a>
 8003912:	2302      	movs	r3, #2
 8003914:	e012      	b.n	800393c <HAL_PCD_SetAddress+0x40>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f005 f8f3 	bl	8008b18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	4608      	mov	r0, r1
 800394e:	4611      	mov	r1, r2
 8003950:	461a      	mov	r2, r3
 8003952:	4603      	mov	r3, r0
 8003954:	70fb      	strb	r3, [r7, #3]
 8003956:	460b      	mov	r3, r1
 8003958:	803b      	strh	r3, [r7, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003962:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003966:	2b00      	cmp	r3, #0
 8003968:	da0e      	bge.n	8003988 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	f003 0207 	and.w	r2, r3, #7
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	3310      	adds	r3, #16
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	4413      	add	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	705a      	strb	r2, [r3, #1]
 8003986:	e00e      	b.n	80039a6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	f003 0207 	and.w	r2, r3, #7
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	4413      	add	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039b2:	883a      	ldrh	r2, [r7, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	78ba      	ldrb	r2, [r7, #2]
 80039bc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039be:	78bb      	ldrb	r3, [r7, #2]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d102      	bne.n	80039ca <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_PCD_EP_Open+0x94>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e00e      	b.n	80039f6 <HAL_PCD_EP_Open+0xb2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68f9      	ldr	r1, [r7, #12]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f002 fe3c 	bl	8006664 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80039f4:	7afb      	ldrb	r3, [r7, #11]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	da0e      	bge.n	8003a30 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	f003 0207 	and.w	r2, r3, #7
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	3310      	adds	r3, #16
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	705a      	strb	r2, [r3, #1]
 8003a2e:	e00e      	b.n	8003a4e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	f003 0207 	and.w	r2, r3, #7
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_PCD_EP_Close+0x6a>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e00e      	b.n	8003a86 <HAL_PCD_EP_Close+0x88>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68f9      	ldr	r1, [r7, #12]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f003 f9b4 	bl	8006de4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b086      	sub	sp, #24
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a9e:	7afb      	ldrb	r3, [r7, #11]
 8003aa0:	f003 0207 	and.w	r2, r3, #7
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2200      	movs	r2, #0
 8003acc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ace:	7afb      	ldrb	r3, [r7, #11]
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6979      	ldr	r1, [r7, #20]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f003 fb6b 	bl	80071bc <USB_EPStartXfer>

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003afc:	78fb      	ldrb	r3, [r7, #3]
 8003afe:	f003 0207 	and.w	r2, r3, #7
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	440b      	add	r3, r1
 8003b0e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003b12:	681b      	ldr	r3, [r3, #0]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b086      	sub	sp, #24
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b2e:	7afb      	ldrb	r3, [r7, #11]
 8003b30:	f003 0207 	and.w	r2, r3, #7
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	3310      	adds	r3, #16
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4413      	add	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2200      	movs	r2, #0
 8003b62:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2201      	movs	r2, #1
 8003b68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b6a:	7afb      	ldrb	r3, [r7, #11]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6979      	ldr	r1, [r7, #20]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f003 fb1d 	bl	80071bc <USB_EPStartXfer>

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	7912      	ldrb	r2, [r2, #4]
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d901      	bls.n	8003baa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e04c      	b.n	8003c44 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003baa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	da0e      	bge.n	8003bd0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	f003 0207 	and.w	r2, r3, #7
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	3310      	adds	r3, #16
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	705a      	strb	r2, [r3, #1]
 8003bce:	e00c      	b.n	8003bea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_PCD_EP_SetStall+0x7e>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e01c      	b.n	8003c44 <HAL_PCD_EP_SetStall+0xb8>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68f9      	ldr	r1, [r7, #12]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f004 fe80 	bl	800891e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d108      	bne.n	8003c3a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003c32:	4619      	mov	r1, r3
 8003c34:	4610      	mov	r0, r2
 8003c36:	f004 ffa5 	bl	8008b84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	7912      	ldrb	r2, [r2, #4]
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e040      	b.n	8003cec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	da0e      	bge.n	8003c90 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c72:	78fb      	ldrb	r3, [r7, #3]
 8003c74:	f003 0207 	and.w	r2, r3, #7
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	3310      	adds	r3, #16
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	4413      	add	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	705a      	strb	r2, [r3, #1]
 8003c8e:	e00e      	b.n	8003cae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	f003 0207 	and.w	r2, r3, #7
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_PCD_EP_ClrStall+0x82>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e00e      	b.n	8003cec <HAL_PCD_EP_ClrStall+0xa0>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68f9      	ldr	r1, [r7, #12]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f004 fe6e 	bl	80089be <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b096      	sub	sp, #88	@ 0x58
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003cfc:	e3bb      	b.n	8004476 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d06:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003d18:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f040 8175 	bne.w	800400c <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d14e      	bne.n	8003dcc <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d3e:	81fb      	strh	r3, [r7, #14]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	89fb      	ldrh	r3, [r7, #14]
 8003d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3310      	adds	r3, #16
 8003d56:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3302      	adds	r3, #2
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d82:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	441a      	add	r2, r3
 8003d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d90:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003d92:	2100      	movs	r1, #0
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f006 fd46 	bl	800a826 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	7b5b      	ldrb	r3, [r3, #13]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8368 	beq.w	8004476 <PCD_EP_ISR_Handler+0x782>
 8003da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f040 8363 	bne.w	8004476 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	7b5b      	ldrb	r3, [r3, #13]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	735a      	strb	r2, [r3, #13]
 8003dca:	e354      	b.n	8004476 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003dd2:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003dde:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003de2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d034      	beq.n	8003e54 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	461a      	mov	r2, r3
 8003df6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	3306      	adds	r3, #6
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e14:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e22:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e26:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	f004 fefc 	bl	8008c26 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	823b      	strh	r3, [r7, #16]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	8a3a      	ldrh	r2, [r7, #16]
 8003e44:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e48:	b292      	uxth	r2, r2
 8003e4a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f006 fcbd 	bl	800a7cc <HAL_PCD_SetupStageCallback>
 8003e52:	e310      	b.n	8004476 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e54:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f280 830c 	bge.w	8004476 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	83fb      	strh	r3, [r7, #30]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	8bfa      	ldrh	r2, [r7, #30]
 8003e74:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e78:	b292      	uxth	r2, r2
 8003e7a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4413      	add	r3, r2
 8003e90:	3306      	adds	r3, #6
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6812      	ldr	r2, [r2, #0]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d019      	beq.n	8003ee4 <PCD_EP_ISR_Handler+0x1f0>
 8003eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d015      	beq.n	8003ee4 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ebe:	6959      	ldr	r1, [r3, #20]
 8003ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	f004 feac 	bl	8008c26 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	441a      	add	r2, r3
 8003ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eda:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003edc:	2100      	movs	r1, #0
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f006 fc86 	bl	800a7f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003eee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ef2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f040 82bd 	bne.w	8004476 <PCD_EP_ISR_Handler+0x782>
 8003efc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f00:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f08:	f000 82b5 	beq.w	8004476 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	4413      	add	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	801a      	strh	r2, [r3, #0]
 8003f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f42:	d91d      	bls.n	8003f80 <PCD_EP_ISR_Handler+0x28c>
 8003f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f003 031f 	and.w	r3, r3, #31
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <PCD_EP_ISR_Handler+0x26a>
 8003f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	029b      	lsls	r3, r3, #10
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	801a      	strh	r2, [r3, #0]
 8003f7e:	e026      	b.n	8003fce <PCD_EP_ISR_Handler+0x2da>
 8003f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <PCD_EP_ISR_Handler+0x2aa>
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	801a      	strh	r2, [r3, #0]
 8003f9c:	e017      	b.n	8003fce <PCD_EP_ISR_Handler+0x2da>
 8003f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	085b      	lsrs	r3, r3, #1
 8003fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <PCD_EP_ISR_Handler+0x2c4>
 8003fb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	029b      	lsls	r3, r3, #10
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fde:	827b      	strh	r3, [r7, #18]
 8003fe0:	8a7b      	ldrh	r3, [r7, #18]
 8003fe2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003fe6:	827b      	strh	r3, [r7, #18]
 8003fe8:	8a7b      	ldrh	r3, [r7, #18]
 8003fea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003fee:	827b      	strh	r3, [r7, #18]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	8a7b      	ldrh	r3, [r7, #18]
 8003ff6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ffa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004006:	b29b      	uxth	r3, r3
 8004008:	8013      	strh	r3, [r2, #0]
 800400a:	e234      	b.n	8004476 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004020:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004024:	2b00      	cmp	r3, #0
 8004026:	f280 80fc 	bge.w	8004222 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	b29a      	uxth	r2, r3
 800403c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004040:	4013      	ands	r3, r2
 8004042:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004058:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800405c:	b292      	uxth	r2, r2
 800405e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004060:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	4413      	add	r3, r2
 8004074:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004078:	7b1b      	ldrb	r3, [r3, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d125      	bne.n	80040ca <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004086:	b29b      	uxth	r3, r3
 8004088:	461a      	mov	r2, r3
 800408a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4413      	add	r3, r2
 8004092:	3306      	adds	r3, #6
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	4413      	add	r3, r2
 800409c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040a6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80040aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 8092 	beq.w	80041d8 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6818      	ldr	r0, [r3, #0]
 80040b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ba:	6959      	ldr	r1, [r3, #20]
 80040bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040be:	88da      	ldrh	r2, [r3, #6]
 80040c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80040c4:	f004 fdaf 	bl	8008c26 <USB_ReadPMA>
 80040c8:	e086      	b.n	80041d8 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80040ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040cc:	78db      	ldrb	r3, [r3, #3]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d10a      	bne.n	80040e8 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80040d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80040d6:	461a      	mov	r2, r3
 80040d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f9d9 	bl	8004492 <HAL_PCD_EP_DB_Receive>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80040e6:	e077      	b.n	80041d8 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004102:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	441a      	add	r2, r3
 8004114:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800411c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004124:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004128:	b29b      	uxth	r3, r3
 800412a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	b29b      	uxth	r3, r3
 800413e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d024      	beq.n	8004190 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800414e:	b29b      	uxth	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	4413      	add	r3, r2
 800415a:	3302      	adds	r3, #2
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6812      	ldr	r2, [r2, #0]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800416e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004172:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004176:	2b00      	cmp	r3, #0
 8004178:	d02e      	beq.n	80041d8 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004180:	6959      	ldr	r1, [r3, #20]
 8004182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004184:	891a      	ldrh	r2, [r3, #8]
 8004186:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800418a:	f004 fd4c 	bl	8008c26 <USB_ReadPMA>
 800418e:	e023      	b.n	80041d8 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004198:	b29b      	uxth	r3, r3
 800419a:	461a      	mov	r2, r3
 800419c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4413      	add	r3, r2
 80041a4:	3306      	adds	r3, #6
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041b8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80041bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d009      	beq.n	80041d8 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ca:	6959      	ldr	r1, [r3, #20]
 80041cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ce:	895a      	ldrh	r2, [r3, #10]
 80041d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041d4:	f004 fd27 	bl	8008c26 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80041d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041e0:	441a      	add	r2, r3
 80041e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80041e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041ee:	441a      	add	r2, r3
 80041f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80041f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <PCD_EP_ISR_Handler+0x514>
 80041fc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	429a      	cmp	r2, r3
 8004206:	d206      	bcs.n	8004216 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	4619      	mov	r1, r3
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f006 faee 	bl	800a7f0 <HAL_PCD_DataOutStageCallback>
 8004214:	e005      	b.n	8004222 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800421c:	4618      	mov	r0, r3
 800421e:	f002 ffcd 	bl	80071bc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004222:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 8123 	beq.w	8004476 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8004230:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	3310      	adds	r3, #16
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	4413      	add	r3, r2
 8004242:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29b      	uxth	r3, r3
 8004256:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800425a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800425e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	441a      	add	r2, r3
 8004270:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800427c:	b29b      	uxth	r3, r3
 800427e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004282:	78db      	ldrb	r3, [r3, #3]
 8004284:	2b01      	cmp	r3, #1
 8004286:	f040 80a2 	bne.w	80043ce <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800428a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800428c:	2200      	movs	r2, #0
 800428e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004292:	7b1b      	ldrb	r3, [r3, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8093 	beq.w	80043c0 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800429a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800429e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d046      	beq.n	8004334 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a8:	785b      	ldrb	r3, [r3, #1]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d126      	bne.n	80042fc <PCD_EP_ISR_Handler+0x608>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042bc:	b29b      	uxth	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c2:	4413      	add	r3, r2
 80042c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	011a      	lsls	r2, r3, #4
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	4413      	add	r3, r2
 80042d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042d4:	623b      	str	r3, [r7, #32]
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	801a      	strh	r2, [r3, #0]
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	801a      	strh	r2, [r3, #0]
 80042fa:	e061      	b.n	80043c0 <PCD_EP_ISR_Handler+0x6cc>
 80042fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fe:	785b      	ldrb	r3, [r3, #1]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d15d      	bne.n	80043c0 <PCD_EP_ISR_Handler+0x6cc>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004312:	b29b      	uxth	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004318:	4413      	add	r3, r2
 800431a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800431c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	011a      	lsls	r2, r3, #4
 8004322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004324:	4413      	add	r3, r2
 8004326:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800432a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800432c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432e:	2200      	movs	r2, #0
 8004330:	801a      	strh	r2, [r3, #0]
 8004332:	e045      	b.n	80043c0 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800433a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433c:	785b      	ldrb	r3, [r3, #1]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d126      	bne.n	8004390 <PCD_EP_ISR_Handler+0x69c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	637b      	str	r3, [r7, #52]	@ 0x34
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004350:	b29b      	uxth	r3, r3
 8004352:	461a      	mov	r2, r3
 8004354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004356:	4413      	add	r3, r2
 8004358:	637b      	str	r3, [r7, #52]	@ 0x34
 800435a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	011a      	lsls	r2, r3, #4
 8004360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004362:	4413      	add	r3, r2
 8004364:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004368:	633b      	str	r3, [r7, #48]	@ 0x30
 800436a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	b29b      	uxth	r3, r3
 8004370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004374:	b29a      	uxth	r2, r3
 8004376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004378:	801a      	strh	r2, [r3, #0]
 800437a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	b29b      	uxth	r3, r3
 8004380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004388:	b29a      	uxth	r2, r3
 800438a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438c:	801a      	strh	r2, [r3, #0]
 800438e:	e017      	b.n	80043c0 <PCD_EP_ISR_Handler+0x6cc>
 8004390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004392:	785b      	ldrb	r3, [r3, #1]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d113      	bne.n	80043c0 <PCD_EP_ISR_Handler+0x6cc>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043a6:	4413      	add	r3, r2
 80043a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	011a      	lsls	r2, r3, #4
 80043b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043b2:	4413      	add	r3, r2
 80043b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043bc:	2200      	movs	r2, #0
 80043be:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	4619      	mov	r1, r3
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f006 fa2d 	bl	800a826 <HAL_PCD_DataInStageCallback>
 80043cc:	e053      	b.n	8004476 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80043ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80043d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d146      	bne.n	8004468 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	4413      	add	r3, r2
 80043ee:	3302      	adds	r3, #2
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6812      	ldr	r2, [r2, #0]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004402:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800440e:	429a      	cmp	r2, r3
 8004410:	d907      	bls.n	8004422 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8004412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800441a:	1ad2      	subs	r2, r2, r3
 800441c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800441e:	619a      	str	r2, [r3, #24]
 8004420:	e002      	b.n	8004428 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8004422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004424:	2200      	movs	r2, #0
 8004426:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	4619      	mov	r1, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f006 f9f5 	bl	800a826 <HAL_PCD_DataInStageCallback>
 800443c:	e01b      	b.n	8004476 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800443e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004446:	441a      	add	r2, r3
 8004448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800444a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800444c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800444e:	69da      	ldr	r2, [r3, #28]
 8004450:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004454:	441a      	add	r2, r3
 8004456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004458:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004460:	4618      	mov	r0, r3
 8004462:	f002 feab 	bl	80071bc <USB_EPStartXfer>
 8004466:	e006      	b.n	8004476 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004468:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800446c:	461a      	mov	r2, r3
 800446e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f91b 	bl	80046ac <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800447e:	b29b      	uxth	r3, r3
 8004480:	b21b      	sxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	f6ff ac3b 	blt.w	8003cfe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3758      	adds	r7, #88	@ 0x58
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b088      	sub	sp, #32
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	4613      	mov	r3, r2
 800449e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044a0:	88fb      	ldrh	r3, [r7, #6]
 80044a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d07e      	beq.n	80045a8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	461a      	mov	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4413      	add	r3, r2
 80044be:	3302      	adds	r3, #2
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	699a      	ldr	r2, [r3, #24]
 80044d8:	8b7b      	ldrh	r3, [r7, #26]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d306      	bcc.n	80044ec <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	8b7b      	ldrh	r3, [r7, #26]
 80044e4:	1ad2      	subs	r2, r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	619a      	str	r2, [r3, #24]
 80044ea:	e002      	b.n	80044f2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2200      	movs	r2, #0
 80044f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d123      	bne.n	8004542 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	b29b      	uxth	r3, r3
 800450c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004514:	833b      	strh	r3, [r7, #24]
 8004516:	8b3b      	ldrh	r3, [r7, #24]
 8004518:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800451c:	833b      	strh	r3, [r7, #24]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	441a      	add	r2, r3
 800452c:	8b3b      	ldrh	r3, [r7, #24]
 800452e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004532:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004536:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800453a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800453e:	b29b      	uxth	r3, r3
 8004540:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004542:	88fb      	ldrh	r3, [r7, #6]
 8004544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01f      	beq.n	800458c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	b29b      	uxth	r3, r3
 800455e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004566:	82fb      	strh	r3, [r7, #22]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	441a      	add	r2, r3
 8004576:	8afb      	ldrh	r3, [r7, #22]
 8004578:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800457c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004580:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004584:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004588:	b29b      	uxth	r3, r3
 800458a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800458c:	8b7b      	ldrh	r3, [r7, #26]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 8087 	beq.w	80046a2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	6959      	ldr	r1, [r3, #20]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	891a      	ldrh	r2, [r3, #8]
 80045a0:	8b7b      	ldrh	r3, [r7, #26]
 80045a2:	f004 fb40 	bl	8008c26 <USB_ReadPMA>
 80045a6:	e07c      	b.n	80046a2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4413      	add	r3, r2
 80045bc:	3306      	adds	r3, #6
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	8b7b      	ldrh	r3, [r7, #26]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d306      	bcc.n	80045ea <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	699a      	ldr	r2, [r3, #24]
 80045e0:	8b7b      	ldrh	r3, [r7, #26]
 80045e2:	1ad2      	subs	r2, r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	619a      	str	r2, [r3, #24]
 80045e8:	e002      	b.n	80045f0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2200      	movs	r2, #0
 80045ee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d123      	bne.n	8004640 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	b29b      	uxth	r3, r3
 800460a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800460e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004612:	83fb      	strh	r3, [r7, #30]
 8004614:	8bfb      	ldrh	r3, [r7, #30]
 8004616:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800461a:	83fb      	strh	r3, [r7, #30]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	441a      	add	r2, r3
 800462a:	8bfb      	ldrh	r3, [r7, #30]
 800462c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004630:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004634:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800463c:	b29b      	uxth	r3, r3
 800463e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004640:	88fb      	ldrh	r3, [r7, #6]
 8004642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d11f      	bne.n	800468a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	b29b      	uxth	r3, r3
 800465c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004664:	83bb      	strh	r3, [r7, #28]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	441a      	add	r2, r3
 8004674:	8bbb      	ldrh	r3, [r7, #28]
 8004676:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800467a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800467e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004682:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004686:	b29b      	uxth	r3, r3
 8004688:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800468a:	8b7b      	ldrh	r3, [r7, #26]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	6959      	ldr	r1, [r3, #20]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	895a      	ldrh	r2, [r3, #10]
 800469c:	8b7b      	ldrh	r3, [r7, #26]
 800469e:	f004 fac2 	bl	8008c26 <USB_ReadPMA>
    }
  }

  return count;
 80046a2:	8b7b      	ldrh	r3, [r7, #26]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3720      	adds	r7, #32
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b0a4      	sub	sp, #144	@ 0x90
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	4613      	mov	r3, r2
 80046b8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80046ba:	88fb      	ldrh	r3, [r7, #6]
 80046bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 81dd 	beq.w	8004a80 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	4413      	add	r3, r2
 80046da:	3302      	adds	r3, #2
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ee:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d907      	bls.n	800470e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004706:	1ad2      	subs	r2, r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	619a      	str	r2, [r3, #24]
 800470c:	e002      	b.n	8004714 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2200      	movs	r2, #0
 8004712:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	2b00      	cmp	r3, #0
 800471a:	f040 80b9 	bne.w	8004890 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	785b      	ldrb	r3, [r3, #1]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d126      	bne.n	8004774 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004734:	b29b      	uxth	r3, r3
 8004736:	461a      	mov	r2, r3
 8004738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473a:	4413      	add	r3, r2
 800473c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	011a      	lsls	r2, r3, #4
 8004744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004746:	4413      	add	r3, r2
 8004748:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800474c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800474e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	b29b      	uxth	r3, r3
 8004754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004758:	b29a      	uxth	r2, r3
 800475a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475c:	801a      	strh	r2, [r3, #0]
 800475e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	b29b      	uxth	r3, r3
 8004764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800476c:	b29a      	uxth	r2, r3
 800476e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	e01a      	b.n	80047aa <HAL_PCD_EP_DB_Transmit+0xfe>
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	785b      	ldrb	r3, [r3, #1]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d116      	bne.n	80047aa <HAL_PCD_EP_DB_Transmit+0xfe>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	637b      	str	r3, [r7, #52]	@ 0x34
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800478a:	b29b      	uxth	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004790:	4413      	add	r3, r2
 8004792:	637b      	str	r3, [r7, #52]	@ 0x34
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	011a      	lsls	r2, r3, #4
 800479a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800479c:	4413      	add	r3, r2
 800479e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80047a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a6:	2200      	movs	r2, #0
 80047a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	785b      	ldrb	r3, [r3, #1]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d126      	bne.n	8004806 <HAL_PCD_EP_DB_Transmit+0x15a>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	61fb      	str	r3, [r7, #28]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	4413      	add	r3, r2
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	011a      	lsls	r2, r3, #4
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047de:	61bb      	str	r3, [r7, #24]
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	801a      	strh	r2, [r3, #0]
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047fe:	b29a      	uxth	r2, r3
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	801a      	strh	r2, [r3, #0]
 8004804:	e017      	b.n	8004836 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	785b      	ldrb	r3, [r3, #1]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d113      	bne.n	8004836 <HAL_PCD_EP_DB_Transmit+0x18a>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004816:	b29b      	uxth	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	4413      	add	r3, r2
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	011a      	lsls	r2, r3, #4
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	4413      	add	r3, r2
 800482a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800482e:	623b      	str	r3, [r7, #32]
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	2200      	movs	r2, #0
 8004834:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	4619      	mov	r1, r3
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f005 fff2 	bl	800a826 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 82fc 	beq.w	8004e46 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	461a      	mov	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	b29b      	uxth	r3, r3
 8004860:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004868:	82fb      	strh	r3, [r7, #22]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	441a      	add	r2, r3
 8004878:	8afb      	ldrh	r3, [r7, #22]
 800487a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800487e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004882:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800488a:	b29b      	uxth	r3, r3
 800488c:	8013      	strh	r3, [r2, #0]
 800488e:	e2da      	b.n	8004e46 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004890:	88fb      	ldrh	r3, [r7, #6]
 8004892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d021      	beq.n	80048de <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	441a      	add	r2, r3
 80048c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80048ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048da:	b29b      	uxth	r3, r3
 80048dc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	f040 82ae 	bne.w	8004e46 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048f2:	441a      	add	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	69da      	ldr	r2, [r3, #28]
 80048fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004900:	441a      	add	r2, r3
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	6a1a      	ldr	r2, [r3, #32]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	429a      	cmp	r2, r3
 8004910:	d30b      	bcc.n	800492a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	6a1a      	ldr	r2, [r3, #32]
 800491e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004922:	1ad2      	subs	r2, r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	621a      	str	r2, [r3, #32]
 8004928:	e017      	b.n	800495a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d108      	bne.n	8004944 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004932:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004936:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004942:	e00a      	b.n	800495a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2200      	movs	r2, #0
 8004958:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	785b      	ldrb	r3, [r3, #1]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d165      	bne.n	8004a2e <HAL_PCD_EP_DB_Transmit+0x382>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004970:	b29b      	uxth	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004976:	4413      	add	r3, r2
 8004978:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	011a      	lsls	r2, r3, #4
 8004980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004982:	4413      	add	r3, r2
 8004984:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004988:	63bb      	str	r3, [r7, #56]	@ 0x38
 800498a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004994:	b29a      	uxth	r2, r3
 8004996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004998:	801a      	strh	r2, [r3, #0]
 800499a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800499e:	2b3e      	cmp	r3, #62	@ 0x3e
 80049a0:	d91d      	bls.n	80049de <HAL_PCD_EP_DB_Transmit+0x332>
 80049a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049ae:	f003 031f 	and.w	r3, r3, #31
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d102      	bne.n	80049bc <HAL_PCD_EP_DB_Transmit+0x310>
 80049b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049b8:	3b01      	subs	r3, #1
 80049ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	029b      	lsls	r3, r3, #10
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	4313      	orrs	r3, r2
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049da:	801a      	strh	r2, [r3, #0]
 80049dc:	e044      	b.n	8004a68 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80049de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <HAL_PCD_EP_DB_Transmit+0x350>
 80049e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f8:	801a      	strh	r2, [r3, #0]
 80049fa:	e035      	b.n	8004a68 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80049fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a00:	085b      	lsrs	r3, r3, #1
 8004a02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004a10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a12:	3301      	adds	r3, #1
 8004a14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	029b      	lsls	r3, r3, #10
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	4313      	orrs	r3, r2
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2a:	801a      	strh	r2, [r3, #0]
 8004a2c:	e01c      	b.n	8004a68 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	785b      	ldrb	r3, [r3, #1]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d118      	bne.n	8004a68 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	461a      	mov	r2, r3
 8004a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a4a:	4413      	add	r3, r2
 8004a4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	011a      	lsls	r2, r3, #4
 8004a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a56:	4413      	add	r3, r2
 8004a58:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a66:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	6959      	ldr	r1, [r3, #20]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	891a      	ldrh	r2, [r3, #8]
 8004a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	f004 f88e 	bl	8008b9a <USB_WritePMA>
 8004a7e:	e1e2      	b.n	8004e46 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	4413      	add	r3, r2
 8004a94:	3306      	adds	r3, #6
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aa8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	699a      	ldr	r2, [r3, #24]
 8004ab0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d307      	bcc.n	8004ac8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	699a      	ldr	r2, [r3, #24]
 8004abc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ac0:	1ad2      	subs	r2, r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	619a      	str	r2, [r3, #24]
 8004ac6:	e002      	b.n	8004ace <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2200      	movs	r2, #0
 8004acc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f040 80c0 	bne.w	8004c58 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	785b      	ldrb	r3, [r3, #1]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d126      	bne.n	8004b2e <HAL_PCD_EP_DB_Transmit+0x482>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	461a      	mov	r2, r3
 8004af2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004af4:	4413      	add	r3, r2
 8004af6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	011a      	lsls	r2, r3, #4
 8004afe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b00:	4413      	add	r3, r2
 8004b02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b16:	801a      	strh	r2, [r3, #0]
 8004b18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b2a:	801a      	strh	r2, [r3, #0]
 8004b2c:	e01a      	b.n	8004b64 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	785b      	ldrb	r3, [r3, #1]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d116      	bne.n	8004b64 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b4a:	4413      	add	r3, r2
 8004b4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	011a      	lsls	r2, r3, #4
 8004b54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b56:	4413      	add	r3, r2
 8004b58:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b60:	2200      	movs	r2, #0
 8004b62:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	785b      	ldrb	r3, [r3, #1]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d12b      	bne.n	8004bca <HAL_PCD_EP_DB_Transmit+0x51e>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b86:	4413      	add	r3, r2
 8004b88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	011a      	lsls	r2, r3, #4
 8004b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b92:	4413      	add	r3, r2
 8004b94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004b98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bae:	801a      	strh	r2, [r3, #0]
 8004bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bc6:	801a      	strh	r2, [r3, #0]
 8004bc8:	e017      	b.n	8004bfa <HAL_PCD_EP_DB_Transmit+0x54e>
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	785b      	ldrb	r3, [r3, #1]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d113      	bne.n	8004bfa <HAL_PCD_EP_DB_Transmit+0x54e>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004be0:	4413      	add	r3, r2
 8004be2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	011a      	lsls	r2, r3, #4
 8004bea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bec:	4413      	add	r3, r2
 8004bee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004bf2:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bf4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f005 fe10 	bl	800a826 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c06:	88fb      	ldrh	r3, [r7, #6]
 8004c08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f040 811a 	bne.w	8004e46 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c2c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	441a      	add	r2, r3
 8004c3e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004c42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	8013      	strh	r3, [r2, #0]
 8004c56:	e0f6      	b.n	8004e46 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c58:	88fb      	ldrh	r3, [r7, #6]
 8004c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d121      	bne.n	8004ca6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c7c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	461a      	mov	r2, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	441a      	add	r2, r3
 8004c8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	f040 80ca 	bne.w	8004e46 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	695a      	ldr	r2, [r3, #20]
 8004cb6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cba:	441a      	add	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	69da      	ldr	r2, [r3, #28]
 8004cc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cc8:	441a      	add	r2, r3
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	6a1a      	ldr	r2, [r3, #32]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d30b      	bcc.n	8004cf2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	6a1a      	ldr	r2, [r3, #32]
 8004ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cea:	1ad2      	subs	r2, r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	621a      	str	r2, [r3, #32]
 8004cf0:	e017      	b.n	8004d22 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d108      	bne.n	8004d0c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004cfa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004d0a:	e00a      	b.n	8004d22 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2200      	movs	r2, #0
 8004d18:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	785b      	ldrb	r3, [r3, #1]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d165      	bne.n	8004dfc <HAL_PCD_EP_DB_Transmit+0x750>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d44:	4413      	add	r3, r2
 8004d46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	011a      	lsls	r2, r3, #4
 8004d4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d50:	4413      	add	r3, r2
 8004d52:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d66:	801a      	strh	r2, [r3, #0]
 8004d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d6e:	d91d      	bls.n	8004dac <HAL_PCD_EP_DB_Transmit+0x700>
 8004d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d102      	bne.n	8004d8a <HAL_PCD_EP_DB_Transmit+0x6de>
 8004d84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d86:	3b01      	subs	r3, #1
 8004d88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	029b      	lsls	r3, r3, #10
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004da8:	801a      	strh	r2, [r3, #0]
 8004daa:	e041      	b.n	8004e30 <HAL_PCD_EP_DB_Transmit+0x784>
 8004dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <HAL_PCD_EP_DB_Transmit+0x71e>
 8004db4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dc6:	801a      	strh	r2, [r3, #0]
 8004dc8:	e032      	b.n	8004e30 <HAL_PCD_EP_DB_Transmit+0x784>
 8004dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dce:	085b      	lsrs	r3, r3, #1
 8004dd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <HAL_PCD_EP_DB_Transmit+0x738>
 8004dde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004de0:	3301      	adds	r3, #1
 8004de2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004de4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	029b      	lsls	r3, r3, #10
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	4313      	orrs	r3, r2
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004df8:	801a      	strh	r2, [r3, #0]
 8004dfa:	e019      	b.n	8004e30 <HAL_PCD_EP_DB_Transmit+0x784>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	785b      	ldrb	r3, [r3, #1]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d115      	bne.n	8004e30 <HAL_PCD_EP_DB_Transmit+0x784>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e12:	4413      	add	r3, r2
 8004e14:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	011a      	lsls	r2, r3, #4
 8004e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e1e:	4413      	add	r3, r2
 8004e20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e24:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e2e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	6959      	ldr	r1, [r3, #20]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	895a      	ldrh	r2, [r3, #10]
 8004e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	f003 feaa 	bl	8008b9a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e60:	82bb      	strh	r3, [r7, #20]
 8004e62:	8abb      	ldrh	r3, [r7, #20]
 8004e64:	f083 0310 	eor.w	r3, r3, #16
 8004e68:	82bb      	strh	r3, [r7, #20]
 8004e6a:	8abb      	ldrh	r3, [r7, #20]
 8004e6c:	f083 0320 	eor.w	r3, r3, #32
 8004e70:	82bb      	strh	r3, [r7, #20]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	441a      	add	r2, r3
 8004e80:	8abb      	ldrh	r3, [r7, #20]
 8004e82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3790      	adds	r7, #144	@ 0x90
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	607b      	str	r3, [r7, #4]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	817b      	strh	r3, [r7, #10]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004eb2:	897b      	ldrh	r3, [r7, #10]
 8004eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00b      	beq.n	8004ed6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ebe:	897b      	ldrh	r3, [r7, #10]
 8004ec0:	f003 0207 	and.w	r2, r3, #7
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	3310      	adds	r3, #16
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	e009      	b.n	8004eea <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ed6:	897a      	ldrh	r2, [r7, #10]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004eea:	893b      	ldrh	r3, [r7, #8]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d107      	bne.n	8004f00 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	80da      	strh	r2, [r3, #6]
 8004efe:	e00b      	b.n	8004f18 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2201      	movs	r2, #1
 8004f04:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	0c1b      	lsrs	r3, r3, #16
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr

08004f24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e272      	b.n	800541c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 8087 	beq.w	8005052 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f44:	4b92      	ldr	r3, [pc, #584]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f003 030c 	and.w	r3, r3, #12
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d00c      	beq.n	8004f6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f50:	4b8f      	ldr	r3, [pc, #572]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f003 030c 	and.w	r3, r3, #12
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d112      	bne.n	8004f82 <HAL_RCC_OscConfig+0x5e>
 8004f5c:	4b8c      	ldr	r3, [pc, #560]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f68:	d10b      	bne.n	8004f82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f6a:	4b89      	ldr	r3, [pc, #548]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d06c      	beq.n	8005050 <HAL_RCC_OscConfig+0x12c>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d168      	bne.n	8005050 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e24c      	b.n	800541c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f8a:	d106      	bne.n	8004f9a <HAL_RCC_OscConfig+0x76>
 8004f8c:	4b80      	ldr	r3, [pc, #512]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a7f      	ldr	r2, [pc, #508]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8004f92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	e02e      	b.n	8004ff8 <HAL_RCC_OscConfig+0xd4>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10c      	bne.n	8004fbc <HAL_RCC_OscConfig+0x98>
 8004fa2:	4b7b      	ldr	r3, [pc, #492]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a7a      	ldr	r2, [pc, #488]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8004fa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	4b78      	ldr	r3, [pc, #480]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a77      	ldr	r2, [pc, #476]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8004fb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	e01d      	b.n	8004ff8 <HAL_RCC_OscConfig+0xd4>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fc4:	d10c      	bne.n	8004fe0 <HAL_RCC_OscConfig+0xbc>
 8004fc6:	4b72      	ldr	r3, [pc, #456]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a71      	ldr	r2, [pc, #452]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8004fcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	4b6f      	ldr	r3, [pc, #444]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a6e      	ldr	r2, [pc, #440]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8004fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	e00b      	b.n	8004ff8 <HAL_RCC_OscConfig+0xd4>
 8004fe0:	4b6b      	ldr	r3, [pc, #428]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a6a      	ldr	r2, [pc, #424]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8004fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	4b68      	ldr	r3, [pc, #416]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a67      	ldr	r2, [pc, #412]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8004ff2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ff6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d013      	beq.n	8005028 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005000:	f7fd fee4 	bl	8002dcc <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005008:	f7fd fee0 	bl	8002dcc <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b64      	cmp	r3, #100	@ 0x64
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e200      	b.n	800541c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800501a:	4b5d      	ldr	r3, [pc, #372]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCC_OscConfig+0xe4>
 8005026:	e014      	b.n	8005052 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005028:	f7fd fed0 	bl	8002dcc <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005030:	f7fd fecc 	bl	8002dcc <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b64      	cmp	r3, #100	@ 0x64
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e1ec      	b.n	800541c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005042:	4b53      	ldr	r3, [pc, #332]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1f0      	bne.n	8005030 <HAL_RCC_OscConfig+0x10c>
 800504e:	e000      	b.n	8005052 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d063      	beq.n	8005126 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800505e:	4b4c      	ldr	r3, [pc, #304]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f003 030c 	and.w	r3, r3, #12
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00b      	beq.n	8005082 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800506a:	4b49      	ldr	r3, [pc, #292]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f003 030c 	and.w	r3, r3, #12
 8005072:	2b08      	cmp	r3, #8
 8005074:	d11c      	bne.n	80050b0 <HAL_RCC_OscConfig+0x18c>
 8005076:	4b46      	ldr	r3, [pc, #280]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d116      	bne.n	80050b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005082:	4b43      	ldr	r3, [pc, #268]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <HAL_RCC_OscConfig+0x176>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d001      	beq.n	800509a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e1c0      	b.n	800541c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800509a:	4b3d      	ldr	r3, [pc, #244]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	4939      	ldr	r1, [pc, #228]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ae:	e03a      	b.n	8005126 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d020      	beq.n	80050fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050b8:	4b36      	ldr	r3, [pc, #216]	@ (8005194 <HAL_RCC_OscConfig+0x270>)
 80050ba:	2201      	movs	r2, #1
 80050bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050be:	f7fd fe85 	bl	8002dcc <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050c6:	f7fd fe81 	bl	8002dcc <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e1a1      	b.n	800541c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d8:	4b2d      	ldr	r3, [pc, #180]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0f0      	beq.n	80050c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e4:	4b2a      	ldr	r3, [pc, #168]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	4927      	ldr	r1, [pc, #156]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	600b      	str	r3, [r1, #0]
 80050f8:	e015      	b.n	8005126 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050fa:	4b26      	ldr	r3, [pc, #152]	@ (8005194 <HAL_RCC_OscConfig+0x270>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005100:	f7fd fe64 	bl	8002dcc <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005108:	f7fd fe60 	bl	8002dcc <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e180      	b.n	800541c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800511a:	4b1d      	ldr	r3, [pc, #116]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1f0      	bne.n	8005108 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d03a      	beq.n	80051a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d019      	beq.n	800516e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800513a:	4b17      	ldr	r3, [pc, #92]	@ (8005198 <HAL_RCC_OscConfig+0x274>)
 800513c:	2201      	movs	r2, #1
 800513e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005140:	f7fd fe44 	bl	8002dcc <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005148:	f7fd fe40 	bl	8002dcc <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e160      	b.n	800541c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800515a:	4b0d      	ldr	r3, [pc, #52]	@ (8005190 <HAL_RCC_OscConfig+0x26c>)
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0f0      	beq.n	8005148 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005166:	2001      	movs	r0, #1
 8005168:	f000 face 	bl	8005708 <RCC_Delay>
 800516c:	e01c      	b.n	80051a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800516e:	4b0a      	ldr	r3, [pc, #40]	@ (8005198 <HAL_RCC_OscConfig+0x274>)
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005174:	f7fd fe2a 	bl	8002dcc <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800517a:	e00f      	b.n	800519c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800517c:	f7fd fe26 	bl	8002dcc <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d908      	bls.n	800519c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e146      	b.n	800541c <HAL_RCC_OscConfig+0x4f8>
 800518e:	bf00      	nop
 8005190:	40021000 	.word	0x40021000
 8005194:	42420000 	.word	0x42420000
 8005198:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800519c:	4b92      	ldr	r3, [pc, #584]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 800519e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e9      	bne.n	800517c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 80a6 	beq.w	8005302 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051b6:	2300      	movs	r3, #0
 80051b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ba:	4b8b      	ldr	r3, [pc, #556]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10d      	bne.n	80051e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051c6:	4b88      	ldr	r3, [pc, #544]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	4a87      	ldr	r2, [pc, #540]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 80051cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051d0:	61d3      	str	r3, [r2, #28]
 80051d2:	4b85      	ldr	r3, [pc, #532]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051da:	60bb      	str	r3, [r7, #8]
 80051dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051de:	2301      	movs	r3, #1
 80051e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e2:	4b82      	ldr	r3, [pc, #520]	@ (80053ec <HAL_RCC_OscConfig+0x4c8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d118      	bne.n	8005220 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ee:	4b7f      	ldr	r3, [pc, #508]	@ (80053ec <HAL_RCC_OscConfig+0x4c8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a7e      	ldr	r2, [pc, #504]	@ (80053ec <HAL_RCC_OscConfig+0x4c8>)
 80051f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051fa:	f7fd fde7 	bl	8002dcc <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005202:	f7fd fde3 	bl	8002dcc <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b64      	cmp	r3, #100	@ 0x64
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e103      	b.n	800541c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005214:	4b75      	ldr	r3, [pc, #468]	@ (80053ec <HAL_RCC_OscConfig+0x4c8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0f0      	beq.n	8005202 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d106      	bne.n	8005236 <HAL_RCC_OscConfig+0x312>
 8005228:	4b6f      	ldr	r3, [pc, #444]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	4a6e      	ldr	r2, [pc, #440]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 800522e:	f043 0301 	orr.w	r3, r3, #1
 8005232:	6213      	str	r3, [r2, #32]
 8005234:	e02d      	b.n	8005292 <HAL_RCC_OscConfig+0x36e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10c      	bne.n	8005258 <HAL_RCC_OscConfig+0x334>
 800523e:	4b6a      	ldr	r3, [pc, #424]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	4a69      	ldr	r2, [pc, #420]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	6213      	str	r3, [r2, #32]
 800524a:	4b67      	ldr	r3, [pc, #412]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	4a66      	ldr	r2, [pc, #408]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 8005250:	f023 0304 	bic.w	r3, r3, #4
 8005254:	6213      	str	r3, [r2, #32]
 8005256:	e01c      	b.n	8005292 <HAL_RCC_OscConfig+0x36e>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	2b05      	cmp	r3, #5
 800525e:	d10c      	bne.n	800527a <HAL_RCC_OscConfig+0x356>
 8005260:	4b61      	ldr	r3, [pc, #388]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	4a60      	ldr	r2, [pc, #384]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 8005266:	f043 0304 	orr.w	r3, r3, #4
 800526a:	6213      	str	r3, [r2, #32]
 800526c:	4b5e      	ldr	r3, [pc, #376]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	4a5d      	ldr	r2, [pc, #372]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 8005272:	f043 0301 	orr.w	r3, r3, #1
 8005276:	6213      	str	r3, [r2, #32]
 8005278:	e00b      	b.n	8005292 <HAL_RCC_OscConfig+0x36e>
 800527a:	4b5b      	ldr	r3, [pc, #364]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	4a5a      	ldr	r2, [pc, #360]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 8005280:	f023 0301 	bic.w	r3, r3, #1
 8005284:	6213      	str	r3, [r2, #32]
 8005286:	4b58      	ldr	r3, [pc, #352]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	4a57      	ldr	r2, [pc, #348]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 800528c:	f023 0304 	bic.w	r3, r3, #4
 8005290:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d015      	beq.n	80052c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800529a:	f7fd fd97 	bl	8002dcc <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a0:	e00a      	b.n	80052b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a2:	f7fd fd93 	bl	8002dcc <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e0b1      	b.n	800541c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b8:	4b4b      	ldr	r3, [pc, #300]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0ee      	beq.n	80052a2 <HAL_RCC_OscConfig+0x37e>
 80052c4:	e014      	b.n	80052f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c6:	f7fd fd81 	bl	8002dcc <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052cc:	e00a      	b.n	80052e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ce:	f7fd fd7d 	bl	8002dcc <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052dc:	4293      	cmp	r3, r2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e09b      	b.n	800541c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052e4:	4b40      	ldr	r3, [pc, #256]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1ee      	bne.n	80052ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d105      	bne.n	8005302 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052f6:	4b3c      	ldr	r3, [pc, #240]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	4a3b      	ldr	r2, [pc, #236]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 80052fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005300:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 8087 	beq.w	800541a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800530c:	4b36      	ldr	r3, [pc, #216]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f003 030c 	and.w	r3, r3, #12
 8005314:	2b08      	cmp	r3, #8
 8005316:	d061      	beq.n	80053dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	2b02      	cmp	r3, #2
 800531e:	d146      	bne.n	80053ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005320:	4b33      	ldr	r3, [pc, #204]	@ (80053f0 <HAL_RCC_OscConfig+0x4cc>)
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005326:	f7fd fd51 	bl	8002dcc <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800532e:	f7fd fd4d 	bl	8002dcc <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e06d      	b.n	800541c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005340:	4b29      	ldr	r3, [pc, #164]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f0      	bne.n	800532e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005354:	d108      	bne.n	8005368 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005356:	4b24      	ldr	r3, [pc, #144]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	4921      	ldr	r1, [pc, #132]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 8005364:	4313      	orrs	r3, r2
 8005366:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005368:	4b1f      	ldr	r3, [pc, #124]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a19      	ldr	r1, [r3, #32]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005378:	430b      	orrs	r3, r1
 800537a:	491b      	ldr	r1, [pc, #108]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 800537c:	4313      	orrs	r3, r2
 800537e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005380:	4b1b      	ldr	r3, [pc, #108]	@ (80053f0 <HAL_RCC_OscConfig+0x4cc>)
 8005382:	2201      	movs	r2, #1
 8005384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005386:	f7fd fd21 	bl	8002dcc <HAL_GetTick>
 800538a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800538c:	e008      	b.n	80053a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800538e:	f7fd fd1d 	bl	8002dcc <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e03d      	b.n	800541c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053a0:	4b11      	ldr	r3, [pc, #68]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0f0      	beq.n	800538e <HAL_RCC_OscConfig+0x46a>
 80053ac:	e035      	b.n	800541a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ae:	4b10      	ldr	r3, [pc, #64]	@ (80053f0 <HAL_RCC_OscConfig+0x4cc>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b4:	f7fd fd0a 	bl	8002dcc <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053bc:	f7fd fd06 	bl	8002dcc <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e026      	b.n	800541c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053ce:	4b06      	ldr	r3, [pc, #24]	@ (80053e8 <HAL_RCC_OscConfig+0x4c4>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x498>
 80053da:	e01e      	b.n	800541a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d107      	bne.n	80053f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e019      	b.n	800541c <HAL_RCC_OscConfig+0x4f8>
 80053e8:	40021000 	.word	0x40021000
 80053ec:	40007000 	.word	0x40007000
 80053f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005424 <HAL_RCC_OscConfig+0x500>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	429a      	cmp	r2, r3
 8005406:	d106      	bne.n	8005416 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005412:	429a      	cmp	r2, r3
 8005414:	d001      	beq.n	800541a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40021000 	.word	0x40021000

08005428 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e0d0      	b.n	80055de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800543c:	4b6a      	ldr	r3, [pc, #424]	@ (80055e8 <HAL_RCC_ClockConfig+0x1c0>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d910      	bls.n	800546c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544a:	4b67      	ldr	r3, [pc, #412]	@ (80055e8 <HAL_RCC_ClockConfig+0x1c0>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f023 0207 	bic.w	r2, r3, #7
 8005452:	4965      	ldr	r1, [pc, #404]	@ (80055e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	4313      	orrs	r3, r2
 8005458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800545a:	4b63      	ldr	r3, [pc, #396]	@ (80055e8 <HAL_RCC_ClockConfig+0x1c0>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d001      	beq.n	800546c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e0b8      	b.n	80055de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d020      	beq.n	80054ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005484:	4b59      	ldr	r3, [pc, #356]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	4a58      	ldr	r2, [pc, #352]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 800548a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800548e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800549c:	4b53      	ldr	r3, [pc, #332]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	4a52      	ldr	r2, [pc, #328]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 80054a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80054a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a8:	4b50      	ldr	r3, [pc, #320]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	494d      	ldr	r1, [pc, #308]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d040      	beq.n	8005548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d107      	bne.n	80054de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ce:	4b47      	ldr	r3, [pc, #284]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d115      	bne.n	8005506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e07f      	b.n	80055de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d107      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e6:	4b41      	ldr	r3, [pc, #260]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e073      	b.n	80055de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f6:	4b3d      	ldr	r3, [pc, #244]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e06b      	b.n	80055de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005506:	4b39      	ldr	r3, [pc, #228]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f023 0203 	bic.w	r2, r3, #3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	4936      	ldr	r1, [pc, #216]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 8005514:	4313      	orrs	r3, r2
 8005516:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005518:	f7fd fc58 	bl	8002dcc <HAL_GetTick>
 800551c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800551e:	e00a      	b.n	8005536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005520:	f7fd fc54 	bl	8002dcc <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e053      	b.n	80055de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005536:	4b2d      	ldr	r3, [pc, #180]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f003 020c 	and.w	r2, r3, #12
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	429a      	cmp	r2, r3
 8005546:	d1eb      	bne.n	8005520 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005548:	4b27      	ldr	r3, [pc, #156]	@ (80055e8 <HAL_RCC_ClockConfig+0x1c0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d210      	bcs.n	8005578 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b24      	ldr	r3, [pc, #144]	@ (80055e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f023 0207 	bic.w	r2, r3, #7
 800555e:	4922      	ldr	r1, [pc, #136]	@ (80055e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	4313      	orrs	r3, r2
 8005564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005566:	4b20      	ldr	r3, [pc, #128]	@ (80055e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d001      	beq.n	8005578 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e032      	b.n	80055de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d008      	beq.n	8005596 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005584:	4b19      	ldr	r3, [pc, #100]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	4916      	ldr	r1, [pc, #88]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 8005592:	4313      	orrs	r3, r2
 8005594:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d009      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055a2:	4b12      	ldr	r3, [pc, #72]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	490e      	ldr	r1, [pc, #56]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055b6:	f000 f821 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 80055ba:	4602      	mov	r2, r0
 80055bc:	4b0b      	ldr	r3, [pc, #44]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	091b      	lsrs	r3, r3, #4
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	490a      	ldr	r1, [pc, #40]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 80055c8:	5ccb      	ldrb	r3, [r1, r3]
 80055ca:	fa22 f303 	lsr.w	r3, r2, r3
 80055ce:	4a09      	ldr	r2, [pc, #36]	@ (80055f4 <HAL_RCC_ClockConfig+0x1cc>)
 80055d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055d2:	4b09      	ldr	r3, [pc, #36]	@ (80055f8 <HAL_RCC_ClockConfig+0x1d0>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fd fbb6 	bl	8002d48 <HAL_InitTick>

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	40022000 	.word	0x40022000
 80055ec:	40021000 	.word	0x40021000
 80055f0:	0800b774 	.word	0x0800b774
 80055f4:	20000018 	.word	0x20000018
 80055f8:	2000001c 	.word	0x2000001c

080055fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	2300      	movs	r3, #0
 8005608:	60bb      	str	r3, [r7, #8]
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	2300      	movs	r3, #0
 8005610:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005616:	4b1e      	ldr	r3, [pc, #120]	@ (8005690 <HAL_RCC_GetSysClockFreq+0x94>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f003 030c 	and.w	r3, r3, #12
 8005622:	2b04      	cmp	r3, #4
 8005624:	d002      	beq.n	800562c <HAL_RCC_GetSysClockFreq+0x30>
 8005626:	2b08      	cmp	r3, #8
 8005628:	d003      	beq.n	8005632 <HAL_RCC_GetSysClockFreq+0x36>
 800562a:	e027      	b.n	800567c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800562c:	4b19      	ldr	r3, [pc, #100]	@ (8005694 <HAL_RCC_GetSysClockFreq+0x98>)
 800562e:	613b      	str	r3, [r7, #16]
      break;
 8005630:	e027      	b.n	8005682 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	0c9b      	lsrs	r3, r3, #18
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	4a17      	ldr	r2, [pc, #92]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x9c>)
 800563c:	5cd3      	ldrb	r3, [r2, r3]
 800563e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d010      	beq.n	800566c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800564a:	4b11      	ldr	r3, [pc, #68]	@ (8005690 <HAL_RCC_GetSysClockFreq+0x94>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	0c5b      	lsrs	r3, r3, #17
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	4a11      	ldr	r2, [pc, #68]	@ (800569c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005656:	5cd3      	ldrb	r3, [r2, r3]
 8005658:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a0d      	ldr	r2, [pc, #52]	@ (8005694 <HAL_RCC_GetSysClockFreq+0x98>)
 800565e:	fb03 f202 	mul.w	r2, r3, r2
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	fbb2 f3f3 	udiv	r3, r2, r3
 8005668:	617b      	str	r3, [r7, #20]
 800566a:	e004      	b.n	8005676 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a0c      	ldr	r2, [pc, #48]	@ (80056a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005670:	fb02 f303 	mul.w	r3, r2, r3
 8005674:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	613b      	str	r3, [r7, #16]
      break;
 800567a:	e002      	b.n	8005682 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800567c:	4b05      	ldr	r3, [pc, #20]	@ (8005694 <HAL_RCC_GetSysClockFreq+0x98>)
 800567e:	613b      	str	r3, [r7, #16]
      break;
 8005680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005682:	693b      	ldr	r3, [r7, #16]
}
 8005684:	4618      	mov	r0, r3
 8005686:	371c      	adds	r7, #28
 8005688:	46bd      	mov	sp, r7
 800568a:	bc80      	pop	{r7}
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40021000 	.word	0x40021000
 8005694:	007a1200 	.word	0x007a1200
 8005698:	0800b78c 	.word	0x0800b78c
 800569c:	0800b79c 	.word	0x0800b79c
 80056a0:	003d0900 	.word	0x003d0900

080056a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056a8:	4b02      	ldr	r3, [pc, #8]	@ (80056b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80056aa:	681b      	ldr	r3, [r3, #0]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr
 80056b4:	20000018 	.word	0x20000018

080056b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056bc:	f7ff fff2 	bl	80056a4 <HAL_RCC_GetHCLKFreq>
 80056c0:	4602      	mov	r2, r0
 80056c2:	4b05      	ldr	r3, [pc, #20]	@ (80056d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	0a1b      	lsrs	r3, r3, #8
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	4903      	ldr	r1, [pc, #12]	@ (80056dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80056ce:	5ccb      	ldrb	r3, [r1, r3]
 80056d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40021000 	.word	0x40021000
 80056dc:	0800b784 	.word	0x0800b784

080056e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056e4:	f7ff ffde 	bl	80056a4 <HAL_RCC_GetHCLKFreq>
 80056e8:	4602      	mov	r2, r0
 80056ea:	4b05      	ldr	r3, [pc, #20]	@ (8005700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	0adb      	lsrs	r3, r3, #11
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	4903      	ldr	r1, [pc, #12]	@ (8005704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056f6:	5ccb      	ldrb	r3, [r1, r3]
 80056f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40021000 	.word	0x40021000
 8005704:	0800b784 	.word	0x0800b784

08005708 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005710:	4b0a      	ldr	r3, [pc, #40]	@ (800573c <RCC_Delay+0x34>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a0a      	ldr	r2, [pc, #40]	@ (8005740 <RCC_Delay+0x38>)
 8005716:	fba2 2303 	umull	r2, r3, r2, r3
 800571a:	0a5b      	lsrs	r3, r3, #9
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	fb02 f303 	mul.w	r3, r2, r3
 8005722:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005724:	bf00      	nop
  }
  while (Delay --);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	1e5a      	subs	r2, r3, #1
 800572a:	60fa      	str	r2, [r7, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f9      	bne.n	8005724 <RCC_Delay+0x1c>
}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	bc80      	pop	{r7}
 800573a:	4770      	bx	lr
 800573c:	20000018 	.word	0x20000018
 8005740:	10624dd3 	.word	0x10624dd3

08005744 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	613b      	str	r3, [r7, #16]
 8005750:	2300      	movs	r3, #0
 8005752:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	d07d      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005760:	2300      	movs	r3, #0
 8005762:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005764:	4b4f      	ldr	r3, [pc, #316]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10d      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005770:	4b4c      	ldr	r3, [pc, #304]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	4a4b      	ldr	r2, [pc, #300]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800577a:	61d3      	str	r3, [r2, #28]
 800577c:	4b49      	ldr	r3, [pc, #292]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005788:	2301      	movs	r3, #1
 800578a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800578c:	4b46      	ldr	r3, [pc, #280]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005794:	2b00      	cmp	r3, #0
 8005796:	d118      	bne.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005798:	4b43      	ldr	r3, [pc, #268]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a42      	ldr	r2, [pc, #264]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800579e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057a4:	f7fd fb12 	bl	8002dcc <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057aa:	e008      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ac:	f7fd fb0e 	bl	8002dcc <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b64      	cmp	r3, #100	@ 0x64
 80057b8:	d901      	bls.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e06d      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057be:	4b3a      	ldr	r3, [pc, #232]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0f0      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057ca:	4b36      	ldr	r3, [pc, #216]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d02e      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d027      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057e8:	4b2e      	ldr	r3, [pc, #184]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057f2:	4b2e      	ldr	r3, [pc, #184]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057f4:	2201      	movs	r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057f8:	4b2c      	ldr	r3, [pc, #176]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80057fe:	4a29      	ldr	r2, [pc, #164]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d014      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580e:	f7fd fadd 	bl	8002dcc <HAL_GetTick>
 8005812:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005814:	e00a      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005816:	f7fd fad9 	bl	8002dcc <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005824:	4293      	cmp	r3, r2
 8005826:	d901      	bls.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e036      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800582c:	4b1d      	ldr	r3, [pc, #116]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0ee      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005838:	4b1a      	ldr	r3, [pc, #104]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	4917      	ldr	r1, [pc, #92]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005846:	4313      	orrs	r3, r2
 8005848:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800584a:	7dfb      	ldrb	r3, [r7, #23]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d105      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005850:	4b14      	ldr	r3, [pc, #80]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	4a13      	ldr	r2, [pc, #76]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005856:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800585a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d008      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005868:	4b0e      	ldr	r3, [pc, #56]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	490b      	ldr	r1, [pc, #44]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005876:	4313      	orrs	r3, r2
 8005878:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0310 	and.w	r3, r3, #16
 8005882:	2b00      	cmp	r3, #0
 8005884:	d008      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005886:	4b07      	ldr	r3, [pc, #28]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	4904      	ldr	r1, [pc, #16]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005894:	4313      	orrs	r3, r2
 8005896:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	40021000 	.word	0x40021000
 80058a8:	40007000 	.word	0x40007000
 80058ac:	42420440 	.word	0x42420440

080058b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e076      	b.n	80059b0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d108      	bne.n	80058dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058d2:	d009      	beq.n	80058e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	61da      	str	r2, [r3, #28]
 80058da:	e005      	b.n	80058e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d106      	bne.n	8005908 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7fd f8d4 	bl	8002ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800591e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	431a      	orrs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800596c:	ea42 0103 	orr.w	r1, r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005974:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	0c1a      	lsrs	r2, r3, #16
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f002 0204 	and.w	r2, r2, #4
 800598e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69da      	ldr	r2, [r3, #28]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800599e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059c8:	f7fd fa00 	bl	8002dcc <HAL_GetTick>
 80059cc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80059ce:	88fb      	ldrh	r3, [r7, #6]
 80059d0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d001      	beq.n	80059e2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80059de:	2302      	movs	r3, #2
 80059e0:	e12a      	b.n	8005c38 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <HAL_SPI_Transmit+0x36>
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e122      	b.n	8005c38 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_SPI_Transmit+0x48>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e11b      	b.n	8005c38 <HAL_SPI_Transmit+0x280>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	88fa      	ldrh	r2, [r7, #6]
 8005a20:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	88fa      	ldrh	r2, [r7, #6]
 8005a26:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a4e:	d10f      	bne.n	8005a70 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a7a:	2b40      	cmp	r3, #64	@ 0x40
 8005a7c:	d007      	beq.n	8005a8e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a96:	d152      	bne.n	8005b3e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <HAL_SPI_Transmit+0xee>
 8005aa0:	8b7b      	ldrh	r3, [r7, #26]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d145      	bne.n	8005b32 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aaa:	881a      	ldrh	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab6:	1c9a      	adds	r2, r3, #2
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005aca:	e032      	b.n	8005b32 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d112      	bne.n	8005b00 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ade:	881a      	ldrh	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aea:	1c9a      	adds	r2, r3, #2
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005afe:	e018      	b.n	8005b32 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b00:	f7fd f964 	bl	8002dcc <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d803      	bhi.n	8005b18 <HAL_SPI_Transmit+0x160>
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b16:	d102      	bne.n	8005b1e <HAL_SPI_Transmit+0x166>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e082      	b.n	8005c38 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1c7      	bne.n	8005acc <HAL_SPI_Transmit+0x114>
 8005b3c:	e053      	b.n	8005be6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <HAL_SPI_Transmit+0x194>
 8005b46:	8b7b      	ldrh	r3, [r7, #26]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d147      	bne.n	8005bdc <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	330c      	adds	r3, #12
 8005b56:	7812      	ldrb	r2, [r2, #0]
 8005b58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b72:	e033      	b.n	8005bdc <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d113      	bne.n	8005baa <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	330c      	adds	r3, #12
 8005b8c:	7812      	ldrb	r2, [r2, #0]
 8005b8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ba8:	e018      	b.n	8005bdc <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005baa:	f7fd f90f 	bl	8002dcc <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d803      	bhi.n	8005bc2 <HAL_SPI_Transmit+0x20a>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d102      	bne.n	8005bc8 <HAL_SPI_Transmit+0x210>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d109      	bne.n	8005bdc <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e02d      	b.n	8005c38 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1c6      	bne.n	8005b74 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 fbc4 	bl	8006378 <SPI_EndRxTxTransaction>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10a      	bne.n	8005c1a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c04:	2300      	movs	r3, #0
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005c36:	2300      	movs	r3, #0
  }
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3720      	adds	r7, #32
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d001      	beq.n	8005c60 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e104      	b.n	8005e6a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c68:	d112      	bne.n	8005c90 <HAL_SPI_Receive+0x50>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10e      	bne.n	8005c90 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2204      	movs	r2, #4
 8005c76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c7a:	88fa      	ldrh	r2, [r7, #6]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	4613      	mov	r3, r2
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	68b9      	ldr	r1, [r7, #8]
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 f8f3 	bl	8005e72 <HAL_SPI_TransmitReceive>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	e0ec      	b.n	8005e6a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c90:	f7fd f89c 	bl	8002dcc <HAL_GetTick>
 8005c94:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <HAL_SPI_Receive+0x62>
 8005c9c:	88fb      	ldrh	r3, [r7, #6]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e0e1      	b.n	8005e6a <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_SPI_Receive+0x74>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e0da      	b.n	8005e6a <HAL_SPI_Receive+0x22a>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2204      	movs	r2, #4
 8005cc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	88fa      	ldrh	r2, [r7, #6]
 8005cd4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	88fa      	ldrh	r2, [r7, #6]
 8005cda:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d02:	d10f      	bne.n	8005d24 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d22:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d2e:	2b40      	cmp	r3, #64	@ 0x40
 8005d30:	d007      	beq.n	8005d42 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d40:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d170      	bne.n	8005e2c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d4a:	e035      	b.n	8005db8 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d115      	bne.n	8005d86 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f103 020c 	add.w	r2, r3, #12
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d66:	7812      	ldrb	r2, [r2, #0]
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d84:	e018      	b.n	8005db8 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d86:	f7fd f821 	bl	8002dcc <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d803      	bhi.n	8005d9e <HAL_SPI_Receive+0x15e>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9c:	d102      	bne.n	8005da4 <HAL_SPI_Receive+0x164>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d109      	bne.n	8005db8 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e058      	b.n	8005e6a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1c4      	bne.n	8005d4c <HAL_SPI_Receive+0x10c>
 8005dc2:	e038      	b.n	8005e36 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d113      	bne.n	8005dfa <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ddc:	b292      	uxth	r2, r2
 8005dde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de4:	1c9a      	adds	r2, r3, #2
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005df8:	e018      	b.n	8005e2c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dfa:	f7fc ffe7 	bl	8002dcc <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d803      	bhi.n	8005e12 <HAL_SPI_Receive+0x1d2>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e10:	d102      	bne.n	8005e18 <HAL_SPI_Receive+0x1d8>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d109      	bne.n	8005e2c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e01e      	b.n	8005e6a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1c6      	bne.n	8005dc4 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 fa4a 	bl	80062d4 <SPI_EndRxTransaction>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005e68:	2300      	movs	r3, #0
  }
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b08a      	sub	sp, #40	@ 0x28
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	60f8      	str	r0, [r7, #12]
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	607a      	str	r2, [r7, #4]
 8005e7e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e80:	2301      	movs	r3, #1
 8005e82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e84:	f7fc ffa2 	bl	8002dcc <HAL_GetTick>
 8005e88:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e90:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005e98:	887b      	ldrh	r3, [r7, #2]
 8005e9a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e9c:	7ffb      	ldrb	r3, [r7, #31]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d00c      	beq.n	8005ebc <HAL_SPI_TransmitReceive+0x4a>
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ea8:	d106      	bne.n	8005eb8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d102      	bne.n	8005eb8 <HAL_SPI_TransmitReceive+0x46>
 8005eb2:	7ffb      	ldrb	r3, [r7, #31]
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d001      	beq.n	8005ebc <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e17f      	b.n	80061bc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <HAL_SPI_TransmitReceive+0x5c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <HAL_SPI_TransmitReceive+0x5c>
 8005ec8:	887b      	ldrh	r3, [r7, #2]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e174      	b.n	80061bc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_SPI_TransmitReceive+0x6e>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e16d      	b.n	80061bc <HAL_SPI_TransmitReceive+0x34a>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d003      	beq.n	8005efc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2205      	movs	r2, #5
 8005ef8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	887a      	ldrh	r2, [r7, #2]
 8005f0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	887a      	ldrh	r2, [r7, #2]
 8005f12:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	887a      	ldrh	r2, [r7, #2]
 8005f1e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	887a      	ldrh	r2, [r7, #2]
 8005f24:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3c:	2b40      	cmp	r3, #64	@ 0x40
 8005f3e:	d007      	beq.n	8005f50 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f58:	d17e      	bne.n	8006058 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <HAL_SPI_TransmitReceive+0xf6>
 8005f62:	8afb      	ldrh	r3, [r7, #22]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d16c      	bne.n	8006042 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6c:	881a      	ldrh	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f78:	1c9a      	adds	r2, r3, #2
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	3b01      	subs	r3, #1
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f8c:	e059      	b.n	8006042 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d11b      	bne.n	8005fd4 <HAL_SPI_TransmitReceive+0x162>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d016      	beq.n	8005fd4 <HAL_SPI_TransmitReceive+0x162>
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d113      	bne.n	8005fd4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb0:	881a      	ldrh	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fbc:	1c9a      	adds	r2, r3, #2
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d119      	bne.n	8006016 <HAL_SPI_TransmitReceive+0x1a4>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d014      	beq.n	8006016 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff6:	b292      	uxth	r2, r2
 8005ff8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffe:	1c9a      	adds	r2, r3, #2
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006008:	b29b      	uxth	r3, r3
 800600a:	3b01      	subs	r3, #1
 800600c:	b29a      	uxth	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006012:	2301      	movs	r3, #1
 8006014:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006016:	f7fc fed9 	bl	8002dcc <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006022:	429a      	cmp	r2, r3
 8006024:	d80d      	bhi.n	8006042 <HAL_SPI_TransmitReceive+0x1d0>
 8006026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602c:	d009      	beq.n	8006042 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e0bc      	b.n	80061bc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1a0      	bne.n	8005f8e <HAL_SPI_TransmitReceive+0x11c>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d19b      	bne.n	8005f8e <HAL_SPI_TransmitReceive+0x11c>
 8006056:	e082      	b.n	800615e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <HAL_SPI_TransmitReceive+0x1f4>
 8006060:	8afb      	ldrh	r3, [r7, #22]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d171      	bne.n	800614a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	330c      	adds	r3, #12
 8006070:	7812      	ldrb	r2, [r2, #0]
 8006072:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006082:	b29b      	uxth	r3, r3
 8006084:	3b01      	subs	r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800608c:	e05d      	b.n	800614a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b02      	cmp	r3, #2
 800609a:	d11c      	bne.n	80060d6 <HAL_SPI_TransmitReceive+0x264>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d017      	beq.n	80060d6 <HAL_SPI_TransmitReceive+0x264>
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d114      	bne.n	80060d6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	330c      	adds	r3, #12
 80060b6:	7812      	ldrb	r2, [r2, #0]
 80060b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060be:	1c5a      	adds	r2, r3, #1
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	3b01      	subs	r3, #1
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d119      	bne.n	8006118 <HAL_SPI_TransmitReceive+0x2a6>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d014      	beq.n	8006118 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b01      	subs	r3, #1
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006114:	2301      	movs	r3, #1
 8006116:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006118:	f7fc fe58 	bl	8002dcc <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006124:	429a      	cmp	r2, r3
 8006126:	d803      	bhi.n	8006130 <HAL_SPI_TransmitReceive+0x2be>
 8006128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612e:	d102      	bne.n	8006136 <HAL_SPI_TransmitReceive+0x2c4>
 8006130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006132:	2b00      	cmp	r3, #0
 8006134:	d109      	bne.n	800614a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e038      	b.n	80061bc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800614e:	b29b      	uxth	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	d19c      	bne.n	800608e <HAL_SPI_TransmitReceive+0x21c>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006158:	b29b      	uxth	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d197      	bne.n	800608e <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800615e:	6a3a      	ldr	r2, [r7, #32]
 8006160:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 f908 	bl	8006378 <SPI_EndRxTxTransaction>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d008      	beq.n	8006180 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2220      	movs	r2, #32
 8006172:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e01d      	b.n	80061bc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10a      	bne.n	800619e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006188:	2300      	movs	r3, #0
 800618a:	613b      	str	r3, [r7, #16]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	613b      	str	r3, [r7, #16]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	613b      	str	r3, [r7, #16]
 800619c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80061ba:	2300      	movs	r3, #0
  }
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3728      	adds	r7, #40	@ 0x28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	603b      	str	r3, [r7, #0]
 80061d0:	4613      	mov	r3, r2
 80061d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061d4:	f7fc fdfa 	bl	8002dcc <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061dc:	1a9b      	subs	r3, r3, r2
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	4413      	add	r3, r2
 80061e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061e4:	f7fc fdf2 	bl	8002dcc <HAL_GetTick>
 80061e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061ea:	4b39      	ldr	r3, [pc, #228]	@ (80062d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	015b      	lsls	r3, r3, #5
 80061f0:	0d1b      	lsrs	r3, r3, #20
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	fb02 f303 	mul.w	r3, r2, r3
 80061f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061fa:	e054      	b.n	80062a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006202:	d050      	beq.n	80062a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006204:	f7fc fde2 	bl	8002dcc <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	429a      	cmp	r2, r3
 8006212:	d902      	bls.n	800621a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d13d      	bne.n	8006296 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006228:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006232:	d111      	bne.n	8006258 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800623c:	d004      	beq.n	8006248 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006246:	d107      	bne.n	8006258 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006256:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006260:	d10f      	bne.n	8006282 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006280:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e017      	b.n	80062c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4013      	ands	r3, r2
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	bf0c      	ite	eq
 80062b6:	2301      	moveq	r3, #1
 80062b8:	2300      	movne	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	461a      	mov	r2, r3
 80062be:	79fb      	ldrb	r3, [r7, #7]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d19b      	bne.n	80061fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3720      	adds	r7, #32
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000018 	.word	0x20000018

080062d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af02      	add	r7, sp, #8
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062e8:	d111      	bne.n	800630e <SPI_EndRxTransaction+0x3a>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062f2:	d004      	beq.n	80062fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062fc:	d107      	bne.n	800630e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800630c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006316:	d117      	bne.n	8006348 <SPI_EndRxTransaction+0x74>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006320:	d112      	bne.n	8006348 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2200      	movs	r2, #0
 800632a:	2101      	movs	r1, #1
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f7ff ff49 	bl	80061c4 <SPI_WaitFlagStateUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d01a      	beq.n	800636e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800633c:	f043 0220 	orr.w	r2, r3, #32
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e013      	b.n	8006370 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2200      	movs	r2, #0
 8006350:	2180      	movs	r1, #128	@ 0x80
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f7ff ff36 	bl	80061c4 <SPI_WaitFlagStateUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d007      	beq.n	800636e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006362:	f043 0220 	orr.w	r2, r3, #32
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e000      	b.n	8006370 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af02      	add	r7, sp, #8
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2201      	movs	r2, #1
 800638c:	2102      	movs	r1, #2
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f7ff ff18 	bl	80061c4 <SPI_WaitFlagStateUntilTimeout>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d007      	beq.n	80063aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800639e:	f043 0220 	orr.w	r2, r3, #32
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e013      	b.n	80063d2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2200      	movs	r2, #0
 80063b2:	2180      	movs	r1, #128	@ 0x80
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f7ff ff05 	bl	80061c4 <SPI_WaitFlagStateUntilTimeout>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d007      	beq.n	80063d0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c4:	f043 0220 	orr.w	r2, r3, #32
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e000      	b.n	80063d2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e042      	b.n	8006472 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d106      	bne.n	8006406 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f7fc fb9f 	bl	8002b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2224      	movs	r2, #36	@ 0x24
 800640a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800641c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f82c 	bl	800647c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	691a      	ldr	r2, [r3, #16]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006432:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006442:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006452:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2220      	movs	r2, #32
 8006466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80064b6:	f023 030c 	bic.w	r3, r3, #12
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6812      	ldr	r2, [r2, #0]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	430b      	orrs	r3, r1
 80064c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a2c      	ldr	r2, [pc, #176]	@ (8006590 <UART_SetConfig+0x114>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d103      	bne.n	80064ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80064e4:	f7ff f8fc 	bl	80056e0 <HAL_RCC_GetPCLK2Freq>
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	e002      	b.n	80064f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80064ec:	f7ff f8e4 	bl	80056b8 <HAL_RCC_GetPCLK1Freq>
 80064f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	4613      	mov	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	009a      	lsls	r2, r3, #2
 80064fc:	441a      	add	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	fbb2 f3f3 	udiv	r3, r2, r3
 8006508:	4a22      	ldr	r2, [pc, #136]	@ (8006594 <UART_SetConfig+0x118>)
 800650a:	fba2 2303 	umull	r2, r3, r2, r3
 800650e:	095b      	lsrs	r3, r3, #5
 8006510:	0119      	lsls	r1, r3, #4
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	009a      	lsls	r2, r3, #2
 800651c:	441a      	add	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	fbb2 f2f3 	udiv	r2, r2, r3
 8006528:	4b1a      	ldr	r3, [pc, #104]	@ (8006594 <UART_SetConfig+0x118>)
 800652a:	fba3 0302 	umull	r0, r3, r3, r2
 800652e:	095b      	lsrs	r3, r3, #5
 8006530:	2064      	movs	r0, #100	@ 0x64
 8006532:	fb00 f303 	mul.w	r3, r0, r3
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	011b      	lsls	r3, r3, #4
 800653a:	3332      	adds	r3, #50	@ 0x32
 800653c:	4a15      	ldr	r2, [pc, #84]	@ (8006594 <UART_SetConfig+0x118>)
 800653e:	fba2 2303 	umull	r2, r3, r2, r3
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006548:	4419      	add	r1, r3
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	4613      	mov	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	009a      	lsls	r2, r3, #2
 8006554:	441a      	add	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006560:	4b0c      	ldr	r3, [pc, #48]	@ (8006594 <UART_SetConfig+0x118>)
 8006562:	fba3 0302 	umull	r0, r3, r3, r2
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	2064      	movs	r0, #100	@ 0x64
 800656a:	fb00 f303 	mul.w	r3, r0, r3
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	3332      	adds	r3, #50	@ 0x32
 8006574:	4a07      	ldr	r2, [pc, #28]	@ (8006594 <UART_SetConfig+0x118>)
 8006576:	fba2 2303 	umull	r2, r3, r2, r3
 800657a:	095b      	lsrs	r3, r3, #5
 800657c:	f003 020f 	and.w	r2, r3, #15
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	440a      	add	r2, r1
 8006586:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006588:	bf00      	nop
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40013800 	.word	0x40013800
 8006594:	51eb851f 	.word	0x51eb851f

08006598 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	4638      	mov	r0, r7
 80065a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc80      	pop	{r7}
 80065b0:	4770      	bx	lr

080065b2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b085      	sub	sp, #20
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065c2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80065c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	bc80      	pop	{r7}
 80065dc:	4770      	bx	lr

080065de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80065de:	b480      	push	{r7}
 80065e0:	b085      	sub	sp, #20
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065e6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80065ea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	43db      	mvns	r3, r3
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	4013      	ands	r3, r2
 80065fe:	b29a      	uxth	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	bc80      	pop	{r7}
 8006610:	4770      	bx	lr

08006612 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	460b      	mov	r3, r1
 800661c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	bc80      	pop	{r7}
 8006628:	4770      	bx	lr

0800662a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	4638      	mov	r0, r7
 8006634:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2201      	movs	r2, #1
 800663c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	bc80      	pop	{r7}
 8006662:	4770      	bx	lr

08006664 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006664:	b480      	push	{r7}
 8006666:	b09d      	sub	sp, #116	@ 0x74
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	b29b      	uxth	r3, r3
 8006682:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800668a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	78db      	ldrb	r3, [r3, #3]
 8006692:	2b03      	cmp	r3, #3
 8006694:	d81f      	bhi.n	80066d6 <USB_ActivateEndpoint+0x72>
 8006696:	a201      	add	r2, pc, #4	@ (adr r2, 800669c <USB_ActivateEndpoint+0x38>)
 8006698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669c:	080066ad 	.word	0x080066ad
 80066a0:	080066c9 	.word	0x080066c9
 80066a4:	080066df 	.word	0x080066df
 80066a8:	080066bb 	.word	0x080066bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80066ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80066b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80066b8:	e012      	b.n	80066e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80066ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066be:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80066c2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80066c6:	e00b      	b.n	80066e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80066c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80066d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80066d4:	e004      	b.n	80066e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80066dc:	e000      	b.n	80066e0 <USB_ActivateEndpoint+0x7c>
      break;
 80066de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	441a      	add	r2, r3
 80066ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066fe:	b29b      	uxth	r3, r3
 8006700:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	b29b      	uxth	r3, r3
 8006710:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006718:	b29b      	uxth	r3, r3
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	7812      	ldrb	r2, [r2, #0]
 800671e:	4313      	orrs	r3, r2
 8006720:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	441a      	add	r2, r3
 800672e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006732:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006736:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800673a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800673e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006742:	b29b      	uxth	r3, r3
 8006744:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	7b1b      	ldrb	r3, [r3, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	f040 8178 	bne.w	8006a40 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 8084 	beq.w	8006862 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006764:	b29b      	uxth	r3, r3
 8006766:	461a      	mov	r2, r3
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	4413      	add	r3, r2
 800676c:	61bb      	str	r3, [r7, #24]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	011a      	lsls	r2, r3, #4
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800677c:	617b      	str	r3, [r7, #20]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	88db      	ldrh	r3, [r3, #6]
 8006782:	085b      	lsrs	r3, r3, #1
 8006784:	b29b      	uxth	r3, r3
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	b29a      	uxth	r2, r3
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	827b      	strh	r3, [r7, #18]
 800679c:	8a7b      	ldrh	r3, [r7, #18]
 800679e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d01b      	beq.n	80067de <USB_ActivateEndpoint+0x17a>
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067bc:	823b      	strh	r3, [r7, #16]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	441a      	add	r2, r3
 80067c8:	8a3b      	ldrh	r3, [r7, #16]
 80067ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067da:	b29b      	uxth	r3, r3
 80067dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	78db      	ldrb	r3, [r3, #3]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d020      	beq.n	8006828 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067fc:	81bb      	strh	r3, [r7, #12]
 80067fe:	89bb      	ldrh	r3, [r7, #12]
 8006800:	f083 0320 	eor.w	r3, r3, #32
 8006804:	81bb      	strh	r3, [r7, #12]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	441a      	add	r2, r3
 8006810:	89bb      	ldrh	r3, [r7, #12]
 8006812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800681a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800681e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006822:	b29b      	uxth	r3, r3
 8006824:	8013      	strh	r3, [r2, #0]
 8006826:	e2d5      	b.n	8006dd4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	b29b      	uxth	r3, r3
 8006836:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800683a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800683e:	81fb      	strh	r3, [r7, #14]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	441a      	add	r2, r3
 800684a:	89fb      	ldrh	r3, [r7, #14]
 800684c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006850:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006854:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800685c:	b29b      	uxth	r3, r3
 800685e:	8013      	strh	r3, [r2, #0]
 8006860:	e2b8      	b.n	8006dd4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	633b      	str	r3, [r7, #48]	@ 0x30
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800686c:	b29b      	uxth	r3, r3
 800686e:	461a      	mov	r2, r3
 8006870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006872:	4413      	add	r3, r2
 8006874:	633b      	str	r3, [r7, #48]	@ 0x30
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	011a      	lsls	r2, r3, #4
 800687c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687e:	4413      	add	r3, r2
 8006880:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	88db      	ldrh	r3, [r3, #6]
 800688a:	085b      	lsrs	r3, r3, #1
 800688c:	b29b      	uxth	r3, r3
 800688e:	005b      	lsls	r3, r3, #1
 8006890:	b29a      	uxth	r2, r3
 8006892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006894:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	62bb      	str	r3, [r7, #40]	@ 0x28
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	461a      	mov	r2, r3
 80068a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a6:	4413      	add	r3, r2
 80068a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	011a      	lsls	r2, r3, #4
 80068b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b2:	4413      	add	r3, r2
 80068b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c8:	801a      	strh	r2, [r3, #0]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80068d0:	d91d      	bls.n	800690e <USB_ActivateEndpoint+0x2aa>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	095b      	lsrs	r3, r3, #5
 80068d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f003 031f 	and.w	r3, r3, #31
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d102      	bne.n	80068ec <USB_ActivateEndpoint+0x288>
 80068e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068e8:	3b01      	subs	r3, #1
 80068ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	029b      	lsls	r3, r3, #10
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	4313      	orrs	r3, r2
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006906:	b29a      	uxth	r2, r3
 8006908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690a:	801a      	strh	r2, [r3, #0]
 800690c:	e026      	b.n	800695c <USB_ActivateEndpoint+0x2f8>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10a      	bne.n	800692c <USB_ActivateEndpoint+0x2c8>
 8006916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	b29b      	uxth	r3, r3
 800691c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006924:	b29a      	uxth	r2, r3
 8006926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006928:	801a      	strh	r2, [r3, #0]
 800692a:	e017      	b.n	800695c <USB_ActivateEndpoint+0x2f8>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	085b      	lsrs	r3, r3, #1
 8006932:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <USB_ActivateEndpoint+0x2e2>
 8006940:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006942:	3301      	adds	r3, #1
 8006944:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	b29a      	uxth	r2, r3
 800694c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800694e:	b29b      	uxth	r3, r3
 8006950:	029b      	lsls	r3, r3, #10
 8006952:	b29b      	uxth	r3, r3
 8006954:	4313      	orrs	r3, r2
 8006956:	b29a      	uxth	r2, r3
 8006958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	847b      	strh	r3, [r7, #34]	@ 0x22
 800696a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800696c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d01b      	beq.n	80069ac <USB_ActivateEndpoint+0x348>
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	b29b      	uxth	r3, r3
 8006982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800698a:	843b      	strh	r3, [r7, #32]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	441a      	add	r2, r3
 8006996:	8c3b      	ldrh	r3, [r7, #32]
 8006998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800699c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d124      	bne.n	80069fe <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ca:	83bb      	strh	r3, [r7, #28]
 80069cc:	8bbb      	ldrh	r3, [r7, #28]
 80069ce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069d2:	83bb      	strh	r3, [r7, #28]
 80069d4:	8bbb      	ldrh	r3, [r7, #28]
 80069d6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069da:	83bb      	strh	r3, [r7, #28]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	441a      	add	r2, r3
 80069e6:	8bbb      	ldrh	r3, [r7, #28]
 80069e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	8013      	strh	r3, [r2, #0]
 80069fc:	e1ea      	b.n	8006dd4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a14:	83fb      	strh	r3, [r7, #30]
 8006a16:	8bfb      	ldrh	r3, [r7, #30]
 8006a18:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a1c:	83fb      	strh	r3, [r7, #30]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	441a      	add	r2, r3
 8006a28:	8bfb      	ldrh	r3, [r7, #30]
 8006a2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	8013      	strh	r3, [r2, #0]
 8006a3e:	e1c9      	b.n	8006dd4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	78db      	ldrb	r3, [r3, #3]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d11e      	bne.n	8006a86 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a5e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	441a      	add	r2, r3
 8006a6c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006a70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a78:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	8013      	strh	r3, [r2, #0]
 8006a84:	e01d      	b.n	8006ac2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006a98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a9c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	441a      	add	r2, r3
 8006aaa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006aae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ab2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	461a      	mov	r2, r3
 8006ad0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ad2:	4413      	add	r3, r2
 8006ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	011a      	lsls	r2, r3, #4
 8006adc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ae4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	891b      	ldrh	r3, [r3, #8]
 8006aea:	085b      	lsrs	r3, r3, #1
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	005b      	lsls	r3, r3, #1
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006af4:	801a      	strh	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	461a      	mov	r2, r3
 8006b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b06:	4413      	add	r3, r2
 8006b08:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	011a      	lsls	r2, r3, #4
 8006b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006b18:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	895b      	ldrh	r3, [r3, #10]
 8006b1e:	085b      	lsrs	r3, r3, #1
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b28:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	785b      	ldrb	r3, [r3, #1]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f040 8093 	bne.w	8006c5a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006b44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006b48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01b      	beq.n	8006b88 <USB_ActivateEndpoint+0x524>
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b66:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	441a      	add	r2, r3
 8006b72:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006b74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006b96:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01b      	beq.n	8006bd8 <USB_ActivateEndpoint+0x574>
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	441a      	add	r2, r3
 8006bc2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006bc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bd0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bee:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006bf0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006bf2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006bf6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006bf8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006bfa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006bfe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	441a      	add	r2, r3
 8006c0a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006c0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c36:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	441a      	add	r2, r3
 8006c42:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	8013      	strh	r3, [r2, #0]
 8006c58:	e0bc      	b.n	8006dd4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006c6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d01d      	beq.n	8006cb2 <USB_ActivateEndpoint+0x64e>
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c8c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	441a      	add	r2, r3
 8006c9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006c9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ca2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ca6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006cc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d01d      	beq.n	8006d0a <USB_ActivateEndpoint+0x6a6>
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ce0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ce4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	441a      	add	r2, r3
 8006cf2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006cf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	78db      	ldrb	r3, [r3, #3]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d024      	beq.n	8006d5c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d28:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006d2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006d30:	f083 0320 	eor.w	r3, r3, #32
 8006d34:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	441a      	add	r2, r3
 8006d42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006d46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	8013      	strh	r3, [r2, #0]
 8006d5a:	e01d      	b.n	8006d98 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d72:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	441a      	add	r2, r3
 8006d80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	441a      	add	r2, r3
 8006dbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006dc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006dd4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3774      	adds	r7, #116	@ 0x74
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bc80      	pop	{r7}
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop

08006de4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b08d      	sub	sp, #52	@ 0x34
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	7b1b      	ldrb	r3, [r3, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f040 808e 	bne.w	8006f14 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	785b      	ldrb	r3, [r3, #1]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d044      	beq.n	8006e8a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	81bb      	strh	r3, [r7, #12]
 8006e0e:	89bb      	ldrh	r3, [r7, #12]
 8006e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d01b      	beq.n	8006e50 <USB_DeactivateEndpoint+0x6c>
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e2e:	817b      	strh	r3, [r7, #10]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	441a      	add	r2, r3
 8006e3a:	897b      	ldrh	r3, [r7, #10]
 8006e3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e66:	813b      	strh	r3, [r7, #8]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	441a      	add	r2, r3
 8006e72:	893b      	ldrh	r3, [r7, #8]
 8006e74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	8013      	strh	r3, [r2, #0]
 8006e88:	e192      	b.n	80071b0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	827b      	strh	r3, [r7, #18]
 8006e98:	8a7b      	ldrh	r3, [r7, #18]
 8006e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d01b      	beq.n	8006eda <USB_DeactivateEndpoint+0xf6>
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb8:	823b      	strh	r3, [r7, #16]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	441a      	add	r2, r3
 8006ec4:	8a3b      	ldrh	r3, [r7, #16]
 8006ec6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ece:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	881b      	ldrh	r3, [r3, #0]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006eec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ef0:	81fb      	strh	r3, [r7, #14]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	441a      	add	r2, r3
 8006efc:	89fb      	ldrh	r3, [r7, #14]
 8006efe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	8013      	strh	r3, [r2, #0]
 8006f12:	e14d      	b.n	80071b0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	785b      	ldrb	r3, [r3, #1]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f040 80a5 	bne.w	8007068 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	843b      	strh	r3, [r7, #32]
 8006f2c:	8c3b      	ldrh	r3, [r7, #32]
 8006f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d01b      	beq.n	8006f6e <USB_DeactivateEndpoint+0x18a>
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f4c:	83fb      	strh	r3, [r7, #30]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	441a      	add	r2, r3
 8006f58:	8bfb      	ldrh	r3, [r7, #30]
 8006f5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	83bb      	strh	r3, [r7, #28]
 8006f7c:	8bbb      	ldrh	r3, [r7, #28]
 8006f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d01b      	beq.n	8006fbe <USB_DeactivateEndpoint+0x1da>
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f9c:	837b      	strh	r3, [r7, #26]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	441a      	add	r2, r3
 8006fa8:	8b7b      	ldrh	r3, [r7, #26]
 8006faa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fb6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd4:	833b      	strh	r3, [r7, #24]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	441a      	add	r2, r3
 8006fe0:	8b3b      	ldrh	r3, [r7, #24]
 8006fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	b29b      	uxth	r3, r3
 8007004:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007008:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800700c:	82fb      	strh	r3, [r7, #22]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	441a      	add	r2, r3
 8007018:	8afb      	ldrh	r3, [r7, #22]
 800701a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800701e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800702a:	b29b      	uxth	r3, r3
 800702c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	b29b      	uxth	r3, r3
 800703c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007040:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007044:	82bb      	strh	r3, [r7, #20]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	441a      	add	r2, r3
 8007050:	8abb      	ldrh	r3, [r7, #20]
 8007052:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007056:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800705a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800705e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007062:	b29b      	uxth	r3, r3
 8007064:	8013      	strh	r3, [r2, #0]
 8007066:	e0a3      	b.n	80071b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007076:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007078:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d01b      	beq.n	80070b8 <USB_DeactivateEndpoint+0x2d4>
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29b      	uxth	r3, r3
 800708e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007096:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	441a      	add	r2, r3
 80070a2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80070a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80070c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80070c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d01b      	beq.n	8007108 <USB_DeactivateEndpoint+0x324>
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	441a      	add	r2, r3
 80070f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80070f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007100:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007104:	b29b      	uxth	r3, r3
 8007106:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800711a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800711e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	441a      	add	r2, r3
 800712a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800712c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007130:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007134:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800713c:	b29b      	uxth	r3, r3
 800713e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	b29b      	uxth	r3, r3
 800714e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007152:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007156:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	441a      	add	r2, r3
 8007162:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007164:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007168:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800716c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007174:	b29b      	uxth	r3, r3
 8007176:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	b29b      	uxth	r3, r3
 8007186:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800718a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800718e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	441a      	add	r2, r3
 800719a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800719c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3734      	adds	r7, #52	@ 0x34
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bc80      	pop	{r7}
 80071ba:	4770      	bx	lr

080071bc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b0c2      	sub	sp, #264	@ 0x108
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071ca:	6018      	str	r0, [r3, #0]
 80071cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	785b      	ldrb	r3, [r3, #1]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	f040 86b7 	bne.w	8007f56 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80071e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	699a      	ldr	r2, [r3, #24]
 80071f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	429a      	cmp	r2, r3
 8007202:	d908      	bls.n	8007216 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007214:	e007      	b.n	8007226 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800721a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800722a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	7b1b      	ldrb	r3, [r3, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d13a      	bne.n	80072ac <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6959      	ldr	r1, [r3, #20]
 8007242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	88da      	ldrh	r2, [r3, #6]
 800724e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007252:	b29b      	uxth	r3, r3
 8007254:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007258:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800725c:	6800      	ldr	r0, [r0, #0]
 800725e:	f001 fc9c 	bl	8008b9a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007266:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	613b      	str	r3, [r7, #16]
 800726e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007272:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800727c:	b29b      	uxth	r3, r3
 800727e:	461a      	mov	r2, r3
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	4413      	add	r3, r2
 8007284:	613b      	str	r3, [r7, #16]
 8007286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	011a      	lsls	r2, r3, #4
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	4413      	add	r3, r2
 8007298:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	801a      	strh	r2, [r3, #0]
 80072a8:	f000 be1f 	b.w	8007eea <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80072ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	78db      	ldrb	r3, [r3, #3]
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	f040 8462 	bne.w	8007b82 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80072be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6a1a      	ldr	r2, [r3, #32]
 80072ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	f240 83df 	bls.w	8007a9a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80072dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007302:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800730a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	441a      	add	r2, r3
 8007320:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800732c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007334:	b29b      	uxth	r3, r3
 8007336:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6a1a      	ldr	r2, [r3, #32]
 8007344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007348:	1ad2      	subs	r2, r2, r3
 800734a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	b29b      	uxth	r3, r3
 8007374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 81c7 	beq.w	800770c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800737e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007382:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	633b      	str	r3, [r7, #48]	@ 0x30
 800738a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d177      	bne.n	800748a <USB_EPStartXfer+0x2ce>
 800739a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	461a      	mov	r2, r3
 80073b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ba:	4413      	add	r3, r2
 80073bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	011a      	lsls	r2, r3, #4
 80073cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ce:	4413      	add	r3, r2
 80073d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e4:	801a      	strh	r2, [r3, #0]
 80073e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80073ec:	d921      	bls.n	8007432 <USB_EPStartXfer+0x276>
 80073ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f2:	095b      	lsrs	r3, r3, #5
 80073f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80073f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fc:	f003 031f 	and.w	r3, r3, #31
 8007400:	2b00      	cmp	r3, #0
 8007402:	d104      	bne.n	800740e <USB_EPStartXfer+0x252>
 8007404:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007408:	3b01      	subs	r3, #1
 800740a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800740e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	b29a      	uxth	r2, r3
 8007414:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007418:	b29b      	uxth	r3, r3
 800741a:	029b      	lsls	r3, r3, #10
 800741c:	b29b      	uxth	r3, r3
 800741e:	4313      	orrs	r3, r2
 8007420:	b29b      	uxth	r3, r3
 8007422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800742a:	b29a      	uxth	r2, r3
 800742c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742e:	801a      	strh	r2, [r3, #0]
 8007430:	e050      	b.n	80074d4 <USB_EPStartXfer+0x318>
 8007432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10a      	bne.n	8007450 <USB_EPStartXfer+0x294>
 800743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	b29b      	uxth	r3, r3
 8007440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007448:	b29a      	uxth	r2, r3
 800744a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744c:	801a      	strh	r2, [r3, #0]
 800744e:	e041      	b.n	80074d4 <USB_EPStartXfer+0x318>
 8007450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007454:	085b      	lsrs	r3, r3, #1
 8007456:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800745a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d004      	beq.n	8007470 <USB_EPStartXfer+0x2b4>
 8007466:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800746a:	3301      	adds	r3, #1
 800746c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	b29a      	uxth	r2, r3
 8007476:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800747a:	b29b      	uxth	r3, r3
 800747c:	029b      	lsls	r3, r3, #10
 800747e:	b29b      	uxth	r3, r3
 8007480:	4313      	orrs	r3, r2
 8007482:	b29a      	uxth	r2, r3
 8007484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007486:	801a      	strh	r2, [r3, #0]
 8007488:	e024      	b.n	80074d4 <USB_EPStartXfer+0x318>
 800748a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	785b      	ldrb	r3, [r3, #1]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d11c      	bne.n	80074d4 <USB_EPStartXfer+0x318>
 800749a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	461a      	mov	r2, r3
 80074ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ae:	4413      	add	r3, r2
 80074b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80074b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	011a      	lsls	r2, r3, #4
 80074c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c2:	4413      	add	r3, r2
 80074c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80074d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	895b      	ldrh	r3, [r3, #10]
 80074e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	6959      	ldr	r1, [r3, #20]
 80074f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074fa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074fe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007502:	6800      	ldr	r0, [r0, #0]
 8007504:	f001 fb49 	bl	8008b9a <USB_WritePMA>
            ep->xfer_buff += len;
 8007508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800750c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	695a      	ldr	r2, [r3, #20]
 8007514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007518:	441a      	add	r2, r3
 800751a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800752a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6a1a      	ldr	r2, [r3, #32]
 8007532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	429a      	cmp	r2, r3
 8007540:	d90f      	bls.n	8007562 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6a1a      	ldr	r2, [r3, #32]
 800754e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007552:	1ad2      	subs	r2, r2, r3
 8007554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	621a      	str	r2, [r3, #32]
 8007560:	e00e      	b.n	8007580 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2200      	movs	r2, #0
 800757e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	785b      	ldrb	r3, [r3, #1]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d177      	bne.n	8007680 <USB_EPStartXfer+0x4c4>
 8007590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	61bb      	str	r3, [r7, #24]
 800759c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	461a      	mov	r2, r3
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	4413      	add	r3, r2
 80075b2:	61bb      	str	r3, [r7, #24]
 80075b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	011a      	lsls	r2, r3, #4
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	4413      	add	r3, r2
 80075c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	881b      	ldrh	r3, [r3, #0]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	801a      	strh	r2, [r3, #0]
 80075dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80075e2:	d921      	bls.n	8007628 <USB_EPStartXfer+0x46c>
 80075e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e8:	095b      	lsrs	r3, r3, #5
 80075ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80075ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f2:	f003 031f 	and.w	r3, r3, #31
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d104      	bne.n	8007604 <USB_EPStartXfer+0x448>
 80075fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075fe:	3b01      	subs	r3, #1
 8007600:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	881b      	ldrh	r3, [r3, #0]
 8007608:	b29a      	uxth	r2, r3
 800760a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800760e:	b29b      	uxth	r3, r3
 8007610:	029b      	lsls	r3, r3, #10
 8007612:	b29b      	uxth	r3, r3
 8007614:	4313      	orrs	r3, r2
 8007616:	b29b      	uxth	r3, r3
 8007618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800761c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007620:	b29a      	uxth	r2, r3
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	801a      	strh	r2, [r3, #0]
 8007626:	e056      	b.n	80076d6 <USB_EPStartXfer+0x51a>
 8007628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <USB_EPStartXfer+0x48a>
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	b29b      	uxth	r3, r3
 8007636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800763a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800763e:	b29a      	uxth	r2, r3
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	801a      	strh	r2, [r3, #0]
 8007644:	e047      	b.n	80076d6 <USB_EPStartXfer+0x51a>
 8007646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800764a:	085b      	lsrs	r3, r3, #1
 800764c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b00      	cmp	r3, #0
 800765a:	d004      	beq.n	8007666 <USB_EPStartXfer+0x4aa>
 800765c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007660:	3301      	adds	r3, #1
 8007662:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	b29a      	uxth	r2, r3
 800766c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007670:	b29b      	uxth	r3, r3
 8007672:	029b      	lsls	r3, r3, #10
 8007674:	b29b      	uxth	r3, r3
 8007676:	4313      	orrs	r3, r2
 8007678:	b29a      	uxth	r2, r3
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	e02a      	b.n	80076d6 <USB_EPStartXfer+0x51a>
 8007680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	785b      	ldrb	r3, [r3, #1]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d122      	bne.n	80076d6 <USB_EPStartXfer+0x51a>
 8007690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007694:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	623b      	str	r3, [r7, #32]
 800769c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	461a      	mov	r2, r3
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	4413      	add	r3, r2
 80076b2:	623b      	str	r3, [r7, #32]
 80076b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	011a      	lsls	r2, r3, #4
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	4413      	add	r3, r2
 80076c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076ca:	61fb      	str	r3, [r7, #28]
 80076cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80076d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	891b      	ldrh	r3, [r3, #8]
 80076e2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6959      	ldr	r1, [r3, #20]
 80076f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076fc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007700:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007704:	6800      	ldr	r0, [r0, #0]
 8007706:	f001 fa48 	bl	8008b9a <USB_WritePMA>
 800770a:	e3ee      	b.n	8007eea <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800770c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	785b      	ldrb	r3, [r3, #1]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d177      	bne.n	800780c <USB_EPStartXfer+0x650>
 800771c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007720:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007736:	b29b      	uxth	r3, r3
 8007738:	461a      	mov	r2, r3
 800773a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800773c:	4413      	add	r3, r2
 800773e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	011a      	lsls	r2, r3, #4
 800774e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007750:	4413      	add	r3, r2
 8007752:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007756:	647b      	str	r3, [r7, #68]	@ 0x44
 8007758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007762:	b29a      	uxth	r2, r3
 8007764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007766:	801a      	strh	r2, [r3, #0]
 8007768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800776c:	2b3e      	cmp	r3, #62	@ 0x3e
 800776e:	d921      	bls.n	80077b4 <USB_EPStartXfer+0x5f8>
 8007770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007774:	095b      	lsrs	r3, r3, #5
 8007776:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800777a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800777e:	f003 031f 	and.w	r3, r3, #31
 8007782:	2b00      	cmp	r3, #0
 8007784:	d104      	bne.n	8007790 <USB_EPStartXfer+0x5d4>
 8007786:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800778a:	3b01      	subs	r3, #1
 800778c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007792:	881b      	ldrh	r3, [r3, #0]
 8007794:	b29a      	uxth	r2, r3
 8007796:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800779a:	b29b      	uxth	r3, r3
 800779c:	029b      	lsls	r3, r3, #10
 800779e:	b29b      	uxth	r3, r3
 80077a0:	4313      	orrs	r3, r2
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077b0:	801a      	strh	r2, [r3, #0]
 80077b2:	e056      	b.n	8007862 <USB_EPStartXfer+0x6a6>
 80077b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10a      	bne.n	80077d2 <USB_EPStartXfer+0x616>
 80077bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077be:	881b      	ldrh	r3, [r3, #0]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077ce:	801a      	strh	r2, [r3, #0]
 80077d0:	e047      	b.n	8007862 <USB_EPStartXfer+0x6a6>
 80077d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d6:	085b      	lsrs	r3, r3, #1
 80077d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80077dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d004      	beq.n	80077f2 <USB_EPStartXfer+0x636>
 80077e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077ec:	3301      	adds	r3, #1
 80077ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80077f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077f4:	881b      	ldrh	r3, [r3, #0]
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	029b      	lsls	r3, r3, #10
 8007800:	b29b      	uxth	r3, r3
 8007802:	4313      	orrs	r3, r2
 8007804:	b29a      	uxth	r2, r3
 8007806:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007808:	801a      	strh	r2, [r3, #0]
 800780a:	e02a      	b.n	8007862 <USB_EPStartXfer+0x6a6>
 800780c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	785b      	ldrb	r3, [r3, #1]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d122      	bne.n	8007862 <USB_EPStartXfer+0x6a6>
 800781c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007820:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	653b      	str	r3, [r7, #80]	@ 0x50
 8007828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007836:	b29b      	uxth	r3, r3
 8007838:	461a      	mov	r2, r3
 800783a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800783c:	4413      	add	r3, r2
 800783e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	011a      	lsls	r2, r3, #4
 800784e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007850:	4413      	add	r3, r2
 8007852:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785c:	b29a      	uxth	r2, r3
 800785e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007860:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	891b      	ldrh	r3, [r3, #8]
 800786e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6959      	ldr	r1, [r3, #20]
 800787e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007882:	b29b      	uxth	r3, r3
 8007884:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007888:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800788c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007890:	6800      	ldr	r0, [r0, #0]
 8007892:	f001 f982 	bl	8008b9a <USB_WritePMA>
            ep->xfer_buff += len;
 8007896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	695a      	ldr	r2, [r3, #20]
 80078a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a6:	441a      	add	r2, r3
 80078a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80078b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6a1a      	ldr	r2, [r3, #32]
 80078c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d90f      	bls.n	80078f0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80078d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6a1a      	ldr	r2, [r3, #32]
 80078dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e0:	1ad2      	subs	r2, r2, r3
 80078e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	621a      	str	r2, [r3, #32]
 80078ee:	e00e      	b.n	800790e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80078f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2200      	movs	r2, #0
 800790c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800790e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007912:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	643b      	str	r3, [r7, #64]	@ 0x40
 800791a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	785b      	ldrb	r3, [r3, #1]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d177      	bne.n	8007a1a <USB_EPStartXfer+0x85e>
 800792a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007944:	b29b      	uxth	r3, r3
 8007946:	461a      	mov	r2, r3
 8007948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794a:	4413      	add	r3, r2
 800794c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800794e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	011a      	lsls	r2, r3, #4
 800795c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795e:	4413      	add	r3, r2
 8007960:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007964:	637b      	str	r3, [r7, #52]	@ 0x34
 8007966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	b29b      	uxth	r3, r3
 800796c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007970:	b29a      	uxth	r2, r3
 8007972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007974:	801a      	strh	r2, [r3, #0]
 8007976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797a:	2b3e      	cmp	r3, #62	@ 0x3e
 800797c:	d921      	bls.n	80079c2 <USB_EPStartXfer+0x806>
 800797e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007982:	095b      	lsrs	r3, r3, #5
 8007984:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798c:	f003 031f 	and.w	r3, r3, #31
 8007990:	2b00      	cmp	r3, #0
 8007992:	d104      	bne.n	800799e <USB_EPStartXfer+0x7e2>
 8007994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007998:	3b01      	subs	r3, #1
 800799a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800799e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a0:	881b      	ldrh	r3, [r3, #0]
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	029b      	lsls	r3, r3, #10
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	4313      	orrs	r3, r2
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079be:	801a      	strh	r2, [r3, #0]
 80079c0:	e050      	b.n	8007a64 <USB_EPStartXfer+0x8a8>
 80079c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10a      	bne.n	80079e0 <USB_EPStartXfer+0x824>
 80079ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d8:	b29a      	uxth	r2, r3
 80079da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079dc:	801a      	strh	r2, [r3, #0]
 80079de:	e041      	b.n	8007a64 <USB_EPStartXfer+0x8a8>
 80079e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e4:	085b      	lsrs	r3, r3, #1
 80079e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80079ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d004      	beq.n	8007a00 <USB_EPStartXfer+0x844>
 80079f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079fa:	3301      	adds	r3, #1
 80079fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	029b      	lsls	r3, r3, #10
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	4313      	orrs	r3, r2
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a16:	801a      	strh	r2, [r3, #0]
 8007a18:	e024      	b.n	8007a64 <USB_EPStartXfer+0x8a8>
 8007a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	785b      	ldrb	r3, [r3, #1]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d11c      	bne.n	8007a64 <USB_EPStartXfer+0x8a8>
 8007a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a3e:	4413      	add	r3, r2
 8007a40:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	011a      	lsls	r2, r3, #4
 8007a50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a52:	4413      	add	r3, r2
 8007a54:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a62:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	895b      	ldrh	r3, [r3, #10]
 8007a70:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6959      	ldr	r1, [r3, #20]
 8007a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a8a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a8e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a92:	6800      	ldr	r0, [r0, #0]
 8007a94:	f001 f881 	bl	8008b9a <USB_WritePMA>
 8007a98:	e227      	b.n	8007eea <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ad0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	441a      	add	r2, r3
 8007aee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007af2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007af6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007afa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	461a      	mov	r2, r3
 8007b24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b26:	4413      	add	r3, r2
 8007b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	011a      	lsls	r2, r3, #4
 8007b38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	891b      	ldrh	r3, [r3, #8]
 8007b58:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	6959      	ldr	r1, [r3, #20]
 8007b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b72:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b76:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b7a:	6800      	ldr	r0, [r0, #0]
 8007b7c:	f001 f80d 	bl	8008b9a <USB_WritePMA>
 8007b80:	e1b3      	b.n	8007eea <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6a1a      	ldr	r2, [r3, #32]
 8007b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b92:	1ad2      	subs	r2, r2, r3
 8007b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 80c6 	beq.w	8007d54 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d177      	bne.n	8007cd4 <USB_EPStartXfer+0xb18>
 8007be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c04:	4413      	add	r3, r2
 8007c06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	011a      	lsls	r2, r3, #4
 8007c16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c18:	4413      	add	r3, r2
 8007c1a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c2e:	801a      	strh	r2, [r3, #0]
 8007c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c34:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c36:	d921      	bls.n	8007c7c <USB_EPStartXfer+0xac0>
 8007c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c3c:	095b      	lsrs	r3, r3, #5
 8007c3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c46:	f003 031f 	and.w	r3, r3, #31
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d104      	bne.n	8007c58 <USB_EPStartXfer+0xa9c>
 8007c4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c52:	3b01      	subs	r3, #1
 8007c54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	029b      	lsls	r3, r3, #10
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c78:	801a      	strh	r2, [r3, #0]
 8007c7a:	e050      	b.n	8007d1e <USB_EPStartXfer+0xb62>
 8007c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10a      	bne.n	8007c9a <USB_EPStartXfer+0xade>
 8007c84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c96:	801a      	strh	r2, [r3, #0]
 8007c98:	e041      	b.n	8007d1e <USB_EPStartXfer+0xb62>
 8007c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c9e:	085b      	lsrs	r3, r3, #1
 8007ca0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d004      	beq.n	8007cba <USB_EPStartXfer+0xafe>
 8007cb0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007cba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	029b      	lsls	r3, r3, #10
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cd0:	801a      	strh	r2, [r3, #0]
 8007cd2:	e024      	b.n	8007d1e <USB_EPStartXfer+0xb62>
 8007cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	785b      	ldrb	r3, [r3, #1]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d11c      	bne.n	8007d1e <USB_EPStartXfer+0xb62>
 8007ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007cf8:	4413      	add	r3, r2
 8007cfa:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	011a      	lsls	r2, r3, #4
 8007d0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d1c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	895b      	ldrh	r3, [r3, #10]
 8007d2a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6959      	ldr	r1, [r3, #20]
 8007d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d44:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d48:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d4c:	6800      	ldr	r0, [r0, #0]
 8007d4e:	f000 ff24 	bl	8008b9a <USB_WritePMA>
 8007d52:	e0ca      	b.n	8007eea <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d177      	bne.n	8007e54 <USB_EPStartXfer+0xc98>
 8007d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d84:	4413      	add	r3, r2
 8007d86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	011a      	lsls	r2, r3, #4
 8007d96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d98:	4413      	add	r3, r2
 8007d9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007da0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dae:	801a      	strh	r2, [r3, #0]
 8007db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007db6:	d921      	bls.n	8007dfc <USB_EPStartXfer+0xc40>
 8007db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dbc:	095b      	lsrs	r3, r3, #5
 8007dbe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc6:	f003 031f 	and.w	r3, r3, #31
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d104      	bne.n	8007dd8 <USB_EPStartXfer+0xc1c>
 8007dce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007dd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	029b      	lsls	r3, r3, #10
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	4313      	orrs	r3, r2
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007df8:	801a      	strh	r2, [r3, #0]
 8007dfa:	e05c      	b.n	8007eb6 <USB_EPStartXfer+0xcfa>
 8007dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10a      	bne.n	8007e1a <USB_EPStartXfer+0xc5e>
 8007e04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e16:	801a      	strh	r2, [r3, #0]
 8007e18:	e04d      	b.n	8007eb6 <USB_EPStartXfer+0xcfa>
 8007e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e1e:	085b      	lsrs	r3, r3, #1
 8007e20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d004      	beq.n	8007e3a <USB_EPStartXfer+0xc7e>
 8007e30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007e34:	3301      	adds	r3, #1
 8007e36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	029b      	lsls	r3, r3, #10
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e50:	801a      	strh	r2, [r3, #0]
 8007e52:	e030      	b.n	8007eb6 <USB_EPStartXfer+0xcfa>
 8007e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	785b      	ldrb	r3, [r3, #1]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d128      	bne.n	8007eb6 <USB_EPStartXfer+0xcfa>
 8007e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	461a      	mov	r2, r3
 8007e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e88:	4413      	add	r3, r2
 8007e8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	011a      	lsls	r2, r3, #4
 8007e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ea6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007eb4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	891b      	ldrh	r3, [r3, #8]
 8007ec2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	6959      	ldr	r1, [r3, #20]
 8007ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007edc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007ee0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007ee4:	6800      	ldr	r0, [r0, #0]
 8007ee6:	f000 fe58 	bl	8008b9a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f10:	817b      	strh	r3, [r7, #10]
 8007f12:	897b      	ldrh	r3, [r7, #10]
 8007f14:	f083 0310 	eor.w	r3, r3, #16
 8007f18:	817b      	strh	r3, [r7, #10]
 8007f1a:	897b      	ldrh	r3, [r7, #10]
 8007f1c:	f083 0320 	eor.w	r3, r3, #32
 8007f20:	817b      	strh	r3, [r7, #10]
 8007f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	441a      	add	r2, r3
 8007f3c:	897b      	ldrh	r3, [r7, #10]
 8007f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	8013      	strh	r3, [r2, #0]
 8007f52:	f000 bcde 	b.w	8008912 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	7b1b      	ldrb	r3, [r3, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f040 80bb 	bne.w	80080de <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	699a      	ldr	r2, [r3, #24]
 8007f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d917      	bls.n	8007fb4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	699a      	ldr	r2, [r3, #24]
 8007fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa4:	1ad2      	subs	r2, r2, r3
 8007fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007faa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	619a      	str	r2, [r3, #24]
 8007fb2:	e00e      	b.n	8007fd2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	011a      	lsls	r2, r3, #4
 800800a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800800e:	4413      	add	r3, r2
 8008010:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008014:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008018:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	b29b      	uxth	r3, r3
 8008020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008024:	b29a      	uxth	r2, r3
 8008026:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800802a:	801a      	strh	r2, [r3, #0]
 800802c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008030:	2b3e      	cmp	r3, #62	@ 0x3e
 8008032:	d924      	bls.n	800807e <USB_EPStartXfer+0xec2>
 8008034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008038:	095b      	lsrs	r3, r3, #5
 800803a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800803e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008042:	f003 031f 	and.w	r3, r3, #31
 8008046:	2b00      	cmp	r3, #0
 8008048:	d104      	bne.n	8008054 <USB_EPStartXfer+0xe98>
 800804a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800804e:	3b01      	subs	r3, #1
 8008050:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008054:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008058:	881b      	ldrh	r3, [r3, #0]
 800805a:	b29a      	uxth	r2, r3
 800805c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008060:	b29b      	uxth	r3, r3
 8008062:	029b      	lsls	r3, r3, #10
 8008064:	b29b      	uxth	r3, r3
 8008066:	4313      	orrs	r3, r2
 8008068:	b29b      	uxth	r3, r3
 800806a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800806e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008072:	b29a      	uxth	r2, r3
 8008074:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008078:	801a      	strh	r2, [r3, #0]
 800807a:	f000 bc10 	b.w	800889e <USB_EPStartXfer+0x16e2>
 800807e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10c      	bne.n	80080a0 <USB_EPStartXfer+0xee4>
 8008086:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800808a:	881b      	ldrh	r3, [r3, #0]
 800808c:	b29b      	uxth	r3, r3
 800808e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008096:	b29a      	uxth	r2, r3
 8008098:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800809c:	801a      	strh	r2, [r3, #0]
 800809e:	e3fe      	b.n	800889e <USB_EPStartXfer+0x16e2>
 80080a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a4:	085b      	lsrs	r3, r3, #1
 80080a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80080aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d004      	beq.n	80080c0 <USB_EPStartXfer+0xf04>
 80080b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80080ba:	3301      	adds	r3, #1
 80080bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80080c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	029b      	lsls	r3, r3, #10
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	4313      	orrs	r3, r2
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080da:	801a      	strh	r2, [r3, #0]
 80080dc:	e3df      	b.n	800889e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80080de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	78db      	ldrb	r3, [r3, #3]
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	f040 8218 	bne.w	8008520 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80080f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	785b      	ldrb	r3, [r3, #1]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f040 809d 	bne.w	800823c <USB_EPStartXfer+0x1080>
 8008102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008106:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008114:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800811e:	b29b      	uxth	r3, r3
 8008120:	461a      	mov	r2, r3
 8008122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008126:	4413      	add	r3, r2
 8008128:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800812c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	011a      	lsls	r2, r3, #4
 800813a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800813e:	4413      	add	r3, r2
 8008140:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008144:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	b29b      	uxth	r3, r3
 8008150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008154:	b29a      	uxth	r2, r3
 8008156:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800815a:	801a      	strh	r2, [r3, #0]
 800815c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	2b3e      	cmp	r3, #62	@ 0x3e
 800816a:	d92b      	bls.n	80081c4 <USB_EPStartXfer+0x1008>
 800816c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	095b      	lsrs	r3, r3, #5
 800817a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800817e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	f003 031f 	and.w	r3, r3, #31
 800818e:	2b00      	cmp	r3, #0
 8008190:	d104      	bne.n	800819c <USB_EPStartXfer+0xfe0>
 8008192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008196:	3b01      	subs	r3, #1
 8008198:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800819c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	029b      	lsls	r3, r3, #10
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	4313      	orrs	r3, r2
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081c0:	801a      	strh	r2, [r3, #0]
 80081c2:	e070      	b.n	80082a6 <USB_EPStartXfer+0x10ea>
 80081c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10c      	bne.n	80081ee <USB_EPStartXfer+0x1032>
 80081d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	b29b      	uxth	r3, r3
 80081dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081ea:	801a      	strh	r2, [r3, #0]
 80081ec:	e05b      	b.n	80082a6 <USB_EPStartXfer+0x10ea>
 80081ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	085b      	lsrs	r3, r3, #1
 80081fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	2b00      	cmp	r3, #0
 8008212:	d004      	beq.n	800821e <USB_EPStartXfer+0x1062>
 8008214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008218:	3301      	adds	r3, #1
 800821a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800821e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	b29a      	uxth	r2, r3
 8008226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800822a:	b29b      	uxth	r3, r3
 800822c:	029b      	lsls	r3, r3, #10
 800822e:	b29b      	uxth	r3, r3
 8008230:	4313      	orrs	r3, r2
 8008232:	b29a      	uxth	r2, r3
 8008234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008238:	801a      	strh	r2, [r3, #0]
 800823a:	e034      	b.n	80082a6 <USB_EPStartXfer+0x10ea>
 800823c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	785b      	ldrb	r3, [r3, #1]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d12c      	bne.n	80082a6 <USB_EPStartXfer+0x10ea>
 800824c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008250:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800825a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800825e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008268:	b29b      	uxth	r3, r3
 800826a:	461a      	mov	r2, r3
 800826c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008270:	4413      	add	r3, r2
 8008272:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800827a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	011a      	lsls	r2, r3, #4
 8008284:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008288:	4413      	add	r3, r2
 800828a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800828e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	b29a      	uxth	r2, r3
 80082a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80082a4:	801a      	strh	r2, [r3, #0]
 80082a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80082b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	785b      	ldrb	r3, [r3, #1]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f040 809d 	bne.w	8008400 <USB_EPStartXfer+0x1244>
 80082c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80082d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	461a      	mov	r2, r3
 80082e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082ea:	4413      	add	r3, r2
 80082ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80082f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	011a      	lsls	r2, r3, #4
 80082fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008302:	4413      	add	r3, r2
 8008304:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008308:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800830c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	b29b      	uxth	r3, r3
 8008314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008318:	b29a      	uxth	r2, r3
 800831a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800831e:	801a      	strh	r2, [r3, #0]
 8008320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	2b3e      	cmp	r3, #62	@ 0x3e
 800832e:	d92b      	bls.n	8008388 <USB_EPStartXfer+0x11cc>
 8008330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	095b      	lsrs	r3, r3, #5
 800833e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	f003 031f 	and.w	r3, r3, #31
 8008352:	2b00      	cmp	r3, #0
 8008354:	d104      	bne.n	8008360 <USB_EPStartXfer+0x11a4>
 8008356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800835a:	3b01      	subs	r3, #1
 800835c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008360:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	b29a      	uxth	r2, r3
 8008368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800836c:	b29b      	uxth	r3, r3
 800836e:	029b      	lsls	r3, r3, #10
 8008370:	b29b      	uxth	r3, r3
 8008372:	4313      	orrs	r3, r2
 8008374:	b29b      	uxth	r3, r3
 8008376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800837a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800837e:	b29a      	uxth	r2, r3
 8008380:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008384:	801a      	strh	r2, [r3, #0]
 8008386:	e069      	b.n	800845c <USB_EPStartXfer+0x12a0>
 8008388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800838c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10c      	bne.n	80083b2 <USB_EPStartXfer+0x11f6>
 8008398:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	b29b      	uxth	r3, r3
 80083a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083ae:	801a      	strh	r2, [r3, #0]
 80083b0:	e054      	b.n	800845c <USB_EPStartXfer+0x12a0>
 80083b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	085b      	lsrs	r3, r3, #1
 80083c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d004      	beq.n	80083e2 <USB_EPStartXfer+0x1226>
 80083d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083dc:	3301      	adds	r3, #1
 80083de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	029b      	lsls	r3, r3, #10
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	4313      	orrs	r3, r2
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083fc:	801a      	strh	r2, [r3, #0]
 80083fe:	e02d      	b.n	800845c <USB_EPStartXfer+0x12a0>
 8008400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	785b      	ldrb	r3, [r3, #1]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d125      	bne.n	800845c <USB_EPStartXfer+0x12a0>
 8008410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008414:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800841e:	b29b      	uxth	r3, r3
 8008420:	461a      	mov	r2, r3
 8008422:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008426:	4413      	add	r3, r2
 8008428:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800842c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	011a      	lsls	r2, r3, #4
 800843a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800843e:	4413      	add	r3, r2
 8008440:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008444:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800844c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	b29a      	uxth	r2, r3
 8008456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800845a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800845c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	69db      	ldr	r3, [r3, #28]
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 8218 	beq.w	800889e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800846e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800847c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	881b      	ldrh	r3, [r3, #0]
 800848a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800848e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d005      	beq.n	80084a6 <USB_EPStartXfer+0x12ea>
 800849a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800849e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10d      	bne.n	80084c2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80084a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80084aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f040 81f5 	bne.w	800889e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80084b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80084b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f040 81ee 	bne.w	800889e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80084c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084e8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80084ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	441a      	add	r2, r3
 8008506:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800850a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800850e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008516:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800851a:	b29b      	uxth	r3, r3
 800851c:	8013      	strh	r3, [r2, #0]
 800851e:	e1be      	b.n	800889e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	78db      	ldrb	r3, [r3, #3]
 800852c:	2b01      	cmp	r3, #1
 800852e:	f040 81b4 	bne.w	800889a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	699a      	ldr	r2, [r3, #24]
 800853e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	429a      	cmp	r2, r3
 800854c:	d917      	bls.n	800857e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800854e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800855e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	699a      	ldr	r2, [r3, #24]
 800856a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800856e:	1ad2      	subs	r2, r2, r3
 8008570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	619a      	str	r2, [r3, #24]
 800857c:	e00e      	b.n	800859c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800857e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008582:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800858e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2200      	movs	r2, #0
 800859a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800859c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	785b      	ldrb	r3, [r3, #1]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f040 8085 	bne.w	80086b8 <USB_EPStartXfer+0x14fc>
 80085ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	461a      	mov	r2, r3
 80085ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085d2:	4413      	add	r3, r2
 80085d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	011a      	lsls	r2, r3, #4
 80085e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085ea:	4413      	add	r3, r2
 80085ec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80085f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008600:	b29a      	uxth	r2, r3
 8008602:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008606:	801a      	strh	r2, [r3, #0]
 8008608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800860c:	2b3e      	cmp	r3, #62	@ 0x3e
 800860e:	d923      	bls.n	8008658 <USB_EPStartXfer+0x149c>
 8008610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008614:	095b      	lsrs	r3, r3, #5
 8008616:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800861a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800861e:	f003 031f 	and.w	r3, r3, #31
 8008622:	2b00      	cmp	r3, #0
 8008624:	d104      	bne.n	8008630 <USB_EPStartXfer+0x1474>
 8008626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800862a:	3b01      	subs	r3, #1
 800862c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008630:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008634:	881b      	ldrh	r3, [r3, #0]
 8008636:	b29a      	uxth	r2, r3
 8008638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800863c:	b29b      	uxth	r3, r3
 800863e:	029b      	lsls	r3, r3, #10
 8008640:	b29b      	uxth	r3, r3
 8008642:	4313      	orrs	r3, r2
 8008644:	b29b      	uxth	r3, r3
 8008646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800864a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800864e:	b29a      	uxth	r2, r3
 8008650:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008654:	801a      	strh	r2, [r3, #0]
 8008656:	e060      	b.n	800871a <USB_EPStartXfer+0x155e>
 8008658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10c      	bne.n	800867a <USB_EPStartXfer+0x14be>
 8008660:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008664:	881b      	ldrh	r3, [r3, #0]
 8008666:	b29b      	uxth	r3, r3
 8008668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800866c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008670:	b29a      	uxth	r2, r3
 8008672:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008676:	801a      	strh	r2, [r3, #0]
 8008678:	e04f      	b.n	800871a <USB_EPStartXfer+0x155e>
 800867a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800867e:	085b      	lsrs	r3, r3, #1
 8008680:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008688:	f003 0301 	and.w	r3, r3, #1
 800868c:	2b00      	cmp	r3, #0
 800868e:	d004      	beq.n	800869a <USB_EPStartXfer+0x14de>
 8008690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008694:	3301      	adds	r3, #1
 8008696:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800869a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	029b      	lsls	r3, r3, #10
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	4313      	orrs	r3, r2
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086b4:	801a      	strh	r2, [r3, #0]
 80086b6:	e030      	b.n	800871a <USB_EPStartXfer+0x155e>
 80086b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	785b      	ldrb	r3, [r3, #1]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d128      	bne.n	800871a <USB_EPStartXfer+0x155e>
 80086c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80086d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	461a      	mov	r2, r3
 80086e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086ec:	4413      	add	r3, r2
 80086ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80086f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	011a      	lsls	r2, r3, #4
 8008700:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008704:	4413      	add	r3, r2
 8008706:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800870a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800870e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008712:	b29a      	uxth	r2, r3
 8008714:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008718:	801a      	strh	r2, [r3, #0]
 800871a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800871e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800872c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	785b      	ldrb	r3, [r3, #1]
 8008734:	2b00      	cmp	r3, #0
 8008736:	f040 8085 	bne.w	8008844 <USB_EPStartXfer+0x1688>
 800873a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800873e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800874c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008756:	b29b      	uxth	r3, r3
 8008758:	461a      	mov	r2, r3
 800875a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800875e:	4413      	add	r3, r2
 8008760:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	011a      	lsls	r2, r3, #4
 8008772:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008776:	4413      	add	r3, r2
 8008778:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800877c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008780:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	b29b      	uxth	r3, r3
 8008788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800878c:	b29a      	uxth	r2, r3
 800878e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008792:	801a      	strh	r2, [r3, #0]
 8008794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008798:	2b3e      	cmp	r3, #62	@ 0x3e
 800879a:	d923      	bls.n	80087e4 <USB_EPStartXfer+0x1628>
 800879c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a0:	095b      	lsrs	r3, r3, #5
 80087a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087aa:	f003 031f 	and.w	r3, r3, #31
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d104      	bne.n	80087bc <USB_EPStartXfer+0x1600>
 80087b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087b6:	3b01      	subs	r3, #1
 80087b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	029b      	lsls	r3, r3, #10
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	4313      	orrs	r3, r2
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087da:	b29a      	uxth	r2, r3
 80087dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087e0:	801a      	strh	r2, [r3, #0]
 80087e2:	e05c      	b.n	800889e <USB_EPStartXfer+0x16e2>
 80087e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10c      	bne.n	8008806 <USB_EPStartXfer+0x164a>
 80087ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008802:	801a      	strh	r2, [r3, #0]
 8008804:	e04b      	b.n	800889e <USB_EPStartXfer+0x16e2>
 8008806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800880a:	085b      	lsrs	r3, r3, #1
 800880c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	2b00      	cmp	r3, #0
 800881a:	d004      	beq.n	8008826 <USB_EPStartXfer+0x166a>
 800881c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008820:	3301      	adds	r3, #1
 8008822:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008826:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	b29a      	uxth	r2, r3
 800882e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008832:	b29b      	uxth	r3, r3
 8008834:	029b      	lsls	r3, r3, #10
 8008836:	b29b      	uxth	r3, r3
 8008838:	4313      	orrs	r3, r2
 800883a:	b29a      	uxth	r2, r3
 800883c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008840:	801a      	strh	r2, [r3, #0]
 8008842:	e02c      	b.n	800889e <USB_EPStartXfer+0x16e2>
 8008844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	785b      	ldrb	r3, [r3, #1]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d124      	bne.n	800889e <USB_EPStartXfer+0x16e2>
 8008854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008858:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008862:	b29b      	uxth	r3, r3
 8008864:	461a      	mov	r2, r3
 8008866:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800886a:	4413      	add	r3, r2
 800886c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	011a      	lsls	r2, r3, #4
 800887e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008882:	4413      	add	r3, r2
 8008884:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008888:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800888c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008890:	b29a      	uxth	r2, r3
 8008892:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008896:	801a      	strh	r2, [r3, #0]
 8008898:	e001      	b.n	800889e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e03a      	b.n	8008914 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800889e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4413      	add	r3, r2
 80088b8:	881b      	ldrh	r3, [r3, #0]
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80088c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80088cc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80088d0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80088d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80088d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80088dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80088e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	441a      	add	r2, r3
 80088fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80088fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008902:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800890a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800890e:	b29b      	uxth	r3, r3
 8008910:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800891e:	b480      	push	{r7}
 8008920:	b085      	sub	sp, #20
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	785b      	ldrb	r3, [r3, #1]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d020      	beq.n	8008972 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	881b      	ldrh	r3, [r3, #0]
 800893c:	b29b      	uxth	r3, r3
 800893e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008946:	81bb      	strh	r3, [r7, #12]
 8008948:	89bb      	ldrh	r3, [r7, #12]
 800894a:	f083 0310 	eor.w	r3, r3, #16
 800894e:	81bb      	strh	r3, [r7, #12]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	441a      	add	r2, r3
 800895a:	89bb      	ldrh	r3, [r7, #12]
 800895c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008960:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008964:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800896c:	b29b      	uxth	r3, r3
 800896e:	8013      	strh	r3, [r2, #0]
 8008970:	e01f      	b.n	80089b2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	b29b      	uxth	r3, r3
 8008980:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008988:	81fb      	strh	r3, [r7, #14]
 800898a:	89fb      	ldrh	r3, [r7, #14]
 800898c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008990:	81fb      	strh	r3, [r7, #14]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	441a      	add	r2, r3
 800899c:	89fb      	ldrh	r3, [r7, #14]
 800899e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bc80      	pop	{r7}
 80089bc:	4770      	bx	lr

080089be <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089be:	b480      	push	{r7}
 80089c0:	b087      	sub	sp, #28
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	7b1b      	ldrb	r3, [r3, #12]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f040 809d 	bne.w	8008b0c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	785b      	ldrb	r3, [r3, #1]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d04c      	beq.n	8008a74 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	823b      	strh	r3, [r7, #16]
 80089e8:	8a3b      	ldrh	r3, [r7, #16]
 80089ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d01b      	beq.n	8008a2a <USB_EPClearStall+0x6c>
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a08:	81fb      	strh	r3, [r7, #14]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	441a      	add	r2, r3
 8008a14:	89fb      	ldrh	r3, [r7, #14]
 8008a16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	78db      	ldrb	r3, [r3, #3]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d06c      	beq.n	8008b0c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	881b      	ldrh	r3, [r3, #0]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a48:	81bb      	strh	r3, [r7, #12]
 8008a4a:	89bb      	ldrh	r3, [r7, #12]
 8008a4c:	f083 0320 	eor.w	r3, r3, #32
 8008a50:	81bb      	strh	r3, [r7, #12]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	441a      	add	r2, r3
 8008a5c:	89bb      	ldrh	r3, [r7, #12]
 8008a5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	8013      	strh	r3, [r2, #0]
 8008a72:	e04b      	b.n	8008b0c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	4413      	add	r3, r2
 8008a7e:	881b      	ldrh	r3, [r3, #0]
 8008a80:	82fb      	strh	r3, [r7, #22]
 8008a82:	8afb      	ldrh	r3, [r7, #22]
 8008a84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d01b      	beq.n	8008ac4 <USB_EPClearStall+0x106>
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	881b      	ldrh	r3, [r3, #0]
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aa2:	82bb      	strh	r3, [r7, #20]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	441a      	add	r2, r3
 8008aae:	8abb      	ldrh	r3, [r7, #20]
 8008ab0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ab4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ab8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	881b      	ldrh	r3, [r3, #0]
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ada:	827b      	strh	r3, [r7, #18]
 8008adc:	8a7b      	ldrh	r3, [r7, #18]
 8008ade:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008ae2:	827b      	strh	r3, [r7, #18]
 8008ae4:	8a7b      	ldrh	r3, [r7, #18]
 8008ae6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008aea:	827b      	strh	r3, [r7, #18]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	441a      	add	r2, r3
 8008af6:	8a7b      	ldrh	r3, [r7, #18]
 8008af8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008afc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	371c      	adds	r7, #28
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bc80      	pop	{r7}
 8008b16:	4770      	bx	lr

08008b18 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	460b      	mov	r3, r1
 8008b22:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008b24:	78fb      	ldrb	r3, [r7, #3]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d103      	bne.n	8008b32 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2280      	movs	r2, #128	@ 0x80
 8008b2e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bc80      	pop	{r7}
 8008b3c:	4770      	bx	lr

08008b3e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b083      	sub	sp, #12
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bc80      	pop	{r7}
 8008b50:	4770      	bx	lr

08008b52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b083      	sub	sp, #12
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bc80      	pop	{r7}
 8008b64:	4770      	bx	lr

08008b66 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b085      	sub	sp, #20
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b78:	68fb      	ldr	r3, [r7, #12]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bc80      	pop	{r7}
 8008b82:	4770      	bx	lr

08008b84 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bc80      	pop	{r7}
 8008b98:	4770      	bx	lr

08008b9a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b08b      	sub	sp, #44	@ 0x2c
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	60f8      	str	r0, [r7, #12]
 8008ba2:	60b9      	str	r1, [r7, #8]
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	460b      	mov	r3, r1
 8008baa:	80fb      	strh	r3, [r7, #6]
 8008bac:	4613      	mov	r3, r2
 8008bae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008bb0:	88bb      	ldrh	r3, [r7, #4]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	085b      	lsrs	r3, r3, #1
 8008bb6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008bc0:	88fb      	ldrh	r3, [r7, #6]
 8008bc2:	005a      	lsls	r2, r3, #1
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008bcc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bd2:	e01f      	b.n	8008c14 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	b21b      	sxth	r3, r3
 8008be2:	021b      	lsls	r3, r3, #8
 8008be4:	b21a      	sxth	r2, r3
 8008be6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	b21b      	sxth	r3, r3
 8008bee:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	8a7a      	ldrh	r2, [r7, #18]
 8008bf4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	3302      	adds	r3, #2
 8008bfa:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	3302      	adds	r3, #2
 8008c00:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	3301      	adds	r3, #1
 8008c06:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c10:	3b01      	subs	r3, #1
 8008c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1dc      	bne.n	8008bd4 <USB_WritePMA+0x3a>
  }
}
 8008c1a:	bf00      	nop
 8008c1c:	bf00      	nop
 8008c1e:	372c      	adds	r7, #44	@ 0x2c
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bc80      	pop	{r7}
 8008c24:	4770      	bx	lr

08008c26 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c26:	b480      	push	{r7}
 8008c28:	b08b      	sub	sp, #44	@ 0x2c
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	60f8      	str	r0, [r7, #12]
 8008c2e:	60b9      	str	r1, [r7, #8]
 8008c30:	4611      	mov	r1, r2
 8008c32:	461a      	mov	r2, r3
 8008c34:	460b      	mov	r3, r1
 8008c36:	80fb      	strh	r3, [r7, #6]
 8008c38:	4613      	mov	r3, r2
 8008c3a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008c3c:	88bb      	ldrh	r3, [r7, #4]
 8008c3e:	085b      	lsrs	r3, r3, #1
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c4c:	88fb      	ldrh	r3, [r7, #6]
 8008c4e:	005a      	lsls	r2, r3, #1
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c58:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c5e:	e01b      	b.n	8008c98 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	881b      	ldrh	r3, [r3, #0]
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c68:	6a3b      	ldr	r3, [r7, #32]
 8008c6a:	3302      	adds	r3, #2
 8008c6c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	0a1b      	lsrs	r3, r3, #8
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	3302      	adds	r3, #2
 8008c90:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c94:	3b01      	subs	r3, #1
 8008c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1e0      	bne.n	8008c60 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008c9e:	88bb      	ldrh	r3, [r7, #4]
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d007      	beq.n	8008cba <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008caa:	6a3b      	ldr	r3, [r7, #32]
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	b2da      	uxtb	r2, r3
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	701a      	strb	r2, [r3, #0]
  }
}
 8008cba:	bf00      	nop
 8008cbc:	372c      	adds	r7, #44	@ 0x2c
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bc80      	pop	{r7}
 8008cc2:	4770      	bx	lr

08008cc4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	7c1b      	ldrb	r3, [r3, #16]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d115      	bne.n	8008d08 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008cdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	2181      	movs	r1, #129	@ 0x81
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f001 fe82 	bl	800a9ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008cf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cf4:	2202      	movs	r2, #2
 8008cf6:	2101      	movs	r1, #1
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 fe78 	bl	800a9ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008d06:	e012      	b.n	8008d2e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008d08:	2340      	movs	r3, #64	@ 0x40
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	2181      	movs	r1, #129	@ 0x81
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f001 fe6d 	bl	800a9ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008d1a:	2340      	movs	r3, #64	@ 0x40
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	2101      	movs	r1, #1
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 fe64 	bl	800a9ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d2e:	2308      	movs	r3, #8
 8008d30:	2203      	movs	r2, #3
 8008d32:	2182      	movs	r1, #130	@ 0x82
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f001 fe5a 	bl	800a9ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d40:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008d44:	f001 ff7a 	bl	800ac3c <USBD_static_malloc>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d102      	bne.n	8008d60 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	73fb      	strb	r3, [r7, #15]
 8008d5e:	e026      	b.n	8008dae <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d66:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	7c1b      	ldrb	r3, [r3, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d109      	bne.n	8008d9e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d94:	2101      	movs	r1, #1
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f001 ff19 	bl	800abce <USBD_LL_PrepareReceive>
 8008d9c:	e007      	b.n	8008dae <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008da4:	2340      	movs	r3, #64	@ 0x40
 8008da6:	2101      	movs	r1, #1
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f001 ff10 	bl	800abce <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008dc8:	2181      	movs	r1, #129	@ 0x81
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f001 fe35 	bl	800aa3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008dd6:	2101      	movs	r1, #1
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f001 fe2e 	bl	800aa3a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008de6:	2182      	movs	r1, #130	@ 0x82
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f001 fe26 	bl	800aa3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00e      	beq.n	8008e1c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f001 ff20 	bl	800ac54 <USBD_static_free>
    pdev->pClassData = NULL;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b086      	sub	sp, #24
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e36:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d039      	beq.n	8008ec4 <USBD_CDC_Setup+0x9e>
 8008e50:	2b20      	cmp	r3, #32
 8008e52:	d17f      	bne.n	8008f54 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	88db      	ldrh	r3, [r3, #6]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d029      	beq.n	8008eb0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	b25b      	sxtb	r3, r3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	da11      	bge.n	8008e8a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008e72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e74:	683a      	ldr	r2, [r7, #0]
 8008e76:	88d2      	ldrh	r2, [r2, #6]
 8008e78:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e7a:	6939      	ldr	r1, [r7, #16]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	88db      	ldrh	r3, [r3, #6]
 8008e80:	461a      	mov	r2, r3
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f001 fa06 	bl	800a294 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008e88:	e06b      	b.n	8008f62 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	785a      	ldrb	r2, [r3, #1]
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	88db      	ldrh	r3, [r3, #6]
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008ea0:	6939      	ldr	r1, [r7, #16]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	88db      	ldrh	r3, [r3, #6]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f001 fa21 	bl	800a2f0 <USBD_CtlPrepareRx>
      break;
 8008eae:	e058      	b.n	8008f62 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	683a      	ldr	r2, [r7, #0]
 8008eba:	7850      	ldrb	r0, [r2, #1]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	4798      	blx	r3
      break;
 8008ec2:	e04e      	b.n	8008f62 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	785b      	ldrb	r3, [r3, #1]
 8008ec8:	2b0b      	cmp	r3, #11
 8008eca:	d02e      	beq.n	8008f2a <USBD_CDC_Setup+0x104>
 8008ecc:	2b0b      	cmp	r3, #11
 8008ece:	dc38      	bgt.n	8008f42 <USBD_CDC_Setup+0x11c>
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d002      	beq.n	8008eda <USBD_CDC_Setup+0xb4>
 8008ed4:	2b0a      	cmp	r3, #10
 8008ed6:	d014      	beq.n	8008f02 <USBD_CDC_Setup+0xdc>
 8008ed8:	e033      	b.n	8008f42 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ee0:	2b03      	cmp	r3, #3
 8008ee2:	d107      	bne.n	8008ef4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008ee4:	f107 030c 	add.w	r3, r7, #12
 8008ee8:	2202      	movs	r2, #2
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f001 f9d1 	bl	800a294 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ef2:	e02e      	b.n	8008f52 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f001 f962 	bl	800a1c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008efc:	2302      	movs	r3, #2
 8008efe:	75fb      	strb	r3, [r7, #23]
          break;
 8008f00:	e027      	b.n	8008f52 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f08:	2b03      	cmp	r3, #3
 8008f0a:	d107      	bne.n	8008f1c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008f0c:	f107 030f 	add.w	r3, r7, #15
 8008f10:	2201      	movs	r2, #1
 8008f12:	4619      	mov	r1, r3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f001 f9bd 	bl	800a294 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f1a:	e01a      	b.n	8008f52 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f001 f94e 	bl	800a1c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f24:	2302      	movs	r3, #2
 8008f26:	75fb      	strb	r3, [r7, #23]
          break;
 8008f28:	e013      	b.n	8008f52 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	d00d      	beq.n	8008f50 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f001 f942 	bl	800a1c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f40:	e006      	b.n	8008f50 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f001 f93b 	bl	800a1c0 <USBD_CtlError>
          ret = USBD_FAIL;
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f4e:	e000      	b.n	8008f52 <USBD_CDC_Setup+0x12c>
          break;
 8008f50:	bf00      	nop
      }
      break;
 8008f52:	e006      	b.n	8008f62 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f001 f932 	bl	800a1c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f60:	bf00      	nop
  }

  return ret;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3718      	adds	r7, #24
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	460b      	mov	r3, r1
 8008f76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f7e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008f86:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d03a      	beq.n	8009008 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008f92:	78fa      	ldrb	r2, [r7, #3]
 8008f94:	6879      	ldr	r1, [r7, #4]
 8008f96:	4613      	mov	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	440b      	add	r3, r1
 8008fa0:	331c      	adds	r3, #28
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d029      	beq.n	8008ffc <USBD_CDC_DataIn+0x90>
 8008fa8:	78fa      	ldrb	r2, [r7, #3]
 8008faa:	6879      	ldr	r1, [r7, #4]
 8008fac:	4613      	mov	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	440b      	add	r3, r1
 8008fb6:	331c      	adds	r3, #28
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	78f9      	ldrb	r1, [r7, #3]
 8008fbc:	68b8      	ldr	r0, [r7, #8]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	440b      	add	r3, r1
 8008fc4:	00db      	lsls	r3, r3, #3
 8008fc6:	4403      	add	r3, r0
 8008fc8:	3320      	adds	r3, #32
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	fbb2 f1f3 	udiv	r1, r2, r3
 8008fd0:	fb01 f303 	mul.w	r3, r1, r3
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d110      	bne.n	8008ffc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008fda:	78fa      	ldrb	r2, [r7, #3]
 8008fdc:	6879      	ldr	r1, [r7, #4]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4413      	add	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	440b      	add	r3, r1
 8008fe8:	331c      	adds	r3, #28
 8008fea:	2200      	movs	r2, #0
 8008fec:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008fee:	78f9      	ldrb	r1, [r7, #3]
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f001 fdc7 	bl	800ab88 <USBD_LL_Transmit>
 8008ffa:	e003      	b.n	8009004 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	e000      	b.n	800900a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009008:	2302      	movs	r3, #2
  }
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b084      	sub	sp, #16
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	460b      	mov	r3, r1
 800901c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009024:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009026:	78fb      	ldrb	r3, [r7, #3]
 8009028:	4619      	mov	r1, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f001 fdf2 	bl	800ac14 <USBD_LL_GetRxDataSize>
 8009030:	4602      	mov	r2, r0
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00d      	beq.n	800905e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009056:	4611      	mov	r1, r2
 8009058:	4798      	blx	r3

    return USBD_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	e000      	b.n	8009060 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800905e:	2302      	movs	r3, #2
  }
}
 8009060:	4618      	mov	r0, r3
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009076:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800907e:	2b00      	cmp	r3, #0
 8009080:	d014      	beq.n	80090ac <USBD_CDC_EP0_RxReady+0x44>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009088:	2bff      	cmp	r3, #255	@ 0xff
 800908a:	d00f      	beq.n	80090ac <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800909a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80090a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	22ff      	movs	r2, #255	@ 0xff
 80090a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2243      	movs	r2, #67	@ 0x43
 80090c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80090c6:	4b03      	ldr	r3, [pc, #12]	@ (80090d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bc80      	pop	{r7}
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	200000ac 	.word	0x200000ac

080090d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2243      	movs	r2, #67	@ 0x43
 80090e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80090e6:	4b03      	ldr	r3, [pc, #12]	@ (80090f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bc80      	pop	{r7}
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	20000068 	.word	0x20000068

080090f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2243      	movs	r2, #67	@ 0x43
 8009104:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009106:	4b03      	ldr	r3, [pc, #12]	@ (8009114 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009108:	4618      	mov	r0, r3
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	bc80      	pop	{r7}
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	200000f0 	.word	0x200000f0

08009118 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	220a      	movs	r2, #10
 8009124:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009126:	4b03      	ldr	r3, [pc, #12]	@ (8009134 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009128:	4618      	mov	r0, r3
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	bc80      	pop	{r7}
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	20000024 	.word	0x20000024

08009138 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009142:	2302      	movs	r3, #2
 8009144:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d005      	beq.n	8009158 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	683a      	ldr	r2, [r7, #0]
 8009150:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009158:	7bfb      	ldrb	r3, [r7, #15]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3714      	adds	r7, #20
 800915e:	46bd      	mov	sp, r7
 8009160:	bc80      	pop	{r7}
 8009162:	4770      	bx	lr

08009164 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009164:	b480      	push	{r7}
 8009166:	b087      	sub	sp, #28
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	4613      	mov	r3, r2
 8009170:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009178:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009182:	88fa      	ldrh	r2, [r7, #6]
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	371c      	adds	r7, #28
 8009190:	46bd      	mov	sp, r7
 8009192:	bc80      	pop	{r7}
 8009194:	4770      	bx	lr

08009196 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009196:	b480      	push	{r7}
 8009198:	b085      	sub	sp, #20
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091a6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bc80      	pop	{r7}
 80091ba:	4770      	bx	lr

080091bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d01c      	beq.n	8009210 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d115      	bne.n	800920c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091fe:	b29b      	uxth	r3, r3
 8009200:	2181      	movs	r1, #129	@ 0x81
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f001 fcc0 	bl	800ab88 <USBD_LL_Transmit>

      return USBD_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	e002      	b.n	8009212 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800920c:	2301      	movs	r3, #1
 800920e:	e000      	b.n	8009212 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009210:	2302      	movs	r3, #2
  }
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b084      	sub	sp, #16
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009228:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009230:	2b00      	cmp	r3, #0
 8009232:	d017      	beq.n	8009264 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	7c1b      	ldrb	r3, [r3, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d109      	bne.n	8009250 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009242:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009246:	2101      	movs	r1, #1
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 fcc0 	bl	800abce <USBD_LL_PrepareReceive>
 800924e:	e007      	b.n	8009260 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009256:	2340      	movs	r3, #64	@ 0x40
 8009258:	2101      	movs	r1, #1
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f001 fcb7 	bl	800abce <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009260:	2300      	movs	r3, #0
 8009262:	e000      	b.n	8009266 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009264:	2302      	movs	r3, #2
  }
}
 8009266:	4618      	mov	r0, r3
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b084      	sub	sp, #16
 8009272:	af00      	add	r7, sp, #0
 8009274:	60f8      	str	r0, [r7, #12]
 8009276:	60b9      	str	r1, [r7, #8]
 8009278:	4613      	mov	r3, r2
 800927a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009282:	2302      	movs	r3, #2
 8009284:	e01a      	b.n	80092bc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800928c:	2b00      	cmp	r3, #0
 800928e:	d003      	beq.n	8009298 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d003      	beq.n	80092a6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	79fa      	ldrb	r2, [r7, #7]
 80092b2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f001 fb25 	bl	800a904 <USBD_LL_Init>

  return USBD_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d006      	beq.n	80092e6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73fb      	strb	r3, [r7, #15]
 80092e4:	e001      	b.n	80092ea <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80092e6:	2302      	movs	r3, #2
 80092e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bc80      	pop	{r7}
 80092f4:	4770      	bx	lr

080092f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f001 fb5a 	bl	800a9b8 <USBD_LL_Start>

  return USBD_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800930e:	b480      	push	{r7}
 8009310:	b083      	sub	sp, #12
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	bc80      	pop	{r7}
 8009320:	4770      	bx	lr

08009322 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b084      	sub	sp, #16
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	460b      	mov	r3, r1
 800932c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800932e:	2302      	movs	r3, #2
 8009330:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00c      	beq.n	8009356 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	78fa      	ldrb	r2, [r7, #3]
 8009346:	4611      	mov	r1, r2
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	4798      	blx	r3
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d101      	bne.n	8009356 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009356:	7bfb      	ldrb	r3, [r7, #15]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	78fa      	ldrb	r2, [r7, #3]
 8009376:	4611      	mov	r1, r2
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	4798      	blx	r3

  return USBD_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b082      	sub	sp, #8
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009396:	6839      	ldr	r1, [r7, #0]
 8009398:	4618      	mov	r0, r3
 800939a:	f000 fed8 	bl	800a14e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80093ac:	461a      	mov	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80093ba:	f003 031f 	and.w	r3, r3, #31
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d016      	beq.n	80093f0 <USBD_LL_SetupStage+0x6a>
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d81c      	bhi.n	8009400 <USBD_LL_SetupStage+0x7a>
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d002      	beq.n	80093d0 <USBD_LL_SetupStage+0x4a>
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d008      	beq.n	80093e0 <USBD_LL_SetupStage+0x5a>
 80093ce:	e017      	b.n	8009400 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80093d6:	4619      	mov	r1, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f9cb 	bl	8009774 <USBD_StdDevReq>
      break;
 80093de:	e01a      	b.n	8009416 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fa2d 	bl	8009848 <USBD_StdItfReq>
      break;
 80093ee:	e012      	b.n	8009416 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80093f6:	4619      	mov	r1, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fa6d 	bl	80098d8 <USBD_StdEPReq>
      break;
 80093fe:	e00a      	b.n	8009416 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009406:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800940a:	b2db      	uxtb	r3, r3
 800940c:	4619      	mov	r1, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f001 fb32 	bl	800aa78 <USBD_LL_StallEP>
      break;
 8009414:	bf00      	nop
  }

  return USBD_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	460b      	mov	r3, r1
 800942a:	607a      	str	r2, [r7, #4]
 800942c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d14b      	bne.n	80094cc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800943a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009442:	2b03      	cmp	r3, #3
 8009444:	d134      	bne.n	80094b0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	68da      	ldr	r2, [r3, #12]
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	429a      	cmp	r2, r3
 8009450:	d919      	bls.n	8009486 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	68da      	ldr	r2, [r3, #12]
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	1ad2      	subs	r2, r2, r3
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	68da      	ldr	r2, [r3, #12]
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009468:	429a      	cmp	r2, r3
 800946a:	d203      	bcs.n	8009474 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009470:	b29b      	uxth	r3, r3
 8009472:	e002      	b.n	800947a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009478:	b29b      	uxth	r3, r3
 800947a:	461a      	mov	r2, r3
 800947c:	6879      	ldr	r1, [r7, #4]
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f000 ff54 	bl	800a32c <USBD_CtlContinueRx>
 8009484:	e038      	b.n	80094f8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00a      	beq.n	80094a8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009498:	2b03      	cmp	r3, #3
 800949a:	d105      	bne.n	80094a8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f000 ff51 	bl	800a350 <USBD_CtlSendStatus>
 80094ae:	e023      	b.n	80094f8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094b6:	2b05      	cmp	r3, #5
 80094b8:	d11e      	bne.n	80094f8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80094c2:	2100      	movs	r1, #0
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f001 fad7 	bl	800aa78 <USBD_LL_StallEP>
 80094ca:	e015      	b.n	80094f8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00d      	beq.n	80094f4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d108      	bne.n	80094f4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	7afa      	ldrb	r2, [r7, #11]
 80094ec:	4611      	mov	r1, r2
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	4798      	blx	r3
 80094f2:	e001      	b.n	80094f8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80094f4:	2302      	movs	r3, #2
 80094f6:	e000      	b.n	80094fa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3718      	adds	r7, #24
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b086      	sub	sp, #24
 8009506:	af00      	add	r7, sp, #0
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	460b      	mov	r3, r1
 800950c:	607a      	str	r2, [r7, #4]
 800950e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009510:	7afb      	ldrb	r3, [r7, #11]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d17f      	bne.n	8009616 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	3314      	adds	r3, #20
 800951a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009522:	2b02      	cmp	r3, #2
 8009524:	d15c      	bne.n	80095e0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	68da      	ldr	r2, [r3, #12]
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	429a      	cmp	r2, r3
 8009530:	d915      	bls.n	800955e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	68da      	ldr	r2, [r3, #12]
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	1ad2      	subs	r2, r2, r3
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	b29b      	uxth	r3, r3
 8009546:	461a      	mov	r2, r3
 8009548:	6879      	ldr	r1, [r7, #4]
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f000 febe 	bl	800a2cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009550:	2300      	movs	r3, #0
 8009552:	2200      	movs	r2, #0
 8009554:	2100      	movs	r1, #0
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f001 fb39 	bl	800abce <USBD_LL_PrepareReceive>
 800955c:	e04e      	b.n	80095fc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	6912      	ldr	r2, [r2, #16]
 8009566:	fbb3 f1f2 	udiv	r1, r3, r2
 800956a:	fb01 f202 	mul.w	r2, r1, r2
 800956e:	1a9b      	subs	r3, r3, r2
 8009570:	2b00      	cmp	r3, #0
 8009572:	d11c      	bne.n	80095ae <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	689a      	ldr	r2, [r3, #8]
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800957c:	429a      	cmp	r2, r3
 800957e:	d316      	bcc.n	80095ae <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	689a      	ldr	r2, [r3, #8]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800958a:	429a      	cmp	r2, r3
 800958c:	d20f      	bcs.n	80095ae <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800958e:	2200      	movs	r2, #0
 8009590:	2100      	movs	r1, #0
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f000 fe9a 	bl	800a2cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2200      	movs	r2, #0
 800959c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095a0:	2300      	movs	r3, #0
 80095a2:	2200      	movs	r2, #0
 80095a4:	2100      	movs	r1, #0
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f001 fb11 	bl	800abce <USBD_LL_PrepareReceive>
 80095ac:	e026      	b.n	80095fc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00a      	beq.n	80095d0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80095c0:	2b03      	cmp	r3, #3
 80095c2:	d105      	bne.n	80095d0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80095d0:	2180      	movs	r1, #128	@ 0x80
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f001 fa50 	bl	800aa78 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f000 fecc 	bl	800a376 <USBD_CtlReceiveStatus>
 80095de:	e00d      	b.n	80095fc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80095e6:	2b04      	cmp	r3, #4
 80095e8:	d004      	beq.n	80095f4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d103      	bne.n	80095fc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80095f4:	2180      	movs	r1, #128	@ 0x80
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f001 fa3e 	bl	800aa78 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009602:	2b01      	cmp	r3, #1
 8009604:	d11d      	bne.n	8009642 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f7ff fe81 	bl	800930e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009614:	e015      	b.n	8009642 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800961c:	695b      	ldr	r3, [r3, #20]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00d      	beq.n	800963e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009628:	2b03      	cmp	r3, #3
 800962a:	d108      	bne.n	800963e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009632:	695b      	ldr	r3, [r3, #20]
 8009634:	7afa      	ldrb	r2, [r7, #11]
 8009636:	4611      	mov	r1, r2
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	4798      	blx	r3
 800963c:	e001      	b.n	8009642 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800963e:	2302      	movs	r3, #2
 8009640:	e000      	b.n	8009644 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009654:	2340      	movs	r3, #64	@ 0x40
 8009656:	2200      	movs	r2, #0
 8009658:	2100      	movs	r1, #0
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f001 f9c7 	bl	800a9ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2240      	movs	r2, #64	@ 0x40
 800966c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009670:	2340      	movs	r3, #64	@ 0x40
 8009672:	2200      	movs	r2, #0
 8009674:	2180      	movs	r1, #128	@ 0x80
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f001 f9b9 	bl	800a9ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2240      	movs	r2, #64	@ 0x40
 8009686:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d009      	beq.n	80096c4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	6852      	ldr	r2, [r2, #4]
 80096bc:	b2d2      	uxtb	r2, r2
 80096be:	4611      	mov	r1, r2
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	4798      	blx	r3
  }

  return USBD_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096ce:	b480      	push	{r7}
 80096d0:	b083      	sub	sp, #12
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
 80096d6:	460b      	mov	r3, r1
 80096d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	78fa      	ldrb	r2, [r7, #3]
 80096de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bc80      	pop	{r7}
 80096ea:	4770      	bx	lr

080096ec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2204      	movs	r2, #4
 8009704:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	bc80      	pop	{r7}
 8009712:	4770      	bx	lr

08009714 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009722:	2b04      	cmp	r3, #4
 8009724:	d105      	bne.n	8009732 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	bc80      	pop	{r7}
 800973c:	4770      	bx	lr

0800973e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b082      	sub	sp, #8
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800974c:	2b03      	cmp	r3, #3
 800974e:	d10b      	bne.n	8009768 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009756:	69db      	ldr	r3, [r3, #28]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d005      	beq.n	8009768 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009762:	69db      	ldr	r3, [r3, #28]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
	...

08009774 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800978a:	2b40      	cmp	r3, #64	@ 0x40
 800978c:	d005      	beq.n	800979a <USBD_StdDevReq+0x26>
 800978e:	2b40      	cmp	r3, #64	@ 0x40
 8009790:	d84f      	bhi.n	8009832 <USBD_StdDevReq+0xbe>
 8009792:	2b00      	cmp	r3, #0
 8009794:	d009      	beq.n	80097aa <USBD_StdDevReq+0x36>
 8009796:	2b20      	cmp	r3, #32
 8009798:	d14b      	bne.n	8009832 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	4798      	blx	r3
      break;
 80097a8:	e048      	b.n	800983c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	785b      	ldrb	r3, [r3, #1]
 80097ae:	2b09      	cmp	r3, #9
 80097b0:	d839      	bhi.n	8009826 <USBD_StdDevReq+0xb2>
 80097b2:	a201      	add	r2, pc, #4	@ (adr r2, 80097b8 <USBD_StdDevReq+0x44>)
 80097b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b8:	08009809 	.word	0x08009809
 80097bc:	0800981d 	.word	0x0800981d
 80097c0:	08009827 	.word	0x08009827
 80097c4:	08009813 	.word	0x08009813
 80097c8:	08009827 	.word	0x08009827
 80097cc:	080097eb 	.word	0x080097eb
 80097d0:	080097e1 	.word	0x080097e1
 80097d4:	08009827 	.word	0x08009827
 80097d8:	080097ff 	.word	0x080097ff
 80097dc:	080097f5 	.word	0x080097f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f9dc 	bl	8009ba0 <USBD_GetDescriptor>
          break;
 80097e8:	e022      	b.n	8009830 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80097ea:	6839      	ldr	r1, [r7, #0]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fb3f 	bl	8009e70 <USBD_SetAddress>
          break;
 80097f2:	e01d      	b.n	8009830 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80097f4:	6839      	ldr	r1, [r7, #0]
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fb7e 	bl	8009ef8 <USBD_SetConfig>
          break;
 80097fc:	e018      	b.n	8009830 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 fc07 	bl	800a014 <USBD_GetConfig>
          break;
 8009806:	e013      	b.n	8009830 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fc37 	bl	800a07e <USBD_GetStatus>
          break;
 8009810:	e00e      	b.n	8009830 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 fc65 	bl	800a0e4 <USBD_SetFeature>
          break;
 800981a:	e009      	b.n	8009830 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fc74 	bl	800a10c <USBD_ClrFeature>
          break;
 8009824:	e004      	b.n	8009830 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009826:	6839      	ldr	r1, [r7, #0]
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fcc9 	bl	800a1c0 <USBD_CtlError>
          break;
 800982e:	bf00      	nop
      }
      break;
 8009830:	e004      	b.n	800983c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fcc3 	bl	800a1c0 <USBD_CtlError>
      break;
 800983a:	bf00      	nop
  }

  return ret;
 800983c:	7bfb      	ldrb	r3, [r7, #15]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop

08009848 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009852:	2300      	movs	r3, #0
 8009854:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800985e:	2b40      	cmp	r3, #64	@ 0x40
 8009860:	d005      	beq.n	800986e <USBD_StdItfReq+0x26>
 8009862:	2b40      	cmp	r3, #64	@ 0x40
 8009864:	d82e      	bhi.n	80098c4 <USBD_StdItfReq+0x7c>
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <USBD_StdItfReq+0x26>
 800986a:	2b20      	cmp	r3, #32
 800986c:	d12a      	bne.n	80098c4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009874:	3b01      	subs	r3, #1
 8009876:	2b02      	cmp	r3, #2
 8009878:	d81d      	bhi.n	80098b6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	889b      	ldrh	r3, [r3, #4]
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b01      	cmp	r3, #1
 8009882:	d813      	bhi.n	80098ac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	6839      	ldr	r1, [r7, #0]
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	4798      	blx	r3
 8009892:	4603      	mov	r3, r0
 8009894:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	88db      	ldrh	r3, [r3, #6]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d110      	bne.n	80098c0 <USBD_StdItfReq+0x78>
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10d      	bne.n	80098c0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 fd53 	bl	800a350 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80098aa:	e009      	b.n	80098c0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80098ac:	6839      	ldr	r1, [r7, #0]
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 fc86 	bl	800a1c0 <USBD_CtlError>
          break;
 80098b4:	e004      	b.n	80098c0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80098b6:	6839      	ldr	r1, [r7, #0]
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fc81 	bl	800a1c0 <USBD_CtlError>
          break;
 80098be:	e000      	b.n	80098c2 <USBD_StdItfReq+0x7a>
          break;
 80098c0:	bf00      	nop
      }
      break;
 80098c2:	e004      	b.n	80098ce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fc7a 	bl	800a1c0 <USBD_CtlError>
      break;
 80098cc:	bf00      	nop
  }

  return USBD_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	889b      	ldrh	r3, [r3, #4]
 80098ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098f4:	2b40      	cmp	r3, #64	@ 0x40
 80098f6:	d007      	beq.n	8009908 <USBD_StdEPReq+0x30>
 80098f8:	2b40      	cmp	r3, #64	@ 0x40
 80098fa:	f200 8146 	bhi.w	8009b8a <USBD_StdEPReq+0x2b2>
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00a      	beq.n	8009918 <USBD_StdEPReq+0x40>
 8009902:	2b20      	cmp	r3, #32
 8009904:	f040 8141 	bne.w	8009b8a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	4798      	blx	r3
      break;
 8009916:	e13d      	b.n	8009b94 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009920:	2b20      	cmp	r3, #32
 8009922:	d10a      	bne.n	800993a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	6839      	ldr	r1, [r7, #0]
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	4798      	blx	r3
 8009932:	4603      	mov	r3, r0
 8009934:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009936:	7bfb      	ldrb	r3, [r7, #15]
 8009938:	e12d      	b.n	8009b96 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	785b      	ldrb	r3, [r3, #1]
 800993e:	2b03      	cmp	r3, #3
 8009940:	d007      	beq.n	8009952 <USBD_StdEPReq+0x7a>
 8009942:	2b03      	cmp	r3, #3
 8009944:	f300 811b 	bgt.w	8009b7e <USBD_StdEPReq+0x2a6>
 8009948:	2b00      	cmp	r3, #0
 800994a:	d072      	beq.n	8009a32 <USBD_StdEPReq+0x15a>
 800994c:	2b01      	cmp	r3, #1
 800994e:	d03a      	beq.n	80099c6 <USBD_StdEPReq+0xee>
 8009950:	e115      	b.n	8009b7e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009958:	2b02      	cmp	r3, #2
 800995a:	d002      	beq.n	8009962 <USBD_StdEPReq+0x8a>
 800995c:	2b03      	cmp	r3, #3
 800995e:	d015      	beq.n	800998c <USBD_StdEPReq+0xb4>
 8009960:	e02b      	b.n	80099ba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009962:	7bbb      	ldrb	r3, [r7, #14]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00c      	beq.n	8009982 <USBD_StdEPReq+0xaa>
 8009968:	7bbb      	ldrb	r3, [r7, #14]
 800996a:	2b80      	cmp	r3, #128	@ 0x80
 800996c:	d009      	beq.n	8009982 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800996e:	7bbb      	ldrb	r3, [r7, #14]
 8009970:	4619      	mov	r1, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f001 f880 	bl	800aa78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009978:	2180      	movs	r1, #128	@ 0x80
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f001 f87c 	bl	800aa78 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009980:	e020      	b.n	80099c4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009982:	6839      	ldr	r1, [r7, #0]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fc1b 	bl	800a1c0 <USBD_CtlError>
              break;
 800998a:	e01b      	b.n	80099c4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	885b      	ldrh	r3, [r3, #2]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10e      	bne.n	80099b2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009994:	7bbb      	ldrb	r3, [r7, #14]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00b      	beq.n	80099b2 <USBD_StdEPReq+0xda>
 800999a:	7bbb      	ldrb	r3, [r7, #14]
 800999c:	2b80      	cmp	r3, #128	@ 0x80
 800999e:	d008      	beq.n	80099b2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	88db      	ldrh	r3, [r3, #6]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d104      	bne.n	80099b2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80099a8:	7bbb      	ldrb	r3, [r7, #14]
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f001 f863 	bl	800aa78 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fccc 	bl	800a350 <USBD_CtlSendStatus>

              break;
 80099b8:	e004      	b.n	80099c4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fbff 	bl	800a1c0 <USBD_CtlError>
              break;
 80099c2:	bf00      	nop
          }
          break;
 80099c4:	e0e0      	b.n	8009b88 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d002      	beq.n	80099d6 <USBD_StdEPReq+0xfe>
 80099d0:	2b03      	cmp	r3, #3
 80099d2:	d015      	beq.n	8009a00 <USBD_StdEPReq+0x128>
 80099d4:	e026      	b.n	8009a24 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099d6:	7bbb      	ldrb	r3, [r7, #14]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00c      	beq.n	80099f6 <USBD_StdEPReq+0x11e>
 80099dc:	7bbb      	ldrb	r3, [r7, #14]
 80099de:	2b80      	cmp	r3, #128	@ 0x80
 80099e0:	d009      	beq.n	80099f6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80099e2:	7bbb      	ldrb	r3, [r7, #14]
 80099e4:	4619      	mov	r1, r3
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f001 f846 	bl	800aa78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80099ec:	2180      	movs	r1, #128	@ 0x80
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f001 f842 	bl	800aa78 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099f4:	e01c      	b.n	8009a30 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fbe1 	bl	800a1c0 <USBD_CtlError>
              break;
 80099fe:	e017      	b.n	8009a30 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	885b      	ldrh	r3, [r3, #2]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d112      	bne.n	8009a2e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009a08:	7bbb      	ldrb	r3, [r7, #14]
 8009a0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d004      	beq.n	8009a1c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009a12:	7bbb      	ldrb	r3, [r7, #14]
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f001 f84d 	bl	800aab6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fc97 	bl	800a350 <USBD_CtlSendStatus>
              }
              break;
 8009a22:	e004      	b.n	8009a2e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fbca 	bl	800a1c0 <USBD_CtlError>
              break;
 8009a2c:	e000      	b.n	8009a30 <USBD_StdEPReq+0x158>
              break;
 8009a2e:	bf00      	nop
          }
          break;
 8009a30:	e0aa      	b.n	8009b88 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d002      	beq.n	8009a42 <USBD_StdEPReq+0x16a>
 8009a3c:	2b03      	cmp	r3, #3
 8009a3e:	d032      	beq.n	8009aa6 <USBD_StdEPReq+0x1ce>
 8009a40:	e097      	b.n	8009b72 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a42:	7bbb      	ldrb	r3, [r7, #14]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d007      	beq.n	8009a58 <USBD_StdEPReq+0x180>
 8009a48:	7bbb      	ldrb	r3, [r7, #14]
 8009a4a:	2b80      	cmp	r3, #128	@ 0x80
 8009a4c:	d004      	beq.n	8009a58 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fbb5 	bl	800a1c0 <USBD_CtlError>
                break;
 8009a56:	e091      	b.n	8009b7c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	da0b      	bge.n	8009a78 <USBD_StdEPReq+0x1a0>
 8009a60:	7bbb      	ldrb	r3, [r7, #14]
 8009a62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a66:	4613      	mov	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4413      	add	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	3310      	adds	r3, #16
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	4413      	add	r3, r2
 8009a74:	3304      	adds	r3, #4
 8009a76:	e00b      	b.n	8009a90 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a78:	7bbb      	ldrb	r3, [r7, #14]
 8009a7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a7e:	4613      	mov	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	3304      	adds	r3, #4
 8009a90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2200      	movs	r2, #0
 8009a96:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fbf8 	bl	800a294 <USBD_CtlSendData>
              break;
 8009aa4:	e06a      	b.n	8009b7c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009aa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	da11      	bge.n	8009ad2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009aae:	7bbb      	ldrb	r3, [r7, #14]
 8009ab0:	f003 020f 	and.w	r2, r3, #15
 8009ab4:	6879      	ldr	r1, [r7, #4]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	440b      	add	r3, r1
 8009ac0:	3318      	adds	r3, #24
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d117      	bne.n	8009af8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fb78 	bl	800a1c0 <USBD_CtlError>
                  break;
 8009ad0:	e054      	b.n	8009b7c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ad2:	7bbb      	ldrb	r3, [r7, #14]
 8009ad4:	f003 020f 	and.w	r2, r3, #15
 8009ad8:	6879      	ldr	r1, [r7, #4]
 8009ada:	4613      	mov	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4413      	add	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	440b      	add	r3, r1
 8009ae4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d104      	bne.n	8009af8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fb65 	bl	800a1c0 <USBD_CtlError>
                  break;
 8009af6:	e041      	b.n	8009b7c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009af8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	da0b      	bge.n	8009b18 <USBD_StdEPReq+0x240>
 8009b00:	7bbb      	ldrb	r3, [r7, #14]
 8009b02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b06:	4613      	mov	r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	4413      	add	r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	3310      	adds	r3, #16
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	4413      	add	r3, r2
 8009b14:	3304      	adds	r3, #4
 8009b16:	e00b      	b.n	8009b30 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b1e:	4613      	mov	r3, r2
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	4413      	add	r3, r2
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	3304      	adds	r3, #4
 8009b30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b32:	7bbb      	ldrb	r3, [r7, #14]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d002      	beq.n	8009b3e <USBD_StdEPReq+0x266>
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
 8009b3a:	2b80      	cmp	r3, #128	@ 0x80
 8009b3c:	d103      	bne.n	8009b46 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	2200      	movs	r2, #0
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	e00e      	b.n	8009b64 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009b46:	7bbb      	ldrb	r3, [r7, #14]
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 ffd2 	bl	800aaf4 <USBD_LL_IsStallEP>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d003      	beq.n	8009b5e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	e002      	b.n	8009b64 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	2200      	movs	r2, #0
 8009b62:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	2202      	movs	r2, #2
 8009b68:	4619      	mov	r1, r3
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fb92 	bl	800a294 <USBD_CtlSendData>
              break;
 8009b70:	e004      	b.n	8009b7c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009b72:	6839      	ldr	r1, [r7, #0]
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 fb23 	bl	800a1c0 <USBD_CtlError>
              break;
 8009b7a:	bf00      	nop
          }
          break;
 8009b7c:	e004      	b.n	8009b88 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fb1d 	bl	800a1c0 <USBD_CtlError>
          break;
 8009b86:	bf00      	nop
      }
      break;
 8009b88:	e004      	b.n	8009b94 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fb17 	bl	800a1c0 <USBD_CtlError>
      break;
 8009b92:	bf00      	nop
  }

  return ret;
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
	...

08009ba0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009baa:	2300      	movs	r3, #0
 8009bac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	885b      	ldrh	r3, [r3, #2]
 8009bba:	0a1b      	lsrs	r3, r3, #8
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	2b06      	cmp	r3, #6
 8009bc2:	f200 8128 	bhi.w	8009e16 <USBD_GetDescriptor+0x276>
 8009bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bcc <USBD_GetDescriptor+0x2c>)
 8009bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bcc:	08009be9 	.word	0x08009be9
 8009bd0:	08009c01 	.word	0x08009c01
 8009bd4:	08009c41 	.word	0x08009c41
 8009bd8:	08009e17 	.word	0x08009e17
 8009bdc:	08009e17 	.word	0x08009e17
 8009be0:	08009db7 	.word	0x08009db7
 8009be4:	08009de3 	.word	0x08009de3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	7c12      	ldrb	r2, [r2, #16]
 8009bf4:	f107 0108 	add.w	r1, r7, #8
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	4798      	blx	r3
 8009bfc:	60f8      	str	r0, [r7, #12]
      break;
 8009bfe:	e112      	b.n	8009e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	7c1b      	ldrb	r3, [r3, #16]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d10d      	bne.n	8009c24 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c10:	f107 0208 	add.w	r2, r7, #8
 8009c14:	4610      	mov	r0, r2
 8009c16:	4798      	blx	r3
 8009c18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	2202      	movs	r2, #2
 8009c20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c22:	e100      	b.n	8009e26 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c2c:	f107 0208 	add.w	r2, r7, #8
 8009c30:	4610      	mov	r0, r2
 8009c32:	4798      	blx	r3
 8009c34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	701a      	strb	r2, [r3, #0]
      break;
 8009c3e:	e0f2      	b.n	8009e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	885b      	ldrh	r3, [r3, #2]
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	2b05      	cmp	r3, #5
 8009c48:	f200 80ac 	bhi.w	8009da4 <USBD_GetDescriptor+0x204>
 8009c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c54 <USBD_GetDescriptor+0xb4>)
 8009c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c52:	bf00      	nop
 8009c54:	08009c6d 	.word	0x08009c6d
 8009c58:	08009ca1 	.word	0x08009ca1
 8009c5c:	08009cd5 	.word	0x08009cd5
 8009c60:	08009d09 	.word	0x08009d09
 8009c64:	08009d3d 	.word	0x08009d3d
 8009c68:	08009d71 	.word	0x08009d71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00b      	beq.n	8009c90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	7c12      	ldrb	r2, [r2, #16]
 8009c84:	f107 0108 	add.w	r1, r7, #8
 8009c88:	4610      	mov	r0, r2
 8009c8a:	4798      	blx	r3
 8009c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c8e:	e091      	b.n	8009db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fa94 	bl	800a1c0 <USBD_CtlError>
            err++;
 8009c98:	7afb      	ldrb	r3, [r7, #11]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c9e:	e089      	b.n	8009db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00b      	beq.n	8009cc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	7c12      	ldrb	r2, [r2, #16]
 8009cb8:	f107 0108 	add.w	r1, r7, #8
 8009cbc:	4610      	mov	r0, r2
 8009cbe:	4798      	blx	r3
 8009cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cc2:	e077      	b.n	8009db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cc4:	6839      	ldr	r1, [r7, #0]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 fa7a 	bl	800a1c0 <USBD_CtlError>
            err++;
 8009ccc:	7afb      	ldrb	r3, [r7, #11]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8009cd2:	e06f      	b.n	8009db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00b      	beq.n	8009cf8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	7c12      	ldrb	r2, [r2, #16]
 8009cec:	f107 0108 	add.w	r1, r7, #8
 8009cf0:	4610      	mov	r0, r2
 8009cf2:	4798      	blx	r3
 8009cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cf6:	e05d      	b.n	8009db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fa60 	bl	800a1c0 <USBD_CtlError>
            err++;
 8009d00:	7afb      	ldrb	r3, [r7, #11]
 8009d02:	3301      	adds	r3, #1
 8009d04:	72fb      	strb	r3, [r7, #11]
          break;
 8009d06:	e055      	b.n	8009db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00b      	beq.n	8009d2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	7c12      	ldrb	r2, [r2, #16]
 8009d20:	f107 0108 	add.w	r1, r7, #8
 8009d24:	4610      	mov	r0, r2
 8009d26:	4798      	blx	r3
 8009d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d2a:	e043      	b.n	8009db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fa46 	bl	800a1c0 <USBD_CtlError>
            err++;
 8009d34:	7afb      	ldrb	r3, [r7, #11]
 8009d36:	3301      	adds	r3, #1
 8009d38:	72fb      	strb	r3, [r7, #11]
          break;
 8009d3a:	e03b      	b.n	8009db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d42:	695b      	ldr	r3, [r3, #20]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00b      	beq.n	8009d60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d4e:	695b      	ldr	r3, [r3, #20]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	7c12      	ldrb	r2, [r2, #16]
 8009d54:	f107 0108 	add.w	r1, r7, #8
 8009d58:	4610      	mov	r0, r2
 8009d5a:	4798      	blx	r3
 8009d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d5e:	e029      	b.n	8009db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fa2c 	bl	800a1c0 <USBD_CtlError>
            err++;
 8009d68:	7afb      	ldrb	r3, [r7, #11]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d6e:	e021      	b.n	8009db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00b      	beq.n	8009d94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	7c12      	ldrb	r2, [r2, #16]
 8009d88:	f107 0108 	add.w	r1, r7, #8
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	4798      	blx	r3
 8009d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d92:	e00f      	b.n	8009db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d94:	6839      	ldr	r1, [r7, #0]
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fa12 	bl	800a1c0 <USBD_CtlError>
            err++;
 8009d9c:	7afb      	ldrb	r3, [r7, #11]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	72fb      	strb	r3, [r7, #11]
          break;
 8009da2:	e007      	b.n	8009db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fa0a 	bl	800a1c0 <USBD_CtlError>
          err++;
 8009dac:	7afb      	ldrb	r3, [r7, #11]
 8009dae:	3301      	adds	r3, #1
 8009db0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009db2:	e038      	b.n	8009e26 <USBD_GetDescriptor+0x286>
 8009db4:	e037      	b.n	8009e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	7c1b      	ldrb	r3, [r3, #16]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d109      	bne.n	8009dd2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dc6:	f107 0208 	add.w	r2, r7, #8
 8009dca:	4610      	mov	r0, r2
 8009dcc:	4798      	blx	r3
 8009dce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dd0:	e029      	b.n	8009e26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f9f3 	bl	800a1c0 <USBD_CtlError>
        err++;
 8009dda:	7afb      	ldrb	r3, [r7, #11]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	72fb      	strb	r3, [r7, #11]
      break;
 8009de0:	e021      	b.n	8009e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	7c1b      	ldrb	r3, [r3, #16]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10d      	bne.n	8009e06 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009df2:	f107 0208 	add.w	r2, r7, #8
 8009df6:	4610      	mov	r0, r2
 8009df8:	4798      	blx	r3
 8009dfa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	2207      	movs	r2, #7
 8009e02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e04:	e00f      	b.n	8009e26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e06:	6839      	ldr	r1, [r7, #0]
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 f9d9 	bl	800a1c0 <USBD_CtlError>
        err++;
 8009e0e:	7afb      	ldrb	r3, [r7, #11]
 8009e10:	3301      	adds	r3, #1
 8009e12:	72fb      	strb	r3, [r7, #11]
      break;
 8009e14:	e007      	b.n	8009e26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e16:	6839      	ldr	r1, [r7, #0]
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 f9d1 	bl	800a1c0 <USBD_CtlError>
      err++;
 8009e1e:	7afb      	ldrb	r3, [r7, #11]
 8009e20:	3301      	adds	r3, #1
 8009e22:	72fb      	strb	r3, [r7, #11]
      break;
 8009e24:	bf00      	nop
  }

  if (err != 0U)
 8009e26:	7afb      	ldrb	r3, [r7, #11]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d11c      	bne.n	8009e66 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009e2c:	893b      	ldrh	r3, [r7, #8]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d011      	beq.n	8009e56 <USBD_GetDescriptor+0x2b6>
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	88db      	ldrh	r3, [r3, #6]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00d      	beq.n	8009e56 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	88da      	ldrh	r2, [r3, #6]
 8009e3e:	893b      	ldrh	r3, [r7, #8]
 8009e40:	4293      	cmp	r3, r2
 8009e42:	bf28      	it	cs
 8009e44:	4613      	movcs	r3, r2
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e4a:	893b      	ldrh	r3, [r7, #8]
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	68f9      	ldr	r1, [r7, #12]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fa1f 	bl	800a294 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	88db      	ldrh	r3, [r3, #6]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d104      	bne.n	8009e68 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fa76 	bl	800a350 <USBD_CtlSendStatus>
 8009e64:	e000      	b.n	8009e68 <USBD_GetDescriptor+0x2c8>
    return;
 8009e66:	bf00      	nop
    }
  }
}
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop

08009e70 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	889b      	ldrh	r3, [r3, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d130      	bne.n	8009ee4 <USBD_SetAddress+0x74>
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	88db      	ldrh	r3, [r3, #6]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d12c      	bne.n	8009ee4 <USBD_SetAddress+0x74>
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	885b      	ldrh	r3, [r3, #2]
 8009e8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e90:	d828      	bhi.n	8009ee4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	885b      	ldrh	r3, [r3, #2]
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ea4:	2b03      	cmp	r3, #3
 8009ea6:	d104      	bne.n	8009eb2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f988 	bl	800a1c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eb0:	e01d      	b.n	8009eee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	7bfa      	ldrb	r2, [r7, #15]
 8009eb6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009eba:	7bfb      	ldrb	r3, [r7, #15]
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fe43 	bl	800ab4a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fa43 	bl	800a350 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009eca:	7bfb      	ldrb	r3, [r7, #15]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d004      	beq.n	8009eda <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2202      	movs	r2, #2
 8009ed4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ed8:	e009      	b.n	8009eee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ee2:	e004      	b.n	8009eee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f96a 	bl	800a1c0 <USBD_CtlError>
  }
}
 8009eec:	bf00      	nop
 8009eee:	bf00      	nop
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
	...

08009ef8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	885b      	ldrh	r3, [r3, #2]
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	4b41      	ldr	r3, [pc, #260]	@ (800a010 <USBD_SetConfig+0x118>)
 8009f0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f0c:	4b40      	ldr	r3, [pc, #256]	@ (800a010 <USBD_SetConfig+0x118>)
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d904      	bls.n	8009f1e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 f952 	bl	800a1c0 <USBD_CtlError>
 8009f1c:	e075      	b.n	800a00a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	d002      	beq.n	8009f2e <USBD_SetConfig+0x36>
 8009f28:	2b03      	cmp	r3, #3
 8009f2a:	d023      	beq.n	8009f74 <USBD_SetConfig+0x7c>
 8009f2c:	e062      	b.n	8009ff4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009f2e:	4b38      	ldr	r3, [pc, #224]	@ (800a010 <USBD_SetConfig+0x118>)
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d01a      	beq.n	8009f6c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009f36:	4b36      	ldr	r3, [pc, #216]	@ (800a010 <USBD_SetConfig+0x118>)
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2203      	movs	r2, #3
 8009f44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f48:	4b31      	ldr	r3, [pc, #196]	@ (800a010 <USBD_SetConfig+0x118>)
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f7ff f9e7 	bl	8009322 <USBD_SetClassConfig>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d104      	bne.n	8009f64 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f92f 	bl	800a1c0 <USBD_CtlError>
            return;
 8009f62:	e052      	b.n	800a00a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f9f3 	bl	800a350 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f6a:	e04e      	b.n	800a00a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f9ef 	bl	800a350 <USBD_CtlSendStatus>
        break;
 8009f72:	e04a      	b.n	800a00a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009f74:	4b26      	ldr	r3, [pc, #152]	@ (800a010 <USBD_SetConfig+0x118>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d112      	bne.n	8009fa2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2202      	movs	r2, #2
 8009f80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009f84:	4b22      	ldr	r3, [pc, #136]	@ (800a010 <USBD_SetConfig+0x118>)
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	461a      	mov	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009f8e:	4b20      	ldr	r3, [pc, #128]	@ (800a010 <USBD_SetConfig+0x118>)
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	4619      	mov	r1, r3
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7ff f9e3 	bl	8009360 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f9d8 	bl	800a350 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009fa0:	e033      	b.n	800a00a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009fa2:	4b1b      	ldr	r3, [pc, #108]	@ (800a010 <USBD_SetConfig+0x118>)
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d01d      	beq.n	8009fec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f7ff f9d1 	bl	8009360 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009fbe:	4b14      	ldr	r3, [pc, #80]	@ (800a010 <USBD_SetConfig+0x118>)
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009fc8:	4b11      	ldr	r3, [pc, #68]	@ (800a010 <USBD_SetConfig+0x118>)
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7ff f9a7 	bl	8009322 <USBD_SetClassConfig>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b02      	cmp	r3, #2
 8009fd8:	d104      	bne.n	8009fe4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009fda:	6839      	ldr	r1, [r7, #0]
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f8ef 	bl	800a1c0 <USBD_CtlError>
            return;
 8009fe2:	e012      	b.n	800a00a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f9b3 	bl	800a350 <USBD_CtlSendStatus>
        break;
 8009fea:	e00e      	b.n	800a00a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 f9af 	bl	800a350 <USBD_CtlSendStatus>
        break;
 8009ff2:	e00a      	b.n	800a00a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009ff4:	6839      	ldr	r1, [r7, #0]
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f8e2 	bl	800a1c0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009ffc:	4b04      	ldr	r3, [pc, #16]	@ (800a010 <USBD_SetConfig+0x118>)
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	4619      	mov	r1, r3
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f7ff f9ac 	bl	8009360 <USBD_ClrClassConfig>
        break;
 800a008:	bf00      	nop
    }
  }
}
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	20000410 	.word	0x20000410

0800a014 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	88db      	ldrh	r3, [r3, #6]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d004      	beq.n	800a030 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a026:	6839      	ldr	r1, [r7, #0]
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f8c9 	bl	800a1c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a02e:	e022      	b.n	800a076 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a036:	2b02      	cmp	r3, #2
 800a038:	dc02      	bgt.n	800a040 <USBD_GetConfig+0x2c>
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	dc03      	bgt.n	800a046 <USBD_GetConfig+0x32>
 800a03e:	e015      	b.n	800a06c <USBD_GetConfig+0x58>
 800a040:	2b03      	cmp	r3, #3
 800a042:	d00b      	beq.n	800a05c <USBD_GetConfig+0x48>
 800a044:	e012      	b.n	800a06c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	3308      	adds	r3, #8
 800a050:	2201      	movs	r2, #1
 800a052:	4619      	mov	r1, r3
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f91d 	bl	800a294 <USBD_CtlSendData>
        break;
 800a05a:	e00c      	b.n	800a076 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	3304      	adds	r3, #4
 800a060:	2201      	movs	r2, #1
 800a062:	4619      	mov	r1, r3
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f915 	bl	800a294 <USBD_CtlSendData>
        break;
 800a06a:	e004      	b.n	800a076 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a06c:	6839      	ldr	r1, [r7, #0]
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f8a6 	bl	800a1c0 <USBD_CtlError>
        break;
 800a074:	bf00      	nop
}
 800a076:	bf00      	nop
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b082      	sub	sp, #8
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
 800a086:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a08e:	3b01      	subs	r3, #1
 800a090:	2b02      	cmp	r3, #2
 800a092:	d81e      	bhi.n	800a0d2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	88db      	ldrh	r3, [r3, #6]
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d004      	beq.n	800a0a6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f88e 	bl	800a1c0 <USBD_CtlError>
        break;
 800a0a4:	e01a      	b.n	800a0dc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d005      	beq.n	800a0c2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	f043 0202 	orr.w	r2, r3, #2
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	330c      	adds	r3, #12
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f8e2 	bl	800a294 <USBD_CtlSendData>
      break;
 800a0d0:	e004      	b.n	800a0dc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a0d2:	6839      	ldr	r1, [r7, #0]
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f873 	bl	800a1c0 <USBD_CtlError>
      break;
 800a0da:	bf00      	nop
  }
}
 800a0dc:	bf00      	nop
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	885b      	ldrh	r3, [r3, #2]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d106      	bne.n	800a104 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f926 	bl	800a350 <USBD_CtlSendStatus>
  }
}
 800a104:	bf00      	nop
 800a106:	3708      	adds	r7, #8
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a11c:	3b01      	subs	r3, #1
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d80b      	bhi.n	800a13a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	885b      	ldrh	r3, [r3, #2]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d10c      	bne.n	800a144 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f90c 	bl	800a350 <USBD_CtlSendStatus>
      }
      break;
 800a138:	e004      	b.n	800a144 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a13a:	6839      	ldr	r1, [r7, #0]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 f83f 	bl	800a1c0 <USBD_CtlError>
      break;
 800a142:	e000      	b.n	800a146 <USBD_ClrFeature+0x3a>
      break;
 800a144:	bf00      	nop
  }
}
 800a146:	bf00      	nop
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a14e:	b480      	push	{r7}
 800a150:	b083      	sub	sp, #12
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
 800a156:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	781a      	ldrb	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	785a      	ldrb	r2, [r3, #1]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	3302      	adds	r3, #2
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	461a      	mov	r2, r3
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	3303      	adds	r3, #3
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	021b      	lsls	r3, r3, #8
 800a178:	b29b      	uxth	r3, r3
 800a17a:	4413      	add	r3, r2
 800a17c:	b29a      	uxth	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	3304      	adds	r3, #4
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	461a      	mov	r2, r3
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	3305      	adds	r3, #5
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	021b      	lsls	r3, r3, #8
 800a192:	b29b      	uxth	r3, r3
 800a194:	4413      	add	r3, r2
 800a196:	b29a      	uxth	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	3306      	adds	r3, #6
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	3307      	adds	r3, #7
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	021b      	lsls	r3, r3, #8
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	4413      	add	r3, r2
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	80da      	strh	r2, [r3, #6]

}
 800a1b6:	bf00      	nop
 800a1b8:	370c      	adds	r7, #12
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bc80      	pop	{r7}
 800a1be:	4770      	bx	lr

0800a1c0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a1ca:	2180      	movs	r1, #128	@ 0x80
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fc53 	bl	800aa78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fc4f 	bl	800aa78 <USBD_LL_StallEP>
}
 800a1da:	bf00      	nop
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b086      	sub	sp, #24
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	60f8      	str	r0, [r7, #12]
 800a1ea:	60b9      	str	r1, [r7, #8]
 800a1ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d032      	beq.n	800a25e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 f834 	bl	800a266 <USBD_GetLen>
 800a1fe:	4603      	mov	r3, r0
 800a200:	3301      	adds	r3, #1
 800a202:	b29b      	uxth	r3, r3
 800a204:	005b      	lsls	r3, r3, #1
 800a206:	b29a      	uxth	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a20c:	7dfb      	ldrb	r3, [r7, #23]
 800a20e:	1c5a      	adds	r2, r3, #1
 800a210:	75fa      	strb	r2, [r7, #23]
 800a212:	461a      	mov	r2, r3
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	4413      	add	r3, r2
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	7812      	ldrb	r2, [r2, #0]
 800a21c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a21e:	7dfb      	ldrb	r3, [r7, #23]
 800a220:	1c5a      	adds	r2, r3, #1
 800a222:	75fa      	strb	r2, [r7, #23]
 800a224:	461a      	mov	r2, r3
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	4413      	add	r3, r2
 800a22a:	2203      	movs	r2, #3
 800a22c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a22e:	e012      	b.n	800a256 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	1c5a      	adds	r2, r3, #1
 800a234:	60fa      	str	r2, [r7, #12]
 800a236:	7dfa      	ldrb	r2, [r7, #23]
 800a238:	1c51      	adds	r1, r2, #1
 800a23a:	75f9      	strb	r1, [r7, #23]
 800a23c:	4611      	mov	r1, r2
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	440a      	add	r2, r1
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a246:	7dfb      	ldrb	r3, [r7, #23]
 800a248:	1c5a      	adds	r2, r3, #1
 800a24a:	75fa      	strb	r2, [r7, #23]
 800a24c:	461a      	mov	r2, r3
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	4413      	add	r3, r2
 800a252:	2200      	movs	r2, #0
 800a254:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1e8      	bne.n	800a230 <USBD_GetString+0x4e>
    }
  }
}
 800a25e:	bf00      	nop
 800a260:	3718      	adds	r7, #24
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a266:	b480      	push	{r7}
 800a268:	b085      	sub	sp, #20
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a272:	e005      	b.n	800a280 <USBD_GetLen+0x1a>
  {
    len++;
 800a274:	7bfb      	ldrb	r3, [r7, #15]
 800a276:	3301      	adds	r3, #1
 800a278:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	3301      	adds	r3, #1
 800a27e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1f5      	bne.n	800a274 <USBD_GetLen+0xe>
  }

  return len;
 800a288:	7bfb      	ldrb	r3, [r7, #15]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3714      	adds	r7, #20
 800a28e:	46bd      	mov	sp, r7
 800a290:	bc80      	pop	{r7}
 800a292:	4770      	bx	lr

0800a294 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2202      	movs	r2, #2
 800a2a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a2aa:	88fa      	ldrh	r2, [r7, #6]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a2b0:	88fa      	ldrh	r2, [r7, #6]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2b6:	88fb      	ldrh	r3, [r7, #6]
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f000 fc63 	bl	800ab88 <USBD_LL_Transmit>

  return USBD_OK;
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2da:	88fb      	ldrh	r3, [r7, #6]
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	2100      	movs	r1, #0
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f000 fc51 	bl	800ab88 <USBD_LL_Transmit>

  return USBD_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2203      	movs	r2, #3
 800a302:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a306:	88fa      	ldrh	r2, [r7, #6]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a30e:	88fa      	ldrh	r2, [r7, #6]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a316:	88fb      	ldrh	r3, [r7, #6]
 800a318:	68ba      	ldr	r2, [r7, #8]
 800a31a:	2100      	movs	r1, #0
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f000 fc56 	bl	800abce <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	4613      	mov	r3, r2
 800a338:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a33a:	88fb      	ldrh	r3, [r7, #6]
 800a33c:	68ba      	ldr	r2, [r7, #8]
 800a33e:	2100      	movs	r1, #0
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f000 fc44 	bl	800abce <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2204      	movs	r2, #4
 800a35c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a360:	2300      	movs	r3, #0
 800a362:	2200      	movs	r2, #0
 800a364:	2100      	movs	r1, #0
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 fc0e 	bl	800ab88 <USBD_LL_Transmit>

  return USBD_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b082      	sub	sp, #8
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2205      	movs	r2, #5
 800a382:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a386:	2300      	movs	r3, #0
 800a388:	2200      	movs	r2, #0
 800a38a:	2100      	movs	r1, #0
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fc1e 	bl	800abce <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	4912      	ldr	r1, [pc, #72]	@ (800a3ec <MX_USB_DEVICE_Init+0x50>)
 800a3a4:	4812      	ldr	r0, [pc, #72]	@ (800a3f0 <MX_USB_DEVICE_Init+0x54>)
 800a3a6:	f7fe ff62 	bl	800926e <USBD_Init>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d001      	beq.n	800a3b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a3b0:	f7f8 fb45 	bl	8002a3e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a3b4:	490f      	ldr	r1, [pc, #60]	@ (800a3f4 <MX_USB_DEVICE_Init+0x58>)
 800a3b6:	480e      	ldr	r0, [pc, #56]	@ (800a3f0 <MX_USB_DEVICE_Init+0x54>)
 800a3b8:	f7fe ff84 	bl	80092c4 <USBD_RegisterClass>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a3c2:	f7f8 fb3c 	bl	8002a3e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a3c6:	490c      	ldr	r1, [pc, #48]	@ (800a3f8 <MX_USB_DEVICE_Init+0x5c>)
 800a3c8:	4809      	ldr	r0, [pc, #36]	@ (800a3f0 <MX_USB_DEVICE_Init+0x54>)
 800a3ca:	f7fe feb5 	bl	8009138 <USBD_CDC_RegisterInterface>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a3d4:	f7f8 fb33 	bl	8002a3e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a3d8:	4805      	ldr	r0, [pc, #20]	@ (800a3f0 <MX_USB_DEVICE_Init+0x54>)
 800a3da:	f7fe ff8c 	bl	80092f6 <USBD_Start>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a3e4:	f7f8 fb2b 	bl	8002a3e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a3e8:	bf00      	nop
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	20000144 	.word	0x20000144
 800a3f0:	20000414 	.word	0x20000414
 800a3f4:	20000030 	.word	0x20000030
 800a3f8:	20000134 	.word	0x20000134

0800a3fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a400:	2200      	movs	r2, #0
 800a402:	4905      	ldr	r1, [pc, #20]	@ (800a418 <CDC_Init_FS+0x1c>)
 800a404:	4805      	ldr	r0, [pc, #20]	@ (800a41c <CDC_Init_FS+0x20>)
 800a406:	f7fe fead 	bl	8009164 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a40a:	4905      	ldr	r1, [pc, #20]	@ (800a420 <CDC_Init_FS+0x24>)
 800a40c:	4803      	ldr	r0, [pc, #12]	@ (800a41c <CDC_Init_FS+0x20>)
 800a40e:	f7fe fec2 	bl	8009196 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a412:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a414:	4618      	mov	r0, r3
 800a416:	bd80      	pop	{r7, pc}
 800a418:	20000ad8 	.word	0x20000ad8
 800a41c:	20000414 	.word	0x20000414
 800a420:	200006d8 	.word	0x200006d8

0800a424 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a424:	b480      	push	{r7}
 800a426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a428:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bc80      	pop	{r7}
 800a430:	4770      	bx	lr
	...

0800a434 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	4603      	mov	r3, r0
 800a43c:	6039      	str	r1, [r7, #0]
 800a43e:	71fb      	strb	r3, [r7, #7]
 800a440:	4613      	mov	r3, r2
 800a442:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a444:	79fb      	ldrb	r3, [r7, #7]
 800a446:	2b23      	cmp	r3, #35	@ 0x23
 800a448:	d84a      	bhi.n	800a4e0 <CDC_Control_FS+0xac>
 800a44a:	a201      	add	r2, pc, #4	@ (adr r2, 800a450 <CDC_Control_FS+0x1c>)
 800a44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a450:	0800a4e1 	.word	0x0800a4e1
 800a454:	0800a4e1 	.word	0x0800a4e1
 800a458:	0800a4e1 	.word	0x0800a4e1
 800a45c:	0800a4e1 	.word	0x0800a4e1
 800a460:	0800a4e1 	.word	0x0800a4e1
 800a464:	0800a4e1 	.word	0x0800a4e1
 800a468:	0800a4e1 	.word	0x0800a4e1
 800a46c:	0800a4e1 	.word	0x0800a4e1
 800a470:	0800a4e1 	.word	0x0800a4e1
 800a474:	0800a4e1 	.word	0x0800a4e1
 800a478:	0800a4e1 	.word	0x0800a4e1
 800a47c:	0800a4e1 	.word	0x0800a4e1
 800a480:	0800a4e1 	.word	0x0800a4e1
 800a484:	0800a4e1 	.word	0x0800a4e1
 800a488:	0800a4e1 	.word	0x0800a4e1
 800a48c:	0800a4e1 	.word	0x0800a4e1
 800a490:	0800a4e1 	.word	0x0800a4e1
 800a494:	0800a4e1 	.word	0x0800a4e1
 800a498:	0800a4e1 	.word	0x0800a4e1
 800a49c:	0800a4e1 	.word	0x0800a4e1
 800a4a0:	0800a4e1 	.word	0x0800a4e1
 800a4a4:	0800a4e1 	.word	0x0800a4e1
 800a4a8:	0800a4e1 	.word	0x0800a4e1
 800a4ac:	0800a4e1 	.word	0x0800a4e1
 800a4b0:	0800a4e1 	.word	0x0800a4e1
 800a4b4:	0800a4e1 	.word	0x0800a4e1
 800a4b8:	0800a4e1 	.word	0x0800a4e1
 800a4bc:	0800a4e1 	.word	0x0800a4e1
 800a4c0:	0800a4e1 	.word	0x0800a4e1
 800a4c4:	0800a4e1 	.word	0x0800a4e1
 800a4c8:	0800a4e1 	.word	0x0800a4e1
 800a4cc:	0800a4e1 	.word	0x0800a4e1
 800a4d0:	0800a4e1 	.word	0x0800a4e1
 800a4d4:	0800a4e1 	.word	0x0800a4e1
 800a4d8:	0800a4e1 	.word	0x0800a4e1
 800a4dc:	0800a4e1 	.word	0x0800a4e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a4e0:	bf00      	nop
  }

  return (USBD_OK);
 800a4e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bc80      	pop	{r7}
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop

0800a4f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a4fa:	6879      	ldr	r1, [r7, #4]
 800a4fc:	4805      	ldr	r0, [pc, #20]	@ (800a514 <CDC_Receive_FS+0x24>)
 800a4fe:	f7fe fe4a 	bl	8009196 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a502:	4804      	ldr	r0, [pc, #16]	@ (800a514 <CDC_Receive_FS+0x24>)
 800a504:	f7fe fe89 	bl	800921a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a508:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	20000414 	.word	0x20000414

0800a518 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	460b      	mov	r3, r1
 800a522:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a524:	2300      	movs	r3, #0
 800a526:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a528:	4b0d      	ldr	r3, [pc, #52]	@ (800a560 <CDC_Transmit_FS+0x48>)
 800a52a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a52e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e00b      	b.n	800a556 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a53e:	887b      	ldrh	r3, [r7, #2]
 800a540:	461a      	mov	r2, r3
 800a542:	6879      	ldr	r1, [r7, #4]
 800a544:	4806      	ldr	r0, [pc, #24]	@ (800a560 <CDC_Transmit_FS+0x48>)
 800a546:	f7fe fe0d 	bl	8009164 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a54a:	4805      	ldr	r0, [pc, #20]	@ (800a560 <CDC_Transmit_FS+0x48>)
 800a54c:	f7fe fe36 	bl	80091bc <USBD_CDC_TransmitPacket>
 800a550:	4603      	mov	r3, r0
 800a552:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a554:	7bfb      	ldrb	r3, [r7, #15]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	20000414 	.word	0x20000414

0800a564 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	4603      	mov	r3, r0
 800a56c:	6039      	str	r1, [r7, #0]
 800a56e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	2212      	movs	r2, #18
 800a574:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a576:	4b03      	ldr	r3, [pc, #12]	@ (800a584 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a578:	4618      	mov	r0, r3
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bc80      	pop	{r7}
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	20000160 	.word	0x20000160

0800a588 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	4603      	mov	r3, r0
 800a590:	6039      	str	r1, [r7, #0]
 800a592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	2204      	movs	r2, #4
 800a598:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a59a:	4b03      	ldr	r3, [pc, #12]	@ (800a5a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bc80      	pop	{r7}
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	20000174 	.word	0x20000174

0800a5ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	6039      	str	r1, [r7, #0]
 800a5b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5b8:	79fb      	ldrb	r3, [r7, #7]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d105      	bne.n	800a5ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	4907      	ldr	r1, [pc, #28]	@ (800a5e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a5c2:	4808      	ldr	r0, [pc, #32]	@ (800a5e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a5c4:	f7ff fe0d 	bl	800a1e2 <USBD_GetString>
 800a5c8:	e004      	b.n	800a5d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	4904      	ldr	r1, [pc, #16]	@ (800a5e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a5ce:	4805      	ldr	r0, [pc, #20]	@ (800a5e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a5d0:	f7ff fe07 	bl	800a1e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5d4:	4b02      	ldr	r3, [pc, #8]	@ (800a5e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3708      	adds	r7, #8
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	20000ed8 	.word	0x20000ed8
 800a5e4:	0800b730 	.word	0x0800b730

0800a5e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	6039      	str	r1, [r7, #0]
 800a5f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a5f4:	683a      	ldr	r2, [r7, #0]
 800a5f6:	4904      	ldr	r1, [pc, #16]	@ (800a608 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a5f8:	4804      	ldr	r0, [pc, #16]	@ (800a60c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a5fa:	f7ff fdf2 	bl	800a1e2 <USBD_GetString>
  return USBD_StrDesc;
 800a5fe:	4b02      	ldr	r3, [pc, #8]	@ (800a608 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a600:	4618      	mov	r0, r3
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}
 800a608:	20000ed8 	.word	0x20000ed8
 800a60c:	0800b748 	.word	0x0800b748

0800a610 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	4603      	mov	r3, r0
 800a618:	6039      	str	r1, [r7, #0]
 800a61a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	221a      	movs	r2, #26
 800a620:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a622:	f000 f843 	bl	800a6ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a626:	4b02      	ldr	r3, [pc, #8]	@ (800a630 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	20000178 	.word	0x20000178

0800a634 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	4603      	mov	r3, r0
 800a63c:	6039      	str	r1, [r7, #0]
 800a63e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a640:	79fb      	ldrb	r3, [r7, #7]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d105      	bne.n	800a652 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	4907      	ldr	r1, [pc, #28]	@ (800a668 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a64a:	4808      	ldr	r0, [pc, #32]	@ (800a66c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a64c:	f7ff fdc9 	bl	800a1e2 <USBD_GetString>
 800a650:	e004      	b.n	800a65c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	4904      	ldr	r1, [pc, #16]	@ (800a668 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a656:	4805      	ldr	r0, [pc, #20]	@ (800a66c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a658:	f7ff fdc3 	bl	800a1e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a65c:	4b02      	ldr	r3, [pc, #8]	@ (800a668 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3708      	adds	r7, #8
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	20000ed8 	.word	0x20000ed8
 800a66c:	0800b750 	.word	0x0800b750

0800a670 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	4603      	mov	r3, r0
 800a678:	6039      	str	r1, [r7, #0]
 800a67a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a67c:	79fb      	ldrb	r3, [r7, #7]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d105      	bne.n	800a68e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a682:	683a      	ldr	r2, [r7, #0]
 800a684:	4907      	ldr	r1, [pc, #28]	@ (800a6a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a686:	4808      	ldr	r0, [pc, #32]	@ (800a6a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a688:	f7ff fdab 	bl	800a1e2 <USBD_GetString>
 800a68c:	e004      	b.n	800a698 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a68e:	683a      	ldr	r2, [r7, #0]
 800a690:	4904      	ldr	r1, [pc, #16]	@ (800a6a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a692:	4805      	ldr	r0, [pc, #20]	@ (800a6a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a694:	f7ff fda5 	bl	800a1e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a698:	4b02      	ldr	r3, [pc, #8]	@ (800a6a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20000ed8 	.word	0x20000ed8
 800a6a8:	0800b75c 	.word	0x0800b75c

0800a6ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a6b2:	4b0f      	ldr	r3, [pc, #60]	@ (800a6f0 <Get_SerialNum+0x44>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a6b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a6f4 <Get_SerialNum+0x48>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a6be:	4b0e      	ldr	r3, [pc, #56]	@ (800a6f8 <Get_SerialNum+0x4c>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d009      	beq.n	800a6e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a6d2:	2208      	movs	r2, #8
 800a6d4:	4909      	ldr	r1, [pc, #36]	@ (800a6fc <Get_SerialNum+0x50>)
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f000 f814 	bl	800a704 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a6dc:	2204      	movs	r2, #4
 800a6de:	4908      	ldr	r1, [pc, #32]	@ (800a700 <Get_SerialNum+0x54>)
 800a6e0:	68b8      	ldr	r0, [r7, #8]
 800a6e2:	f000 f80f 	bl	800a704 <IntToUnicode>
  }
}
 800a6e6:	bf00      	nop
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	1ffff7e8 	.word	0x1ffff7e8
 800a6f4:	1ffff7ec 	.word	0x1ffff7ec
 800a6f8:	1ffff7f0 	.word	0x1ffff7f0
 800a6fc:	2000017a 	.word	0x2000017a
 800a700:	2000018a 	.word	0x2000018a

0800a704 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a704:	b480      	push	{r7}
 800a706:	b087      	sub	sp, #28
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	4613      	mov	r3, r2
 800a710:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a712:	2300      	movs	r3, #0
 800a714:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a716:	2300      	movs	r3, #0
 800a718:	75fb      	strb	r3, [r7, #23]
 800a71a:	e027      	b.n	800a76c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	0f1b      	lsrs	r3, r3, #28
 800a720:	2b09      	cmp	r3, #9
 800a722:	d80b      	bhi.n	800a73c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	0f1b      	lsrs	r3, r3, #28
 800a728:	b2da      	uxtb	r2, r3
 800a72a:	7dfb      	ldrb	r3, [r7, #23]
 800a72c:	005b      	lsls	r3, r3, #1
 800a72e:	4619      	mov	r1, r3
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	440b      	add	r3, r1
 800a734:	3230      	adds	r2, #48	@ 0x30
 800a736:	b2d2      	uxtb	r2, r2
 800a738:	701a      	strb	r2, [r3, #0]
 800a73a:	e00a      	b.n	800a752 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	0f1b      	lsrs	r3, r3, #28
 800a740:	b2da      	uxtb	r2, r3
 800a742:	7dfb      	ldrb	r3, [r7, #23]
 800a744:	005b      	lsls	r3, r3, #1
 800a746:	4619      	mov	r1, r3
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	440b      	add	r3, r1
 800a74c:	3237      	adds	r2, #55	@ 0x37
 800a74e:	b2d2      	uxtb	r2, r2
 800a750:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	011b      	lsls	r3, r3, #4
 800a756:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a758:	7dfb      	ldrb	r3, [r7, #23]
 800a75a:	005b      	lsls	r3, r3, #1
 800a75c:	3301      	adds	r3, #1
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	4413      	add	r3, r2
 800a762:	2200      	movs	r2, #0
 800a764:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a766:	7dfb      	ldrb	r3, [r7, #23]
 800a768:	3301      	adds	r3, #1
 800a76a:	75fb      	strb	r3, [r7, #23]
 800a76c:	7dfa      	ldrb	r2, [r7, #23]
 800a76e:	79fb      	ldrb	r3, [r7, #7]
 800a770:	429a      	cmp	r2, r3
 800a772:	d3d3      	bcc.n	800a71c <IntToUnicode+0x18>
  }
}
 800a774:	bf00      	nop
 800a776:	bf00      	nop
 800a778:	371c      	adds	r7, #28
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bc80      	pop	{r7}
 800a77e:	4770      	bx	lr

0800a780 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a0d      	ldr	r2, [pc, #52]	@ (800a7c4 <HAL_PCD_MspInit+0x44>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d113      	bne.n	800a7ba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a792:	4b0d      	ldr	r3, [pc, #52]	@ (800a7c8 <HAL_PCD_MspInit+0x48>)
 800a794:	69db      	ldr	r3, [r3, #28]
 800a796:	4a0c      	ldr	r2, [pc, #48]	@ (800a7c8 <HAL_PCD_MspInit+0x48>)
 800a798:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a79c:	61d3      	str	r3, [r2, #28]
 800a79e:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c8 <HAL_PCD_MspInit+0x48>)
 800a7a0:	69db      	ldr	r3, [r3, #28]
 800a7a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7a6:	60fb      	str	r3, [r7, #12]
 800a7a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	2014      	movs	r0, #20
 800a7b0:	f7f8 fc2f 	bl	8003012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a7b4:	2014      	movs	r0, #20
 800a7b6:	f7f8 fc48 	bl	800304a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a7ba:	bf00      	nop
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	40005c00 	.word	0x40005c00
 800a7c8:	40021000 	.word	0x40021000

0800a7cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	f7fe fdcf 	bl	8009386 <USBD_LL_SetupStage>
}
 800a7e8:	bf00      	nop
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a802:	78fa      	ldrb	r2, [r7, #3]
 800a804:	6879      	ldr	r1, [r7, #4]
 800a806:	4613      	mov	r3, r2
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	4413      	add	r3, r2
 800a80c:	00db      	lsls	r3, r3, #3
 800a80e:	440b      	add	r3, r1
 800a810:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	78fb      	ldrb	r3, [r7, #3]
 800a818:	4619      	mov	r1, r3
 800a81a:	f7fe fe01 	bl	8009420 <USBD_LL_DataOutStage>
}
 800a81e:	bf00      	nop
 800a820:	3708      	adds	r7, #8
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b082      	sub	sp, #8
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	460b      	mov	r3, r1
 800a830:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a838:	78fa      	ldrb	r2, [r7, #3]
 800a83a:	6879      	ldr	r1, [r7, #4]
 800a83c:	4613      	mov	r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	4413      	add	r3, r2
 800a842:	00db      	lsls	r3, r3, #3
 800a844:	440b      	add	r3, r1
 800a846:	3324      	adds	r3, #36	@ 0x24
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	78fb      	ldrb	r3, [r7, #3]
 800a84c:	4619      	mov	r1, r3
 800a84e:	f7fe fe58 	bl	8009502 <USBD_LL_DataInStage>
}
 800a852:	bf00      	nop
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b082      	sub	sp, #8
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a868:	4618      	mov	r0, r3
 800a86a:	f7fe ff68 	bl	800973e <USBD_LL_SOF>
}
 800a86e:	bf00      	nop
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b084      	sub	sp, #16
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a87e:	2301      	movs	r3, #1
 800a880:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	799b      	ldrb	r3, [r3, #6]
 800a886:	2b02      	cmp	r3, #2
 800a888:	d001      	beq.n	800a88e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a88a:	f7f8 f8d8 	bl	8002a3e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a894:	7bfa      	ldrb	r2, [r7, #15]
 800a896:	4611      	mov	r1, r2
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fe ff18 	bl	80096ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fe fed1 	bl	800964c <USBD_LL_Reset>
}
 800a8aa:	bf00      	nop
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
	...

0800a8b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fe ff12 	bl	80096ec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	7a9b      	ldrb	r3, [r3, #10]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d005      	beq.n	800a8dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a8d0:	4b04      	ldr	r3, [pc, #16]	@ (800a8e4 <HAL_PCD_SuspendCallback+0x30>)
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	4a03      	ldr	r2, [pc, #12]	@ (800a8e4 <HAL_PCD_SuspendCallback+0x30>)
 800a8d6:	f043 0306 	orr.w	r3, r3, #6
 800a8da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a8dc:	bf00      	nop
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	e000ed00 	.word	0xe000ed00

0800a8e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fe ff0c 	bl	8009714 <USBD_LL_Resume>
}
 800a8fc:	bf00      	nop
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a90c:	4a28      	ldr	r2, [pc, #160]	@ (800a9b0 <USBD_LL_Init+0xac>)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a26      	ldr	r2, [pc, #152]	@ (800a9b0 <USBD_LL_Init+0xac>)
 800a918:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a91c:	4b24      	ldr	r3, [pc, #144]	@ (800a9b0 <USBD_LL_Init+0xac>)
 800a91e:	4a25      	ldr	r2, [pc, #148]	@ (800a9b4 <USBD_LL_Init+0xb0>)
 800a920:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a922:	4b23      	ldr	r3, [pc, #140]	@ (800a9b0 <USBD_LL_Init+0xac>)
 800a924:	2208      	movs	r2, #8
 800a926:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a928:	4b21      	ldr	r3, [pc, #132]	@ (800a9b0 <USBD_LL_Init+0xac>)
 800a92a:	2202      	movs	r2, #2
 800a92c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a92e:	4b20      	ldr	r3, [pc, #128]	@ (800a9b0 <USBD_LL_Init+0xac>)
 800a930:	2200      	movs	r2, #0
 800a932:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a934:	4b1e      	ldr	r3, [pc, #120]	@ (800a9b0 <USBD_LL_Init+0xac>)
 800a936:	2200      	movs	r2, #0
 800a938:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a93a:	4b1d      	ldr	r3, [pc, #116]	@ (800a9b0 <USBD_LL_Init+0xac>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a940:	481b      	ldr	r0, [pc, #108]	@ (800a9b0 <USBD_LL_Init+0xac>)
 800a942:	f7f8 fd8f 	bl	8003464 <HAL_PCD_Init>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a94c:	f7f8 f877 	bl	8002a3e <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a956:	2318      	movs	r3, #24
 800a958:	2200      	movs	r2, #0
 800a95a:	2100      	movs	r1, #0
 800a95c:	f7fa faa0 	bl	8004ea0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a966:	2358      	movs	r3, #88	@ 0x58
 800a968:	2200      	movs	r2, #0
 800a96a:	2180      	movs	r1, #128	@ 0x80
 800a96c:	f7fa fa98 	bl	8004ea0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a976:	23c0      	movs	r3, #192	@ 0xc0
 800a978:	2200      	movs	r2, #0
 800a97a:	2181      	movs	r1, #129	@ 0x81
 800a97c:	f7fa fa90 	bl	8004ea0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a986:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a98a:	2200      	movs	r2, #0
 800a98c:	2101      	movs	r1, #1
 800a98e:	f7fa fa87 	bl	8004ea0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a998:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a99c:	2200      	movs	r2, #0
 800a99e:	2182      	movs	r1, #130	@ 0x82
 800a9a0:	f7fa fa7e 	bl	8004ea0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	200010d8 	.word	0x200010d8
 800a9b4:	40005c00 	.word	0x40005c00

0800a9b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7f8 fe3e 	bl	8003650 <HAL_PCD_Start>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 f94e 	bl	800ac7c <USBD_Get_USB_Status>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	4608      	mov	r0, r1
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	70fb      	strb	r3, [r7, #3]
 800aa00:	460b      	mov	r3, r1
 800aa02:	70bb      	strb	r3, [r7, #2]
 800aa04:	4613      	mov	r3, r2
 800aa06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aa16:	78bb      	ldrb	r3, [r7, #2]
 800aa18:	883a      	ldrh	r2, [r7, #0]
 800aa1a:	78f9      	ldrb	r1, [r7, #3]
 800aa1c:	f7f8 ff92 	bl	8003944 <HAL_PCD_EP_Open>
 800aa20:	4603      	mov	r3, r0
 800aa22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa24:	7bfb      	ldrb	r3, [r7, #15]
 800aa26:	4618      	mov	r0, r3
 800aa28:	f000 f928 	bl	800ac7c <USBD_Get_USB_Status>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa30:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	460b      	mov	r3, r1
 800aa44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa46:	2300      	movs	r3, #0
 800aa48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa54:	78fa      	ldrb	r2, [r7, #3]
 800aa56:	4611      	mov	r1, r2
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7f8 ffd0 	bl	80039fe <HAL_PCD_EP_Close>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
 800aa64:	4618      	mov	r0, r3
 800aa66:	f000 f909 	bl	800ac7c <USBD_Get_USB_Status>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	460b      	mov	r3, r1
 800aa82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa84:	2300      	movs	r3, #0
 800aa86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa92:	78fa      	ldrb	r2, [r7, #3]
 800aa94:	4611      	mov	r1, r2
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7f9 f878 	bl	8003b8c <HAL_PCD_EP_SetStall>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaa0:	7bfb      	ldrb	r3, [r7, #15]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f000 f8ea 	bl	800ac7c <USBD_Get_USB_Status>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaac:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b084      	sub	sp, #16
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	460b      	mov	r3, r1
 800aac0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aac6:	2300      	movs	r3, #0
 800aac8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aad0:	78fa      	ldrb	r2, [r7, #3]
 800aad2:	4611      	mov	r1, r2
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7f9 f8b9 	bl	8003c4c <HAL_PCD_EP_ClrStall>
 800aada:	4603      	mov	r3, r0
 800aadc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aade:	7bfb      	ldrb	r3, [r7, #15]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f000 f8cb 	bl	800ac7c <USBD_Get_USB_Status>
 800aae6:	4603      	mov	r3, r0
 800aae8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaea:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3710      	adds	r7, #16
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	460b      	mov	r3, r1
 800aafe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ab08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	da0b      	bge.n	800ab28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab10:	78fb      	ldrb	r3, [r7, #3]
 800ab12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab16:	68f9      	ldr	r1, [r7, #12]
 800ab18:	4613      	mov	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	4413      	add	r3, r2
 800ab1e:	00db      	lsls	r3, r3, #3
 800ab20:	440b      	add	r3, r1
 800ab22:	3312      	adds	r3, #18
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	e00b      	b.n	800ab40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab28:	78fb      	ldrb	r3, [r7, #3]
 800ab2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab2e:	68f9      	ldr	r1, [r7, #12]
 800ab30:	4613      	mov	r3, r2
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	4413      	add	r3, r2
 800ab36:	00db      	lsls	r3, r3, #3
 800ab38:	440b      	add	r3, r1
 800ab3a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ab3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3714      	adds	r7, #20
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bc80      	pop	{r7}
 800ab48:	4770      	bx	lr

0800ab4a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b084      	sub	sp, #16
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	460b      	mov	r3, r1
 800ab54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab56:	2300      	movs	r3, #0
 800ab58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab64:	78fa      	ldrb	r2, [r7, #3]
 800ab66:	4611      	mov	r1, r2
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7f8 fec7 	bl	80038fc <HAL_PCD_SetAddress>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab72:	7bfb      	ldrb	r3, [r7, #15]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f000 f881 	bl	800ac7c <USBD_Get_USB_Status>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3710      	adds	r7, #16
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b086      	sub	sp, #24
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	607a      	str	r2, [r7, #4]
 800ab92:	461a      	mov	r2, r3
 800ab94:	460b      	mov	r3, r1
 800ab96:	72fb      	strb	r3, [r7, #11]
 800ab98:	4613      	mov	r3, r2
 800ab9a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aba0:	2300      	movs	r3, #0
 800aba2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800abaa:	893b      	ldrh	r3, [r7, #8]
 800abac:	7af9      	ldrb	r1, [r7, #11]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	f7f8 ffb5 	bl	8003b1e <HAL_PCD_EP_Transmit>
 800abb4:	4603      	mov	r3, r0
 800abb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abb8:	7dfb      	ldrb	r3, [r7, #23]
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 f85e 	bl	800ac7c <USBD_Get_USB_Status>
 800abc0:	4603      	mov	r3, r0
 800abc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abc4:	7dbb      	ldrb	r3, [r7, #22]
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3718      	adds	r7, #24
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b086      	sub	sp, #24
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	60f8      	str	r0, [r7, #12]
 800abd6:	607a      	str	r2, [r7, #4]
 800abd8:	461a      	mov	r2, r3
 800abda:	460b      	mov	r3, r1
 800abdc:	72fb      	strb	r3, [r7, #11]
 800abde:	4613      	mov	r3, r2
 800abe0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abe6:	2300      	movs	r3, #0
 800abe8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800abf0:	893b      	ldrh	r3, [r7, #8]
 800abf2:	7af9      	ldrb	r1, [r7, #11]
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	f7f8 ff4a 	bl	8003a8e <HAL_PCD_EP_Receive>
 800abfa:	4603      	mov	r3, r0
 800abfc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abfe:	7dfb      	ldrb	r3, [r7, #23]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 f83b 	bl	800ac7c <USBD_Get_USB_Status>
 800ac06:	4603      	mov	r3, r0
 800ac08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac0a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3718      	adds	r7, #24
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ac26:	78fa      	ldrb	r2, [r7, #3]
 800ac28:	4611      	mov	r1, r2
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7f8 ff60 	bl	8003af0 <HAL_PCD_EP_GetRxCount>
 800ac30:	4603      	mov	r3, r0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
	...

0800ac3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ac44:	4b02      	ldr	r3, [pc, #8]	@ (800ac50 <USBD_static_malloc+0x14>)
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	370c      	adds	r7, #12
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bc80      	pop	{r7}
 800ac4e:	4770      	bx	lr
 800ac50:	200013b0 	.word	0x200013b0

0800ac54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]

}
 800ac5c:	bf00      	nop
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bc80      	pop	{r7}
 800ac64:	4770      	bx	lr

0800ac66 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac66:	b480      	push	{r7}
 800ac68:	b083      	sub	sp, #12
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	460b      	mov	r3, r1
 800ac70:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ac72:	bf00      	nop
 800ac74:	370c      	adds	r7, #12
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bc80      	pop	{r7}
 800ac7a:	4770      	bx	lr

0800ac7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	4603      	mov	r3, r0
 800ac84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac86:	2300      	movs	r3, #0
 800ac88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
 800ac8c:	2b03      	cmp	r3, #3
 800ac8e:	d817      	bhi.n	800acc0 <USBD_Get_USB_Status+0x44>
 800ac90:	a201      	add	r2, pc, #4	@ (adr r2, 800ac98 <USBD_Get_USB_Status+0x1c>)
 800ac92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac96:	bf00      	nop
 800ac98:	0800aca9 	.word	0x0800aca9
 800ac9c:	0800acaf 	.word	0x0800acaf
 800aca0:	0800acb5 	.word	0x0800acb5
 800aca4:	0800acbb 	.word	0x0800acbb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aca8:	2300      	movs	r3, #0
 800acaa:	73fb      	strb	r3, [r7, #15]
    break;
 800acac:	e00b      	b.n	800acc6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800acae:	2302      	movs	r3, #2
 800acb0:	73fb      	strb	r3, [r7, #15]
    break;
 800acb2:	e008      	b.n	800acc6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800acb4:	2301      	movs	r3, #1
 800acb6:	73fb      	strb	r3, [r7, #15]
    break;
 800acb8:	e005      	b.n	800acc6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800acba:	2302      	movs	r3, #2
 800acbc:	73fb      	strb	r3, [r7, #15]
    break;
 800acbe:	e002      	b.n	800acc6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800acc0:	2302      	movs	r3, #2
 800acc2:	73fb      	strb	r3, [r7, #15]
    break;
 800acc4:	bf00      	nop
  }
  return usb_status;
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	bc80      	pop	{r7}
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop

0800acd4 <siprintf>:
 800acd4:	b40e      	push	{r1, r2, r3}
 800acd6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800acda:	b510      	push	{r4, lr}
 800acdc:	2400      	movs	r4, #0
 800acde:	b09d      	sub	sp, #116	@ 0x74
 800ace0:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ace2:	9002      	str	r0, [sp, #8]
 800ace4:	9006      	str	r0, [sp, #24]
 800ace6:	9107      	str	r1, [sp, #28]
 800ace8:	9104      	str	r1, [sp, #16]
 800acea:	4809      	ldr	r0, [pc, #36]	@ (800ad10 <siprintf+0x3c>)
 800acec:	4909      	ldr	r1, [pc, #36]	@ (800ad14 <siprintf+0x40>)
 800acee:	f853 2b04 	ldr.w	r2, [r3], #4
 800acf2:	9105      	str	r1, [sp, #20]
 800acf4:	6800      	ldr	r0, [r0, #0]
 800acf6:	a902      	add	r1, sp, #8
 800acf8:	9301      	str	r3, [sp, #4]
 800acfa:	941b      	str	r4, [sp, #108]	@ 0x6c
 800acfc:	f000 f9a0 	bl	800b040 <_svfiprintf_r>
 800ad00:	9b02      	ldr	r3, [sp, #8]
 800ad02:	701c      	strb	r4, [r3, #0]
 800ad04:	b01d      	add	sp, #116	@ 0x74
 800ad06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad0a:	b003      	add	sp, #12
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	20000194 	.word	0x20000194
 800ad14:	ffff0208 	.word	0xffff0208

0800ad18 <memset>:
 800ad18:	4603      	mov	r3, r0
 800ad1a:	4402      	add	r2, r0
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d100      	bne.n	800ad22 <memset+0xa>
 800ad20:	4770      	bx	lr
 800ad22:	f803 1b01 	strb.w	r1, [r3], #1
 800ad26:	e7f9      	b.n	800ad1c <memset+0x4>

0800ad28 <__errno>:
 800ad28:	4b01      	ldr	r3, [pc, #4]	@ (800ad30 <__errno+0x8>)
 800ad2a:	6818      	ldr	r0, [r3, #0]
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	20000194 	.word	0x20000194

0800ad34 <__libc_init_array>:
 800ad34:	b570      	push	{r4, r5, r6, lr}
 800ad36:	2600      	movs	r6, #0
 800ad38:	4d0c      	ldr	r5, [pc, #48]	@ (800ad6c <__libc_init_array+0x38>)
 800ad3a:	4c0d      	ldr	r4, [pc, #52]	@ (800ad70 <__libc_init_array+0x3c>)
 800ad3c:	1b64      	subs	r4, r4, r5
 800ad3e:	10a4      	asrs	r4, r4, #2
 800ad40:	42a6      	cmp	r6, r4
 800ad42:	d109      	bne.n	800ad58 <__libc_init_array+0x24>
 800ad44:	f000 fc76 	bl	800b634 <_init>
 800ad48:	2600      	movs	r6, #0
 800ad4a:	4d0a      	ldr	r5, [pc, #40]	@ (800ad74 <__libc_init_array+0x40>)
 800ad4c:	4c0a      	ldr	r4, [pc, #40]	@ (800ad78 <__libc_init_array+0x44>)
 800ad4e:	1b64      	subs	r4, r4, r5
 800ad50:	10a4      	asrs	r4, r4, #2
 800ad52:	42a6      	cmp	r6, r4
 800ad54:	d105      	bne.n	800ad62 <__libc_init_array+0x2e>
 800ad56:	bd70      	pop	{r4, r5, r6, pc}
 800ad58:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad5c:	4798      	blx	r3
 800ad5e:	3601      	adds	r6, #1
 800ad60:	e7ee      	b.n	800ad40 <__libc_init_array+0xc>
 800ad62:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad66:	4798      	blx	r3
 800ad68:	3601      	adds	r6, #1
 800ad6a:	e7f2      	b.n	800ad52 <__libc_init_array+0x1e>
 800ad6c:	0800b7dc 	.word	0x0800b7dc
 800ad70:	0800b7dc 	.word	0x0800b7dc
 800ad74:	0800b7dc 	.word	0x0800b7dc
 800ad78:	0800b7e0 	.word	0x0800b7e0

0800ad7c <__retarget_lock_acquire_recursive>:
 800ad7c:	4770      	bx	lr

0800ad7e <__retarget_lock_release_recursive>:
 800ad7e:	4770      	bx	lr

0800ad80 <memcpy>:
 800ad80:	440a      	add	r2, r1
 800ad82:	4291      	cmp	r1, r2
 800ad84:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad88:	d100      	bne.n	800ad8c <memcpy+0xc>
 800ad8a:	4770      	bx	lr
 800ad8c:	b510      	push	{r4, lr}
 800ad8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad92:	4291      	cmp	r1, r2
 800ad94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad98:	d1f9      	bne.n	800ad8e <memcpy+0xe>
 800ad9a:	bd10      	pop	{r4, pc}

0800ad9c <_free_r>:
 800ad9c:	b538      	push	{r3, r4, r5, lr}
 800ad9e:	4605      	mov	r5, r0
 800ada0:	2900      	cmp	r1, #0
 800ada2:	d040      	beq.n	800ae26 <_free_r+0x8a>
 800ada4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ada8:	1f0c      	subs	r4, r1, #4
 800adaa:	2b00      	cmp	r3, #0
 800adac:	bfb8      	it	lt
 800adae:	18e4      	addlt	r4, r4, r3
 800adb0:	f000 f8de 	bl	800af70 <__malloc_lock>
 800adb4:	4a1c      	ldr	r2, [pc, #112]	@ (800ae28 <_free_r+0x8c>)
 800adb6:	6813      	ldr	r3, [r2, #0]
 800adb8:	b933      	cbnz	r3, 800adc8 <_free_r+0x2c>
 800adba:	6063      	str	r3, [r4, #4]
 800adbc:	6014      	str	r4, [r2, #0]
 800adbe:	4628      	mov	r0, r5
 800adc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adc4:	f000 b8da 	b.w	800af7c <__malloc_unlock>
 800adc8:	42a3      	cmp	r3, r4
 800adca:	d908      	bls.n	800adde <_free_r+0x42>
 800adcc:	6820      	ldr	r0, [r4, #0]
 800adce:	1821      	adds	r1, r4, r0
 800add0:	428b      	cmp	r3, r1
 800add2:	bf01      	itttt	eq
 800add4:	6819      	ldreq	r1, [r3, #0]
 800add6:	685b      	ldreq	r3, [r3, #4]
 800add8:	1809      	addeq	r1, r1, r0
 800adda:	6021      	streq	r1, [r4, #0]
 800addc:	e7ed      	b.n	800adba <_free_r+0x1e>
 800adde:	461a      	mov	r2, r3
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	b10b      	cbz	r3, 800ade8 <_free_r+0x4c>
 800ade4:	42a3      	cmp	r3, r4
 800ade6:	d9fa      	bls.n	800adde <_free_r+0x42>
 800ade8:	6811      	ldr	r1, [r2, #0]
 800adea:	1850      	adds	r0, r2, r1
 800adec:	42a0      	cmp	r0, r4
 800adee:	d10b      	bne.n	800ae08 <_free_r+0x6c>
 800adf0:	6820      	ldr	r0, [r4, #0]
 800adf2:	4401      	add	r1, r0
 800adf4:	1850      	adds	r0, r2, r1
 800adf6:	4283      	cmp	r3, r0
 800adf8:	6011      	str	r1, [r2, #0]
 800adfa:	d1e0      	bne.n	800adbe <_free_r+0x22>
 800adfc:	6818      	ldr	r0, [r3, #0]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	4408      	add	r0, r1
 800ae02:	6010      	str	r0, [r2, #0]
 800ae04:	6053      	str	r3, [r2, #4]
 800ae06:	e7da      	b.n	800adbe <_free_r+0x22>
 800ae08:	d902      	bls.n	800ae10 <_free_r+0x74>
 800ae0a:	230c      	movs	r3, #12
 800ae0c:	602b      	str	r3, [r5, #0]
 800ae0e:	e7d6      	b.n	800adbe <_free_r+0x22>
 800ae10:	6820      	ldr	r0, [r4, #0]
 800ae12:	1821      	adds	r1, r4, r0
 800ae14:	428b      	cmp	r3, r1
 800ae16:	bf01      	itttt	eq
 800ae18:	6819      	ldreq	r1, [r3, #0]
 800ae1a:	685b      	ldreq	r3, [r3, #4]
 800ae1c:	1809      	addeq	r1, r1, r0
 800ae1e:	6021      	streq	r1, [r4, #0]
 800ae20:	6063      	str	r3, [r4, #4]
 800ae22:	6054      	str	r4, [r2, #4]
 800ae24:	e7cb      	b.n	800adbe <_free_r+0x22>
 800ae26:	bd38      	pop	{r3, r4, r5, pc}
 800ae28:	20001714 	.word	0x20001714

0800ae2c <sbrk_aligned>:
 800ae2c:	b570      	push	{r4, r5, r6, lr}
 800ae2e:	4e0f      	ldr	r6, [pc, #60]	@ (800ae6c <sbrk_aligned+0x40>)
 800ae30:	460c      	mov	r4, r1
 800ae32:	6831      	ldr	r1, [r6, #0]
 800ae34:	4605      	mov	r5, r0
 800ae36:	b911      	cbnz	r1, 800ae3e <sbrk_aligned+0x12>
 800ae38:	f000 fba8 	bl	800b58c <_sbrk_r>
 800ae3c:	6030      	str	r0, [r6, #0]
 800ae3e:	4621      	mov	r1, r4
 800ae40:	4628      	mov	r0, r5
 800ae42:	f000 fba3 	bl	800b58c <_sbrk_r>
 800ae46:	1c43      	adds	r3, r0, #1
 800ae48:	d103      	bne.n	800ae52 <sbrk_aligned+0x26>
 800ae4a:	f04f 34ff 	mov.w	r4, #4294967295
 800ae4e:	4620      	mov	r0, r4
 800ae50:	bd70      	pop	{r4, r5, r6, pc}
 800ae52:	1cc4      	adds	r4, r0, #3
 800ae54:	f024 0403 	bic.w	r4, r4, #3
 800ae58:	42a0      	cmp	r0, r4
 800ae5a:	d0f8      	beq.n	800ae4e <sbrk_aligned+0x22>
 800ae5c:	1a21      	subs	r1, r4, r0
 800ae5e:	4628      	mov	r0, r5
 800ae60:	f000 fb94 	bl	800b58c <_sbrk_r>
 800ae64:	3001      	adds	r0, #1
 800ae66:	d1f2      	bne.n	800ae4e <sbrk_aligned+0x22>
 800ae68:	e7ef      	b.n	800ae4a <sbrk_aligned+0x1e>
 800ae6a:	bf00      	nop
 800ae6c:	20001710 	.word	0x20001710

0800ae70 <_malloc_r>:
 800ae70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae74:	1ccd      	adds	r5, r1, #3
 800ae76:	f025 0503 	bic.w	r5, r5, #3
 800ae7a:	3508      	adds	r5, #8
 800ae7c:	2d0c      	cmp	r5, #12
 800ae7e:	bf38      	it	cc
 800ae80:	250c      	movcc	r5, #12
 800ae82:	2d00      	cmp	r5, #0
 800ae84:	4606      	mov	r6, r0
 800ae86:	db01      	blt.n	800ae8c <_malloc_r+0x1c>
 800ae88:	42a9      	cmp	r1, r5
 800ae8a:	d904      	bls.n	800ae96 <_malloc_r+0x26>
 800ae8c:	230c      	movs	r3, #12
 800ae8e:	6033      	str	r3, [r6, #0]
 800ae90:	2000      	movs	r0, #0
 800ae92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af6c <_malloc_r+0xfc>
 800ae9a:	f000 f869 	bl	800af70 <__malloc_lock>
 800ae9e:	f8d8 3000 	ldr.w	r3, [r8]
 800aea2:	461c      	mov	r4, r3
 800aea4:	bb44      	cbnz	r4, 800aef8 <_malloc_r+0x88>
 800aea6:	4629      	mov	r1, r5
 800aea8:	4630      	mov	r0, r6
 800aeaa:	f7ff ffbf 	bl	800ae2c <sbrk_aligned>
 800aeae:	1c43      	adds	r3, r0, #1
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	d158      	bne.n	800af66 <_malloc_r+0xf6>
 800aeb4:	f8d8 4000 	ldr.w	r4, [r8]
 800aeb8:	4627      	mov	r7, r4
 800aeba:	2f00      	cmp	r7, #0
 800aebc:	d143      	bne.n	800af46 <_malloc_r+0xd6>
 800aebe:	2c00      	cmp	r4, #0
 800aec0:	d04b      	beq.n	800af5a <_malloc_r+0xea>
 800aec2:	6823      	ldr	r3, [r4, #0]
 800aec4:	4639      	mov	r1, r7
 800aec6:	4630      	mov	r0, r6
 800aec8:	eb04 0903 	add.w	r9, r4, r3
 800aecc:	f000 fb5e 	bl	800b58c <_sbrk_r>
 800aed0:	4581      	cmp	r9, r0
 800aed2:	d142      	bne.n	800af5a <_malloc_r+0xea>
 800aed4:	6821      	ldr	r1, [r4, #0]
 800aed6:	4630      	mov	r0, r6
 800aed8:	1a6d      	subs	r5, r5, r1
 800aeda:	4629      	mov	r1, r5
 800aedc:	f7ff ffa6 	bl	800ae2c <sbrk_aligned>
 800aee0:	3001      	adds	r0, #1
 800aee2:	d03a      	beq.n	800af5a <_malloc_r+0xea>
 800aee4:	6823      	ldr	r3, [r4, #0]
 800aee6:	442b      	add	r3, r5
 800aee8:	6023      	str	r3, [r4, #0]
 800aeea:	f8d8 3000 	ldr.w	r3, [r8]
 800aeee:	685a      	ldr	r2, [r3, #4]
 800aef0:	bb62      	cbnz	r2, 800af4c <_malloc_r+0xdc>
 800aef2:	f8c8 7000 	str.w	r7, [r8]
 800aef6:	e00f      	b.n	800af18 <_malloc_r+0xa8>
 800aef8:	6822      	ldr	r2, [r4, #0]
 800aefa:	1b52      	subs	r2, r2, r5
 800aefc:	d420      	bmi.n	800af40 <_malloc_r+0xd0>
 800aefe:	2a0b      	cmp	r2, #11
 800af00:	d917      	bls.n	800af32 <_malloc_r+0xc2>
 800af02:	1961      	adds	r1, r4, r5
 800af04:	42a3      	cmp	r3, r4
 800af06:	6025      	str	r5, [r4, #0]
 800af08:	bf18      	it	ne
 800af0a:	6059      	strne	r1, [r3, #4]
 800af0c:	6863      	ldr	r3, [r4, #4]
 800af0e:	bf08      	it	eq
 800af10:	f8c8 1000 	streq.w	r1, [r8]
 800af14:	5162      	str	r2, [r4, r5]
 800af16:	604b      	str	r3, [r1, #4]
 800af18:	4630      	mov	r0, r6
 800af1a:	f000 f82f 	bl	800af7c <__malloc_unlock>
 800af1e:	f104 000b 	add.w	r0, r4, #11
 800af22:	1d23      	adds	r3, r4, #4
 800af24:	f020 0007 	bic.w	r0, r0, #7
 800af28:	1ac2      	subs	r2, r0, r3
 800af2a:	bf1c      	itt	ne
 800af2c:	1a1b      	subne	r3, r3, r0
 800af2e:	50a3      	strne	r3, [r4, r2]
 800af30:	e7af      	b.n	800ae92 <_malloc_r+0x22>
 800af32:	6862      	ldr	r2, [r4, #4]
 800af34:	42a3      	cmp	r3, r4
 800af36:	bf0c      	ite	eq
 800af38:	f8c8 2000 	streq.w	r2, [r8]
 800af3c:	605a      	strne	r2, [r3, #4]
 800af3e:	e7eb      	b.n	800af18 <_malloc_r+0xa8>
 800af40:	4623      	mov	r3, r4
 800af42:	6864      	ldr	r4, [r4, #4]
 800af44:	e7ae      	b.n	800aea4 <_malloc_r+0x34>
 800af46:	463c      	mov	r4, r7
 800af48:	687f      	ldr	r7, [r7, #4]
 800af4a:	e7b6      	b.n	800aeba <_malloc_r+0x4a>
 800af4c:	461a      	mov	r2, r3
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	42a3      	cmp	r3, r4
 800af52:	d1fb      	bne.n	800af4c <_malloc_r+0xdc>
 800af54:	2300      	movs	r3, #0
 800af56:	6053      	str	r3, [r2, #4]
 800af58:	e7de      	b.n	800af18 <_malloc_r+0xa8>
 800af5a:	230c      	movs	r3, #12
 800af5c:	4630      	mov	r0, r6
 800af5e:	6033      	str	r3, [r6, #0]
 800af60:	f000 f80c 	bl	800af7c <__malloc_unlock>
 800af64:	e794      	b.n	800ae90 <_malloc_r+0x20>
 800af66:	6005      	str	r5, [r0, #0]
 800af68:	e7d6      	b.n	800af18 <_malloc_r+0xa8>
 800af6a:	bf00      	nop
 800af6c:	20001714 	.word	0x20001714

0800af70 <__malloc_lock>:
 800af70:	4801      	ldr	r0, [pc, #4]	@ (800af78 <__malloc_lock+0x8>)
 800af72:	f7ff bf03 	b.w	800ad7c <__retarget_lock_acquire_recursive>
 800af76:	bf00      	nop
 800af78:	2000170c 	.word	0x2000170c

0800af7c <__malloc_unlock>:
 800af7c:	4801      	ldr	r0, [pc, #4]	@ (800af84 <__malloc_unlock+0x8>)
 800af7e:	f7ff befe 	b.w	800ad7e <__retarget_lock_release_recursive>
 800af82:	bf00      	nop
 800af84:	2000170c 	.word	0x2000170c

0800af88 <__ssputs_r>:
 800af88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af8c:	461f      	mov	r7, r3
 800af8e:	688e      	ldr	r6, [r1, #8]
 800af90:	4682      	mov	sl, r0
 800af92:	42be      	cmp	r6, r7
 800af94:	460c      	mov	r4, r1
 800af96:	4690      	mov	r8, r2
 800af98:	680b      	ldr	r3, [r1, #0]
 800af9a:	d82d      	bhi.n	800aff8 <__ssputs_r+0x70>
 800af9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afa0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800afa4:	d026      	beq.n	800aff4 <__ssputs_r+0x6c>
 800afa6:	6965      	ldr	r5, [r4, #20]
 800afa8:	6909      	ldr	r1, [r1, #16]
 800afaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afae:	eba3 0901 	sub.w	r9, r3, r1
 800afb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800afb6:	1c7b      	adds	r3, r7, #1
 800afb8:	444b      	add	r3, r9
 800afba:	106d      	asrs	r5, r5, #1
 800afbc:	429d      	cmp	r5, r3
 800afbe:	bf38      	it	cc
 800afc0:	461d      	movcc	r5, r3
 800afc2:	0553      	lsls	r3, r2, #21
 800afc4:	d527      	bpl.n	800b016 <__ssputs_r+0x8e>
 800afc6:	4629      	mov	r1, r5
 800afc8:	f7ff ff52 	bl	800ae70 <_malloc_r>
 800afcc:	4606      	mov	r6, r0
 800afce:	b360      	cbz	r0, 800b02a <__ssputs_r+0xa2>
 800afd0:	464a      	mov	r2, r9
 800afd2:	6921      	ldr	r1, [r4, #16]
 800afd4:	f7ff fed4 	bl	800ad80 <memcpy>
 800afd8:	89a3      	ldrh	r3, [r4, #12]
 800afda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800afde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afe2:	81a3      	strh	r3, [r4, #12]
 800afe4:	6126      	str	r6, [r4, #16]
 800afe6:	444e      	add	r6, r9
 800afe8:	6026      	str	r6, [r4, #0]
 800afea:	463e      	mov	r6, r7
 800afec:	6165      	str	r5, [r4, #20]
 800afee:	eba5 0509 	sub.w	r5, r5, r9
 800aff2:	60a5      	str	r5, [r4, #8]
 800aff4:	42be      	cmp	r6, r7
 800aff6:	d900      	bls.n	800affa <__ssputs_r+0x72>
 800aff8:	463e      	mov	r6, r7
 800affa:	4632      	mov	r2, r6
 800affc:	4641      	mov	r1, r8
 800affe:	6820      	ldr	r0, [r4, #0]
 800b000:	f000 faaa 	bl	800b558 <memmove>
 800b004:	2000      	movs	r0, #0
 800b006:	68a3      	ldr	r3, [r4, #8]
 800b008:	1b9b      	subs	r3, r3, r6
 800b00a:	60a3      	str	r3, [r4, #8]
 800b00c:	6823      	ldr	r3, [r4, #0]
 800b00e:	4433      	add	r3, r6
 800b010:	6023      	str	r3, [r4, #0]
 800b012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b016:	462a      	mov	r2, r5
 800b018:	f000 fad6 	bl	800b5c8 <_realloc_r>
 800b01c:	4606      	mov	r6, r0
 800b01e:	2800      	cmp	r0, #0
 800b020:	d1e0      	bne.n	800afe4 <__ssputs_r+0x5c>
 800b022:	4650      	mov	r0, sl
 800b024:	6921      	ldr	r1, [r4, #16]
 800b026:	f7ff feb9 	bl	800ad9c <_free_r>
 800b02a:	230c      	movs	r3, #12
 800b02c:	f8ca 3000 	str.w	r3, [sl]
 800b030:	89a3      	ldrh	r3, [r4, #12]
 800b032:	f04f 30ff 	mov.w	r0, #4294967295
 800b036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b03a:	81a3      	strh	r3, [r4, #12]
 800b03c:	e7e9      	b.n	800b012 <__ssputs_r+0x8a>
	...

0800b040 <_svfiprintf_r>:
 800b040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b044:	4698      	mov	r8, r3
 800b046:	898b      	ldrh	r3, [r1, #12]
 800b048:	4607      	mov	r7, r0
 800b04a:	061b      	lsls	r3, r3, #24
 800b04c:	460d      	mov	r5, r1
 800b04e:	4614      	mov	r4, r2
 800b050:	b09d      	sub	sp, #116	@ 0x74
 800b052:	d510      	bpl.n	800b076 <_svfiprintf_r+0x36>
 800b054:	690b      	ldr	r3, [r1, #16]
 800b056:	b973      	cbnz	r3, 800b076 <_svfiprintf_r+0x36>
 800b058:	2140      	movs	r1, #64	@ 0x40
 800b05a:	f7ff ff09 	bl	800ae70 <_malloc_r>
 800b05e:	6028      	str	r0, [r5, #0]
 800b060:	6128      	str	r0, [r5, #16]
 800b062:	b930      	cbnz	r0, 800b072 <_svfiprintf_r+0x32>
 800b064:	230c      	movs	r3, #12
 800b066:	603b      	str	r3, [r7, #0]
 800b068:	f04f 30ff 	mov.w	r0, #4294967295
 800b06c:	b01d      	add	sp, #116	@ 0x74
 800b06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b072:	2340      	movs	r3, #64	@ 0x40
 800b074:	616b      	str	r3, [r5, #20]
 800b076:	2300      	movs	r3, #0
 800b078:	9309      	str	r3, [sp, #36]	@ 0x24
 800b07a:	2320      	movs	r3, #32
 800b07c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b080:	2330      	movs	r3, #48	@ 0x30
 800b082:	f04f 0901 	mov.w	r9, #1
 800b086:	f8cd 800c 	str.w	r8, [sp, #12]
 800b08a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b224 <_svfiprintf_r+0x1e4>
 800b08e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b092:	4623      	mov	r3, r4
 800b094:	469a      	mov	sl, r3
 800b096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b09a:	b10a      	cbz	r2, 800b0a0 <_svfiprintf_r+0x60>
 800b09c:	2a25      	cmp	r2, #37	@ 0x25
 800b09e:	d1f9      	bne.n	800b094 <_svfiprintf_r+0x54>
 800b0a0:	ebba 0b04 	subs.w	fp, sl, r4
 800b0a4:	d00b      	beq.n	800b0be <_svfiprintf_r+0x7e>
 800b0a6:	465b      	mov	r3, fp
 800b0a8:	4622      	mov	r2, r4
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	4638      	mov	r0, r7
 800b0ae:	f7ff ff6b 	bl	800af88 <__ssputs_r>
 800b0b2:	3001      	adds	r0, #1
 800b0b4:	f000 80a7 	beq.w	800b206 <_svfiprintf_r+0x1c6>
 800b0b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0ba:	445a      	add	r2, fp
 800b0bc:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0be:	f89a 3000 	ldrb.w	r3, [sl]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f000 809f 	beq.w	800b206 <_svfiprintf_r+0x1c6>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0d2:	f10a 0a01 	add.w	sl, sl, #1
 800b0d6:	9304      	str	r3, [sp, #16]
 800b0d8:	9307      	str	r3, [sp, #28]
 800b0da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0de:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0e0:	4654      	mov	r4, sl
 800b0e2:	2205      	movs	r2, #5
 800b0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e8:	484e      	ldr	r0, [pc, #312]	@ (800b224 <_svfiprintf_r+0x1e4>)
 800b0ea:	f000 fa5f 	bl	800b5ac <memchr>
 800b0ee:	9a04      	ldr	r2, [sp, #16]
 800b0f0:	b9d8      	cbnz	r0, 800b12a <_svfiprintf_r+0xea>
 800b0f2:	06d0      	lsls	r0, r2, #27
 800b0f4:	bf44      	itt	mi
 800b0f6:	2320      	movmi	r3, #32
 800b0f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0fc:	0711      	lsls	r1, r2, #28
 800b0fe:	bf44      	itt	mi
 800b100:	232b      	movmi	r3, #43	@ 0x2b
 800b102:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b106:	f89a 3000 	ldrb.w	r3, [sl]
 800b10a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b10c:	d015      	beq.n	800b13a <_svfiprintf_r+0xfa>
 800b10e:	4654      	mov	r4, sl
 800b110:	2000      	movs	r0, #0
 800b112:	f04f 0c0a 	mov.w	ip, #10
 800b116:	9a07      	ldr	r2, [sp, #28]
 800b118:	4621      	mov	r1, r4
 800b11a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b11e:	3b30      	subs	r3, #48	@ 0x30
 800b120:	2b09      	cmp	r3, #9
 800b122:	d94b      	bls.n	800b1bc <_svfiprintf_r+0x17c>
 800b124:	b1b0      	cbz	r0, 800b154 <_svfiprintf_r+0x114>
 800b126:	9207      	str	r2, [sp, #28]
 800b128:	e014      	b.n	800b154 <_svfiprintf_r+0x114>
 800b12a:	eba0 0308 	sub.w	r3, r0, r8
 800b12e:	fa09 f303 	lsl.w	r3, r9, r3
 800b132:	4313      	orrs	r3, r2
 800b134:	46a2      	mov	sl, r4
 800b136:	9304      	str	r3, [sp, #16]
 800b138:	e7d2      	b.n	800b0e0 <_svfiprintf_r+0xa0>
 800b13a:	9b03      	ldr	r3, [sp, #12]
 800b13c:	1d19      	adds	r1, r3, #4
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	9103      	str	r1, [sp, #12]
 800b142:	2b00      	cmp	r3, #0
 800b144:	bfbb      	ittet	lt
 800b146:	425b      	neglt	r3, r3
 800b148:	f042 0202 	orrlt.w	r2, r2, #2
 800b14c:	9307      	strge	r3, [sp, #28]
 800b14e:	9307      	strlt	r3, [sp, #28]
 800b150:	bfb8      	it	lt
 800b152:	9204      	strlt	r2, [sp, #16]
 800b154:	7823      	ldrb	r3, [r4, #0]
 800b156:	2b2e      	cmp	r3, #46	@ 0x2e
 800b158:	d10a      	bne.n	800b170 <_svfiprintf_r+0x130>
 800b15a:	7863      	ldrb	r3, [r4, #1]
 800b15c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b15e:	d132      	bne.n	800b1c6 <_svfiprintf_r+0x186>
 800b160:	9b03      	ldr	r3, [sp, #12]
 800b162:	3402      	adds	r4, #2
 800b164:	1d1a      	adds	r2, r3, #4
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	9203      	str	r2, [sp, #12]
 800b16a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b16e:	9305      	str	r3, [sp, #20]
 800b170:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b228 <_svfiprintf_r+0x1e8>
 800b174:	2203      	movs	r2, #3
 800b176:	4650      	mov	r0, sl
 800b178:	7821      	ldrb	r1, [r4, #0]
 800b17a:	f000 fa17 	bl	800b5ac <memchr>
 800b17e:	b138      	cbz	r0, 800b190 <_svfiprintf_r+0x150>
 800b180:	2240      	movs	r2, #64	@ 0x40
 800b182:	9b04      	ldr	r3, [sp, #16]
 800b184:	eba0 000a 	sub.w	r0, r0, sl
 800b188:	4082      	lsls	r2, r0
 800b18a:	4313      	orrs	r3, r2
 800b18c:	3401      	adds	r4, #1
 800b18e:	9304      	str	r3, [sp, #16]
 800b190:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b194:	2206      	movs	r2, #6
 800b196:	4825      	ldr	r0, [pc, #148]	@ (800b22c <_svfiprintf_r+0x1ec>)
 800b198:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b19c:	f000 fa06 	bl	800b5ac <memchr>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d036      	beq.n	800b212 <_svfiprintf_r+0x1d2>
 800b1a4:	4b22      	ldr	r3, [pc, #136]	@ (800b230 <_svfiprintf_r+0x1f0>)
 800b1a6:	bb1b      	cbnz	r3, 800b1f0 <_svfiprintf_r+0x1b0>
 800b1a8:	9b03      	ldr	r3, [sp, #12]
 800b1aa:	3307      	adds	r3, #7
 800b1ac:	f023 0307 	bic.w	r3, r3, #7
 800b1b0:	3308      	adds	r3, #8
 800b1b2:	9303      	str	r3, [sp, #12]
 800b1b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1b6:	4433      	add	r3, r6
 800b1b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1ba:	e76a      	b.n	800b092 <_svfiprintf_r+0x52>
 800b1bc:	460c      	mov	r4, r1
 800b1be:	2001      	movs	r0, #1
 800b1c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1c4:	e7a8      	b.n	800b118 <_svfiprintf_r+0xd8>
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	f04f 0c0a 	mov.w	ip, #10
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	3401      	adds	r4, #1
 800b1d0:	9305      	str	r3, [sp, #20]
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1d8:	3a30      	subs	r2, #48	@ 0x30
 800b1da:	2a09      	cmp	r2, #9
 800b1dc:	d903      	bls.n	800b1e6 <_svfiprintf_r+0x1a6>
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d0c6      	beq.n	800b170 <_svfiprintf_r+0x130>
 800b1e2:	9105      	str	r1, [sp, #20]
 800b1e4:	e7c4      	b.n	800b170 <_svfiprintf_r+0x130>
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1ee:	e7f0      	b.n	800b1d2 <_svfiprintf_r+0x192>
 800b1f0:	ab03      	add	r3, sp, #12
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	462a      	mov	r2, r5
 800b1f6:	4638      	mov	r0, r7
 800b1f8:	4b0e      	ldr	r3, [pc, #56]	@ (800b234 <_svfiprintf_r+0x1f4>)
 800b1fa:	a904      	add	r1, sp, #16
 800b1fc:	f3af 8000 	nop.w
 800b200:	1c42      	adds	r2, r0, #1
 800b202:	4606      	mov	r6, r0
 800b204:	d1d6      	bne.n	800b1b4 <_svfiprintf_r+0x174>
 800b206:	89ab      	ldrh	r3, [r5, #12]
 800b208:	065b      	lsls	r3, r3, #25
 800b20a:	f53f af2d 	bmi.w	800b068 <_svfiprintf_r+0x28>
 800b20e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b210:	e72c      	b.n	800b06c <_svfiprintf_r+0x2c>
 800b212:	ab03      	add	r3, sp, #12
 800b214:	9300      	str	r3, [sp, #0]
 800b216:	462a      	mov	r2, r5
 800b218:	4638      	mov	r0, r7
 800b21a:	4b06      	ldr	r3, [pc, #24]	@ (800b234 <_svfiprintf_r+0x1f4>)
 800b21c:	a904      	add	r1, sp, #16
 800b21e:	f000 f87d 	bl	800b31c <_printf_i>
 800b222:	e7ed      	b.n	800b200 <_svfiprintf_r+0x1c0>
 800b224:	0800b79e 	.word	0x0800b79e
 800b228:	0800b7a4 	.word	0x0800b7a4
 800b22c:	0800b7a8 	.word	0x0800b7a8
 800b230:	00000000 	.word	0x00000000
 800b234:	0800af89 	.word	0x0800af89

0800b238 <_printf_common>:
 800b238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b23c:	4616      	mov	r6, r2
 800b23e:	4698      	mov	r8, r3
 800b240:	688a      	ldr	r2, [r1, #8]
 800b242:	690b      	ldr	r3, [r1, #16]
 800b244:	4607      	mov	r7, r0
 800b246:	4293      	cmp	r3, r2
 800b248:	bfb8      	it	lt
 800b24a:	4613      	movlt	r3, r2
 800b24c:	6033      	str	r3, [r6, #0]
 800b24e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b252:	460c      	mov	r4, r1
 800b254:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b258:	b10a      	cbz	r2, 800b25e <_printf_common+0x26>
 800b25a:	3301      	adds	r3, #1
 800b25c:	6033      	str	r3, [r6, #0]
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	0699      	lsls	r1, r3, #26
 800b262:	bf42      	ittt	mi
 800b264:	6833      	ldrmi	r3, [r6, #0]
 800b266:	3302      	addmi	r3, #2
 800b268:	6033      	strmi	r3, [r6, #0]
 800b26a:	6825      	ldr	r5, [r4, #0]
 800b26c:	f015 0506 	ands.w	r5, r5, #6
 800b270:	d106      	bne.n	800b280 <_printf_common+0x48>
 800b272:	f104 0a19 	add.w	sl, r4, #25
 800b276:	68e3      	ldr	r3, [r4, #12]
 800b278:	6832      	ldr	r2, [r6, #0]
 800b27a:	1a9b      	subs	r3, r3, r2
 800b27c:	42ab      	cmp	r3, r5
 800b27e:	dc2b      	bgt.n	800b2d8 <_printf_common+0xa0>
 800b280:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b284:	6822      	ldr	r2, [r4, #0]
 800b286:	3b00      	subs	r3, #0
 800b288:	bf18      	it	ne
 800b28a:	2301      	movne	r3, #1
 800b28c:	0692      	lsls	r2, r2, #26
 800b28e:	d430      	bmi.n	800b2f2 <_printf_common+0xba>
 800b290:	4641      	mov	r1, r8
 800b292:	4638      	mov	r0, r7
 800b294:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b298:	47c8      	blx	r9
 800b29a:	3001      	adds	r0, #1
 800b29c:	d023      	beq.n	800b2e6 <_printf_common+0xae>
 800b29e:	6823      	ldr	r3, [r4, #0]
 800b2a0:	6922      	ldr	r2, [r4, #16]
 800b2a2:	f003 0306 	and.w	r3, r3, #6
 800b2a6:	2b04      	cmp	r3, #4
 800b2a8:	bf14      	ite	ne
 800b2aa:	2500      	movne	r5, #0
 800b2ac:	6833      	ldreq	r3, [r6, #0]
 800b2ae:	f04f 0600 	mov.w	r6, #0
 800b2b2:	bf08      	it	eq
 800b2b4:	68e5      	ldreq	r5, [r4, #12]
 800b2b6:	f104 041a 	add.w	r4, r4, #26
 800b2ba:	bf08      	it	eq
 800b2bc:	1aed      	subeq	r5, r5, r3
 800b2be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b2c2:	bf08      	it	eq
 800b2c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	bfc4      	itt	gt
 800b2cc:	1a9b      	subgt	r3, r3, r2
 800b2ce:	18ed      	addgt	r5, r5, r3
 800b2d0:	42b5      	cmp	r5, r6
 800b2d2:	d11a      	bne.n	800b30a <_printf_common+0xd2>
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	e008      	b.n	800b2ea <_printf_common+0xb2>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	4652      	mov	r2, sl
 800b2dc:	4641      	mov	r1, r8
 800b2de:	4638      	mov	r0, r7
 800b2e0:	47c8      	blx	r9
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	d103      	bne.n	800b2ee <_printf_common+0xb6>
 800b2e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ee:	3501      	adds	r5, #1
 800b2f0:	e7c1      	b.n	800b276 <_printf_common+0x3e>
 800b2f2:	2030      	movs	r0, #48	@ 0x30
 800b2f4:	18e1      	adds	r1, r4, r3
 800b2f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b2fa:	1c5a      	adds	r2, r3, #1
 800b2fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b300:	4422      	add	r2, r4
 800b302:	3302      	adds	r3, #2
 800b304:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b308:	e7c2      	b.n	800b290 <_printf_common+0x58>
 800b30a:	2301      	movs	r3, #1
 800b30c:	4622      	mov	r2, r4
 800b30e:	4641      	mov	r1, r8
 800b310:	4638      	mov	r0, r7
 800b312:	47c8      	blx	r9
 800b314:	3001      	adds	r0, #1
 800b316:	d0e6      	beq.n	800b2e6 <_printf_common+0xae>
 800b318:	3601      	adds	r6, #1
 800b31a:	e7d9      	b.n	800b2d0 <_printf_common+0x98>

0800b31c <_printf_i>:
 800b31c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b320:	7e0f      	ldrb	r7, [r1, #24]
 800b322:	4691      	mov	r9, r2
 800b324:	2f78      	cmp	r7, #120	@ 0x78
 800b326:	4680      	mov	r8, r0
 800b328:	460c      	mov	r4, r1
 800b32a:	469a      	mov	sl, r3
 800b32c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b32e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b332:	d807      	bhi.n	800b344 <_printf_i+0x28>
 800b334:	2f62      	cmp	r7, #98	@ 0x62
 800b336:	d80a      	bhi.n	800b34e <_printf_i+0x32>
 800b338:	2f00      	cmp	r7, #0
 800b33a:	f000 80d1 	beq.w	800b4e0 <_printf_i+0x1c4>
 800b33e:	2f58      	cmp	r7, #88	@ 0x58
 800b340:	f000 80b8 	beq.w	800b4b4 <_printf_i+0x198>
 800b344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b348:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b34c:	e03a      	b.n	800b3c4 <_printf_i+0xa8>
 800b34e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b352:	2b15      	cmp	r3, #21
 800b354:	d8f6      	bhi.n	800b344 <_printf_i+0x28>
 800b356:	a101      	add	r1, pc, #4	@ (adr r1, 800b35c <_printf_i+0x40>)
 800b358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b35c:	0800b3b5 	.word	0x0800b3b5
 800b360:	0800b3c9 	.word	0x0800b3c9
 800b364:	0800b345 	.word	0x0800b345
 800b368:	0800b345 	.word	0x0800b345
 800b36c:	0800b345 	.word	0x0800b345
 800b370:	0800b345 	.word	0x0800b345
 800b374:	0800b3c9 	.word	0x0800b3c9
 800b378:	0800b345 	.word	0x0800b345
 800b37c:	0800b345 	.word	0x0800b345
 800b380:	0800b345 	.word	0x0800b345
 800b384:	0800b345 	.word	0x0800b345
 800b388:	0800b4c7 	.word	0x0800b4c7
 800b38c:	0800b3f3 	.word	0x0800b3f3
 800b390:	0800b481 	.word	0x0800b481
 800b394:	0800b345 	.word	0x0800b345
 800b398:	0800b345 	.word	0x0800b345
 800b39c:	0800b4e9 	.word	0x0800b4e9
 800b3a0:	0800b345 	.word	0x0800b345
 800b3a4:	0800b3f3 	.word	0x0800b3f3
 800b3a8:	0800b345 	.word	0x0800b345
 800b3ac:	0800b345 	.word	0x0800b345
 800b3b0:	0800b489 	.word	0x0800b489
 800b3b4:	6833      	ldr	r3, [r6, #0]
 800b3b6:	1d1a      	adds	r2, r3, #4
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	6032      	str	r2, [r6, #0]
 800b3bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e09c      	b.n	800b502 <_printf_i+0x1e6>
 800b3c8:	6833      	ldr	r3, [r6, #0]
 800b3ca:	6820      	ldr	r0, [r4, #0]
 800b3cc:	1d19      	adds	r1, r3, #4
 800b3ce:	6031      	str	r1, [r6, #0]
 800b3d0:	0606      	lsls	r6, r0, #24
 800b3d2:	d501      	bpl.n	800b3d8 <_printf_i+0xbc>
 800b3d4:	681d      	ldr	r5, [r3, #0]
 800b3d6:	e003      	b.n	800b3e0 <_printf_i+0xc4>
 800b3d8:	0645      	lsls	r5, r0, #25
 800b3da:	d5fb      	bpl.n	800b3d4 <_printf_i+0xb8>
 800b3dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3e0:	2d00      	cmp	r5, #0
 800b3e2:	da03      	bge.n	800b3ec <_printf_i+0xd0>
 800b3e4:	232d      	movs	r3, #45	@ 0x2d
 800b3e6:	426d      	negs	r5, r5
 800b3e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3ec:	230a      	movs	r3, #10
 800b3ee:	4858      	ldr	r0, [pc, #352]	@ (800b550 <_printf_i+0x234>)
 800b3f0:	e011      	b.n	800b416 <_printf_i+0xfa>
 800b3f2:	6821      	ldr	r1, [r4, #0]
 800b3f4:	6833      	ldr	r3, [r6, #0]
 800b3f6:	0608      	lsls	r0, r1, #24
 800b3f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b3fc:	d402      	bmi.n	800b404 <_printf_i+0xe8>
 800b3fe:	0649      	lsls	r1, r1, #25
 800b400:	bf48      	it	mi
 800b402:	b2ad      	uxthmi	r5, r5
 800b404:	2f6f      	cmp	r7, #111	@ 0x6f
 800b406:	6033      	str	r3, [r6, #0]
 800b408:	bf14      	ite	ne
 800b40a:	230a      	movne	r3, #10
 800b40c:	2308      	moveq	r3, #8
 800b40e:	4850      	ldr	r0, [pc, #320]	@ (800b550 <_printf_i+0x234>)
 800b410:	2100      	movs	r1, #0
 800b412:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b416:	6866      	ldr	r6, [r4, #4]
 800b418:	2e00      	cmp	r6, #0
 800b41a:	60a6      	str	r6, [r4, #8]
 800b41c:	db05      	blt.n	800b42a <_printf_i+0x10e>
 800b41e:	6821      	ldr	r1, [r4, #0]
 800b420:	432e      	orrs	r6, r5
 800b422:	f021 0104 	bic.w	r1, r1, #4
 800b426:	6021      	str	r1, [r4, #0]
 800b428:	d04b      	beq.n	800b4c2 <_printf_i+0x1a6>
 800b42a:	4616      	mov	r6, r2
 800b42c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b430:	fb03 5711 	mls	r7, r3, r1, r5
 800b434:	5dc7      	ldrb	r7, [r0, r7]
 800b436:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b43a:	462f      	mov	r7, r5
 800b43c:	42bb      	cmp	r3, r7
 800b43e:	460d      	mov	r5, r1
 800b440:	d9f4      	bls.n	800b42c <_printf_i+0x110>
 800b442:	2b08      	cmp	r3, #8
 800b444:	d10b      	bne.n	800b45e <_printf_i+0x142>
 800b446:	6823      	ldr	r3, [r4, #0]
 800b448:	07df      	lsls	r7, r3, #31
 800b44a:	d508      	bpl.n	800b45e <_printf_i+0x142>
 800b44c:	6923      	ldr	r3, [r4, #16]
 800b44e:	6861      	ldr	r1, [r4, #4]
 800b450:	4299      	cmp	r1, r3
 800b452:	bfde      	ittt	le
 800b454:	2330      	movle	r3, #48	@ 0x30
 800b456:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b45a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b45e:	1b92      	subs	r2, r2, r6
 800b460:	6122      	str	r2, [r4, #16]
 800b462:	464b      	mov	r3, r9
 800b464:	4621      	mov	r1, r4
 800b466:	4640      	mov	r0, r8
 800b468:	f8cd a000 	str.w	sl, [sp]
 800b46c:	aa03      	add	r2, sp, #12
 800b46e:	f7ff fee3 	bl	800b238 <_printf_common>
 800b472:	3001      	adds	r0, #1
 800b474:	d14a      	bne.n	800b50c <_printf_i+0x1f0>
 800b476:	f04f 30ff 	mov.w	r0, #4294967295
 800b47a:	b004      	add	sp, #16
 800b47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b480:	6823      	ldr	r3, [r4, #0]
 800b482:	f043 0320 	orr.w	r3, r3, #32
 800b486:	6023      	str	r3, [r4, #0]
 800b488:	2778      	movs	r7, #120	@ 0x78
 800b48a:	4832      	ldr	r0, [pc, #200]	@ (800b554 <_printf_i+0x238>)
 800b48c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b490:	6823      	ldr	r3, [r4, #0]
 800b492:	6831      	ldr	r1, [r6, #0]
 800b494:	061f      	lsls	r7, r3, #24
 800b496:	f851 5b04 	ldr.w	r5, [r1], #4
 800b49a:	d402      	bmi.n	800b4a2 <_printf_i+0x186>
 800b49c:	065f      	lsls	r7, r3, #25
 800b49e:	bf48      	it	mi
 800b4a0:	b2ad      	uxthmi	r5, r5
 800b4a2:	6031      	str	r1, [r6, #0]
 800b4a4:	07d9      	lsls	r1, r3, #31
 800b4a6:	bf44      	itt	mi
 800b4a8:	f043 0320 	orrmi.w	r3, r3, #32
 800b4ac:	6023      	strmi	r3, [r4, #0]
 800b4ae:	b11d      	cbz	r5, 800b4b8 <_printf_i+0x19c>
 800b4b0:	2310      	movs	r3, #16
 800b4b2:	e7ad      	b.n	800b410 <_printf_i+0xf4>
 800b4b4:	4826      	ldr	r0, [pc, #152]	@ (800b550 <_printf_i+0x234>)
 800b4b6:	e7e9      	b.n	800b48c <_printf_i+0x170>
 800b4b8:	6823      	ldr	r3, [r4, #0]
 800b4ba:	f023 0320 	bic.w	r3, r3, #32
 800b4be:	6023      	str	r3, [r4, #0]
 800b4c0:	e7f6      	b.n	800b4b0 <_printf_i+0x194>
 800b4c2:	4616      	mov	r6, r2
 800b4c4:	e7bd      	b.n	800b442 <_printf_i+0x126>
 800b4c6:	6833      	ldr	r3, [r6, #0]
 800b4c8:	6825      	ldr	r5, [r4, #0]
 800b4ca:	1d18      	adds	r0, r3, #4
 800b4cc:	6961      	ldr	r1, [r4, #20]
 800b4ce:	6030      	str	r0, [r6, #0]
 800b4d0:	062e      	lsls	r6, r5, #24
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	d501      	bpl.n	800b4da <_printf_i+0x1be>
 800b4d6:	6019      	str	r1, [r3, #0]
 800b4d8:	e002      	b.n	800b4e0 <_printf_i+0x1c4>
 800b4da:	0668      	lsls	r0, r5, #25
 800b4dc:	d5fb      	bpl.n	800b4d6 <_printf_i+0x1ba>
 800b4de:	8019      	strh	r1, [r3, #0]
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	4616      	mov	r6, r2
 800b4e4:	6123      	str	r3, [r4, #16]
 800b4e6:	e7bc      	b.n	800b462 <_printf_i+0x146>
 800b4e8:	6833      	ldr	r3, [r6, #0]
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	1d1a      	adds	r2, r3, #4
 800b4ee:	6032      	str	r2, [r6, #0]
 800b4f0:	681e      	ldr	r6, [r3, #0]
 800b4f2:	6862      	ldr	r2, [r4, #4]
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	f000 f859 	bl	800b5ac <memchr>
 800b4fa:	b108      	cbz	r0, 800b500 <_printf_i+0x1e4>
 800b4fc:	1b80      	subs	r0, r0, r6
 800b4fe:	6060      	str	r0, [r4, #4]
 800b500:	6863      	ldr	r3, [r4, #4]
 800b502:	6123      	str	r3, [r4, #16]
 800b504:	2300      	movs	r3, #0
 800b506:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b50a:	e7aa      	b.n	800b462 <_printf_i+0x146>
 800b50c:	4632      	mov	r2, r6
 800b50e:	4649      	mov	r1, r9
 800b510:	4640      	mov	r0, r8
 800b512:	6923      	ldr	r3, [r4, #16]
 800b514:	47d0      	blx	sl
 800b516:	3001      	adds	r0, #1
 800b518:	d0ad      	beq.n	800b476 <_printf_i+0x15a>
 800b51a:	6823      	ldr	r3, [r4, #0]
 800b51c:	079b      	lsls	r3, r3, #30
 800b51e:	d413      	bmi.n	800b548 <_printf_i+0x22c>
 800b520:	68e0      	ldr	r0, [r4, #12]
 800b522:	9b03      	ldr	r3, [sp, #12]
 800b524:	4298      	cmp	r0, r3
 800b526:	bfb8      	it	lt
 800b528:	4618      	movlt	r0, r3
 800b52a:	e7a6      	b.n	800b47a <_printf_i+0x15e>
 800b52c:	2301      	movs	r3, #1
 800b52e:	4632      	mov	r2, r6
 800b530:	4649      	mov	r1, r9
 800b532:	4640      	mov	r0, r8
 800b534:	47d0      	blx	sl
 800b536:	3001      	adds	r0, #1
 800b538:	d09d      	beq.n	800b476 <_printf_i+0x15a>
 800b53a:	3501      	adds	r5, #1
 800b53c:	68e3      	ldr	r3, [r4, #12]
 800b53e:	9903      	ldr	r1, [sp, #12]
 800b540:	1a5b      	subs	r3, r3, r1
 800b542:	42ab      	cmp	r3, r5
 800b544:	dcf2      	bgt.n	800b52c <_printf_i+0x210>
 800b546:	e7eb      	b.n	800b520 <_printf_i+0x204>
 800b548:	2500      	movs	r5, #0
 800b54a:	f104 0619 	add.w	r6, r4, #25
 800b54e:	e7f5      	b.n	800b53c <_printf_i+0x220>
 800b550:	0800b7af 	.word	0x0800b7af
 800b554:	0800b7c0 	.word	0x0800b7c0

0800b558 <memmove>:
 800b558:	4288      	cmp	r0, r1
 800b55a:	b510      	push	{r4, lr}
 800b55c:	eb01 0402 	add.w	r4, r1, r2
 800b560:	d902      	bls.n	800b568 <memmove+0x10>
 800b562:	4284      	cmp	r4, r0
 800b564:	4623      	mov	r3, r4
 800b566:	d807      	bhi.n	800b578 <memmove+0x20>
 800b568:	1e43      	subs	r3, r0, #1
 800b56a:	42a1      	cmp	r1, r4
 800b56c:	d008      	beq.n	800b580 <memmove+0x28>
 800b56e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b572:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b576:	e7f8      	b.n	800b56a <memmove+0x12>
 800b578:	4601      	mov	r1, r0
 800b57a:	4402      	add	r2, r0
 800b57c:	428a      	cmp	r2, r1
 800b57e:	d100      	bne.n	800b582 <memmove+0x2a>
 800b580:	bd10      	pop	{r4, pc}
 800b582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b586:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b58a:	e7f7      	b.n	800b57c <memmove+0x24>

0800b58c <_sbrk_r>:
 800b58c:	b538      	push	{r3, r4, r5, lr}
 800b58e:	2300      	movs	r3, #0
 800b590:	4d05      	ldr	r5, [pc, #20]	@ (800b5a8 <_sbrk_r+0x1c>)
 800b592:	4604      	mov	r4, r0
 800b594:	4608      	mov	r0, r1
 800b596:	602b      	str	r3, [r5, #0]
 800b598:	f7f7 fb5e 	bl	8002c58 <_sbrk>
 800b59c:	1c43      	adds	r3, r0, #1
 800b59e:	d102      	bne.n	800b5a6 <_sbrk_r+0x1a>
 800b5a0:	682b      	ldr	r3, [r5, #0]
 800b5a2:	b103      	cbz	r3, 800b5a6 <_sbrk_r+0x1a>
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	bd38      	pop	{r3, r4, r5, pc}
 800b5a8:	20001708 	.word	0x20001708

0800b5ac <memchr>:
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	b510      	push	{r4, lr}
 800b5b0:	b2c9      	uxtb	r1, r1
 800b5b2:	4402      	add	r2, r0
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	d101      	bne.n	800b5be <memchr+0x12>
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	e003      	b.n	800b5c6 <memchr+0x1a>
 800b5be:	7804      	ldrb	r4, [r0, #0]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	428c      	cmp	r4, r1
 800b5c4:	d1f6      	bne.n	800b5b4 <memchr+0x8>
 800b5c6:	bd10      	pop	{r4, pc}

0800b5c8 <_realloc_r>:
 800b5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5cc:	4607      	mov	r7, r0
 800b5ce:	4614      	mov	r4, r2
 800b5d0:	460d      	mov	r5, r1
 800b5d2:	b921      	cbnz	r1, 800b5de <_realloc_r+0x16>
 800b5d4:	4611      	mov	r1, r2
 800b5d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5da:	f7ff bc49 	b.w	800ae70 <_malloc_r>
 800b5de:	b92a      	cbnz	r2, 800b5ec <_realloc_r+0x24>
 800b5e0:	f7ff fbdc 	bl	800ad9c <_free_r>
 800b5e4:	4625      	mov	r5, r4
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ec:	f000 f81a 	bl	800b624 <_malloc_usable_size_r>
 800b5f0:	4284      	cmp	r4, r0
 800b5f2:	4606      	mov	r6, r0
 800b5f4:	d802      	bhi.n	800b5fc <_realloc_r+0x34>
 800b5f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b5fa:	d8f4      	bhi.n	800b5e6 <_realloc_r+0x1e>
 800b5fc:	4621      	mov	r1, r4
 800b5fe:	4638      	mov	r0, r7
 800b600:	f7ff fc36 	bl	800ae70 <_malloc_r>
 800b604:	4680      	mov	r8, r0
 800b606:	b908      	cbnz	r0, 800b60c <_realloc_r+0x44>
 800b608:	4645      	mov	r5, r8
 800b60a:	e7ec      	b.n	800b5e6 <_realloc_r+0x1e>
 800b60c:	42b4      	cmp	r4, r6
 800b60e:	4622      	mov	r2, r4
 800b610:	4629      	mov	r1, r5
 800b612:	bf28      	it	cs
 800b614:	4632      	movcs	r2, r6
 800b616:	f7ff fbb3 	bl	800ad80 <memcpy>
 800b61a:	4629      	mov	r1, r5
 800b61c:	4638      	mov	r0, r7
 800b61e:	f7ff fbbd 	bl	800ad9c <_free_r>
 800b622:	e7f1      	b.n	800b608 <_realloc_r+0x40>

0800b624 <_malloc_usable_size_r>:
 800b624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b628:	1f18      	subs	r0, r3, #4
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	bfbc      	itt	lt
 800b62e:	580b      	ldrlt	r3, [r1, r0]
 800b630:	18c0      	addlt	r0, r0, r3
 800b632:	4770      	bx	lr

0800b634 <_init>:
 800b634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b636:	bf00      	nop
 800b638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b63a:	bc08      	pop	{r3}
 800b63c:	469e      	mov	lr, r3
 800b63e:	4770      	bx	lr

0800b640 <_fini>:
 800b640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b642:	bf00      	nop
 800b644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b646:	bc08      	pop	{r3}
 800b648:	469e      	mov	lr, r3
 800b64a:	4770      	bx	lr
