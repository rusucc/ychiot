
DECAWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b508  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800b614  0800b614  0000c614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b79c  0800b79c  0000d1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b79c  0800b79c  0000c79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7a4  0800b7a4  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7a4  0800b7a4  0000c7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7a8  0800b7a8  0000c7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800b7ac  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001530  200001e8  0800b990  0000d1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001718  0800b990  0000d718  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001437a  00000000  00000000  0000d20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003793  00000000  00000000  00021587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00024d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e05  00000000  00000000  00025fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa3b  00000000  00000000  00026dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015535  00000000  00000000  000417f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b6d2  00000000  00000000  00056d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e23ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005180  00000000  00000000  000e2444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e75c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e8 	.word	0x200001e8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b5fc 	.word	0x0800b5fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ec 	.word	0x200001ec
 8000148:	0800b5fc 	.word	0x0800b5fc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <dummy>:
static void writeValueToBytes(uint8_t data[], long val, unsigned int n);
static bool getBit(uint8_t data[], unsigned int n, unsigned int bit);

static void readBytesOTP(dwDevice_t* dev, uint16_t address, uint8_t data[]);

static void dummy(){
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
	;
}
 8000160:	bf00      	nop
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr

08000168 <dwInit>:

void dwInit(dwDevice_t* dev, dwOps_t* ops)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
 800016e:	6078      	str	r0, [r7, #4]
 8000170:	6039      	str	r1, [r7, #0]
	dev->ops = ops;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	683a      	ldr	r2, [r7, #0]
 8000176:	601a      	str	r2, [r3, #0]
	dev->userdata = NULL;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2200      	movs	r2, #0
 800017c:	605a      	str	r2, [r3, #4]

	/* Device default state */
	dev->extendedFrameLength = FRAME_LENGTH_NORMAL;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2200      	movs	r2, #0
 8000182:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	dev->pacSize = PAC_SIZE_8;
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	2208      	movs	r2, #8
 800018a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	dev->pulseFrequency = TX_PULSE_FREQ_16MHZ;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	2201      	movs	r2, #1
 8000192:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	dev->dataRate = TRX_RATE_6800KBPS;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2202      	movs	r2, #2
 800019a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	dev->preambleLength = TX_PREAMBLE_LEN_128;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2205      	movs	r2, #5
 80001a2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	dev->preambleCode = PREAMBLE_CODE_16MHZ_4;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2204      	movs	r2, #4
 80001aa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	dev->channel = CHANNEL_5;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2205      	movs	r2, #5
 80001b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	dev->smartPower = false;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	dev->frameCheck = true;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2201      	movs	r2, #1
 80001c2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	dev->permanentReceive = false;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2200      	movs	r2, #0
 80001ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	dev->deviceMode = IDLE_MODE;
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2200      	movs	r2, #0
 80001d2:	731a      	strb	r2, [r3, #12]

	dev->forceTxPower = false;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2200      	movs	r2, #0
 80001d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

	writeValueToBytes(dev->antennaDelay.raw, 16384, LEN_STAMP);
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	3338      	adds	r3, #56	@ 0x38
 80001e0:	2205      	movs	r2, #5
 80001e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 ff48 	bl	800207c <writeValueToBytes>

	// Dummy callback handlers
	dev->handleSent = dummy;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000218 <dwInit+0xb0>)
 80001f0:	641a      	str	r2, [r3, #64]	@ 0x40
	dev->handleError = dummy;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	4a08      	ldr	r2, [pc, #32]	@ (8000218 <dwInit+0xb0>)
 80001f6:	645a      	str	r2, [r3, #68]	@ 0x44
	dev->handleReceived = dummy;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	4a07      	ldr	r2, [pc, #28]	@ (8000218 <dwInit+0xb0>)
 80001fc:	649a      	str	r2, [r3, #72]	@ 0x48
	dev->handleReceiveTimeout = dummy;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4a05      	ldr	r2, [pc, #20]	@ (8000218 <dwInit+0xb0>)
 8000202:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->handleReceiveFailed = dummy;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a04      	ldr	r2, [pc, #16]	@ (8000218 <dwInit+0xb0>)
 8000208:	651a      	str	r2, [r3, #80]	@ 0x50
	dev->handleReceiveTimestampAvailable = dummy;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a02      	ldr	r2, [pc, #8]	@ (8000218 <dwInit+0xb0>)
 800020e:	655a      	str	r2, [r3, #84]	@ 0x54

}
 8000210:	bf00      	nop
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	0800015d 	.word	0x0800015d

0800021c <dwConfigure>:
{
	return dev->userdata;
}

int dwConfigure(dwDevice_t* dev)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af02      	add	r7, sp, #8
 8000222:	6078      	str	r0, [r7, #4]
	dwEnableClock(dev, dwClockAuto);
 8000224:	2100      	movs	r1, #0
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f000 f916 	bl	8000458 <dwEnableClock>
	delayms(5);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	2105      	movs	r1, #5
 8000234:	6878      	ldr	r0, [r7, #4]
 8000236:	4798      	blx	r3

	// Reset the chip
	if (dev->ops->reset) {
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	691b      	ldr	r3, [r3, #16]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d005      	beq.n	800024e <dwConfigure+0x32>
		dev->ops->reset(dev);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	691b      	ldr	r3, [r3, #16]
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	4798      	blx	r3
 800024c:	e002      	b.n	8000254 <dwConfigure+0x38>
	} else {
		dwSoftReset(dev);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 f966 	bl	8000520 <dwSoftReset>
	}

	if (dwGetDeviceId(dev) != 0xdeca0130) {
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 f8a8 	bl	80003aa <dwGetDeviceId>
 800025a:	4603      	mov	r3, r0
 800025c:	4a27      	ldr	r2, [pc, #156]	@ (80002fc <dwConfigure+0xe0>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d001      	beq.n	8000266 <dwConfigure+0x4a>
		return DW_ERROR_WRONG_ID;
 8000262:	2301      	movs	r3, #1
 8000264:	e045      	b.n	80002f2 <dwConfigure+0xd6>
	}

	// Set default address
	memset(dev->networkAndAddress, 0xff, LEN_PANADR);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	330d      	adds	r3, #13
 800026a:	2204      	movs	r2, #4
 800026c:	21ff      	movs	r1, #255	@ 0xff
 800026e:	4618      	mov	r0, r3
 8000270:	f00a fd36 	bl	800ace0 <memset>
	dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	330d      	adds	r3, #13
 8000278:	2204      	movs	r2, #4
 800027a:	9200      	str	r2, [sp, #0]
 800027c:	2200      	movs	r2, #0
 800027e:	2103      	movs	r1, #3
 8000280:	6878      	ldr	r0, [r7, #4]
 8000282:	f001 ffa4 	bl	80021ce <dwSpiWrite>

	// default configuration
	memset(dev->syscfg, 0, LEN_SYS_CFG);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	3311      	adds	r3, #17
 800028a:	2204      	movs	r2, #4
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f00a fd26 	bl	800ace0 <memset>
	dwSetDoubleBuffering(dev, false);
 8000294:	2100      	movs	r1, #0
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f000 fa9d 	bl	80007d6 <dwSetDoubleBuffering>
	dwSetInterruptPolarity(dev, true);
 800029c:	2101      	movs	r1, #1
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f000 fab6 	bl	8000810 <dwSetInterruptPolarity>
	dwWriteSystemConfigurationRegister(dev);
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f000 f9b6 	bl	8000616 <dwWriteSystemConfigurationRegister>
	// default interrupt mask, i.e. no interrupts
	dwClearInterrupts(dev);
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f000 fb78 	bl	80009a0 <dwClearInterrupts>
	dwWriteSystemEventMaskRegister(dev);
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f000 fa05 	bl	80006c0 <dwWriteSystemEventMaskRegister>
	// load LDE micro-code
	dwEnableClock(dev, dwClockXti);
 80002b6:	2101      	movs	r1, #1
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f000 f8cd 	bl	8000458 <dwEnableClock>
	delayms(5);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	2105      	movs	r1, #5
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	4798      	blx	r3
	dwManageLDE(dev);
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f000 f818 	bl	8000300 <dwManageLDE>
	delayms(5);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	68db      	ldr	r3, [r3, #12]
 80002d6:	2105      	movs	r1, #5
 80002d8:	6878      	ldr	r0, [r7, #4]
 80002da:	4798      	blx	r3
	dwEnableClock(dev, dwClockPll);
 80002dc:	2102      	movs	r1, #2
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f000 f8ba 	bl	8000458 <dwEnableClock>
	delayms(5);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	2105      	movs	r1, #5
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	4798      	blx	r3
	//
	// delayms(1);

	// Initialize for default configuration (as per datasheet)

	return DW_ERROR_OK;
 80002f0:	2300      	movs	r3, #0
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	deca0130 	.word	0xdeca0130

08000300 <dwManageLDE>:

void dwManageLDE(dwDevice_t* dev) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af02      	add	r7, sp, #8
 8000306:	6078      	str	r0, [r7, #4]
	// }
	// tell the chip to load the LDE microcode
	// TODO remove clock-related code (PMSC_CTRL) as handled separately
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	uint8_t otpctrl[LEN_OTP_CTRL];
	memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 8000308:	f107 030c 	add.w	r3, r7, #12
 800030c:	2204      	movs	r2, #4
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f00a fce5 	bl	800ace0 <memset>
	memset(otpctrl, 0, LEN_OTP_CTRL);
 8000316:	f107 0308 	add.w	r3, r7, #8
 800031a:	2202      	movs	r2, #2
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f00a fcde 	bl	800ace0 <memset>
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000324:	f107 030c 	add.w	r3, r7, #12
 8000328:	2204      	movs	r2, #4
 800032a:	9200      	str	r2, [sp, #0]
 800032c:	2200      	movs	r2, #0
 800032e:	2136      	movs	r1, #54	@ 0x36
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f001 fef9 	bl	8002128 <dwSpiRead>
	dwSpiRead(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	2202      	movs	r2, #2
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	2206      	movs	r2, #6
 8000340:	212d      	movs	r1, #45	@ 0x2d
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f001 fef0 	bl	8002128 <dwSpiRead>
	pmscctrl0[0] = 0x01;
 8000348:	2301      	movs	r3, #1
 800034a:	733b      	strb	r3, [r7, #12]
	pmscctrl0[1] = 0x03;
 800034c:	2303      	movs	r3, #3
 800034e:	737b      	strb	r3, [r7, #13]
	otpctrl[0] = 0x00;
 8000350:	2300      	movs	r3, #0
 8000352:	723b      	strb	r3, [r7, #8]
	otpctrl[1] = 0x80;
 8000354:	2380      	movs	r3, #128	@ 0x80
 8000356:	727b      	strb	r3, [r7, #9]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	2204      	movs	r2, #4
 800035e:	9200      	str	r2, [sp, #0]
 8000360:	2200      	movs	r2, #0
 8000362:	2136      	movs	r1, #54	@ 0x36
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f001 ff32 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	2202      	movs	r2, #2
 8000370:	9200      	str	r2, [sp, #0]
 8000372:	2206      	movs	r2, #6
 8000374:	212d      	movs	r1, #45	@ 0x2d
 8000376:	6878      	ldr	r0, [r7, #4]
 8000378:	f001 ff29 	bl	80021ce <dwSpiWrite>
	delayms(5);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	68db      	ldr	r3, [r3, #12]
 8000382:	2105      	movs	r1, #5
 8000384:	6878      	ldr	r0, [r7, #4]
 8000386:	4798      	blx	r3
	pmscctrl0[0] = 0x00;
 8000388:	2300      	movs	r3, #0
 800038a:	733b      	strb	r3, [r7, #12]
	pmscctrl0[1] = 0x02;
 800038c:	2302      	movs	r3, #2
 800038e:	737b      	strb	r3, [r7, #13]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000390:	f107 030c 	add.w	r3, r7, #12
 8000394:	2204      	movs	r2, #4
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	2200      	movs	r2, #0
 800039a:	2136      	movs	r1, #54	@ 0x36
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f001 ff16 	bl	80021ce <dwSpiWrite>
}
 80003a2:	bf00      	nop
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <dwGetDeviceId>:


uint32_t dwGetDeviceId(dwDevice_t* dev)
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
	return dwSpiRead32(dev, DEV_ID, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2100      	movs	r1, #0
 80003b6:	6878      	ldr	r0, [r7, #4]
 80003b8:	f001 fef4 	bl	80021a4 <dwSpiRead32>
 80003bc:	4603      	mov	r3, r0
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <dwEnableAllLeds>:

void dwEnableAllLeds(dwDevice_t* dev)
{
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b084      	sub	sp, #16
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
	uint32_t reg;

	// Set all 4 GPIO in LED mode
	reg = dwSpiRead32(dev, GPIO_CTRL, GPIO_MODE_SUB);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2126      	movs	r1, #38	@ 0x26
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f001 fee6 	bl	80021a4 <dwSpiRead32>
 80003d8:	60f8      	str	r0, [r7, #12]
	reg &= ~0x00003FC0ul;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80003e0:	60fb      	str	r3, [r7, #12]
	reg |= 0x00001540ul;
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	f443 53aa 	orr.w	r3, r3, #5440	@ 0x1540
 80003e8:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, GPIO_CTRL, GPIO_MODE_SUB, reg);
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	2200      	movs	r2, #0
 80003ee:	2126      	movs	r1, #38	@ 0x26
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f001 ff46 	bl	8002282 <dwSpiWrite32>

	// Enable debounce clock (used to clock the LED blinking)
	reg = dwSpiRead32(dev, PMSC, PMSC_CTRL0_SUB);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2136      	movs	r1, #54	@ 0x36
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f001 fed2 	bl	80021a4 <dwSpiRead32>
 8000400:	60f8      	str	r0, [r7, #12]
	reg |= 0x00840000ul;
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	f443 0304 	orr.w	r3, r3, #8650752	@ 0x840000
 8000408:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_CTRL0_SUB, reg);
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	2200      	movs	r2, #0
 800040e:	2136      	movs	r1, #54	@ 0x36
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f001 ff36 	bl	8002282 <dwSpiWrite32>

	// Enable LED blinking and set the rate
	reg = 0x00000110ul;
 8000416:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800041a:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	2228      	movs	r2, #40	@ 0x28
 8000420:	2136      	movs	r1, #54	@ 0x36
 8000422:	6878      	ldr	r0, [r7, #4]
 8000424:	f001 ff2d 	bl	8002282 <dwSpiWrite32>

	// Trigger a manual blink of the LEDs for test
	reg |= 0x000f0000ul;
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 800042e:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	2228      	movs	r2, #40	@ 0x28
 8000434:	2136      	movs	r1, #54	@ 0x36
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	f001 ff23 	bl	8002282 <dwSpiWrite32>
	reg &= ~0x000f0000ul;
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000442:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	2228      	movs	r2, #40	@ 0x28
 8000448:	2136      	movs	r1, #54	@ 0x36
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f001 ff19 	bl	8002282 <dwSpiWrite32>
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <dwEnableClock>:

void dwEnableClock(dwDevice_t* dev, dwClock_t clock) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af02      	add	r7, sp, #8
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 8000464:	f107 030c 	add.w	r3, r7, #12
 8000468:	2204      	movs	r2, #4
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f00a fc37 	bl	800ace0 <memset>
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000472:	f107 030c 	add.w	r3, r7, #12
 8000476:	2204      	movs	r2, #4
 8000478:	9200      	str	r2, [sp, #0]
 800047a:	2200      	movs	r2, #0
 800047c:	2136      	movs	r1, #54	@ 0x36
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f001 fe52 	bl	8002128 <dwSpiRead>
	if(clock == dwClockAuto) {
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d10d      	bne.n	80004a6 <dwEnableClock+0x4e>
		dev->ops->spiSetSpeed(dev, dwSpiSpeedLow);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	2100      	movs	r1, #0
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	4798      	blx	r3
		pmscctrl0[0] = dwClockAuto;
 8000496:	2300      	movs	r3, #0
 8000498:	733b      	strb	r3, [r7, #12]
		pmscctrl0[1] &= 0xFE;
 800049a:	7b7b      	ldrb	r3, [r7, #13]
 800049c:	f023 0301 	bic.w	r3, r3, #1
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	737b      	strb	r3, [r7, #13]
 80004a4:	e026      	b.n	80004f4 <dwEnableClock+0x9c>
	} else if(clock == dwClockXti) {
 80004a6:	78fb      	ldrb	r3, [r7, #3]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d110      	bne.n	80004ce <dwEnableClock+0x76>
		dev->ops->spiSetSpeed(dev, dwSpiSpeedLow);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	2100      	movs	r1, #0
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	4798      	blx	r3
		pmscctrl0[0] &= 0xFC;
 80004b8:	7b3b      	ldrb	r3, [r7, #12]
 80004ba:	f023 0303 	bic.w	r3, r3, #3
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	733b      	strb	r3, [r7, #12]
		pmscctrl0[0] |= dwClockXti;
 80004c2:	7b3b      	ldrb	r3, [r7, #12]
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	733b      	strb	r3, [r7, #12]
 80004cc:	e012      	b.n	80004f4 <dwEnableClock+0x9c>
	} else if(clock == dwClockPll) {
 80004ce:	78fb      	ldrb	r3, [r7, #3]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d10f      	bne.n	80004f4 <dwEnableClock+0x9c>
		dev->ops->spiSetSpeed(dev, dwSpiSpeedHigh);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	2101      	movs	r1, #1
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	4798      	blx	r3
		pmscctrl0[0] &= 0xFC;
 80004e0:	7b3b      	ldrb	r3, [r7, #12]
 80004e2:	f023 0303 	bic.w	r3, r3, #3
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	733b      	strb	r3, [r7, #12]
		pmscctrl0[0] |= dwClockPll;
 80004ea:	7b3b      	ldrb	r3, [r7, #12]
 80004ec:	f043 0302 	orr.w	r3, r3, #2
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	733b      	strb	r3, [r7, #12]
	} else {
		// TODO deliver proper warning
	}
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, 1);
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	2201      	movs	r2, #1
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	2200      	movs	r2, #0
 80004fe:	2136      	movs	r1, #54	@ 0x36
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f001 fe64 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	2204      	movs	r2, #4
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	2200      	movs	r2, #0
 8000510:	2136      	movs	r1, #54	@ 0x36
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f001 fe5b 	bl	80021ce <dwSpiWrite>
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <dwSoftReset>:

void dwSoftReset(dwDevice_t* dev)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af02      	add	r7, sp, #8
 8000526:	6078      	str	r0, [r7, #4]
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2204      	movs	r2, #4
 800052e:	9200      	str	r2, [sp, #0]
 8000530:	2200      	movs	r2, #0
 8000532:	2136      	movs	r1, #54	@ 0x36
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f001 fdf7 	bl	8002128 <dwSpiRead>
	pmscctrl0[0] = 0x01;
 800053a:	2301      	movs	r3, #1
 800053c:	733b      	strb	r3, [r7, #12]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 800053e:	f107 030c 	add.w	r3, r7, #12
 8000542:	2204      	movs	r2, #4
 8000544:	9200      	str	r2, [sp, #0]
 8000546:	2200      	movs	r2, #0
 8000548:	2136      	movs	r1, #54	@ 0x36
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f001 fe3f 	bl	80021ce <dwSpiWrite>
	pmscctrl0[3] = 0x00;
 8000550:	2300      	movs	r3, #0
 8000552:	73fb      	strb	r3, [r7, #15]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2204      	movs	r2, #4
 800055a:	9200      	str	r2, [sp, #0]
 800055c:	2200      	movs	r2, #0
 800055e:	2136      	movs	r1, #54	@ 0x36
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f001 fe34 	bl	80021ce <dwSpiWrite>
	delayms(10);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	210a      	movs	r1, #10
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	4798      	blx	r3
	pmscctrl0[0] = 0x00;
 8000572:	2300      	movs	r3, #0
 8000574:	733b      	strb	r3, [r7, #12]
	pmscctrl0[3] = 0xF0;
 8000576:	23f0      	movs	r3, #240	@ 0xf0
 8000578:	73fb      	strb	r3, [r7, #15]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	2204      	movs	r2, #4
 8000580:	9200      	str	r2, [sp, #0]
 8000582:	2200      	movs	r2, #0
 8000584:	2136      	movs	r1, #54	@ 0x36
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f001 fe21 	bl	80021ce <dwSpiWrite>
	// force into idle mode
	dwIdle(dev);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 fa16 	bl	80009be <dwIdle>
}
 8000592:	bf00      	nop
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <dwRxSoftReset>:

/**
 Reset the receiver. Needed after errors or timeouts.
 From the DW1000 User Manual, v2.13 page 35: "Due to an issue in the re-initialisation of the receiver, it is necessary to apply a receiver reset after certain receiver error or timeout events (i.e. RXPHE (PHY Header Error), RXRFSL (Reed Solomon error), RXRFTO (Frame wait timeout), etc.). This ensures that the next good frame will have correctly calculated timestamp. It is not necessary to do this in the cases of RXPTO (Preamble detection Timeout) and RXSFDTO (SFD timeout). For details on how to apply a receiver-only reset see SOFTRESET field of Sub- Register 0x36:00 – PMSC_CTRL0."
 */
void dwRxSoftReset(dwDevice_t* dev) {
 800059a:	b580      	push	{r7, lr}
 800059c:	b086      	sub	sp, #24
 800059e:	af02      	add	r7, sp, #8
 80005a0:	6078      	str	r0, [r7, #4]
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	2204      	movs	r2, #4
 80005a8:	9200      	str	r2, [sp, #0]
 80005aa:	2200      	movs	r2, #0
 80005ac:	2136      	movs	r1, #54	@ 0x36
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f001 fdba 	bl	8002128 <dwSpiRead>

	pmscctrl0[3] = pmscctrl0[3] & 0xEF;
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	f023 0310 	bic.w	r3, r3, #16
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	73fb      	strb	r3, [r7, #15]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	2204      	movs	r2, #4
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	2200      	movs	r2, #0
 80005c8:	2136      	movs	r1, #54	@ 0x36
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f001 fdff 	bl	80021ce <dwSpiWrite>
	pmscctrl0[3] = pmscctrl0[3] | 0x10;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f043 0310 	orr.w	r3, r3, #16
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	73fb      	strb	r3, [r7, #15]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2204      	movs	r2, #4
 80005e0:	9200      	str	r2, [sp, #0]
 80005e2:	2200      	movs	r2, #0
 80005e4:	2136      	movs	r1, #54	@ 0x36
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f001 fdf1 	bl	80021ce <dwSpiWrite>
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <dwReadSystemConfigurationRegister>:

/* ###########################################################################
 * #### DW1000 register read/write ###########################################
 * ######################################################################### */

void dwReadSystemConfigurationRegister(dwDevice_t* dev) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3311      	adds	r3, #17
 8000600:	2204      	movs	r2, #4
 8000602:	9200      	str	r2, [sp, #0]
 8000604:	2200      	movs	r2, #0
 8000606:	2104      	movs	r1, #4
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f001 fd8d 	bl	8002128 <dwSpiRead>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <dwWriteSystemConfigurationRegister>:

void dwWriteSystemConfigurationRegister(dwDevice_t* dev) {
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af02      	add	r7, sp, #8
 800061c:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3311      	adds	r3, #17
 8000622:	2204      	movs	r2, #4
 8000624:	9200      	str	r2, [sp, #0]
 8000626:	2200      	movs	r2, #0
 8000628:	2104      	movs	r1, #4
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f001 fdcf 	bl	80021ce <dwSpiWrite>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <dwReadSystemEventStatusRegister>:

void dwReadSystemEventStatusRegister(dwDevice_t* dev) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af02      	add	r7, sp, #8
 800063e:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, SYS_STATUS, NO_SUB, dev->sysstatus, LEN_SYS_STATUS);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	331d      	adds	r3, #29
 8000644:	2205      	movs	r2, #5
 8000646:	9200      	str	r2, [sp, #0]
 8000648:	2200      	movs	r2, #0
 800064a:	210f      	movs	r1, #15
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f001 fd6b 	bl	8002128 <dwSpiRead>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <dwReadNetworkIdAndDeviceAddress>:

void dwReadNetworkIdAndDeviceAddress(dwDevice_t* dev) {
 800065a:	b580      	push	{r7, lr}
 800065c:	b084      	sub	sp, #16
 800065e:	af02      	add	r7, sp, #8
 8000660:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	330d      	adds	r3, #13
 8000666:	2204      	movs	r2, #4
 8000668:	9200      	str	r2, [sp, #0]
 800066a:	2200      	movs	r2, #0
 800066c:	2103      	movs	r1, #3
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f001 fd5a 	bl	8002128 <dwSpiRead>
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <dwWriteNetworkIdAndDeviceAddress>:

void dwWriteNetworkIdAndDeviceAddress(dwDevice_t* dev) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af02      	add	r7, sp, #8
 8000682:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	330d      	adds	r3, #13
 8000688:	2204      	movs	r2, #4
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	2103      	movs	r1, #3
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f001 fd9c 	bl	80021ce <dwSpiWrite>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <dwReadSystemEventMaskRegister>:

void dwReadSystemEventMaskRegister(dwDevice_t* dev) {
 800069e:	b580      	push	{r7, lr}
 80006a0:	b084      	sub	sp, #16
 80006a2:	af02      	add	r7, sp, #8
 80006a4:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	3315      	adds	r3, #21
 80006aa:	2204      	movs	r2, #4
 80006ac:	9200      	str	r2, [sp, #0]
 80006ae:	2200      	movs	r2, #0
 80006b0:	210e      	movs	r1, #14
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f001 fd38 	bl	8002128 <dwSpiRead>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <dwWriteSystemEventMaskRegister>:

void dwWriteSystemEventMaskRegister(dwDevice_t* dev) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3315      	adds	r3, #21
 80006cc:	2204      	movs	r2, #4
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	2200      	movs	r2, #0
 80006d2:	210e      	movs	r1, #14
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f001 fd7a 	bl	80021ce <dwSpiWrite>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <dwReadChannelControlRegister>:

void dwReadChannelControlRegister(dwDevice_t* dev) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b084      	sub	sp, #16
 80006e6:	af02      	add	r7, sp, #8
 80006e8:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	3319      	adds	r3, #25
 80006ee:	2204      	movs	r2, #4
 80006f0:	9200      	str	r2, [sp, #0]
 80006f2:	2200      	movs	r2, #0
 80006f4:	211f      	movs	r1, #31
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f001 fd16 	bl	8002128 <dwSpiRead>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <dwWriteChannelControlRegister>:

void dwWriteChannelControlRegister(dwDevice_t* dev) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3319      	adds	r3, #25
 8000710:	2204      	movs	r2, #4
 8000712:	9200      	str	r2, [sp, #0]
 8000714:	2200      	movs	r2, #0
 8000716:	211f      	movs	r1, #31
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f001 fd58 	bl	80021ce <dwSpiWrite>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <dwReadTransmitFrameControlRegister>:

void dwReadTransmitFrameControlRegister(dwDevice_t* dev) {
 8000726:	b580      	push	{r7, lr}
 8000728:	b084      	sub	sp, #16
 800072a:	af02      	add	r7, sp, #8
 800072c:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	3322      	adds	r3, #34	@ 0x22
 8000732:	2205      	movs	r2, #5
 8000734:	9200      	str	r2, [sp, #0]
 8000736:	2200      	movs	r2, #0
 8000738:	2108      	movs	r1, #8
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f001 fcf4 	bl	8002128 <dwSpiRead>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <dwWriteTransmitFrameControlRegister>:

void dwWriteTransmitFrameControlRegister(dwDevice_t* dev) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af02      	add	r7, sp, #8
 800074e:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3322      	adds	r3, #34	@ 0x22
 8000754:	2205      	movs	r2, #5
 8000756:	9200      	str	r2, [sp, #0]
 8000758:	2200      	movs	r2, #0
 800075a:	2108      	movs	r1, #8
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f001 fd36 	bl	80021ce <dwSpiWrite>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <dwSetFrameFilter>:
void dwSetReceiveWaitTimeout(dwDevice_t *dev, uint16_t timeout) {
	dwSpiWrite(dev, RX_FWTO, NO_SUB, &timeout, 2);
	setBit(dev->syscfg, LEN_SYS_CFG, RXWTOE_BIT, timeout!=0);
}

void dwSetFrameFilter(dwDevice_t* dev, bool val) {
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	460b      	mov	r3, r1
 8000774:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, FFEN_BIT, val);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f103 0011 	add.w	r0, r3, #17
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2200      	movs	r2, #0
 8000780:	2104      	movs	r1, #4
 8000782:	f001 fc17 	bl	8001fb4 <setBit>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <dwSetFrameFilterAllowData>:

void dwSetFrameFilterAllowBeacon(dwDevice_t* dev, bool val) {
	setBit(dev->syscfg, LEN_SYS_CFG, FFAB_BIT, val);
}

void dwSetFrameFilterAllowData(dwDevice_t* dev, bool val) {
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
 8000796:	460b      	mov	r3, r1
 8000798:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, FFAD_BIT, val);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f103 0011 	add.w	r0, r3, #17
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	2203      	movs	r2, #3
 80007a4:	2104      	movs	r1, #4
 80007a6:	f001 fc05 	bl	8001fb4 <setBit>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <dwSetFrameFilterAllowReserved>:

void dwSetFrameFilterAllowMAC(dwDevice_t* dev, bool val) {
	setBit(dev->syscfg, LEN_SYS_CFG, FFAM_BIT, val);
}

void dwSetFrameFilterAllowReserved(dwDevice_t* dev, bool val) {
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, FFAR_BIT, val);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f103 0011 	add.w	r0, r3, #17
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	2206      	movs	r2, #6
 80007c8:	2104      	movs	r1, #4
 80007ca:	f001 fbf3 	bl	8001fb4 <setBit>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <dwSetDoubleBuffering>:

void dwSetDoubleBuffering(dwDevice_t* dev, bool val) {
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	460b      	mov	r3, r1
 80007e0:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, DIS_DRXB_BIT, !val);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f103 0011 	add.w	r0, r3, #17
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	bf14      	ite	ne
 80007ee:	2301      	movne	r3, #1
 80007f0:	2300      	moveq	r3, #0
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	f083 0301 	eor.w	r3, r3, #1
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	220c      	movs	r2, #12
 8000802:	2104      	movs	r1, #4
 8000804:	f001 fbd6 	bl	8001fb4 <setBit>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <dwSetInterruptPolarity>:

void dwSetInterruptPolarity(dwDevice_t* dev, bool val) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, HIRQ_POL_BIT, val);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f103 0011 	add.w	r0, r3, #17
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	2209      	movs	r2, #9
 8000826:	2104      	movs	r1, #4
 8000828:	f001 fbc4 	bl	8001fb4 <setBit>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <dwSetReceiverAutoReenable>:

void dwSetReceiverAutoReenable(dwDevice_t* dev, bool val) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, RXAUTR_BIT, val);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f103 0011 	add.w	r0, r3, #17
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	221d      	movs	r2, #29
 800084a:	2104      	movs	r1, #4
 800084c:	f001 fbb2 	bl	8001fb4 <setBit>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <dwInterruptOnSent>:

void dwInterruptOnSent(dwDevice_t* dev, bool val) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, TXFRS_BIT, val);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f103 0015 	add.w	r0, r3, #21
 800086a:	78fb      	ldrb	r3, [r7, #3]
 800086c:	2207      	movs	r2, #7
 800086e:	2104      	movs	r1, #4
 8000870:	f001 fba0 	bl	8001fb4 <setBit>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <dwInterruptOnReceived>:

void dwInterruptOnReceived(dwDevice_t* dev, bool val) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, RXDFR_BIT, val);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f103 0015 	add.w	r0, r3, #21
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	220d      	movs	r2, #13
 8000892:	2104      	movs	r1, #4
 8000894:	f001 fb8e 	bl	8001fb4 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, RXFCG_BIT, val);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f103 0015 	add.w	r0, r3, #21
 800089e:	78fb      	ldrb	r3, [r7, #3]
 80008a0:	220e      	movs	r2, #14
 80008a2:	2104      	movs	r1, #4
 80008a4:	f001 fb86 	bl	8001fb4 <setBit>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <dwInterruptOnReceiveFailed>:

void dwInterruptOnReceiveFailed(dwDevice_t* dev, bool val) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_STATUS, LDEERR_BIT, val);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f103 0015 	add.w	r0, r3, #21
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	2212      	movs	r2, #18
 80008c6:	2105      	movs	r1, #5
 80008c8:	f001 fb74 	bl	8001fb4 <setBit>
	setBit(dev->sysmask, LEN_SYS_STATUS, RXFCE_BIT, val);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f103 0015 	add.w	r0, r3, #21
 80008d2:	78fb      	ldrb	r3, [r7, #3]
 80008d4:	220f      	movs	r2, #15
 80008d6:	2105      	movs	r1, #5
 80008d8:	f001 fb6c 	bl	8001fb4 <setBit>
	setBit(dev->sysmask, LEN_SYS_STATUS, RXPHE_BIT, val);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f103 0015 	add.w	r0, r3, #21
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	220c      	movs	r2, #12
 80008e6:	2105      	movs	r1, #5
 80008e8:	f001 fb64 	bl	8001fb4 <setBit>
	setBit(dev->sysmask, LEN_SYS_STATUS, RXRFSL_BIT, val);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f103 0015 	add.w	r0, r3, #21
 80008f2:	78fb      	ldrb	r3, [r7, #3]
 80008f4:	2210      	movs	r2, #16
 80008f6:	2105      	movs	r1, #5
 80008f8:	f001 fb5c 	bl	8001fb4 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, RXSFDTO_BIT, val);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f103 0015 	add.w	r0, r3, #21
 8000902:	78fb      	ldrb	r3, [r7, #3]
 8000904:	221a      	movs	r2, #26
 8000906:	2104      	movs	r1, #4
 8000908:	f001 fb54 	bl	8001fb4 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, AFFREJ_BIT, val);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f103 0015 	add.w	r0, r3, #21
 8000912:	78fb      	ldrb	r3, [r7, #3]
 8000914:	221d      	movs	r2, #29
 8000916:	2104      	movs	r1, #4
 8000918:	f001 fb4c 	bl	8001fb4 <setBit>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <dwInterruptOnReceiveTimeout>:

void dwInterruptOnReceiveTimeout(dwDevice_t* dev, bool val) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, RXRFTO_BIT, val);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f103 0015 	add.w	r0, r3, #21
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	2211      	movs	r2, #17
 800093a:	2104      	movs	r1, #4
 800093c:	f001 fb3a 	bl	8001fb4 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, RXPTO_BIT, val);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f103 0015 	add.w	r0, r3, #21
 8000946:	78fb      	ldrb	r3, [r7, #3]
 8000948:	2215      	movs	r2, #21
 800094a:	2104      	movs	r1, #4
 800094c:	f001 fb32 	bl	8001fb4 <setBit>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <dwInterruptOnReceiveTimestampAvailable>:

void dwInterruptOnReceiveTimestampAvailable(dwDevice_t* dev, bool val) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, LDEDONE_BIT, val);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f103 0015 	add.w	r0, r3, #21
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	220a      	movs	r2, #10
 800096e:	2104      	movs	r1, #4
 8000970:	f001 fb20 	bl	8001fb4 <setBit>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <dwInterruptOnAutomaticAcknowledgeTrigger>:

void dwInterruptOnAutomaticAcknowledgeTrigger(dwDevice_t* dev, bool val) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, AAT_BIT, val);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f103 0015 	add.w	r0, r3, #21
 800098e:	78fb      	ldrb	r3, [r7, #3]
 8000990:	2203      	movs	r2, #3
 8000992:	2104      	movs	r1, #4
 8000994:	f001 fb0e 	bl	8001fb4 <setBit>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <dwClearInterrupts>:

void dwClearInterrupts(dwDevice_t* dev) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	memset(dev->sysmask, 0, LEN_SYS_MASK);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3315      	adds	r3, #21
 80009ac:	2204      	movs	r2, #4
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f00a f995 	bl	800ace0 <memset>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <dwIdle>:

void dwIdle(dwDevice_t* dev)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b084      	sub	sp, #16
 80009c2:	af02      	add	r7, sp, #8
 80009c4:	6078      	str	r0, [r7, #4]
	 memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3308      	adds	r3, #8
 80009ca:	2204      	movs	r2, #4
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f00a f986 	bl	800ace0 <memset>
	 dev->sysctrl[0] |= 1<<TRXOFF_BIT;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	7a1b      	ldrb	r3, [r3, #8]
 80009d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	721a      	strb	r2, [r3, #8]
	 dev->deviceMode = IDLE_MODE;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	731a      	strb	r2, [r3, #12]
	 dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3308      	adds	r3, #8
 80009ec:	2204      	movs	r2, #4
 80009ee:	9200      	str	r2, [sp, #0]
 80009f0:	2200      	movs	r2, #0
 80009f2:	210d      	movs	r1, #13
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f001 fbea 	bl	80021ce <dwSpiWrite>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <dwNewReceive>:

void dwNewReceive(dwDevice_t* dev) {
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
	dwIdle(dev);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ffd7 	bl	80009be <dwIdle>
	memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3308      	adds	r3, #8
 8000a14:	2204      	movs	r2, #4
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f00a f961 	bl	800ace0 <memset>
	dwClearReceiveStatus(dev);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f000 fb76 	bl	8001110 <dwClearReceiveStatus>
	dev->deviceMode = RX_MODE;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2201      	movs	r2, #1
 8000a28:	731a      	strb	r2, [r3, #12]
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <dwStartReceive>:

void dwStartReceive(dwDevice_t* dev) {
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af02      	add	r7, sp, #8
 8000a38:	6078      	str	r0, [r7, #4]
	setBit(dev->sysctrl, LEN_SYS_CTRL, SFCST_BIT, !dev->frameCheck);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f103 0008 	add.w	r0, r3, #8
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	bf14      	ite	ne
 8000a4a:	2301      	movne	r3, #1
 8000a4c:	2300      	moveq	r3, #0
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	f083 0301 	eor.w	r3, r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2104      	movs	r1, #4
 8000a60:	f001 faa8 	bl	8001fb4 <setBit>
	setBit(dev->sysctrl, LEN_SYS_CTRL, RXENAB_BIT, true);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f103 0008 	add.w	r0, r3, #8
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	2104      	movs	r1, #4
 8000a70:	f001 faa0 	bl	8001fb4 <setBit>
	dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3308      	adds	r3, #8
 8000a78:	2204      	movs	r2, #4
 8000a7a:	9200      	str	r2, [sp, #0]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	210d      	movs	r1, #13
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f001 fba4 	bl	80021ce <dwSpiWrite>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <dwNewConfiguration>:
	} else {
		dev->deviceMode = IDLE_MODE;
	}
}

void dwNewConfiguration(dwDevice_t* dev) {
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
	dwIdle(dev);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ff91 	bl	80009be <dwIdle>
	dwReadNetworkIdAndDeviceAddress(dev);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff fddc 	bl	800065a <dwReadNetworkIdAndDeviceAddress>
	dwReadSystemConfigurationRegister(dev);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fda6 	bl	80005f4 <dwReadSystemConfigurationRegister>
	dwReadChannelControlRegister(dev);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff fe1a 	bl	80006e2 <dwReadChannelControlRegister>
	dwReadTransmitFrameControlRegister(dev);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff fe39 	bl	8000726 <dwReadTransmitFrameControlRegister>
	dwReadSystemEventMaskRegister(dev);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff fdf2 	bl	800069e <dwReadSystemEventMaskRegister>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <dwCommitConfiguration>:

void dwCommitConfiguration(dwDevice_t* dev) {
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b084      	sub	sp, #16
 8000ac6:	af02      	add	r7, sp, #8
 8000ac8:	6078      	str	r0, [r7, #4]
	// write all configurations back to device
	dwWriteNetworkIdAndDeviceAddress(dev);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fdd6 	bl	800067c <dwWriteNetworkIdAndDeviceAddress>
	dwWriteSystemConfigurationRegister(dev);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff fda0 	bl	8000616 <dwWriteSystemConfigurationRegister>
	dwWriteChannelControlRegister(dev);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff fe14 	bl	8000704 <dwWriteChannelControlRegister>
	dwWriteTransmitFrameControlRegister(dev);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff fe33 	bl	8000748 <dwWriteTransmitFrameControlRegister>
	dwWriteSystemEventMaskRegister(dev);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff fdec 	bl	80006c0 <dwWriteSystemEventMaskRegister>
	// tune according to configuration
	dwTune(dev);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f000 fb63 	bl	80011b4 <dwTune>
	// uint8_t antennaDelayBytes[LEN_STAMP];
	// writeValueToBytes(antennaDelayBytes, 16384, LEN_STAMP);
	// dev->antennaDelay.setTimestamp(antennaDelayBytes);
	// dwSpiRead(dev, TX_ANTD, NO_SUB, antennaDelayBytes, LEN_TX_ANTD);
	// dwSpiRead(dev, LDE_IF, LDE_RXANTD_SUB, antennaDelayBytes, LEN_LDE_RXANTD);
	dwSpiWrite(dev, TX_ANTD, NO_SUB, dev->antennaDelay.raw, LEN_TX_ANTD);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3338      	adds	r3, #56	@ 0x38
 8000af2:	2202      	movs	r2, #2
 8000af4:	9200      	str	r2, [sp, #0]
 8000af6:	2200      	movs	r2, #0
 8000af8:	2118      	movs	r1, #24
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f001 fb67 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_RXANTD_SUB, dev->antennaDelay.raw, LEN_LDE_RXANTD);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3338      	adds	r3, #56	@ 0x38
 8000b04:	2202      	movs	r2, #2
 8000b06:	9200      	str	r2, [sp, #0]
 8000b08:	f641 0204 	movw	r2, #6148	@ 0x1804
 8000b0c:	212e      	movs	r1, #46	@ 0x2e
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f001 fb5d 	bl	80021ce <dwSpiWrite>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <dwSuppressFrameCheck>:
void dwWaitForResponse(dwDevice_t* dev, bool val) {
	dev->wait4resp = val;
	setBit(dev->sysctrl, LEN_SYS_CTRL, WAIT4RESP_BIT, val);
}

void dwSuppressFrameCheck(dwDevice_t* dev, bool val) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	70fb      	strb	r3, [r7, #3]
	dev->frameCheck = !val;
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	bf14      	ite	ne
 8000b2e:	2301      	movne	r3, #1
 8000b30:	2300      	moveq	r3, #0
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	f083 0301 	eor.w	r3, r3, #1
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <dwUseSmartPower>:

void dwUseSmartPower(dwDevice_t* dev, bool smartPower) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	70fb      	strb	r3, [r7, #3]
	dev->smartPower = smartPower;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	78fa      	ldrb	r2, [r7, #3]
 8000b60:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	setBit(dev->syscfg, LEN_SYS_CFG, DIS_STXP_BIT, !smartPower);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f103 0011 	add.w	r0, r3, #17
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	bf14      	ite	ne
 8000b70:	2301      	movne	r3, #1
 8000b72:	2300      	moveq	r3, #0
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	f083 0301 	eor.w	r3, r3, #1
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2212      	movs	r2, #18
 8000b84:	2104      	movs	r1, #4
 8000b86:	f001 fa15 	bl	8001fb4 <setBit>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <dwSetDataRate>:
	delayBytes[1] &= 0xFE;
	dwSpiWrite(dev, DX_TIME, NO_SUB, delayBytes, LEN_DX_TIME);
}


void dwSetDataRate(dwDevice_t* dev, uint8_t rate) {
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af02      	add	r7, sp, #8
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	70fb      	strb	r3, [r7, #3]
	rate &= 0x03;
 8000b9e:	78fb      	ldrb	r3, [r7, #3]
 8000ba0:	f003 0303 	and.w	r3, r3, #3
 8000ba4:	70fb      	strb	r3, [r7, #3]
	dev->txfctrl[1] &= 0x83;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000bac:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	dev->txfctrl[1] |= (uint8_t)((rate << 5) & 0xFF);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	015b      	lsls	r3, r3, #5
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	// special 110kbps flag
	if(rate == TRX_RATE_110KBPS) {
 8000bce:	78fb      	ldrb	r3, [r7, #3]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d108      	bne.n	8000be6 <dwSetDataRate+0x54>
		setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, true);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f103 0011 	add.w	r0, r3, #17
 8000bda:	2301      	movs	r3, #1
 8000bdc:	2216      	movs	r2, #22
 8000bde:	2104      	movs	r1, #4
 8000be0:	f001 f9e8 	bl	8001fb4 <setBit>
 8000be4:	e007      	b.n	8000bf6 <dwSetDataRate+0x64>
	} else {
		setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, false);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f103 0011 	add.w	r0, r3, #17
 8000bec:	2300      	movs	r3, #0
 8000bee:	2216      	movs	r2, #22
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	f001 f9df 	bl	8001fb4 <setBit>
	}
	// SFD mode and type (non-configurable, as in Table )
	if(rate == TRX_RATE_6800KBPS) {
 8000bf6:	78fb      	ldrb	r3, [r7, #3]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d118      	bne.n	8000c2e <dwSetDataRate+0x9c>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, false);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f103 0019 	add.w	r0, r3, #25
 8000c02:	2300      	movs	r3, #0
 8000c04:	2211      	movs	r2, #17
 8000c06:	2104      	movs	r1, #4
 8000c08:	f001 f9d4 	bl	8001fb4 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, false);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f103 0019 	add.w	r0, r3, #25
 8000c12:	2300      	movs	r3, #0
 8000c14:	2214      	movs	r2, #20
 8000c16:	2104      	movs	r1, #4
 8000c18:	f001 f9cc 	bl	8001fb4 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, false);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f103 0019 	add.w	r0, r3, #25
 8000c22:	2300      	movs	r3, #0
 8000c24:	2215      	movs	r2, #21
 8000c26:	2104      	movs	r1, #4
 8000c28:	f001 f9c4 	bl	8001fb4 <setBit>
 8000c2c:	e017      	b.n	8000c5e <dwSetDataRate+0xcc>
	} else {
		setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, true);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f103 0019 	add.w	r0, r3, #25
 8000c34:	2301      	movs	r3, #1
 8000c36:	2211      	movs	r2, #17
 8000c38:	2104      	movs	r1, #4
 8000c3a:	f001 f9bb 	bl	8001fb4 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, true);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f103 0019 	add.w	r0, r3, #25
 8000c44:	2301      	movs	r3, #1
 8000c46:	2214      	movs	r2, #20
 8000c48:	2104      	movs	r1, #4
 8000c4a:	f001 f9b3 	bl	8001fb4 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, true);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f103 0019 	add.w	r0, r3, #25
 8000c54:	2301      	movs	r3, #1
 8000c56:	2215      	movs	r2, #21
 8000c58:	2104      	movs	r1, #4
 8000c5a:	f001 f9ab 	bl	8001fb4 <setBit>

	}
	uint8_t sfdLength;
	if(rate == TRX_RATE_6800KBPS) {
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d102      	bne.n	8000c6a <dwSetDataRate+0xd8>
		sfdLength = 0x08;
 8000c64:	2308      	movs	r3, #8
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e007      	b.n	8000c7a <dwSetDataRate+0xe8>
	} else if(rate == TRX_RATE_850KBPS) {
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d102      	bne.n	8000c76 <dwSetDataRate+0xe4>
		sfdLength = 0x10;
 8000c70:	2310      	movs	r3, #16
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	e001      	b.n	8000c7a <dwSetDataRate+0xe8>
	} else {
		sfdLength = 0x40;
 8000c76:	2340      	movs	r3, #64	@ 0x40
 8000c78:	73fb      	strb	r3, [r7, #15]
	}
	dwSpiWrite(dev, USR_SFD, SFD_LENGTH_SUB, &sfdLength, LEN_SFD_LENGTH);
 8000c7a:	f107 030f 	add.w	r3, r7, #15
 8000c7e:	2201      	movs	r2, #1
 8000c80:	9200      	str	r2, [sp, #0]
 8000c82:	2200      	movs	r2, #0
 8000c84:	2121      	movs	r1, #33	@ 0x21
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f001 faa1 	bl	80021ce <dwSpiWrite>
	dev->dataRate = rate;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	78fa      	ldrb	r2, [r7, #3]
 8000c90:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <dwSetPulseFrequency>:

void dwSetPulseFrequency(dwDevice_t* dev, uint8_t freq) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
	freq &= 0x03;
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	70fb      	strb	r3, [r7, #3]
	dev->txfctrl[2] &= 0xFC;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000cb6:	f023 0303 	bic.w	r3, r3, #3
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	dev->txfctrl[2] |= (uint8_t)(freq & 0xFF);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	dev->chanctrl[2] &= 0xF3;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7edb      	ldrb	r3, [r3, #27]
 8000cd8:	f023 030c 	bic.w	r3, r3, #12
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	76da      	strb	r2, [r3, #27]
	dev->chanctrl[2] |= (uint8_t)((freq << 2) & 0xFF);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	7eda      	ldrb	r2, [r3, #27]
 8000ce6:	78fb      	ldrb	r3, [r7, #3]
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	76da      	strb	r2, [r3, #27]
	dev->pulseFrequency = freq;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	78fa      	ldrb	r2, [r7, #3]
 8000cf8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <dwSetPreambleLength>:

uint8_t dwGetPulseFrequency(dwDevice_t* dev) {
	return dev->pulseFrequency;
}

void dwSetPreambleLength(dwDevice_t* dev, uint8_t prealen) {
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	70fb      	strb	r3, [r7, #3]
	prealen &= 0x0F;
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	f003 030f 	and.w	r3, r3, #15
 8000d18:	70fb      	strb	r3, [r7, #3]
	dev->txfctrl[2] &= 0xC3;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d20:	f023 033c 	bic.w	r3, r3, #60	@ 0x3c
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	dev->txfctrl[2] |= (uint8_t)((prealen << 2) & 0xFF);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000d32:	78fb      	ldrb	r3, [r7, #3]
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	if(prealen == TX_PREAMBLE_LEN_64 || prealen == TX_PREAMBLE_LEN_128) {
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d002      	beq.n	8000d4e <dwSetPreambleLength+0x48>
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	2b05      	cmp	r3, #5
 8000d4c:	d104      	bne.n	8000d58 <dwSetPreambleLength+0x52>
		dev->pacSize = PAC_SIZE_8;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2208      	movs	r2, #8
 8000d52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8000d56:	e016      	b.n	8000d86 <dwSetPreambleLength+0x80>
	} else if(prealen == TX_PREAMBLE_LEN_256 || prealen == TX_PREAMBLE_LEN_512) {
 8000d58:	78fb      	ldrb	r3, [r7, #3]
 8000d5a:	2b09      	cmp	r3, #9
 8000d5c:	d002      	beq.n	8000d64 <dwSetPreambleLength+0x5e>
 8000d5e:	78fb      	ldrb	r3, [r7, #3]
 8000d60:	2b0d      	cmp	r3, #13
 8000d62:	d104      	bne.n	8000d6e <dwSetPreambleLength+0x68>
		dev->pacSize = PAC_SIZE_16;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2210      	movs	r2, #16
 8000d68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8000d6c:	e00b      	b.n	8000d86 <dwSetPreambleLength+0x80>
	} else if(prealen == TX_PREAMBLE_LEN_1024) {
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d104      	bne.n	8000d7e <dwSetPreambleLength+0x78>
		dev->pacSize = PAC_SIZE_32;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2220      	movs	r2, #32
 8000d78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8000d7c:	e003      	b.n	8000d86 <dwSetPreambleLength+0x80>
	} else {
		dev->pacSize = PAC_SIZE_64;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2240      	movs	r2, #64	@ 0x40
 8000d82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}
	dev->preambleLength = prealen;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	78fa      	ldrb	r2, [r7, #3]
 8000d8a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <dwUseExtendedFrameLength>:

void dwUseExtendedFrameLength(dwDevice_t* dev, bool val) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	70fb      	strb	r3, [r7, #3]
	dev->extendedFrameLength = (val ? FRAME_LENGTH_EXTENDED : FRAME_LENGTH_NORMAL);
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <dwUseExtendedFrameLength+0x16>
 8000daa:	2203      	movs	r2, #3
 8000dac:	e000      	b.n	8000db0 <dwUseExtendedFrameLength+0x18>
 8000dae:	2200      	movs	r2, #0
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	dev->syscfg[2] &= 0xFC;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7cdb      	ldrb	r3, [r3, #19]
 8000dba:	f023 0303 	bic.w	r3, r3, #3
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	74da      	strb	r2, [r3, #19]
	dev->syscfg[2] |= dev->extendedFrameLength;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7cda      	ldrb	r2, [r3, #19]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	74da      	strb	r2, [r3, #19]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <dwReceivePermanently>:

void dwReceivePermanently(dwDevice_t* dev, bool val) {
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	70fb      	strb	r3, [r7, #3]
	dev->permanentReceive = val;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	78fa      	ldrb	r2, [r7, #3]
 8000df0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr

08000dfe <dwSetChannel>:

void dwSetChannel(dwDevice_t* dev, uint8_t channel) {
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	460b      	mov	r3, r1
 8000e08:	70fb      	strb	r3, [r7, #3]
	channel &= 0xF;
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	70fb      	strb	r3, [r7, #3]
	dev->chanctrl[0] = ((channel | (channel << 4)) & 0xFF);
 8000e12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e16:	011b      	lsls	r3, r3, #4
 8000e18:	b25a      	sxtb	r2, r3
 8000e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	765a      	strb	r2, [r3, #25]
	dev->channel = channel;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	78fa      	ldrb	r2, [r7, #3]
 8000e2c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <dwSetPreambleCode>:

void dwSetPreambleCode(dwDevice_t* dev, uint8_t preacode) {
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	460b      	mov	r3, r1
 8000e44:	70fb      	strb	r3, [r7, #3]
	preacode &= 0x1F;
 8000e46:	78fb      	ldrb	r3, [r7, #3]
 8000e48:	f003 031f 	and.w	r3, r3, #31
 8000e4c:	70fb      	strb	r3, [r7, #3]
	dev->chanctrl[2] &= 0x3F;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7edb      	ldrb	r3, [r3, #27]
 8000e52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	76da      	strb	r2, [r3, #27]
	dev->chanctrl[2] |= ((preacode << 6) & 0xFF);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	7edb      	ldrb	r3, [r3, #27]
 8000e60:	b25a      	sxtb	r2, r3
 8000e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e66:	019b      	lsls	r3, r3, #6
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	76da      	strb	r2, [r3, #27]
	dev->chanctrl[3] = 0x00;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	771a      	strb	r2, [r3, #28]
	dev->chanctrl[3] = ((((preacode >> 2) & 0x07) | (preacode << 3)) & 0xFF);
 8000e7a:	78fb      	ldrb	r3, [r7, #3]
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	b25a      	sxtb	r2, r3
 8000e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	4313      	orrs	r3, r2
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	771a      	strb	r2, [r3, #28]
	dev->preambleCode = preacode;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	78fa      	ldrb	r2, [r7, #3]
 8000e9e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <dwSetDefaults>:

void dwSetDefaults(dwDevice_t* dev) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	if(dev->deviceMode == TX_MODE) {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7b1b      	ldrb	r3, [r3, #12]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d03f      	beq.n	8000f3c <dwSetDefaults+0x90>

	} else if(dev->deviceMode == RX_MODE) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7b1b      	ldrb	r3, [r3, #12]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d03b      	beq.n	8000f3c <dwSetDefaults+0x90>

	} else if(dev->deviceMode == IDLE_MODE) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7b1b      	ldrb	r3, [r3, #12]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d137      	bne.n	8000f3c <dwSetDefaults+0x90>
		dwUseExtendedFrameLength(dev, false);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ff62 	bl	8000d98 <dwUseExtendedFrameLength>
		dwUseSmartPower(dev, false);
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff fe3a 	bl	8000b50 <dwUseSmartPower>
		dwSuppressFrameCheck(dev, false);
 8000edc:	2100      	movs	r1, #0
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff fe1c 	bl	8000b1c <dwSuppressFrameCheck>
		//for global frame filtering
		dwSetFrameFilter(dev, false);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff fc3f 	bl	800076a <dwSetFrameFilter>
		//for data frame (poll, poll_ack, range, range report, range failed) filtering
		dwSetFrameFilterAllowData(dev, false);
 8000eec:	2100      	movs	r1, #0
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fc4d 	bl	800078e <dwSetFrameFilterAllowData>
		//for reserved (blink) frame filtering
		dwSetFrameFilterAllowReserved(dev, false);
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff fc5b 	bl	80007b2 <dwSetFrameFilterAllowReserved>
		//setFrameFilterAllowMAC(true);
		//setFrameFilterAllowBeacon(true);
		//setFrameFilterAllowAcknowledgement(true);
		dwInterruptOnSent(dev, true);
 8000efc:	2101      	movs	r1, #1
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff fcaa 	bl	8000858 <dwInterruptOnSent>
		dwInterruptOnReceived(dev, true);
 8000f04:	2101      	movs	r1, #1
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff fcb8 	bl	800087c <dwInterruptOnReceived>
		dwInterruptOnReceiveTimeout(dev, true);
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fd08 	bl	8000924 <dwInterruptOnReceiveTimeout>
		dwInterruptOnReceiveFailed(dev, false);
 8000f14:	2100      	movs	r1, #0
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff fcca 	bl	80008b0 <dwInterruptOnReceiveFailed>
		dwInterruptOnReceiveTimestampAvailable(dev, false);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff fd1a 	bl	8000958 <dwInterruptOnReceiveTimestampAvailable>
		dwInterruptOnAutomaticAcknowledgeTrigger(dev, false);
 8000f24:	2100      	movs	r1, #0
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff fd28 	bl	800097c <dwInterruptOnAutomaticAcknowledgeTrigger>
		dwSetReceiverAutoReenable(dev, true);
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff fc80 	bl	8000834 <dwSetReceiverAutoReenable>
		// default mode when powering up the chip
		// still explicitly selected for later tuning
		dwEnableMode(dev, MODE_LONGDATA_RANGE_LOWPOWER);
 8000f34:	4903      	ldr	r1, [pc, #12]	@ (8000f44 <dwSetDefaults+0x98>)
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f90c 	bl	8001154 <dwEnableMode>
	}
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	0800b734 	.word	0x0800b734

08000f48 <dwIsTransmitDone>:

void dwGetSystemTimestamp(dwDevice_t* dev, dwTime_t* time) {
	dwSpiRead(dev, SYS_TIME, NO_SUB, time->raw, LEN_SYS_TIME);
}

bool dwIsTransmitDone(dwDevice_t* dev) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	return getBit(dev->sysstatus, LEN_SYS_STATUS, TXFRS_BIT);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	331d      	adds	r3, #29
 8000f54:	2207      	movs	r2, #7
 8000f56:	2105      	movs	r1, #5
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 f867 	bl	800202c <getBit>
 8000f5e:	4603      	mov	r3, r0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <dwIsReceiveTimestampAvailable>:

bool dwIsReceiveTimestampAvailable(dwDevice_t* dev) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	return getBit(dev->sysstatus, LEN_SYS_STATUS, LDEDONE_BIT);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	331d      	adds	r3, #29
 8000f74:	220a      	movs	r2, #10
 8000f76:	2105      	movs	r1, #5
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f001 f857 	bl	800202c <getBit>
 8000f7e:	4603      	mov	r3, r0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <dwIsReceiveDone>:

bool dwIsReceiveDone(dwDevice_t* dev) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	if(dev->frameCheck) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d008      	beq.n	8000fac <dwIsReceiveDone+0x24>
		return getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCG_BIT);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	331d      	adds	r3, #29
 8000f9e:	220e      	movs	r2, #14
 8000fa0:	2105      	movs	r1, #5
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 f842 	bl	800202c <getBit>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	e007      	b.n	8000fbc <dwIsReceiveDone+0x34>
	}
	return getBit(dev->sysstatus, LEN_SYS_STATUS, RXDFR_BIT);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	331d      	adds	r3, #29
 8000fb0:	220d      	movs	r2, #13
 8000fb2:	2105      	movs	r1, #5
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 f839 	bl	800202c <getBit>
 8000fba:	4603      	mov	r3, r0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <dwIsReceiveFailed>:

bool dwIsReceiveFailed(dwDevice_t *dev) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	bool ldeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, LDEERR_BIT);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	331d      	adds	r3, #29
 8000fd0:	2212      	movs	r2, #18
 8000fd2:	2105      	movs	r1, #5
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 f829 	bl	800202c <getBit>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	73fb      	strb	r3, [r7, #15]
	bool rxCRCErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCE_BIT);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	331d      	adds	r3, #29
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 f820 	bl	800202c <getBit>
 8000fec:	4603      	mov	r3, r0
 8000fee:	73bb      	strb	r3, [r7, #14]
	bool rxHeaderErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXPHE_BIT);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	331d      	adds	r3, #29
 8000ff4:	220c      	movs	r2, #12
 8000ff6:	2105      	movs	r1, #5
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f001 f817 	bl	800202c <getBit>
 8000ffe:	4603      	mov	r3, r0
 8001000:	737b      	strb	r3, [r7, #13]
	bool rxDecodeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFSL_BIT);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	331d      	adds	r3, #29
 8001006:	2210      	movs	r2, #16
 8001008:	2105      	movs	r1, #5
 800100a:	4618      	mov	r0, r3
 800100c:	f001 f80e 	bl	800202c <getBit>
 8001010:	4603      	mov	r3, r0
 8001012:	733b      	strb	r3, [r7, #12]


	bool rxSfdto = getBit(dev->sysstatus, LEN_SYS_STATUS, RXSFDTO_BIT);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	331d      	adds	r3, #29
 8001018:	221a      	movs	r2, #26
 800101a:	2105      	movs	r1, #5
 800101c:	4618      	mov	r0, r3
 800101e:	f001 f805 	bl	800202c <getBit>
 8001022:	4603      	mov	r3, r0
 8001024:	72fb      	strb	r3, [r7, #11]
	bool affrej = getBit(dev->sysstatus, LEN_SYS_STATUS, AFFREJ_BIT);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	331d      	adds	r3, #29
 800102a:	221d      	movs	r2, #29
 800102c:	2105      	movs	r1, #5
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fffc 	bl	800202c <getBit>
 8001034:	4603      	mov	r3, r0
 8001036:	72bb      	strb	r3, [r7, #10]

	return (ldeErr || rxCRCErr || rxHeaderErr || rxDecodeErr || rxSfdto || affrej);
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10e      	bne.n	800105c <dwIsReceiveFailed+0x98>
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10b      	bne.n	800105c <dwIsReceiveFailed+0x98>
 8001044:	7b7b      	ldrb	r3, [r7, #13]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d108      	bne.n	800105c <dwIsReceiveFailed+0x98>
 800104a:	7b3b      	ldrb	r3, [r7, #12]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d105      	bne.n	800105c <dwIsReceiveFailed+0x98>
 8001050:	7afb      	ldrb	r3, [r7, #11]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d102      	bne.n	800105c <dwIsReceiveFailed+0x98>
 8001056:	7abb      	ldrb	r3, [r7, #10]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <dwIsReceiveFailed+0x9c>
 800105c:	2301      	movs	r3, #1
 800105e:	e000      	b.n	8001062 <dwIsReceiveFailed+0x9e>
 8001060:	2300      	movs	r3, #0
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <dwIsReceiveTimeout>:

bool dwIsReceiveTimeout(dwDevice_t* dev) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	return getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFTO_BIT);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	331d      	adds	r3, #29
 800107c:	2211      	movs	r2, #17
 800107e:	2105      	movs	r1, #5
 8001080:	4618      	mov	r0, r3
 8001082:	f000 ffd3 	bl	800202c <getBit>
 8001086:	4603      	mov	r3, r0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <dwIsClockProblem>:

bool dwIsClockProblem(dwDevice_t* dev) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	bool clkllErr, rfllErr;
	clkllErr = getBit(dev->sysstatus, LEN_SYS_STATUS, CLKPLL_LL_BIT);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	331d      	adds	r3, #29
 800109c:	2219      	movs	r2, #25
 800109e:	2105      	movs	r1, #5
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 ffc3 	bl	800202c <getBit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73fb      	strb	r3, [r7, #15]
	rfllErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RFPLL_LL_BIT);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	331d      	adds	r3, #29
 80010ae:	2218      	movs	r2, #24
 80010b0:	2105      	movs	r1, #5
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 ffba 	bl	800202c <getBit>
 80010b8:	4603      	mov	r3, r0
 80010ba:	73bb      	strb	r3, [r7, #14]
	if(clkllErr || rfllErr) {
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d102      	bne.n	80010c8 <dwIsClockProblem+0x38>
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <dwIsClockProblem+0x3c>
		return true;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <dwIsClockProblem+0x3e>
	}
	return false;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <dwClearReceiveTimestampAvailableStatus>:
	memset(dev->sysstatus, 0, LEN_SYS_STATUS);
	uint32_t reg = 0xffffffff;
	dwSpiWrite(dev, SYS_STATUS, NO_SUB,  &reg, LEN_SYS_STATUS);
}

void dwClearReceiveTimestampAvailableStatus(dwDevice_t* dev) {
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af02      	add	r7, sp, #8
 80010dc:	6078      	str	r0, [r7, #4]
	uint8_t reg[LEN_SYS_STATUS] = {0};
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	711a      	strb	r2, [r3, #4]
	setBit(reg, LEN_SYS_STATUS, LDEDONE_BIT, true);
 80010e8:	f107 0008 	add.w	r0, r7, #8
 80010ec:	2301      	movs	r3, #1
 80010ee:	220a      	movs	r2, #10
 80010f0:	2105      	movs	r1, #5
 80010f2:	f000 ff5f 	bl	8001fb4 <setBit>
	dwSpiWrite(dev, SYS_STATUS, NO_SUB, reg, LEN_SYS_STATUS);
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	2205      	movs	r2, #5
 80010fc:	9200      	str	r2, [sp, #0]
 80010fe:	2200      	movs	r2, #0
 8001100:	210f      	movs	r1, #15
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f001 f863 	bl	80021ce <dwSpiWrite>
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <dwClearReceiveStatus>:

void dwClearReceiveStatus(dwDevice_t* dev) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	// clear latched RX bits (i.e. write 1 to clear)
	uint32_t regData = SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_GOOD;
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <dwClearReceiveStatus+0x20>)
 800111a:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	210f      	movs	r1, #15
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f001 f8ad 	bl	8002282 <dwSpiWrite32>
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2427ff00 	.word	0x2427ff00

08001134 <dwClearTransmitStatus>:

void dwClearTransmitStatus(dwDevice_t* dev) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	// clear latched TX bits
	uint32_t regData = SYS_STATUS_ALL_TX;
 800113c:	23f8      	movs	r3, #248	@ 0xf8
 800113e:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	210f      	movs	r1, #15
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f001 f89b 	bl	8002282 <dwSpiWrite32>
}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <dwEnableMode>:
	float twoPower17 = 131072.0f;

	return calculatePower(C * twoPower17, N, dev->pulseFrequency);
}

void dwEnableMode(dwDevice_t *dev, const uint8_t mode[]) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
	dwSetDataRate(dev, mode[0]);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4619      	mov	r1, r3
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff fd14 	bl	8000b92 <dwSetDataRate>
	dwSetPulseFrequency(dev, mode[1]);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fd92 	bl	8000c9c <dwSetPulseFrequency>
	dwSetPreambleLength(dev, mode[2]);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	3302      	adds	r3, #2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4619      	mov	r1, r3
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff fdc0 	bl	8000d06 <dwSetPreambleLength>
	// TODO add channel and code to mode tuples
	// TODO add channel and code settings with checks (see Table 58)
	dwSetChannel(dev, CHANNEL_5);
 8001186:	2105      	movs	r1, #5
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff fe38 	bl	8000dfe <dwSetChannel>
	if(mode[1] == TX_PULSE_FREQ_16MHZ) {
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d104      	bne.n	80011a2 <dwEnableMode+0x4e>
		dwSetPreambleCode(dev, PREAMBLE_CODE_16MHZ_4);
 8001198:	2104      	movs	r1, #4
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fe4d 	bl	8000e3a <dwSetPreambleCode>
	} else {
		dwSetPreambleCode(dev, PREAMBLE_CODE_64MHZ_10);
	}
}
 80011a0:	e003      	b.n	80011aa <dwEnableMode+0x56>
		dwSetPreambleCode(dev, PREAMBLE_CODE_64MHZ_10);
 80011a2:	210a      	movs	r1, #10
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff fe48 	bl	8000e3a <dwSetPreambleCode>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <dwTune>:

void dwTune(dwDevice_t *dev) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b098      	sub	sp, #96	@ 0x60
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	6078      	str	r0, [r7, #4]
	uint8_t tcpgdelay[LEN_TC_PGDELAY];
	uint8_t fspllcfg[LEN_FS_PLLCFG];
	uint8_t fsplltune[LEN_FS_PLLTUNE];
	uint8_t fsxtalt[LEN_FS_XTALT];
	// AGC_TUNE1
	if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d108      	bne.n	80011d8 <dwTune+0x24>
		writeValueToBytes(agctune1, 0x8870, LEN_AGC_TUNE1);
 80011c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011ca:	2202      	movs	r2, #2
 80011cc:	f648 0170 	movw	r1, #34928	@ 0x8870
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 ff53 	bl	800207c <writeValueToBytes>
 80011d6:	e00c      	b.n	80011f2 <dwTune+0x3e>
	} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d107      	bne.n	80011f2 <dwTune+0x3e>
		writeValueToBytes(agctune1, 0x889B, LEN_AGC_TUNE1);
 80011e2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011e6:	2202      	movs	r2, #2
 80011e8:	f648 019b 	movw	r1, #34971	@ 0x889b
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 ff45 	bl	800207c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// AGC_TUNE2
	writeValueToBytes(agctune2, 0x2502A907L, LEN_AGC_TUNE2);
 80011f2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80011f6:	2204      	movs	r2, #4
 80011f8:	49b9      	ldr	r1, [pc, #740]	@ (80014e0 <dwTune+0x32c>)
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 ff3e 	bl	800207c <writeValueToBytes>
	// AGC_TUNE3
	writeValueToBytes(agctune3, 0x0035, LEN_AGC_TUNE3);
 8001200:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001204:	2202      	movs	r2, #2
 8001206:	2135      	movs	r1, #53	@ 0x35
 8001208:	4618      	mov	r0, r3
 800120a:	f000 ff37 	bl	800207c <writeValueToBytes>
	// DRX_TUNE0b (already optimized according to Table 20 of user manual)
	if(dev->dataRate == TRX_RATE_110KBPS) {
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001214:	2b00      	cmp	r3, #0
 8001216:	d107      	bne.n	8001228 <dwTune+0x74>
		writeValueToBytes(drxtune0b, 0x0016, LEN_DRX_TUNE0b);
 8001218:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800121c:	2202      	movs	r2, #2
 800121e:	2116      	movs	r1, #22
 8001220:	4618      	mov	r0, r3
 8001222:	f000 ff2b 	bl	800207c <writeValueToBytes>
 8001226:	e018      	b.n	800125a <dwTune+0xa6>
	} else if(dev->dataRate == TRX_RATE_850KBPS) {
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800122e:	2b01      	cmp	r3, #1
 8001230:	d107      	bne.n	8001242 <dwTune+0x8e>
		writeValueToBytes(drxtune0b, 0x0006, LEN_DRX_TUNE0b);
 8001232:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001236:	2202      	movs	r2, #2
 8001238:	2106      	movs	r1, #6
 800123a:	4618      	mov	r0, r3
 800123c:	f000 ff1e 	bl	800207c <writeValueToBytes>
 8001240:	e00b      	b.n	800125a <dwTune+0xa6>
	} else if(dev->dataRate == TRX_RATE_6800KBPS) {
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001248:	2b02      	cmp	r3, #2
 800124a:	d106      	bne.n	800125a <dwTune+0xa6>
		writeValueToBytes(drxtune0b, 0x0001, LEN_DRX_TUNE0b);
 800124c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001250:	2202      	movs	r2, #2
 8001252:	2101      	movs	r1, #1
 8001254:	4618      	mov	r0, r3
 8001256:	f000 ff11 	bl	800207c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// DRX_TUNE1a
	if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001260:	2b01      	cmp	r3, #1
 8001262:	d107      	bne.n	8001274 <dwTune+0xc0>
		writeValueToBytes(drxtune1a, 0x0087, LEN_DRX_TUNE1a);
 8001264:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001268:	2202      	movs	r2, #2
 800126a:	2187      	movs	r1, #135	@ 0x87
 800126c:	4618      	mov	r0, r3
 800126e:	f000 ff05 	bl	800207c <writeValueToBytes>
 8001272:	e00b      	b.n	800128c <dwTune+0xd8>
	} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800127a:	2b02      	cmp	r3, #2
 800127c:	d106      	bne.n	800128c <dwTune+0xd8>
		writeValueToBytes(drxtune1a, 0x008D, LEN_DRX_TUNE1a);
 800127e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001282:	2202      	movs	r2, #2
 8001284:	218d      	movs	r1, #141	@ 0x8d
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fef8 	bl	800207c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// DRX_TUNE1b
	if(dev->preambleLength ==  TX_PREAMBLE_LEN_1536 || dev->preambleLength ==  TX_PREAMBLE_LEN_2048 ||
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001292:	2b06      	cmp	r3, #6
 8001294:	d009      	beq.n	80012aa <dwTune+0xf6>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800129c:	2b0a      	cmp	r3, #10
 800129e:	d004      	beq.n	80012aa <dwTune+0xf6>
			dev->preambleLength ==  TX_PREAMBLE_LEN_4096) {
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	if(dev->preambleLength ==  TX_PREAMBLE_LEN_1536 || dev->preambleLength ==  TX_PREAMBLE_LEN_2048 ||
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d10c      	bne.n	80012c4 <dwTune+0x110>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d12a      	bne.n	800130a <dwTune+0x156>
			writeValueToBytes(drxtune1b, 0x0064, LEN_DRX_TUNE1b);
 80012b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012b8:	2202      	movs	r2, #2
 80012ba:	2164      	movs	r1, #100	@ 0x64
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fedd 	bl	800207c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80012c2:	e022      	b.n	800130a <dwTune+0x156>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->preambleLength != TX_PREAMBLE_LEN_64) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d011      	beq.n	80012f2 <dwTune+0x13e>
		if(dev->dataRate == TRX_RATE_850KBPS || dev->dataRate == TRX_RATE_6800KBPS) {
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d004      	beq.n	80012e2 <dwTune+0x12e>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d113      	bne.n	800130a <dwTune+0x156>
			writeValueToBytes(drxtune1b, 0x0020, LEN_DRX_TUNE1b);
 80012e2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012e6:	2202      	movs	r2, #2
 80012e8:	2120      	movs	r1, #32
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fec6 	bl	800207c <writeValueToBytes>
 80012f0:	e00b      	b.n	800130a <dwTune+0x156>
		} else {
			// TODO proper error/warning handling
		}
	} else {
		if(dev->dataRate == TRX_RATE_6800KBPS) {
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d106      	bne.n	800130a <dwTune+0x156>
			writeValueToBytes(drxtune1b, 0x0010, LEN_DRX_TUNE1b);
 80012fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001300:	2202      	movs	r2, #2
 8001302:	2110      	movs	r1, #16
 8001304:	4618      	mov	r0, r3
 8001306:	f000 feb9 	bl	800207c <writeValueToBytes>
		} else {
			// TODO proper error/warning handling
		}
	}
	// DRX_TUNE2
	if(dev->pacSize == PAC_SIZE_8) {
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001310:	2b08      	cmp	r3, #8
 8001312:	d119      	bne.n	8001348 <dwTune+0x194>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800131a:	2b01      	cmp	r3, #1
 800131c:	d107      	bne.n	800132e <dwTune+0x17a>
			writeValueToBytes(drxtune2, 0x311A002DL, LEN_DRX_TUNE2);
 800131e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001322:	2204      	movs	r2, #4
 8001324:	496f      	ldr	r1, [pc, #444]	@ (80014e4 <dwTune+0x330>)
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fea8 	bl	800207c <writeValueToBytes>
 800132c:	e068      	b.n	8001400 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001334:	2b02      	cmp	r3, #2
 8001336:	d163      	bne.n	8001400 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x313B006BL, LEN_DRX_TUNE2);
 8001338:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800133c:	2204      	movs	r2, #4
 800133e:	496a      	ldr	r1, [pc, #424]	@ (80014e8 <dwTune+0x334>)
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fe9b 	bl	800207c <writeValueToBytes>
 8001346:	e05b      	b.n	8001400 <dwTune+0x24c>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->pacSize == PAC_SIZE_16) {
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800134e:	2b10      	cmp	r3, #16
 8001350:	d119      	bne.n	8001386 <dwTune+0x1d2>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001358:	2b01      	cmp	r3, #1
 800135a:	d107      	bne.n	800136c <dwTune+0x1b8>
			writeValueToBytes(drxtune2, 0x331A0052L, LEN_DRX_TUNE2);
 800135c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001360:	2204      	movs	r2, #4
 8001362:	4962      	ldr	r1, [pc, #392]	@ (80014ec <dwTune+0x338>)
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fe89 	bl	800207c <writeValueToBytes>
 800136a:	e049      	b.n	8001400 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001372:	2b02      	cmp	r3, #2
 8001374:	d144      	bne.n	8001400 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x333B00BEL, LEN_DRX_TUNE2);
 8001376:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800137a:	2204      	movs	r2, #4
 800137c:	495c      	ldr	r1, [pc, #368]	@ (80014f0 <dwTune+0x33c>)
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fe7c 	bl	800207c <writeValueToBytes>
 8001384:	e03c      	b.n	8001400 <dwTune+0x24c>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->pacSize == PAC_SIZE_32) {
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800138c:	2b20      	cmp	r3, #32
 800138e:	d119      	bne.n	80013c4 <dwTune+0x210>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001396:	2b01      	cmp	r3, #1
 8001398:	d107      	bne.n	80013aa <dwTune+0x1f6>
			writeValueToBytes(drxtune2, 0x351A009AL, LEN_DRX_TUNE2);
 800139a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800139e:	2204      	movs	r2, #4
 80013a0:	4954      	ldr	r1, [pc, #336]	@ (80014f4 <dwTune+0x340>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fe6a 	bl	800207c <writeValueToBytes>
 80013a8:	e02a      	b.n	8001400 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d125      	bne.n	8001400 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x353B015EL, LEN_DRX_TUNE2);
 80013b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013b8:	2204      	movs	r2, #4
 80013ba:	494f      	ldr	r1, [pc, #316]	@ (80014f8 <dwTune+0x344>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fe5d 	bl	800207c <writeValueToBytes>
 80013c2:	e01d      	b.n	8001400 <dwTune+0x24c>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->pacSize == PAC_SIZE_64) {
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80013ca:	2b40      	cmp	r3, #64	@ 0x40
 80013cc:	d118      	bne.n	8001400 <dwTune+0x24c>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d107      	bne.n	80013e8 <dwTune+0x234>
			writeValueToBytes(drxtune2, 0x371A011DL, LEN_DRX_TUNE2);
 80013d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013dc:	2204      	movs	r2, #4
 80013de:	4947      	ldr	r1, [pc, #284]	@ (80014fc <dwTune+0x348>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 fe4b 	bl	800207c <writeValueToBytes>
 80013e6:	e00b      	b.n	8001400 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d106      	bne.n	8001400 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x373B0296L, LEN_DRX_TUNE2);
 80013f2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013f6:	2204      	movs	r2, #4
 80013f8:	4941      	ldr	r1, [pc, #260]	@ (8001500 <dwTune+0x34c>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fe3e 	bl	800207c <writeValueToBytes>
		}
	} else {
		// TODO proper error/warning handling
	}
	// DRX_TUNE4H
	if(dev->preambleLength == TX_PREAMBLE_LEN_64) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001406:	2b01      	cmp	r3, #1
 8001408:	d107      	bne.n	800141a <dwTune+0x266>
		writeValueToBytes(drxtune4H, 0x0010, LEN_DRX_TUNE4H);
 800140a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800140e:	2202      	movs	r2, #2
 8001410:	2110      	movs	r1, #16
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fe32 	bl	800207c <writeValueToBytes>
 8001418:	e006      	b.n	8001428 <dwTune+0x274>
	} else {
		writeValueToBytes(drxtune4H, 0x0028, LEN_DRX_TUNE4H);
 800141a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800141e:	2202      	movs	r2, #2
 8001420:	2128      	movs	r1, #40	@ 0x28
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fe2a 	bl	800207c <writeValueToBytes>
	}
	// RF_RXCTRLH
	if(dev->channel != CHANNEL_4 && dev->channel != CHANNEL_7) {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800142e:	2b04      	cmp	r3, #4
 8001430:	d00c      	beq.n	800144c <dwTune+0x298>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001438:	2b07      	cmp	r3, #7
 800143a:	d007      	beq.n	800144c <dwTune+0x298>
		writeValueToBytes(rfrxctrlh, 0xD8, LEN_RF_RXCTRLH);
 800143c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001440:	2201      	movs	r2, #1
 8001442:	21d8      	movs	r1, #216	@ 0xd8
 8001444:	4618      	mov	r0, r3
 8001446:	f000 fe19 	bl	800207c <writeValueToBytes>
 800144a:	e006      	b.n	800145a <dwTune+0x2a6>
	} else {
		writeValueToBytes(rfrxctrlh, 0xBC, LEN_RF_RXCTRLH);
 800144c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001450:	2201      	movs	r2, #1
 8001452:	21bc      	movs	r1, #188	@ 0xbc
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fe11 	bl	800207c <writeValueToBytes>
	}
	// RX_TXCTRL
	if(dev->channel == CHANNEL_1) {
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001460:	2b01      	cmp	r3, #1
 8001462:	d108      	bne.n	8001476 <dwTune+0x2c2>
		writeValueToBytes(rftxctrl, 0x00005C40L, LEN_RF_TXCTRL);
 8001464:	f107 0320 	add.w	r3, r7, #32
 8001468:	2204      	movs	r2, #4
 800146a:	f645 4140 	movw	r1, #23616	@ 0x5c40
 800146e:	4618      	mov	r0, r3
 8001470:	f000 fe04 	bl	800207c <writeValueToBytes>
 8001474:	e05a      	b.n	800152c <dwTune+0x378>
	} else if(dev->channel == CHANNEL_2) {
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800147c:	2b02      	cmp	r3, #2
 800147e:	d107      	bne.n	8001490 <dwTune+0x2dc>
		writeValueToBytes(rftxctrl, 0x00045CA0L, LEN_RF_TXCTRL);
 8001480:	f107 0320 	add.w	r3, r7, #32
 8001484:	2204      	movs	r2, #4
 8001486:	491f      	ldr	r1, [pc, #124]	@ (8001504 <dwTune+0x350>)
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fdf7 	bl	800207c <writeValueToBytes>
 800148e:	e04d      	b.n	800152c <dwTune+0x378>
	} else if(dev->channel == CHANNEL_3) {
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001496:	2b03      	cmp	r3, #3
 8001498:	d107      	bne.n	80014aa <dwTune+0x2f6>
		writeValueToBytes(rftxctrl, 0x00086CC0L, LEN_RF_TXCTRL);
 800149a:	f107 0320 	add.w	r3, r7, #32
 800149e:	2204      	movs	r2, #4
 80014a0:	4919      	ldr	r1, [pc, #100]	@ (8001508 <dwTune+0x354>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fdea 	bl	800207c <writeValueToBytes>
 80014a8:	e040      	b.n	800152c <dwTune+0x378>
	} else if(dev->channel == CHANNEL_4) {
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d107      	bne.n	80014c4 <dwTune+0x310>
		writeValueToBytes(rftxctrl, 0x00045C80L, LEN_RF_TXCTRL);
 80014b4:	f107 0320 	add.w	r3, r7, #32
 80014b8:	2204      	movs	r2, #4
 80014ba:	4914      	ldr	r1, [pc, #80]	@ (800150c <dwTune+0x358>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fddd 	bl	800207c <writeValueToBytes>
 80014c2:	e033      	b.n	800152c <dwTune+0x378>
	} else if(dev->channel == CHANNEL_5) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d122      	bne.n	8001514 <dwTune+0x360>
		writeValueToBytes(rftxctrl, 0x001E3FE0L, LEN_RF_TXCTRL);
 80014ce:	f107 0320 	add.w	r3, r7, #32
 80014d2:	2204      	movs	r2, #4
 80014d4:	490e      	ldr	r1, [pc, #56]	@ (8001510 <dwTune+0x35c>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fdd0 	bl	800207c <writeValueToBytes>
 80014dc:	e026      	b.n	800152c <dwTune+0x378>
 80014de:	bf00      	nop
 80014e0:	2502a907 	.word	0x2502a907
 80014e4:	311a002d 	.word	0x311a002d
 80014e8:	313b006b 	.word	0x313b006b
 80014ec:	331a0052 	.word	0x331a0052
 80014f0:	333b00be 	.word	0x333b00be
 80014f4:	351a009a 	.word	0x351a009a
 80014f8:	353b015e 	.word	0x353b015e
 80014fc:	371a011d 	.word	0x371a011d
 8001500:	373b0296 	.word	0x373b0296
 8001504:	00045ca0 	.word	0x00045ca0
 8001508:	00086cc0 	.word	0x00086cc0
 800150c:	00045c80 	.word	0x00045c80
 8001510:	001e3fe0 	.word	0x001e3fe0
	} else if(dev->channel == CHANNEL_7) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800151a:	2b07      	cmp	r3, #7
 800151c:	d106      	bne.n	800152c <dwTune+0x378>
		writeValueToBytes(rftxctrl, 0x001E7DE0L, LEN_RF_TXCTRL);
 800151e:	f107 0320 	add.w	r3, r7, #32
 8001522:	2204      	movs	r2, #4
 8001524:	49be      	ldr	r1, [pc, #760]	@ (8001820 <dwTune+0x66c>)
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fda8 	bl	800207c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// TC_PGDELAY
	if(dev->channel == CHANNEL_1) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001532:	2b01      	cmp	r3, #1
 8001534:	d107      	bne.n	8001546 <dwTune+0x392>
		writeValueToBytes(tcpgdelay, 0xC9, LEN_TC_PGDELAY);
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	2201      	movs	r2, #1
 800153c:	21c9      	movs	r1, #201	@ 0xc9
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fd9c 	bl	800207c <writeValueToBytes>
 8001544:	e03f      	b.n	80015c6 <dwTune+0x412>
	} else if(dev->channel == CHANNEL_2) {
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800154c:	2b02      	cmp	r3, #2
 800154e:	d107      	bne.n	8001560 <dwTune+0x3ac>
		writeValueToBytes(tcpgdelay, 0xC2, LEN_TC_PGDELAY);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	2201      	movs	r2, #1
 8001556:	21c2      	movs	r1, #194	@ 0xc2
 8001558:	4618      	mov	r0, r3
 800155a:	f000 fd8f 	bl	800207c <writeValueToBytes>
 800155e:	e032      	b.n	80015c6 <dwTune+0x412>
	} else if(dev->channel == CHANNEL_3) {
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001566:	2b03      	cmp	r3, #3
 8001568:	d107      	bne.n	800157a <dwTune+0x3c6>
		writeValueToBytes(tcpgdelay, 0xC5, LEN_TC_PGDELAY);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	2201      	movs	r2, #1
 8001570:	21c5      	movs	r1, #197	@ 0xc5
 8001572:	4618      	mov	r0, r3
 8001574:	f000 fd82 	bl	800207c <writeValueToBytes>
 8001578:	e025      	b.n	80015c6 <dwTune+0x412>
	} else if(dev->channel == CHANNEL_4) {
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001580:	2b04      	cmp	r3, #4
 8001582:	d107      	bne.n	8001594 <dwTune+0x3e0>
		writeValueToBytes(tcpgdelay, 0x95, LEN_TC_PGDELAY);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	2201      	movs	r2, #1
 800158a:	2195      	movs	r1, #149	@ 0x95
 800158c:	4618      	mov	r0, r3
 800158e:	f000 fd75 	bl	800207c <writeValueToBytes>
 8001592:	e018      	b.n	80015c6 <dwTune+0x412>
	} else if(dev->channel == CHANNEL_5) {
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800159a:	2b05      	cmp	r3, #5
 800159c:	d107      	bne.n	80015ae <dwTune+0x3fa>
		writeValueToBytes(tcpgdelay, 0xC0, LEN_TC_PGDELAY);
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	2201      	movs	r2, #1
 80015a4:	21c0      	movs	r1, #192	@ 0xc0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 fd68 	bl	800207c <writeValueToBytes>
 80015ac:	e00b      	b.n	80015c6 <dwTune+0x412>
	} else if(dev->channel == CHANNEL_7) {
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80015b4:	2b07      	cmp	r3, #7
 80015b6:	d106      	bne.n	80015c6 <dwTune+0x412>
		writeValueToBytes(tcpgdelay, 0x93, LEN_TC_PGDELAY);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	2201      	movs	r2, #1
 80015be:	2193      	movs	r1, #147	@ 0x93
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 fd5b 	bl	800207c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// FS_PLLCFG and FS_PLLTUNE
	if(dev->channel == CHANNEL_1) {
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d10e      	bne.n	80015ee <dwTune+0x43a>
		writeValueToBytes(fspllcfg, 0x09000407L, LEN_FS_PLLCFG);
 80015d0:	f107 0318 	add.w	r3, r7, #24
 80015d4:	2204      	movs	r2, #4
 80015d6:	4993      	ldr	r1, [pc, #588]	@ (8001824 <dwTune+0x670>)
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fd4f 	bl	800207c <writeValueToBytes>
		writeValueToBytes(fsplltune, 0x1E, LEN_FS_PLLTUNE);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	2201      	movs	r2, #1
 80015e4:	211e      	movs	r1, #30
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fd48 	bl	800207c <writeValueToBytes>
 80015ec:	e044      	b.n	8001678 <dwTune+0x4c4>
	} else if(dev->channel == CHANNEL_2 || dev->channel == CHANNEL_4) {
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d004      	beq.n	8001602 <dwTune+0x44e>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d10e      	bne.n	8001620 <dwTune+0x46c>
		writeValueToBytes(fspllcfg, 0x08400508L, LEN_FS_PLLCFG);
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	2204      	movs	r2, #4
 8001608:	4987      	ldr	r1, [pc, #540]	@ (8001828 <dwTune+0x674>)
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fd36 	bl	800207c <writeValueToBytes>
		writeValueToBytes(fsplltune, 0x26, LEN_FS_PLLTUNE);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2201      	movs	r2, #1
 8001616:	2126      	movs	r1, #38	@ 0x26
 8001618:	4618      	mov	r0, r3
 800161a:	f000 fd2f 	bl	800207c <writeValueToBytes>
 800161e:	e02b      	b.n	8001678 <dwTune+0x4c4>
	} else if(dev->channel == CHANNEL_3) {
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001626:	2b03      	cmp	r3, #3
 8001628:	d10e      	bne.n	8001648 <dwTune+0x494>
		writeValueToBytes(fspllcfg, 0x08401009L, LEN_FS_PLLCFG);
 800162a:	f107 0318 	add.w	r3, r7, #24
 800162e:	2204      	movs	r2, #4
 8001630:	497e      	ldr	r1, [pc, #504]	@ (800182c <dwTune+0x678>)
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fd22 	bl	800207c <writeValueToBytes>
		writeValueToBytes(fsplltune, 0x56, LEN_FS_PLLTUNE);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2201      	movs	r2, #1
 800163e:	2156      	movs	r1, #86	@ 0x56
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fd1b 	bl	800207c <writeValueToBytes>
 8001646:	e017      	b.n	8001678 <dwTune+0x4c4>
	} else if(dev->channel == CHANNEL_5 || dev->channel == CHANNEL_7) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800164e:	2b05      	cmp	r3, #5
 8001650:	d004      	beq.n	800165c <dwTune+0x4a8>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001658:	2b07      	cmp	r3, #7
 800165a:	d10d      	bne.n	8001678 <dwTune+0x4c4>
		writeValueToBytes(fspllcfg, 0x0800041DL, LEN_FS_PLLCFG);
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	2204      	movs	r2, #4
 8001662:	4973      	ldr	r1, [pc, #460]	@ (8001830 <dwTune+0x67c>)
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fd09 	bl	800207c <writeValueToBytes>
		writeValueToBytes(fsplltune, 0xA6, LEN_FS_PLLTUNE);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	2201      	movs	r2, #1
 8001670:	21a6      	movs	r1, #166	@ 0xa6
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fd02 	bl	800207c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// LDE_CFG1
	writeValueToBytes(ldecfg1, 0xD, LEN_LDE_CFG1);
 8001678:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800167c:	2201      	movs	r2, #1
 800167e:	210d      	movs	r1, #13
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fcfb 	bl	800207c <writeValueToBytes>
	// LDE_CFG2
	if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800168c:	2b01      	cmp	r3, #1
 800168e:	d108      	bne.n	80016a2 <dwTune+0x4ee>
		writeValueToBytes(ldecfg2, 0x1607, LEN_LDE_CFG2);
 8001690:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001694:	2202      	movs	r2, #2
 8001696:	f241 6107 	movw	r1, #5639	@ 0x1607
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fcee 	bl	800207c <writeValueToBytes>
 80016a0:	e00c      	b.n	80016bc <dwTune+0x508>
	} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d107      	bne.n	80016bc <dwTune+0x508>
		writeValueToBytes(ldecfg2, 0x0607, LEN_LDE_CFG2);
 80016ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016b0:	2202      	movs	r2, #2
 80016b2:	f240 6107 	movw	r1, #1543	@ 0x607
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fce0 	bl	800207c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// LDE_REPC
	if(dev->preambleCode == PREAMBLE_CODE_16MHZ_1 || dev->preambleCode == PREAMBLE_CODE_16MHZ_2) {
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d004      	beq.n	80016d0 <dwTune+0x51c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d116      	bne.n	80016fe <dwTune+0x54a>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d108      	bne.n	80016ec <dwTune+0x538>
			writeValueToBytes(lderepc, ((0x5998 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80016da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016de:	2202      	movs	r2, #2
 80016e0:	f640 3133 	movw	r1, #2867	@ 0xb33
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fcc9 	bl	800207c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80016ea:	e154      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x5998, LEN_LDE_REPC);
 80016ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016f0:	2202      	movs	r2, #2
 80016f2:	f645 1198 	movw	r1, #22936	@ 0x5998
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fcc0 	bl	800207c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80016fc:	e14b      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_3 || dev->preambleCode == PREAMBLE_CODE_16MHZ_8) {
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001704:	2b03      	cmp	r3, #3
 8001706:	d004      	beq.n	8001712 <dwTune+0x55e>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800170e:	2b08      	cmp	r3, #8
 8001710:	d116      	bne.n	8001740 <dwTune+0x58c>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001718:	2b00      	cmp	r3, #0
 800171a:	d108      	bne.n	800172e <dwTune+0x57a>
			writeValueToBytes(lderepc, ((0x51EA >> 3) & 0xFFFF), LEN_LDE_REPC);
 800171c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001720:	2202      	movs	r2, #2
 8001722:	f640 213d 	movw	r1, #2621	@ 0xa3d
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fca8 	bl	800207c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800172c:	e133      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x51EA, LEN_LDE_REPC);
 800172e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001732:	2202      	movs	r2, #2
 8001734:	f245 11ea 	movw	r1, #20970	@ 0x51ea
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fc9f 	bl	800207c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800173e:	e12a      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_4) {
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001746:	2b04      	cmp	r3, #4
 8001748:	d116      	bne.n	8001778 <dwTune+0x5c4>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001750:	2b00      	cmp	r3, #0
 8001752:	d108      	bne.n	8001766 <dwTune+0x5b2>
			writeValueToBytes(lderepc, ((0x428E >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001754:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001758:	2202      	movs	r2, #2
 800175a:	f640 0151 	movw	r1, #2129	@ 0x851
 800175e:	4618      	mov	r0, r3
 8001760:	f000 fc8c 	bl	800207c <writeValueToBytes>
 8001764:	e117      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x428E, LEN_LDE_REPC);
 8001766:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800176a:	2202      	movs	r2, #2
 800176c:	f244 218e 	movw	r1, #17038	@ 0x428e
 8001770:	4618      	mov	r0, r3
 8001772:	f000 fc83 	bl	800207c <writeValueToBytes>
 8001776:	e10e      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_5) {
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800177e:	2b05      	cmp	r3, #5
 8001780:	d116      	bne.n	80017b0 <dwTune+0x5fc>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001788:	2b00      	cmp	r3, #0
 800178a:	d108      	bne.n	800179e <dwTune+0x5ea>
			writeValueToBytes(lderepc, ((0x451E >> 3) & 0xFFFF), LEN_LDE_REPC);
 800178c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001790:	2202      	movs	r2, #2
 8001792:	f640 01a3 	movw	r1, #2211	@ 0x8a3
 8001796:	4618      	mov	r0, r3
 8001798:	f000 fc70 	bl	800207c <writeValueToBytes>
 800179c:	e0fb      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x451E, LEN_LDE_REPC);
 800179e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017a2:	2202      	movs	r2, #2
 80017a4:	f244 511e 	movw	r1, #17694	@ 0x451e
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 fc67 	bl	800207c <writeValueToBytes>
 80017ae:	e0f2      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_6) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d116      	bne.n	80017e8 <dwTune+0x634>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d108      	bne.n	80017d6 <dwTune+0x622>
			writeValueToBytes(lderepc, ((0x2E14 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80017c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017c8:	2202      	movs	r2, #2
 80017ca:	f240 51c2 	movw	r1, #1474	@ 0x5c2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fc54 	bl	800207c <writeValueToBytes>
 80017d4:	e0df      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x2E14, LEN_LDE_REPC);
 80017d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017da:	2202      	movs	r2, #2
 80017dc:	f642 6114 	movw	r1, #11796	@ 0x2e14
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fc4b 	bl	800207c <writeValueToBytes>
 80017e6:	e0d6      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_7) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80017ee:	2b07      	cmp	r3, #7
 80017f0:	d120      	bne.n	8001834 <dwTune+0x680>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d108      	bne.n	800180e <dwTune+0x65a>
			writeValueToBytes(lderepc, ((0x8000 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80017fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001800:	2202      	movs	r2, #2
 8001802:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001806:	4618      	mov	r0, r3
 8001808:	f000 fc38 	bl	800207c <writeValueToBytes>
 800180c:	e0c3      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x8000, LEN_LDE_REPC);
 800180e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001812:	2202      	movs	r2, #2
 8001814:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001818:	4618      	mov	r0, r3
 800181a:	f000 fc2f 	bl	800207c <writeValueToBytes>
 800181e:	e0ba      	b.n	8001996 <dwTune+0x7e2>
 8001820:	001e7de0 	.word	0x001e7de0
 8001824:	09000407 	.word	0x09000407
 8001828:	08400508 	.word	0x08400508
 800182c:	08401009 	.word	0x08401009
 8001830:	0800041d 	.word	0x0800041d
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_9) {
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800183a:	2b09      	cmp	r3, #9
 800183c:	d116      	bne.n	800186c <dwTune+0x6b8>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001844:	2b00      	cmp	r3, #0
 8001846:	d108      	bne.n	800185a <dwTune+0x6a6>
			writeValueToBytes(lderepc, ((0x28F4 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001848:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800184c:	2202      	movs	r2, #2
 800184e:	f240 511e 	movw	r1, #1310	@ 0x51e
 8001852:	4618      	mov	r0, r3
 8001854:	f000 fc12 	bl	800207c <writeValueToBytes>
 8001858:	e09d      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x28F4, LEN_LDE_REPC);
 800185a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800185e:	2202      	movs	r2, #2
 8001860:	f642 01f4 	movw	r1, #10484	@ 0x28f4
 8001864:	4618      	mov	r0, r3
 8001866:	f000 fc09 	bl	800207c <writeValueToBytes>
 800186a:	e094      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_10 || dev->preambleCode == PREAMBLE_CODE_64MHZ_17) {
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001872:	2b0a      	cmp	r3, #10
 8001874:	d004      	beq.n	8001880 <dwTune+0x6cc>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800187c:	2b11      	cmp	r3, #17
 800187e:	d116      	bne.n	80018ae <dwTune+0x6fa>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001886:	2b00      	cmp	r3, #0
 8001888:	d108      	bne.n	800189c <dwTune+0x6e8>
			writeValueToBytes(lderepc, ((0x3332 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800188a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800188e:	2202      	movs	r2, #2
 8001890:	f240 6166 	movw	r1, #1638	@ 0x666
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fbf1 	bl	800207c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800189a:	e07c      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x3332, LEN_LDE_REPC);
 800189c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018a0:	2202      	movs	r2, #2
 80018a2:	f243 3132 	movw	r1, #13106	@ 0x3332
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fbe8 	bl	800207c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80018ac:	e073      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_11) {
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80018b4:	2b0b      	cmp	r3, #11
 80018b6:	d116      	bne.n	80018e6 <dwTune+0x732>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d108      	bne.n	80018d4 <dwTune+0x720>
			writeValueToBytes(lderepc, ((0x3AE0 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80018c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018c6:	2202      	movs	r2, #2
 80018c8:	f240 715c 	movw	r1, #1884	@ 0x75c
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 fbd5 	bl	800207c <writeValueToBytes>
 80018d2:	e060      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x3AE0, LEN_LDE_REPC);
 80018d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018d8:	2202      	movs	r2, #2
 80018da:	f643 21e0 	movw	r1, #15072	@ 0x3ae0
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 fbcc 	bl	800207c <writeValueToBytes>
 80018e4:	e057      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_12) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	d116      	bne.n	800191e <dwTune+0x76a>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d108      	bne.n	800190c <dwTune+0x758>
			writeValueToBytes(lderepc, ((0x3D70 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80018fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018fe:	2202      	movs	r2, #2
 8001900:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fbb9 	bl	800207c <writeValueToBytes>
 800190a:	e044      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x3D70, LEN_LDE_REPC);
 800190c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001910:	2202      	movs	r2, #2
 8001912:	f643 5170 	movw	r1, #15728	@ 0x3d70
 8001916:	4618      	mov	r0, r3
 8001918:	f000 fbb0 	bl	800207c <writeValueToBytes>
 800191c:	e03b      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_18 || dev->preambleCode == PREAMBLE_CODE_64MHZ_19) {
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001924:	2b12      	cmp	r3, #18
 8001926:	d004      	beq.n	8001932 <dwTune+0x77e>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800192e:	2b13      	cmp	r3, #19
 8001930:	d116      	bne.n	8001960 <dwTune+0x7ac>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001938:	2b00      	cmp	r3, #0
 800193a:	d108      	bne.n	800194e <dwTune+0x79a>
			writeValueToBytes(lderepc, ((0x35C2 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800193c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001940:	2202      	movs	r2, #2
 8001942:	f44f 61d7 	mov.w	r1, #1720	@ 0x6b8
 8001946:	4618      	mov	r0, r3
 8001948:	f000 fb98 	bl	800207c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800194c:	e023      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x35C2, LEN_LDE_REPC);
 800194e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001952:	2202      	movs	r2, #2
 8001954:	f243 51c2 	movw	r1, #13762	@ 0x35c2
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fb8f 	bl	800207c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800195e:	e01a      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_20) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001966:	2b14      	cmp	r3, #20
 8001968:	d115      	bne.n	8001996 <dwTune+0x7e2>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001970:	2b00      	cmp	r3, #0
 8001972:	d108      	bne.n	8001986 <dwTune+0x7d2>
			writeValueToBytes(lderepc, ((0x47AE >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001974:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001978:	2202      	movs	r2, #2
 800197a:	f640 01f5 	movw	r1, #2293	@ 0x8f5
 800197e:	4618      	mov	r0, r3
 8001980:	f000 fb7c 	bl	800207c <writeValueToBytes>
 8001984:	e007      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x47AE, LEN_LDE_REPC);
 8001986:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800198a:	2202      	movs	r2, #2
 800198c:	f244 71ae 	movw	r1, #18350	@ 0x47ae
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fb73 	bl	800207c <writeValueToBytes>
		}
	} else {
		// TODO proper error/warning handling
	}
	// TX_POWER (enabled smart transmit power control)
	if(dev->forceTxPower) {
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800199c:	2b00      	cmp	r3, #0
 800199e:	d009      	beq.n	80019b4 <dwTune+0x800>
		writeValueToBytes(txpower, dev->txPower, LEN_TX_POWER);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a4:	4619      	mov	r1, r3
 80019a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019aa:	2204      	movs	r2, #4
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 fb65 	bl	800207c <writeValueToBytes>
 80019b2:	e12f      	b.n	8001c14 <dwTune+0xa60>
	} else if(dev->channel == CHANNEL_1 || dev->channel == CHANNEL_2) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d004      	beq.n	80019c8 <dwTune+0x814>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d136      	bne.n	8001a36 <dwTune+0x882>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d115      	bne.n	80019fe <dwTune+0x84a>
			if(dev->smartPower) {
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d007      	beq.n	80019ec <dwTune+0x838>
				writeValueToBytes(txpower, 0x15355575L, LEN_TX_POWER);
 80019dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019e0:	2204      	movs	r2, #4
 80019e2:	4995      	ldr	r1, [pc, #596]	@ (8001c38 <dwTune+0xa84>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fb49 	bl	800207c <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80019ea:	e112      	b.n	8001c12 <dwTune+0xa5e>
			} else {
				writeValueToBytes(txpower, 0x75757575L, LEN_TX_POWER);
 80019ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019f0:	2204      	movs	r2, #4
 80019f2:	f04f 3175 	mov.w	r1, #1970632053	@ 0x75757575
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fb40 	bl	800207c <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80019fc:	e109      	b.n	8001c12 <dwTune+0xa5e>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	f040 8104 	bne.w	8001c12 <dwTune+0xa5e>
			if(dev->smartPower) {
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d007      	beq.n	8001a24 <dwTune+0x870>
				writeValueToBytes(txpower, 0x07274767L, LEN_TX_POWER);
 8001a14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a18:	2204      	movs	r2, #4
 8001a1a:	4988      	ldr	r1, [pc, #544]	@ (8001c3c <dwTune+0xa88>)
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fb2d 	bl	800207c <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001a22:	e0f6      	b.n	8001c12 <dwTune+0xa5e>
			} else {
				writeValueToBytes(txpower, 0x67676767L, LEN_TX_POWER);
 8001a24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a28:	2204      	movs	r2, #4
 8001a2a:	f04f 3167 	mov.w	r1, #1734829927	@ 0x67676767
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 fb24 	bl	800207c <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001a34:	e0ed      	b.n	8001c12 <dwTune+0xa5e>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_3) {
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d136      	bne.n	8001aae <dwTune+0x8fa>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d115      	bne.n	8001a76 <dwTune+0x8c2>
			if(dev->smartPower) {
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d007      	beq.n	8001a64 <dwTune+0x8b0>
				writeValueToBytes(txpower, 0x0F2F4F6FL, LEN_TX_POWER);
 8001a54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a58:	2204      	movs	r2, #4
 8001a5a:	4979      	ldr	r1, [pc, #484]	@ (8001c40 <dwTune+0xa8c>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 fb0d 	bl	800207c <writeValueToBytes>
 8001a62:	e0d7      	b.n	8001c14 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x6F6F6F6FL, LEN_TX_POWER);
 8001a64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a68:	2204      	movs	r2, #4
 8001a6a:	f04f 316f 	mov.w	r1, #1869573999	@ 0x6f6f6f6f
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fb04 	bl	800207c <writeValueToBytes>
 8001a74:	e0ce      	b.n	8001c14 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	f040 80c9 	bne.w	8001c14 <dwTune+0xa60>
			if(dev->smartPower) {
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d007      	beq.n	8001a9c <dwTune+0x8e8>
				writeValueToBytes(txpower, 0x2B4B6B8BL, LEN_TX_POWER);
 8001a8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a90:	2204      	movs	r2, #4
 8001a92:	496c      	ldr	r1, [pc, #432]	@ (8001c44 <dwTune+0xa90>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 faf1 	bl	800207c <writeValueToBytes>
 8001a9a:	e0bb      	b.n	8001c14 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x8B8B8B8BL, LEN_TX_POWER);
 8001a9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	f04f 318b 	mov.w	r1, #2341178251	@ 0x8b8b8b8b
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 fae8 	bl	800207c <writeValueToBytes>
 8001aac:	e0b2      	b.n	8001c14 <dwTune+0xa60>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_4) {
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d136      	bne.n	8001b26 <dwTune+0x972>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d115      	bne.n	8001aee <dwTune+0x93a>
			if(dev->smartPower) {
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d007      	beq.n	8001adc <dwTune+0x928>
				writeValueToBytes(txpower, 0x1F1F3F5FL, LEN_TX_POWER);
 8001acc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	495d      	ldr	r1, [pc, #372]	@ (8001c48 <dwTune+0xa94>)
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 fad1 	bl	800207c <writeValueToBytes>
 8001ada:	e09b      	b.n	8001c14 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x5F5F5F5FL, LEN_TX_POWER);
 8001adc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	f04f 315f 	mov.w	r1, #1600085855	@ 0x5f5f5f5f
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 fac8 	bl	800207c <writeValueToBytes>
 8001aec:	e092      	b.n	8001c14 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	f040 808d 	bne.w	8001c14 <dwTune+0xa60>
			if(dev->smartPower) {
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d007      	beq.n	8001b14 <dwTune+0x960>
				writeValueToBytes(txpower, 0x3A5A7A9AL, LEN_TX_POWER);
 8001b04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b08:	2204      	movs	r2, #4
 8001b0a:	4950      	ldr	r1, [pc, #320]	@ (8001c4c <dwTune+0xa98>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 fab5 	bl	800207c <writeValueToBytes>
 8001b12:	e07f      	b.n	8001c14 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x9A9A9A9AL, LEN_TX_POWER);
 8001b14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b18:	2204      	movs	r2, #4
 8001b1a:	f04f 319a 	mov.w	r1, #2593823386	@ 0x9a9a9a9a
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 faac 	bl	800207c <writeValueToBytes>
 8001b24:	e076      	b.n	8001c14 <dwTune+0xa60>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_5) {
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001b2c:	2b05      	cmp	r3, #5
 8001b2e:	d135      	bne.n	8001b9c <dwTune+0x9e8>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d115      	bne.n	8001b66 <dwTune+0x9b2>
			if(dev->smartPower) {
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d007      	beq.n	8001b54 <dwTune+0x9a0>
				writeValueToBytes(txpower, 0x0E082848L, LEN_TX_POWER);
 8001b44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b48:	2204      	movs	r2, #4
 8001b4a:	4941      	ldr	r1, [pc, #260]	@ (8001c50 <dwTune+0xa9c>)
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 fa95 	bl	800207c <writeValueToBytes>
 8001b52:	e05f      	b.n	8001c14 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x48484848L, LEN_TX_POWER);
 8001b54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b58:	2204      	movs	r2, #4
 8001b5a:	f04f 3148 	mov.w	r1, #1212696648	@ 0x48484848
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fa8c 	bl	800207c <writeValueToBytes>
 8001b64:	e056      	b.n	8001c14 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d151      	bne.n	8001c14 <dwTune+0xa60>
			if(dev->smartPower) {
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <dwTune+0x9d6>
				writeValueToBytes(txpower, 0x25456585L, LEN_TX_POWER);
 8001b7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b7e:	2204      	movs	r2, #4
 8001b80:	4934      	ldr	r1, [pc, #208]	@ (8001c54 <dwTune+0xaa0>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 fa7a 	bl	800207c <writeValueToBytes>
 8001b88:	e044      	b.n	8001c14 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x85858585L, LEN_TX_POWER);
 8001b8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b8e:	2204      	movs	r2, #4
 8001b90:	f04f 3185 	mov.w	r1, #2240120197	@ 0x85858585
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 fa71 	bl	800207c <writeValueToBytes>
 8001b9a:	e03b      	b.n	8001c14 <dwTune+0xa60>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_7) {
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001ba2:	2b07      	cmp	r3, #7
 8001ba4:	d136      	bne.n	8001c14 <dwTune+0xa60>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d115      	bne.n	8001bdc <dwTune+0xa28>
			if(dev->smartPower) {
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <dwTune+0xa16>
				writeValueToBytes(txpower, 0x32527292L, LEN_TX_POWER);
 8001bba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	4925      	ldr	r1, [pc, #148]	@ (8001c58 <dwTune+0xaa4>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 fa5a 	bl	800207c <writeValueToBytes>
 8001bc8:	e024      	b.n	8001c14 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x92929292L, LEN_TX_POWER);
 8001bca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bce:	2204      	movs	r2, #4
 8001bd0:	f04f 3192 	mov.w	r1, #2459079314	@ 0x92929292
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fa51 	bl	800207c <writeValueToBytes>
 8001bda:	e01b      	b.n	8001c14 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d116      	bne.n	8001c14 <dwTune+0xa60>
			if(dev->smartPower) {
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <dwTune+0xa4c>
				writeValueToBytes(txpower, 0x5171B1D1L, LEN_TX_POWER);
 8001bf0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	4919      	ldr	r1, [pc, #100]	@ (8001c5c <dwTune+0xaa8>)
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 fa3f 	bl	800207c <writeValueToBytes>
 8001bfe:	e009      	b.n	8001c14 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0xD1D1D1D1L, LEN_TX_POWER);
 8001c00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c04:	2204      	movs	r2, #4
 8001c06:	f04f 31d1 	mov.w	r1, #3520188881	@ 0xd1d1d1d1
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 fa36 	bl	800207c <writeValueToBytes>
 8001c10:	e000      	b.n	8001c14 <dwTune+0xa60>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001c12:	bf00      	nop
	} else {
		// TODO proper error/warning handling
	}
	// Crystal calibration from OTP (if available)
	uint8_t buf_otp[4];
	readBytesOTP(dev, 0x01E, buf_otp);
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	461a      	mov	r2, r3
 8001c1a:	211e      	movs	r1, #30
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fa4d 	bl	80020bc <readBytesOTP>
	if (buf_otp[0] == 0) {
 8001c22:	7b3b      	ldrb	r3, [r7, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d11b      	bne.n	8001c60 <dwTune+0xaac>
		// No trim value available from OTP, use midrange value of 0x10
		writeValueToBytes(fsxtalt, ((0x10 & 0x1F) | 0x60), LEN_FS_XTALT);
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	2170      	movs	r1, #112	@ 0x70
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 fa23 	bl	800207c <writeValueToBytes>
 8001c36:	e01e      	b.n	8001c76 <dwTune+0xac2>
 8001c38:	15355575 	.word	0x15355575
 8001c3c:	07274767 	.word	0x07274767
 8001c40:	0f2f4f6f 	.word	0x0f2f4f6f
 8001c44:	2b4b6b8b 	.word	0x2b4b6b8b
 8001c48:	1f1f3f5f 	.word	0x1f1f3f5f
 8001c4c:	3a5a7a9a 	.word	0x3a5a7a9a
 8001c50:	0e082848 	.word	0x0e082848
 8001c54:	25456585 	.word	0x25456585
 8001c58:	32527292 	.word	0x32527292
 8001c5c:	5171b1d1 	.word	0x5171b1d1
	} else {
		writeValueToBytes(fsxtalt, ((buf_otp[0] & 0x1F) | 0x60), LEN_FS_XTALT);
 8001c60:	7b3b      	ldrb	r3, [r7, #12]
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	f043 0160 	orr.w	r1, r3, #96	@ 0x60
 8001c6a:	f107 0310 	add.w	r3, r7, #16
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 fa03 	bl	800207c <writeValueToBytes>
	}
	// write configuration back to chip
	dwSpiWrite(dev, AGC_TUNE, AGC_TUNE1_SUB, agctune1, LEN_AGC_TUNE1);
 8001c76:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	9200      	str	r2, [sp, #0]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	2123      	movs	r1, #35	@ 0x23
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 faa3 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, AGC_TUNE, AGC_TUNE2_SUB, agctune2, LEN_AGC_TUNE2);
 8001c88:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	9200      	str	r2, [sp, #0]
 8001c90:	220c      	movs	r2, #12
 8001c92:	2123      	movs	r1, #35	@ 0x23
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fa9a 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, AGC_TUNE, AGC_TUNE3_SUB, agctune3, LEN_AGC_TUNE3);
 8001c9a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	9200      	str	r2, [sp, #0]
 8001ca2:	2212      	movs	r2, #18
 8001ca4:	2123      	movs	r1, #35	@ 0x23
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fa91 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE0b_SUB, drxtune0b, LEN_DRX_TUNE0b);
 8001cac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	9200      	str	r2, [sp, #0]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	2127      	movs	r1, #39	@ 0x27
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 fa88 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1a_SUB, drxtune1a, LEN_DRX_TUNE1a);
 8001cbe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	9200      	str	r2, [sp, #0]
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	2127      	movs	r1, #39	@ 0x27
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fa7f 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1b_SUB, drxtune1b, LEN_DRX_TUNE1b);
 8001cd0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	9200      	str	r2, [sp, #0]
 8001cd8:	2206      	movs	r2, #6
 8001cda:	2127      	movs	r1, #39	@ 0x27
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 fa76 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE2_SUB, drxtune2, LEN_DRX_TUNE2);
 8001ce2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	9200      	str	r2, [sp, #0]
 8001cea:	2208      	movs	r2, #8
 8001cec:	2127      	movs	r1, #39	@ 0x27
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fa6d 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE4H_SUB, drxtune4H, LEN_DRX_TUNE4H);
 8001cf4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	9200      	str	r2, [sp, #0]
 8001cfc:	2226      	movs	r2, #38	@ 0x26
 8001cfe:	2127      	movs	r1, #39	@ 0x27
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fa64 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_CFG1_SUB, ldecfg1, LEN_LDE_CFG1);
 8001d06:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	9200      	str	r2, [sp, #0]
 8001d0e:	f640 0206 	movw	r2, #2054	@ 0x806
 8001d12:	212e      	movs	r1, #46	@ 0x2e
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 fa5a 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_CFG2_SUB, ldecfg2, LEN_LDE_CFG2);
 8001d1a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d1e:	2202      	movs	r2, #2
 8001d20:	9200      	str	r2, [sp, #0]
 8001d22:	f641 0206 	movw	r2, #6150	@ 0x1806
 8001d26:	212e      	movs	r1, #46	@ 0x2e
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fa50 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_REPC_SUB, lderepc, LEN_LDE_REPC);
 8001d2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d32:	2202      	movs	r2, #2
 8001d34:	9200      	str	r2, [sp, #0]
 8001d36:	f642 0204 	movw	r2, #10244	@ 0x2804
 8001d3a:	212e      	movs	r1, #46	@ 0x2e
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fa46 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, TX_POWER, NO_SUB, txpower, LEN_TX_POWER);
 8001d42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d46:	2204      	movs	r2, #4
 8001d48:	9200      	str	r2, [sp, #0]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	211e      	movs	r1, #30
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fa3d 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, RF_CONF, RF_RXCTRLH_SUB, rfrxctrlh, LEN_RF_RXCTRLH);
 8001d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d58:	2201      	movs	r2, #1
 8001d5a:	9200      	str	r2, [sp, #0]
 8001d5c:	220b      	movs	r2, #11
 8001d5e:	2128      	movs	r1, #40	@ 0x28
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fa34 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, RF_CONF, RF_TXCTRL_SUB, rftxctrl, LEN_RF_TXCTRL);
 8001d66:	f107 0320 	add.w	r3, r7, #32
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	9200      	str	r2, [sp, #0]
 8001d6e:	220c      	movs	r2, #12
 8001d70:	2128      	movs	r1, #40	@ 0x28
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 fa2b 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, TX_CAL, TC_PGDELAY_SUB, tcpgdelay, LEN_TC_PGDELAY);
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	9200      	str	r2, [sp, #0]
 8001d80:	220b      	movs	r2, #11
 8001d82:	212a      	movs	r1, #42	@ 0x2a
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fa22 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, FS_CTRL, FS_PLLTUNE_SUB, fsplltune, LEN_FS_PLLTUNE);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	2201      	movs	r2, #1
 8001d90:	9200      	str	r2, [sp, #0]
 8001d92:	220b      	movs	r2, #11
 8001d94:	212b      	movs	r1, #43	@ 0x2b
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fa19 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, FS_CTRL, FS_PLLCFG_SUB, fspllcfg, LEN_FS_PLLCFG);
 8001d9c:	f107 0318 	add.w	r3, r7, #24
 8001da0:	2204      	movs	r2, #4
 8001da2:	9200      	str	r2, [sp, #0]
 8001da4:	2207      	movs	r2, #7
 8001da6:	212b      	movs	r1, #43	@ 0x2b
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 fa10 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, FS_CTRL, FS_XTALT_SUB, fsxtalt, LEN_FS_XTALT);
 8001dae:	f107 0310 	add.w	r3, r7, #16
 8001db2:	2201      	movs	r2, #1
 8001db4:	9200      	str	r2, [sp, #0]
 8001db6:	220e      	movs	r2, #14
 8001db8:	212b      	movs	r1, #43	@ 0x2b
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fa07 	bl	80021ce <dwSpiWrite>
}
 8001dc0:	bf00      	nop
 8001dc2:	3758      	adds	r7, #88	@ 0x58
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <dwHandleInterrupt>:

void dwHandleInterrupt(dwDevice_t *dev) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	// read current status and handle via callbacks
	dwReadSystemEventStatusRegister(dev);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7fe fc31 	bl	8000638 <dwReadSystemEventStatusRegister>
	if(dwIsClockProblem(dev) /* TODO and others */ && dev->handleError != 0) {
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff f95a 	bl	8001090 <dwIsClockProblem>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <dwHandleInterrupt+0x2a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <dwHandleInterrupt+0x2a>
		(*dev->handleError)(dev);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	4798      	blx	r3
	}
	if(dwIsTransmitDone(dev) && dev->handleSent != 0) {
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff f8a8 	bl	8000f48 <dwIsTransmitDone>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00a      	beq.n	8001e14 <dwHandleInterrupt+0x4c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d006      	beq.n	8001e14 <dwHandleInterrupt+0x4c>
		dwClearTransmitStatus(dev);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff f994 	bl	8001134 <dwClearTransmitStatus>
		(*dev->handleSent)(dev);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4798      	blx	r3
	}
	if(dwIsReceiveTimestampAvailable(dev) && dev->handleReceiveTimestampAvailable != 0) {
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff f8a7 	bl	8000f68 <dwIsReceiveTimestampAvailable>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00a      	beq.n	8001e36 <dwHandleInterrupt+0x6e>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <dwHandleInterrupt+0x6e>
		dwClearReceiveTimestampAvailableStatus(dev);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff f954 	bl	80010d6 <dwClearReceiveTimestampAvailableStatus>
		(*dev->handleReceiveTimestampAvailable)(dev);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	4798      	blx	r3
	}
	if(dwIsReceiveFailed(dev)) {
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff f8c4 	bl	8000fc4 <dwIsReceiveFailed>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d019      	beq.n	8001e76 <dwHandleInterrupt+0xae>
		dwClearReceiveStatus(dev);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff f964 	bl	8001110 <dwClearReceiveStatus>
		dwRxSoftReset(dev); // Needed due to error in the RX auto-re-enable functionality. See page 35 of DW1000 manual, v2.13.
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7fe fba6 	bl	800059a <dwRxSoftReset>
		if(dev->handleReceiveFailed != 0) {
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d04b      	beq.n	8001eee <dwHandleInterrupt+0x126>
			dev->handleReceiveFailed(dev);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	4798      	blx	r3
			if(dev->permanentReceive) {
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d042      	beq.n	8001eee <dwHandleInterrupt+0x126>
				dwNewReceive(dev);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7fe fdca 	bl	8000a02 <dwNewReceive>
				dwStartReceive(dev);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7fe fddf 	bl	8000a32 <dwStartReceive>
		if(dev->permanentReceive) {
			dwNewReceive(dev);
			dwStartReceive(dev);
		}
	}
}
 8001e74:	e03b      	b.n	8001eee <dwHandleInterrupt+0x126>
	} else if(dwIsReceiveTimeout(dev)) {
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff f8fa 	bl	8001070 <dwIsReceiveTimeout>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d019      	beq.n	8001eb6 <dwHandleInterrupt+0xee>
		dwClearReceiveStatus(dev);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff f944 	bl	8001110 <dwClearReceiveStatus>
		dwRxSoftReset(dev); // Needed due to error in the RX auto-re-enable functionality. See page 35 of DW1000 manual, v2.13.
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7fe fb86 	bl	800059a <dwRxSoftReset>
		if(dev->handleReceiveTimeout != 0) {
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d02b      	beq.n	8001eee <dwHandleInterrupt+0x126>
			(*dev->handleReceiveTimeout)(dev);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	4798      	blx	r3
			if(dev->permanentReceive) {
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d022      	beq.n	8001eee <dwHandleInterrupt+0x126>
				dwNewReceive(dev);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7fe fdaa 	bl	8000a02 <dwNewReceive>
				dwStartReceive(dev);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe fdbf 	bl	8000a32 <dwStartReceive>
}
 8001eb4:	e01b      	b.n	8001eee <dwHandleInterrupt+0x126>
	} else if(dwIsReceiveDone(dev) && dev->handleReceived != 0) {
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff f866 	bl	8000f88 <dwIsReceiveDone>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d015      	beq.n	8001eee <dwHandleInterrupt+0x126>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d011      	beq.n	8001eee <dwHandleInterrupt+0x126>
		dwClearReceiveStatus(dev);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff f920 	bl	8001110 <dwClearReceiveStatus>
		(*dev->handleReceived)(dev);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	4798      	blx	r3
		if(dev->permanentReceive) {
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <dwHandleInterrupt+0x126>
			dwNewReceive(dev);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7fe fd8d 	bl	8000a02 <dwNewReceive>
			dwStartReceive(dev);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7fe fda2 	bl	8000a32 <dwStartReceive>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <dwAttachSentHandler>:
{
	dev->forceTxPower = true;
	dev->txPower = txPower;
}

void dwAttachSentHandler(dwDevice_t *dev, dwHandler_t handler) {
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6039      	str	r1, [r7, #0]
	dev->handleSent = handler;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <dwAttachErrorHandler>:

void dwAttachErrorHandler(dwDevice_t *dev, dwHandler_t handler) {
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
	dev->handleError = handler;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr

08001f2a <dwAttachReceivedHandler>:

void dwAttachReceivedHandler(dwDevice_t *dev, dwHandler_t handler) {
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
	dev->handleReceived = handler;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <dwAttachReceiveFailedHandler>:

void dwAttachReceiveTimeoutHandler(dwDevice_t *dev, dwHandler_t handler) {
	dev->handleReceiveTimeout = handler;
}

void dwAttachReceiveFailedHandler(dwDevice_t *dev, dwHandler_t handler) {
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
	dev->handleReceiveFailed = handler;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr

08001f5e <dwSetAntenaDelay>:

void dwAttachReceiveTimestampAvailable(dwDevice_t *dev, dwHandler_t handler) {
	dev->handleReceiveTimestampAvailable = handler;
}

void dwSetAntenaDelay(dwDevice_t *dev, dwTime_t delay) {
 8001f5e:	b480      	push	{r7}
 8001f60:	b085      	sub	sp, #20
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	4639      	mov	r1, r7
 8001f68:	e881 000c 	stmia.w	r1, {r2, r3}
	dev->antennaDelay.full = delay.full;
 8001f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f70:	68f9      	ldr	r1, [r7, #12]
 8001f72:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <dwStrError>:

char* dwStrError(int error)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	if (error == DW_ERROR_OK) return "No error";
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <dwStrError+0x12>
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <dwStrError+0x28>)
 8001f90:	e005      	b.n	8001f9e <dwStrError+0x1e>
	else if (error == DW_ERROR_WRONG_ID) return "Wrong chip ID";
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <dwStrError+0x1c>
 8001f98:	4b04      	ldr	r3, [pc, #16]	@ (8001fac <dwStrError+0x2c>)
 8001f9a:	e000      	b.n	8001f9e <dwStrError+0x1e>
	else return "Uknown error";
 8001f9c:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <dwStrError+0x30>)
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	0800b614 	.word	0x0800b614
 8001fac:	0800b620 	.word	0x0800b620
 8001fb0:	0800b630 	.word	0x0800b630

08001fb4 <setBit>:

static void setBit(uint8_t data[], unsigned int n, unsigned int bit, bool val) {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	@ 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	70fb      	strb	r3, [r7, #3]
	unsigned int idx;
	unsigned int shift;

	idx = bit / 8;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	61fb      	str	r3, [r7, #28]
	if(idx >= n) {
 8001fc8:	69fa      	ldr	r2, [r7, #28]
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d228      	bcs.n	8002022 <setBit+0x6e>
		return; // TODO proper error handling: out of bounds
	}
	uint8_t* targetByte = &data[idx];
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
	shift = bit % 8;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	617b      	str	r3, [r7, #20]
	if(val) {
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00d      	beq.n	8002002 <setBit+0x4e>
		*targetByte |= (1<<shift);
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b25a      	sxtb	r2, r3
 8001fec:	2101      	movs	r1, #1
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	b25b      	sxtb	r3, r3
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	e010      	b.n	8002024 <setBit+0x70>
	} else {
		*targetByte &= ~(1<<shift);
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	b25a      	sxtb	r2, r3
 8002008:	2101      	movs	r1, #1
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	b25b      	sxtb	r3, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	b25b      	sxtb	r3, r3
 8002016:	4013      	ands	r3, r2
 8002018:	b25b      	sxtb	r3, r3
 800201a:	b2da      	uxtb	r2, r3
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	701a      	strb	r2, [r3, #0]
 8002020:	e000      	b.n	8002024 <setBit+0x70>
		return; // TODO proper error handling: out of bounds
 8002022:	bf00      	nop
	}
}
 8002024:	3724      	adds	r7, #36	@ 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <getBit>:

static bool getBit(uint8_t data[], unsigned int n, unsigned int bit) {
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	@ 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
	unsigned int idx;
	unsigned int shift;

	idx = bit / 8;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	08db      	lsrs	r3, r3, #3
 800203c:	61fb      	str	r3, [r7, #28]
	if(idx >= n) {
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	429a      	cmp	r2, r3
 8002044:	d301      	bcc.n	800204a <getBit+0x1e>
		return false; // TODO proper error handling: out of bounds
 8002046:	2300      	movs	r3, #0
 8002048:	e013      	b.n	8002072 <getBit+0x46>
	}
	uint8_t targetByte = data[idx];
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	4413      	add	r3, r2
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	76fb      	strb	r3, [r7, #27]
	shift = bit % 8;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	617b      	str	r3, [r7, #20]

	return (targetByte>>shift)&0x01;
 800205c:	7efa      	ldrb	r2, [r7, #27]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	fa42 f303 	asr.w	r3, r2, r3
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf14      	ite	ne
 800206c:	2301      	movne	r3, #1
 800206e:	2300      	moveq	r3, #0
 8002070:	b2db      	uxtb	r3, r3
}
 8002072:	4618      	mov	r0, r3
 8002074:	3724      	adds	r7, #36	@ 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <writeValueToBytes>:

static void writeValueToBytes(uint8_t data[], long val, unsigned int n) {
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
	unsigned int i;
	for(i = 0; i < n; i++) {
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	e00c      	b.n	80020a8 <writeValueToBytes+0x2c>
		data[i] = ((val >> (i * 8)) & 0xFF);
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	fa42 f103 	asr.w	r1, r2, r3
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	4413      	add	r3, r2
 800209e:	b2ca      	uxtb	r2, r1
 80020a0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < n; i++) {
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3301      	adds	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d3ee      	bcc.n	800208e <writeValueToBytes+0x12>
	}
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	371c      	adds	r7, #28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <readBytesOTP>:

static void readBytesOTP(dwDevice_t* dev, uint16_t address, uint8_t data[]) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	460b      	mov	r3, r1
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	817b      	strh	r3, [r7, #10]
	uint8_t addressBytes[LEN_OTP_ADDR];

	// p60 - 6.3.3 Reading a value from OTP memory
	// bytes of address
	addressBytes[0] = (address & 0xFF);
 80020ca:	897b      	ldrh	r3, [r7, #10]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	753b      	strb	r3, [r7, #20]
	addressBytes[1] = ((address >> 8) & 0xFF);
 80020d0:	897b      	ldrh	r3, [r7, #10]
 80020d2:	0a1b      	lsrs	r3, r3, #8
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	757b      	strb	r3, [r7, #21]
	// set address
	dwSpiWrite(dev, OTP_IF, OTP_ADDR_SUB, addressBytes, LEN_OTP_ADDR);
 80020da:	f107 0314 	add.w	r3, r7, #20
 80020de:	2202      	movs	r2, #2
 80020e0:	9200      	str	r2, [sp, #0]
 80020e2:	2204      	movs	r2, #4
 80020e4:	212d      	movs	r1, #45	@ 0x2d
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f871 	bl	80021ce <dwSpiWrite>
	// switch into read mode
	dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x03); // OTPRDEN | OTPREAD
 80020ec:	2303      	movs	r3, #3
 80020ee:	2206      	movs	r2, #6
 80020f0:	212d      	movs	r1, #45	@ 0x2d
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f8ae 	bl	8002254 <dwSpiWrite8>
	dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x01); // OTPRDEN
 80020f8:	2301      	movs	r3, #1
 80020fa:	2206      	movs	r2, #6
 80020fc:	212d      	movs	r1, #45	@ 0x2d
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f8a8 	bl	8002254 <dwSpiWrite8>
	// read value/block - 4 bytes
	dwSpiRead(dev, OTP_IF, OTP_RDAT_SUB, data, LEN_OTP_RDAT);
 8002104:	2304      	movs	r3, #4
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	220a      	movs	r2, #10
 800210c:	212d      	movs	r1, #45	@ 0x2d
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f80a 	bl	8002128 <dwSpiRead>
	// end read mode
	dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x00);
 8002114:	2300      	movs	r3, #0
 8002116:	2206      	movs	r2, #6
 8002118:	212d      	movs	r1, #45	@ 0x2d
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f89a 	bl	8002254 <dwSpiWrite8>
}
 8002120:	bf00      	nop
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <dwSpiRead>:

#include "libdw1000Spi.h"


void dwSpiRead(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                void* data, size_t length) {
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b089      	sub	sp, #36	@ 0x24
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	460b      	mov	r3, r1
 8002136:	72fb      	strb	r3, [r7, #11]
	uint8_t header[3];
 	size_t headerLength=1;
 8002138:	2301      	movs	r3, #1
 800213a:	617b      	str	r3, [r7, #20]

	header[0] = regid & 0x3f;
 800213c:	7afb      	ldrb	r3, [r7, #11]
 800213e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002142:	b2db      	uxtb	r3, r3
 8002144:	743b      	strb	r3, [r7, #16]

	if (address != 0) {
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01c      	beq.n	8002186 <dwSpiRead+0x5e>
		header[0] |= 0x40;
 800214c:	7c3b      	ldrb	r3, [r7, #16]
 800214e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002152:	b2db      	uxtb	r3, r3
 8002154:	743b      	strb	r3, [r7, #16]

		header[1] = address & 0x7f;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800215e:	b2db      	uxtb	r3, r3
 8002160:	747b      	strb	r3, [r7, #17]
		address >>= 7;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	09db      	lsrs	r3, r3, #7
 8002166:	607b      	str	r3, [r7, #4]
		headerLength = 2;
 8002168:	2302      	movs	r3, #2
 800216a:	617b      	str	r3, [r7, #20]

		if (address != 0) {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <dwSpiRead+0x5e>
			header[1] |= 0x80;
 8002172:	7c7b      	ldrb	r3, [r7, #17]
 8002174:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002178:	b2db      	uxtb	r3, r3
 800217a:	747b      	strb	r3, [r7, #17]
			header[2] = address & 0xff;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	74bb      	strb	r3, [r7, #18]
			headerLength = 3;
 8002182:	2303      	movs	r3, #3
 8002184:	617b      	str	r3, [r7, #20]
		}
	}

	dev->ops->spiRead(dev, header, headerLength, data, length);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681c      	ldr	r4, [r3, #0]
 800218c:	f107 0110 	add.w	r1, r7, #16
 8002190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	47a0      	blx	r4
}
 800219c:	bf00      	nop
 800219e:	371c      	adds	r7, #28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd90      	pop	{r4, r7, pc}

080021a4 <dwSpiRead32>:
	uint16_t data;
	dwSpiRead(dev, regid, address, &data, sizeof(data));
	return data;
}

uint32_t dwSpiRead32(dwDevice_t *dev, uint8_t regid, uint32_t address) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	460b      	mov	r3, r1
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	72fb      	strb	r3, [r7, #11]
	uint32_t data;
	dwSpiRead(dev, regid, address, &data, sizeof(data));
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	7af9      	ldrb	r1, [r7, #11]
 80021b8:	2204      	movs	r2, #4
 80021ba:	9200      	str	r2, [sp, #0]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f7ff ffb2 	bl	8002128 <dwSpiRead>
	return data;
 80021c4:	697b      	ldr	r3, [r7, #20]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <dwSpiWrite>:

void dwSpiWrite(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                 const void* data, size_t length) {
 80021ce:	b590      	push	{r4, r7, lr}
 80021d0:	b089      	sub	sp, #36	@ 0x24
 80021d2:	af02      	add	r7, sp, #8
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	460b      	mov	r3, r1
 80021dc:	72fb      	strb	r3, [r7, #11]
	uint8_t header[3];
	size_t headerLength=1;
 80021de:	2301      	movs	r3, #1
 80021e0:	617b      	str	r3, [r7, #20]

	header[0] = regid & 0x3f;
 80021e2:	7afb      	ldrb	r3, [r7, #11]
 80021e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	743b      	strb	r3, [r7, #16]
	header[0] |= 0x80;
 80021ec:	7c3b      	ldrb	r3, [r7, #16]
 80021ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	743b      	strb	r3, [r7, #16]

	if (address != 0) {
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d01c      	beq.n	8002236 <dwSpiWrite+0x68>
		header[0] |= 0x40;
 80021fc:	7c3b      	ldrb	r3, [r7, #16]
 80021fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002202:	b2db      	uxtb	r3, r3
 8002204:	743b      	strb	r3, [r7, #16]

		header[1] = address & 0x7f;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800220e:	b2db      	uxtb	r3, r3
 8002210:	747b      	strb	r3, [r7, #17]
		address >>= 7;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	09db      	lsrs	r3, r3, #7
 8002216:	607b      	str	r3, [r7, #4]
		headerLength = 2;
 8002218:	2302      	movs	r3, #2
 800221a:	617b      	str	r3, [r7, #20]

		if (address != 0) {
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <dwSpiWrite+0x68>
			header[1] |= 0x80;
 8002222:	7c7b      	ldrb	r3, [r7, #17]
 8002224:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002228:	b2db      	uxtb	r3, r3
 800222a:	747b      	strb	r3, [r7, #17]
			header[2] = address & 0xff;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	74bb      	strb	r3, [r7, #18]
			headerLength = 3;
 8002232:	2303      	movs	r3, #3
 8002234:	617b      	str	r3, [r7, #20]
		}
	}

	dev->ops->spiWrite(dev, header, headerLength, data, length);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685c      	ldr	r4, [r3, #4]
 800223c:	f107 0110 	add.w	r1, r7, #16
 8002240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	47a0      	blx	r4
}
 800224c:	bf00      	nop
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	bd90      	pop	{r4, r7, pc}

08002254 <dwSpiWrite8>:

void dwSpiWrite8(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                   uint8_t data) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af02      	add	r7, sp, #8
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	461a      	mov	r2, r3
 8002260:	460b      	mov	r3, r1
 8002262:	72fb      	strb	r3, [r7, #11]
 8002264:	4613      	mov	r3, r2
 8002266:	72bb      	strb	r3, [r7, #10]
	dwSpiWrite(dev, regid, address, &data, sizeof(data));
 8002268:	f107 030a 	add.w	r3, r7, #10
 800226c:	7af9      	ldrb	r1, [r7, #11]
 800226e:	2201      	movs	r2, #1
 8002270:	9200      	str	r2, [sp, #0]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f7ff ffaa 	bl	80021ce <dwSpiWrite>
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <dwSpiWrite32>:

void dwSpiWrite32(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                   uint32_t data) {
 8002282:	b580      	push	{r7, lr}
 8002284:	b086      	sub	sp, #24
 8002286:	af02      	add	r7, sp, #8
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	460b      	mov	r3, r1
 8002290:	72fb      	strb	r3, [r7, #11]
	dwSpiWrite(dev, regid, address, &data, sizeof(data));
 8002292:	463b      	mov	r3, r7
 8002294:	7af9      	ldrb	r1, [r7, #11]
 8002296:	2204      	movs	r2, #4
 8002298:	9200      	str	r2, [sp, #0]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f7ff ff96 	bl	80021ce <dwSpiWrite>
}
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	db0b      	blt.n	80022d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	4906      	ldr	r1, [pc, #24]	@ (80022e0 <__NVIC_EnableIRQ+0x34>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	2001      	movs	r0, #1
 80022ce:	fa00 f202 	lsl.w	r2, r0, r2
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <spiRead>:
char USB_TX_Buffer[255] = "\0";
#define SPI_Transmit_Timeout  100
//Timeout for transmission, in ms

void spiRead(dwDevice_t *dev, const void *header, size_t headerLength,
		void *data, size_t dataLength) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
	//Function for SPI_Read for decawave device, member of dw_ops .spiRead field
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);//CS Low
 80022f2:	2200      	movs	r2, #0
 80022f4:	2110      	movs	r1, #16
 80022f6:	480d      	ldr	r0, [pc, #52]	@ (800232c <spiRead+0x48>)
 80022f8:	f001 f84f 	bl	800339a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*) header, headerLength,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	2364      	movs	r3, #100	@ 0x64
 8002302:	68b9      	ldr	r1, [r7, #8]
 8002304:	480a      	ldr	r0, [pc, #40]	@ (8002330 <spiRead+0x4c>)
 8002306:	f003 fb3b 	bl	8005980 <HAL_SPI_Transmit>
	SPI_Transmit_Timeout);

	HAL_SPI_Receive(&hspi1, (uint8_t*) data, dataLength, SPI_Transmit_Timeout);
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	b29a      	uxth	r2, r3
 800230e:	2364      	movs	r3, #100	@ 0x64
 8002310:	6839      	ldr	r1, [r7, #0]
 8002312:	4807      	ldr	r0, [pc, #28]	@ (8002330 <spiRead+0x4c>)
 8002314:	f003 fc78 	bl	8005c08 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);//CS High
 8002318:	2201      	movs	r2, #1
 800231a:	2110      	movs	r1, #16
 800231c:	4803      	ldr	r0, [pc, #12]	@ (800232c <spiRead+0x48>)
 800231e:	f001 f83c 	bl	800339a <HAL_GPIO_WritePin>
	//Led OFF
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40010800 	.word	0x40010800
 8002330:	20000204 	.word	0x20000204

08002334 <spiWrite>:

void spiWrite(dwDevice_t *dev, const void *header, size_t headerLength,
		const void *data, size_t dataLength) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
	//Function for SPI_Write for decawave device, member of dw_ops .spiWrite field
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);//CS Low
 8002342:	2200      	movs	r2, #0
 8002344:	2110      	movs	r1, #16
 8002346:	480d      	ldr	r0, [pc, #52]	@ (800237c <spiWrite+0x48>)
 8002348:	f001 f827 	bl	800339a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*) header, headerLength,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	b29a      	uxth	r2, r3
 8002350:	2364      	movs	r3, #100	@ 0x64
 8002352:	68b9      	ldr	r1, [r7, #8]
 8002354:	480a      	ldr	r0, [pc, #40]	@ (8002380 <spiWrite+0x4c>)
 8002356:	f003 fb13 	bl	8005980 <HAL_SPI_Transmit>
	SPI_Transmit_Timeout);

	HAL_SPI_Transmit(&hspi1, (uint8_t*) data, dataLength, SPI_Transmit_Timeout);
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	b29a      	uxth	r2, r3
 800235e:	2364      	movs	r3, #100	@ 0x64
 8002360:	6839      	ldr	r1, [r7, #0]
 8002362:	4807      	ldr	r0, [pc, #28]	@ (8002380 <spiWrite+0x4c>)
 8002364:	f003 fb0c 	bl	8005980 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);//CS High
 8002368:	2201      	movs	r2, #1
 800236a:	2110      	movs	r1, #16
 800236c:	4803      	ldr	r0, [pc, #12]	@ (800237c <spiWrite+0x48>)
 800236e:	f001 f814 	bl	800339a <HAL_GPIO_WritePin>
}
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40010800 	.word	0x40010800
 8002380:	20000204 	.word	0x20000204

08002384 <spiSetSpeed>:

void spiSetSpeed(dwDevice_t *dev, dwSpiSpeed_t speed) {
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	70fb      	strb	r3, [r7, #3]
// Needs to restart SPI using HAL, future improvement
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <delayms>:
void delayms(dwDevice_t *dev, unsigned int delay) {
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
	HAL_Delay(delay);
 80023a4:	6838      	ldr	r0, [r7, #0]
 80023a6:	f000 fcff 	bl	8002da8 <HAL_Delay>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <reset>:

void reset(dwDevice_t *dev) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80023bc:	2201      	movs	r2, #1
 80023be:	2101      	movs	r1, #1
 80023c0:	4807      	ldr	r0, [pc, #28]	@ (80023e0 <reset+0x2c>)
 80023c2:	f000 ffea 	bl	800339a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80023c6:	200a      	movs	r0, #10
 80023c8:	f000 fcee 	bl	8002da8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2102      	movs	r1, #2
 80023d0:	4803      	ldr	r0, [pc, #12]	@ (80023e0 <reset+0x2c>)
 80023d2:	f000 ffe2 	bl	800339a <HAL_GPIO_WritePin>
	//Open drain output, must not be driven High externally
	//See: DW1000 datasheet, page 8
//Hardware RST pin
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40010800 	.word	0x40010800

080023e4 <TX_Callback>:

dwOps_t dw_ops = { .spiRead = spiRead, .spiWrite = spiWrite, .spiSetSpeed =
		spiSetSpeed, .delayms = delayms, .reset = reset };

//RX and TX callbacks
void TX_Callback(dwDevice_t *dev) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	sprintf((char*) USB_TX_Buffer, "TX Complete %d \n\r\0", HAL_GetTick());
 80023ec:	f000 fcd2 	bl	8002d94 <HAL_GetTick>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461a      	mov	r2, r3
 80023f4:	4908      	ldr	r1, [pc, #32]	@ (8002418 <TX_Callback+0x34>)
 80023f6:	4809      	ldr	r0, [pc, #36]	@ (800241c <TX_Callback+0x38>)
 80023f8:	f008 fc50 	bl	800ac9c <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 80023fc:	4807      	ldr	r0, [pc, #28]	@ (800241c <TX_Callback+0x38>)
 80023fe:	f7fd fea5 	bl	800014c <strlen>
 8002402:	4603      	mov	r3, r0
 8002404:	b29b      	uxth	r3, r3
 8002406:	4619      	mov	r1, r3
 8002408:	4804      	ldr	r0, [pc, #16]	@ (800241c <TX_Callback+0x38>)
 800240a:	f008 f869 	bl	800a4e0 <CDC_Transmit_FS>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	0800b640 	.word	0x0800b640
 800241c:	200002a4 	.word	0x200002a4

08002420 <RX_Callback>:
void RX_Callback(dwDevice_t *dev) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8002428:	2180      	movs	r1, #128	@ 0x80
 800242a:	480d      	ldr	r0, [pc, #52]	@ (8002460 <RX_Callback+0x40>)
 800242c:	f000 ffcd 	bl	80033ca <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8002430:	2064      	movs	r0, #100	@ 0x64
 8002432:	f000 fcb9 	bl	8002da8 <HAL_Delay>
	sprintf((char*) USB_TX_Buffer, "RX Complete %d \n\r\0", HAL_GetTick());
 8002436:	f000 fcad 	bl	8002d94 <HAL_GetTick>
 800243a:	4603      	mov	r3, r0
 800243c:	461a      	mov	r2, r3
 800243e:	4909      	ldr	r1, [pc, #36]	@ (8002464 <RX_Callback+0x44>)
 8002440:	4809      	ldr	r0, [pc, #36]	@ (8002468 <RX_Callback+0x48>)
 8002442:	f008 fc2b 	bl	800ac9c <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002446:	4808      	ldr	r0, [pc, #32]	@ (8002468 <RX_Callback+0x48>)
 8002448:	f7fd fe80 	bl	800014c <strlen>
 800244c:	4603      	mov	r3, r0
 800244e:	b29b      	uxth	r3, r3
 8002450:	4619      	mov	r1, r3
 8002452:	4805      	ldr	r0, [pc, #20]	@ (8002468 <RX_Callback+0x48>)
 8002454:	f008 f844 	bl	800a4e0 <CDC_Transmit_FS>
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40010c00 	.word	0x40010c00
 8002464:	0800b654 	.word	0x0800b654
 8002468:	200002a4 	.word	0x200002a4

0800246c <receivedFailedCallback>:
void receivedFailedCallback(dwDevice_t *dev) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	sprintf((char*) USB_TX_Buffer, "RX Failed %d \n\r\0", HAL_GetTick());
 8002474:	f000 fc8e 	bl	8002d94 <HAL_GetTick>
 8002478:	4603      	mov	r3, r0
 800247a:	461a      	mov	r2, r3
 800247c:	490a      	ldr	r1, [pc, #40]	@ (80024a8 <receivedFailedCallback+0x3c>)
 800247e:	480b      	ldr	r0, [pc, #44]	@ (80024ac <receivedFailedCallback+0x40>)
 8002480:	f008 fc0c 	bl	800ac9c <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002484:	4809      	ldr	r0, [pc, #36]	@ (80024ac <receivedFailedCallback+0x40>)
 8002486:	f7fd fe61 	bl	800014c <strlen>
 800248a:	4603      	mov	r3, r0
 800248c:	b29b      	uxth	r3, r3
 800248e:	4619      	mov	r1, r3
 8002490:	4806      	ldr	r0, [pc, #24]	@ (80024ac <receivedFailedCallback+0x40>)
 8002492:	f008 f825 	bl	800a4e0 <CDC_Transmit_FS>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8002496:	2201      	movs	r2, #1
 8002498:	2140      	movs	r1, #64	@ 0x40
 800249a:	4805      	ldr	r0, [pc, #20]	@ (80024b0 <receivedFailedCallback+0x44>)
 800249c:	f000 ff7d 	bl	800339a <HAL_GPIO_WritePin>
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	0800b668 	.word	0x0800b668
 80024ac:	200002a4 	.word	0x200002a4
 80024b0:	40010c00 	.word	0x40010c00

080024b4 <DW1000_Error_Handler>:
	sprintf((char*) USB_TX_Buffer, "RX Error %d \n\r\0", HAL_GetTick());
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
}

void DW1000_Error_Handler(dwDevice_t *dev) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	sprintf((char*) USB_TX_Buffer, "DW1000 Error %d \n\r\0", HAL_GetTick());
 80024bc:	f000 fc6a 	bl	8002d94 <HAL_GetTick>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	490a      	ldr	r1, [pc, #40]	@ (80024f0 <DW1000_Error_Handler+0x3c>)
 80024c6:	480b      	ldr	r0, [pc, #44]	@ (80024f4 <DW1000_Error_Handler+0x40>)
 80024c8:	f008 fbe8 	bl	800ac9c <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 80024cc:	4809      	ldr	r0, [pc, #36]	@ (80024f4 <DW1000_Error_Handler+0x40>)
 80024ce:	f7fd fe3d 	bl	800014c <strlen>
 80024d2:	4603      	mov	r3, r0
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	4619      	mov	r1, r3
 80024d8:	4806      	ldr	r0, [pc, #24]	@ (80024f4 <DW1000_Error_Handler+0x40>)
 80024da:	f008 f801 	bl	800a4e0 <CDC_Transmit_FS>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80024de:	2201      	movs	r2, #1
 80024e0:	2140      	movs	r1, #64	@ 0x40
 80024e2:	4805      	ldr	r0, [pc, #20]	@ (80024f8 <DW1000_Error_Handler+0x44>)
 80024e4:	f000 ff59 	bl	800339a <HAL_GPIO_WritePin>
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	0800b68c 	.word	0x0800b68c
 80024f4:	200002a4 	.word	0x200002a4
 80024f8:	40010c00 	.word	0x40010c00

080024fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	@ 0x28
 8002500:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002502:	f000 fbef 	bl	8002ce4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002506:	f000 f903 	bl	8002710 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800250a:	f000 f9bd 	bl	8002888 <MX_GPIO_Init>
	MX_SPI1_Init();
 800250e:	f000 f95b 	bl	80027c8 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8002512:	f007 ff27 	bl	800a364 <MX_USB_DEVICE_Init>
	MX_USART1_UART_Init();
 8002516:	f000 f98d 	bl	8002834 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	sprintf((char*) USB_TX_Buffer, "Starting test \n\r\0");
 800251a:	4970      	ldr	r1, [pc, #448]	@ (80026dc <main+0x1e0>)
 800251c:	4870      	ldr	r0, [pc, #448]	@ (80026e0 <main+0x1e4>)
 800251e:	f008 fbbd 	bl	800ac9c <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002522:	486f      	ldr	r0, [pc, #444]	@ (80026e0 <main+0x1e4>)
 8002524:	f7fd fe12 	bl	800014c <strlen>
 8002528:	4603      	mov	r3, r0
 800252a:	b29b      	uxth	r3, r3
 800252c:	4619      	mov	r1, r3
 800252e:	486c      	ldr	r0, [pc, #432]	@ (80026e0 <main+0x1e4>)
 8002530:	f007 ffd6 	bl	800a4e0 <CDC_Transmit_FS>
//		HAL_Delay(5);
//		sprintf((char*) USB_TX_Buffer, "Waiting %d \n\r\0", i);
//		CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
//	}

	sprintf((char*) USB_TX_Buffer, "Test:Init for DW1000 \n\r\0");
 8002534:	496b      	ldr	r1, [pc, #428]	@ (80026e4 <main+0x1e8>)
 8002536:	486a      	ldr	r0, [pc, #424]	@ (80026e0 <main+0x1e4>)
 8002538:	f008 fbb0 	bl	800ac9c <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 800253c:	4868      	ldr	r0, [pc, #416]	@ (80026e0 <main+0x1e4>)
 800253e:	f7fd fe05 	bl	800014c <strlen>
 8002542:	4603      	mov	r3, r0
 8002544:	b29b      	uxth	r3, r3
 8002546:	4619      	mov	r1, r3
 8002548:	4865      	ldr	r0, [pc, #404]	@ (80026e0 <main+0x1e4>)
 800254a:	f007 ffc9 	bl	800a4e0 <CDC_Transmit_FS>
	HAL_Delay(1000);
 800254e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002552:	f000 fc29 	bl	8002da8 <HAL_Delay>
	//Initialize Decawave

	dwInit(dwm, &dw_ops);
 8002556:	4b64      	ldr	r3, [pc, #400]	@ (80026e8 <main+0x1ec>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4964      	ldr	r1, [pc, #400]	@ (80026ec <main+0x1f0>)
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd fe03 	bl	8000168 <dwInit>

	// Enable NVIC interrupt for DW1000
	dwOpsInit(dwm);
 8002562:	4b61      	ldr	r3, [pc, #388]	@ (80026e8 <main+0x1ec>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fa42 	bl	80029f0 <dwOpsInit>

	uint8_t result = dwConfigure(dwm); // Configure the dw1000 chip
 800256c:	4b5e      	ldr	r3, [pc, #376]	@ (80026e8 <main+0x1ec>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fd fe53 	bl	800021c <dwConfigure>
 8002576:	4603      	mov	r3, r0
 8002578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (result == 0) {
 800257c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002580:	2b00      	cmp	r3, #0
 8002582:	d112      	bne.n	80025aa <main+0xae>
		sprintf((char*) USB_TX_Buffer, "Ok \n\r\0");
 8002584:	495a      	ldr	r1, [pc, #360]	@ (80026f0 <main+0x1f4>)
 8002586:	4856      	ldr	r0, [pc, #344]	@ (80026e0 <main+0x1e4>)
 8002588:	f008 fb88 	bl	800ac9c <siprintf>
		CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 800258c:	4854      	ldr	r0, [pc, #336]	@ (80026e0 <main+0x1e4>)
 800258e:	f7fd fddd 	bl	800014c <strlen>
 8002592:	4603      	mov	r3, r0
 8002594:	b29b      	uxth	r3, r3
 8002596:	4619      	mov	r1, r3
 8002598:	4851      	ldr	r0, [pc, #324]	@ (80026e0 <main+0x1e4>)
 800259a:	f007 ffa1 	bl	800a4e0 <CDC_Transmit_FS>
		dwEnableAllLeds(dwm);
 800259e:	4b52      	ldr	r3, [pc, #328]	@ (80026e8 <main+0x1ec>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd ff0f 	bl	80003c6 <dwEnableAllLeds>
 80025a8:	e013      	b.n	80025d2 <main+0xd6>
	} else {
		sprintf((char*) USB_TX_Buffer, "[ERROR]: %s\n\r\0", dwStrError(result));
 80025aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fce6 	bl	8001f80 <dwStrError>
 80025b4:	4603      	mov	r3, r0
 80025b6:	461a      	mov	r2, r3
 80025b8:	494e      	ldr	r1, [pc, #312]	@ (80026f4 <main+0x1f8>)
 80025ba:	4849      	ldr	r0, [pc, #292]	@ (80026e0 <main+0x1e4>)
 80025bc:	f008 fb6e 	bl	800ac9c <siprintf>
		CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 80025c0:	4847      	ldr	r0, [pc, #284]	@ (80026e0 <main+0x1e4>)
 80025c2:	f7fd fdc3 	bl	800014c <strlen>
 80025c6:	4603      	mov	r3, r0
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	4619      	mov	r1, r3
 80025cc:	4844      	ldr	r0, [pc, #272]	@ (80026e0 <main+0x1e4>)
 80025ce:	f007 ff87 	bl	800a4e0 <CDC_Transmit_FS>
	}
	//Decawave config end

	sprintf((char*) USB_TX_Buffer, "Config End \n\r\0");
 80025d2:	4949      	ldr	r1, [pc, #292]	@ (80026f8 <main+0x1fc>)
 80025d4:	4842      	ldr	r0, [pc, #264]	@ (80026e0 <main+0x1e4>)
 80025d6:	f008 fb61 	bl	800ac9c <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 80025da:	4841      	ldr	r0, [pc, #260]	@ (80026e0 <main+0x1e4>)
 80025dc:	f7fd fdb6 	bl	800014c <strlen>
 80025e0:	4603      	mov	r3, r0
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	4619      	mov	r1, r3
 80025e6:	483e      	ldr	r0, [pc, #248]	@ (80026e0 <main+0x1e4>)
 80025e8:	f007 ff7a 	bl	800a4e0 <CDC_Transmit_FS>
	HAL_Delay(1000);
 80025ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025f0:	f000 fbda 	bl	8002da8 <HAL_Delay>

	//Continue with config:
	dwTime_t delay = { .full = 0 };
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	dwSetAntenaDelay(dwm, delay);
 8002600:	4b39      	ldr	r3, [pc, #228]	@ (80026e8 <main+0x1ec>)
 8002602:	6819      	ldr	r1, [r3, #0]
 8002604:	f107 0318 	add.w	r3, r7, #24
 8002608:	cb0c      	ldmia	r3, {r2, r3}
 800260a:	4608      	mov	r0, r1
 800260c:	f7ff fca7 	bl	8001f5e <dwSetAntenaDelay>

	dwAttachSentHandler(dwm, TX_Callback);
 8002610:	4b35      	ldr	r3, [pc, #212]	@ (80026e8 <main+0x1ec>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4939      	ldr	r1, [pc, #228]	@ (80026fc <main+0x200>)
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fc6d 	bl	8001ef6 <dwAttachSentHandler>
	dwAttachReceivedHandler(dwm, RX_Callback);
 800261c:	4b32      	ldr	r3, [pc, #200]	@ (80026e8 <main+0x1ec>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4937      	ldr	r1, [pc, #220]	@ (8002700 <main+0x204>)
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fc81 	bl	8001f2a <dwAttachReceivedHandler>
	dwAttachErrorHandler(dwm, DW1000_Error_Handler);
 8002628:	4b2f      	ldr	r3, [pc, #188]	@ (80026e8 <main+0x1ec>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4935      	ldr	r1, [pc, #212]	@ (8002704 <main+0x208>)
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fc6e 	bl	8001f10 <dwAttachErrorHandler>
	dwAttachReceiveFailedHandler(dwm, receivedFailedCallback);
 8002634:	4b2c      	ldr	r3, [pc, #176]	@ (80026e8 <main+0x1ec>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4933      	ldr	r1, [pc, #204]	@ (8002708 <main+0x20c>)
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fc82 	bl	8001f44 <dwAttachReceiveFailedHandler>

	dwNewConfiguration(dwm);
 8002640:	4b29      	ldr	r3, [pc, #164]	@ (80026e8 <main+0x1ec>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fa22 	bl	8000a8e <dwNewConfiguration>
	dwSetDefaults(dwm);
 800264a:	4b27      	ldr	r3, [pc, #156]	@ (80026e8 <main+0x1ec>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fc2c 	bl	8000eac <dwSetDefaults>

	dwEnableMode(dwm, MODE_SHORTDATA_FAST_ACCURACY);
 8002654:	4b24      	ldr	r3, [pc, #144]	@ (80026e8 <main+0x1ec>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	492c      	ldr	r1, [pc, #176]	@ (800270c <main+0x210>)
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fd7a 	bl	8001154 <dwEnableMode>
	dwSetChannel(dwm, CHANNEL_2);
 8002660:	4b21      	ldr	r3, [pc, #132]	@ (80026e8 <main+0x1ec>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2102      	movs	r1, #2
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fbc9 	bl	8000dfe <dwSetChannel>
	dwSetPreambleCode(dwm, PREAMBLE_CODE_64MHZ_9);
 800266c:	4b1e      	ldr	r3, [pc, #120]	@ (80026e8 <main+0x1ec>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2109      	movs	r1, #9
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fbe1 	bl	8000e3a <dwSetPreambleCode>

	dwCommitConfiguration(dwm);
 8002678:	4b1b      	ldr	r3, [pc, #108]	@ (80026e8 <main+0x1ec>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe fa20 	bl	8000ac2 <dwCommitConfiguration>

	// Enable DW1000 interrupts for receive operations
	dwInterruptOnReceived(dwm, true);
 8002682:	4b19      	ldr	r3, [pc, #100]	@ (80026e8 <main+0x1ec>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2101      	movs	r1, #1
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe f8f7 	bl	800087c <dwInterruptOnReceived>
	dwInterruptOnReceiveFailed(dwm, true);
 800268e:	4b16      	ldr	r3, [pc, #88]	@ (80026e8 <main+0x1ec>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2101      	movs	r1, #1
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe f90b 	bl	80008b0 <dwInterruptOnReceiveFailed>
	dwInterruptOnReceiveTimeout(dwm, true);
 800269a:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <main+0x1ec>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2101      	movs	r1, #1
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fe f93f 	bl	8000924 <dwInterruptOnReceiveTimeout>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	int i = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]

			char mesaj[] = "Hello UWB World! \n\r\0";
			send_Data_Over_UWB(mesaj);
			HAL_Delay(100);
		} else {
			dwNewReceive(dwm);
 80026aa:	4b0f      	ldr	r3, [pc, #60]	@ (80026e8 <main+0x1ec>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe f9a7 	bl	8000a02 <dwNewReceive>
			dwSetDefaults(dwm);
 80026b4:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <main+0x1ec>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fbf7 	bl	8000eac <dwSetDefaults>
			dwReceivePermanently(dwm, 1);
 80026be:	4b0a      	ldr	r3, [pc, #40]	@ (80026e8 <main+0x1ec>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2101      	movs	r1, #1
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe fb8b 	bl	8000de0 <dwReceivePermanently>
			dwStartReceive(dwm);
 80026ca:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <main+0x1ec>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe f9af 	bl	8000a32 <dwStartReceive>
			HAL_Delay(10);
 80026d4:	200a      	movs	r0, #10
 80026d6:	f000 fb67 	bl	8002da8 <HAL_Delay>
		if (TRANSMITTER == 1) {
 80026da:	e7e6      	b.n	80026aa <main+0x1ae>
 80026dc:	0800b6a0 	.word	0x0800b6a0
 80026e0:	200002a4 	.word	0x200002a4
 80026e4:	0800b6b4 	.word	0x0800b6b4
 80026e8:	20000000 	.word	0x20000000
 80026ec:	20000004 	.word	0x20000004
 80026f0:	0800b6d0 	.word	0x0800b6d0
 80026f4:	0800b6d8 	.word	0x0800b6d8
 80026f8:	0800b6e8 	.word	0x0800b6e8
 80026fc:	080023e5 	.word	0x080023e5
 8002700:	08002421 	.word	0x08002421
 8002704:	080024b5 	.word	0x080024b5
 8002708:	0800246d 	.word	0x0800246d
 800270c:	0800b738 	.word	0x0800b738

08002710 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b094      	sub	sp, #80	@ 0x50
 8002714:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002716:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800271a:	2228      	movs	r2, #40	@ 0x28
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f008 fade 	bl	800ace0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002734:	1d3b      	adds	r3, r7, #4
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	609a      	str	r2, [r3, #8]
 800273e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002740:	2301      	movs	r3, #1
 8002742:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002744:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002748:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800274a:	2300      	movs	r3, #0
 800274c:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800274e:	2301      	movs	r3, #1
 8002750:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002752:	2302      	movs	r3, #2
 8002754:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002756:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800275a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800275c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002760:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002762:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002766:	4618      	mov	r0, r3
 8002768:	f002 fbc0 	bl	8004eec <HAL_RCC_OscConfig>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <SystemClock_Config+0x66>
		Error_Handler();
 8002772:	f000 f948 	bl	8002a06 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002776:	230f      	movs	r3, #15
 8002778:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800277a:	2302      	movs	r3, #2
 800277c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002786:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	2101      	movs	r1, #1
 8002792:	4618      	mov	r0, r3
 8002794:	f002 fe2c 	bl	80053f0 <HAL_RCC_ClockConfig>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <SystemClock_Config+0x92>
		Error_Handler();
 800279e:	f000 f932 	bl	8002a06 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80027a2:	2310      	movs	r3, #16
 80027a4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80027a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80027aa:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 ffac 	bl	800570c <HAL_RCCEx_PeriphCLKConfig>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <SystemClock_Config+0xae>
		Error_Handler();
 80027ba:	f000 f924 	bl	8002a06 <Error_Handler>
	}
}
 80027be:	bf00      	nop
 80027c0:	3750      	adds	r7, #80	@ 0x50
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80027cc:	4b17      	ldr	r3, [pc, #92]	@ (800282c <MX_SPI1_Init+0x64>)
 80027ce:	4a18      	ldr	r2, [pc, #96]	@ (8002830 <MX_SPI1_Init+0x68>)
 80027d0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80027d2:	4b16      	ldr	r3, [pc, #88]	@ (800282c <MX_SPI1_Init+0x64>)
 80027d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80027d8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027da:	4b14      	ldr	r3, [pc, #80]	@ (800282c <MX_SPI1_Init+0x64>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027e0:	4b12      	ldr	r3, [pc, #72]	@ (800282c <MX_SPI1_Init+0x64>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027e6:	4b11      	ldr	r3, [pc, #68]	@ (800282c <MX_SPI1_Init+0x64>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027ec:	4b0f      	ldr	r3, [pc, #60]	@ (800282c <MX_SPI1_Init+0x64>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80027f2:	4b0e      	ldr	r3, [pc, #56]	@ (800282c <MX_SPI1_Init+0x64>)
 80027f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027f8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80027fa:	4b0c      	ldr	r3, [pc, #48]	@ (800282c <MX_SPI1_Init+0x64>)
 80027fc:	2218      	movs	r2, #24
 80027fe:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002800:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <MX_SPI1_Init+0x64>)
 8002802:	2200      	movs	r2, #0
 8002804:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002806:	4b09      	ldr	r3, [pc, #36]	@ (800282c <MX_SPI1_Init+0x64>)
 8002808:	2200      	movs	r2, #0
 800280a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800280c:	4b07      	ldr	r3, [pc, #28]	@ (800282c <MX_SPI1_Init+0x64>)
 800280e:	2200      	movs	r2, #0
 8002810:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002812:	4b06      	ldr	r3, [pc, #24]	@ (800282c <MX_SPI1_Init+0x64>)
 8002814:	220a      	movs	r2, #10
 8002816:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002818:	4804      	ldr	r0, [pc, #16]	@ (800282c <MX_SPI1_Init+0x64>)
 800281a:	f003 f82d 	bl	8005878 <HAL_SPI_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_SPI1_Init+0x60>
		Error_Handler();
 8002824:	f000 f8ef 	bl	8002a06 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000204 	.word	0x20000204
 8002830:	40013000 	.word	0x40013000

08002834 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002838:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <MX_USART1_UART_Init+0x4c>)
 800283a:	4a12      	ldr	r2, [pc, #72]	@ (8002884 <MX_USART1_UART_Init+0x50>)
 800283c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800283e:	4b10      	ldr	r3, [pc, #64]	@ (8002880 <MX_USART1_UART_Init+0x4c>)
 8002840:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002844:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002846:	4b0e      	ldr	r3, [pc, #56]	@ (8002880 <MX_USART1_UART_Init+0x4c>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800284c:	4b0c      	ldr	r3, [pc, #48]	@ (8002880 <MX_USART1_UART_Init+0x4c>)
 800284e:	2200      	movs	r2, #0
 8002850:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002852:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <MX_USART1_UART_Init+0x4c>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002858:	4b09      	ldr	r3, [pc, #36]	@ (8002880 <MX_USART1_UART_Init+0x4c>)
 800285a:	220c      	movs	r2, #12
 800285c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800285e:	4b08      	ldr	r3, [pc, #32]	@ (8002880 <MX_USART1_UART_Init+0x4c>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002864:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <MX_USART1_UART_Init+0x4c>)
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800286a:	4805      	ldr	r0, [pc, #20]	@ (8002880 <MX_USART1_UART_Init+0x4c>)
 800286c:	f003 fd99 	bl	80063a2 <HAL_UART_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002876:	f000 f8c6 	bl	8002a06 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	2000025c 	.word	0x2000025c
 8002884:	40013800 	.word	0x40013800

08002888 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800288e:	f107 0310 	add.w	r3, r7, #16
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800289c:	4b3c      	ldr	r3, [pc, #240]	@ (8002990 <MX_GPIO_Init+0x108>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	4a3b      	ldr	r2, [pc, #236]	@ (8002990 <MX_GPIO_Init+0x108>)
 80028a2:	f043 0320 	orr.w	r3, r3, #32
 80028a6:	6193      	str	r3, [r2, #24]
 80028a8:	4b39      	ldr	r3, [pc, #228]	@ (8002990 <MX_GPIO_Init+0x108>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80028b4:	4b36      	ldr	r3, [pc, #216]	@ (8002990 <MX_GPIO_Init+0x108>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	4a35      	ldr	r2, [pc, #212]	@ (8002990 <MX_GPIO_Init+0x108>)
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	6193      	str	r3, [r2, #24]
 80028c0:	4b33      	ldr	r3, [pc, #204]	@ (8002990 <MX_GPIO_Init+0x108>)
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80028cc:	4b30      	ldr	r3, [pc, #192]	@ (8002990 <MX_GPIO_Init+0x108>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002990 <MX_GPIO_Init+0x108>)
 80028d2:	f043 0308 	orr.w	r3, r3, #8
 80028d6:	6193      	str	r3, [r2, #24]
 80028d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002990 <MX_GPIO_Init+0x108>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DW_RSTn_GPIO_Port, DW_RSTn_Pin, GPIO_PIN_RESET);
 80028e4:	2200      	movs	r2, #0
 80028e6:	2101      	movs	r1, #1
 80028e8:	482a      	ldr	r0, [pc, #168]	@ (8002994 <MX_GPIO_Init+0x10c>)
 80028ea:	f000 fd56 	bl	800339a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, USB_EN_Pin | NSS_Pin, GPIO_PIN_SET);
 80028ee:	2201      	movs	r2, #1
 80028f0:	2118      	movs	r1, #24
 80028f2:	4828      	ldr	r0, [pc, #160]	@ (8002994 <MX_GPIO_Init+0x10c>)
 80028f4:	f000 fd51 	bl	800339a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80028f8:	2201      	movs	r2, #1
 80028fa:	2140      	movs	r1, #64	@ 0x40
 80028fc:	4826      	ldr	r0, [pc, #152]	@ (8002998 <MX_GPIO_Init+0x110>)
 80028fe:	f000 fd4c 	bl	800339a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002902:	2200      	movs	r2, #0
 8002904:	2180      	movs	r1, #128	@ 0x80
 8002906:	4824      	ldr	r0, [pc, #144]	@ (8002998 <MX_GPIO_Init+0x110>)
 8002908:	f000 fd47 	bl	800339a <HAL_GPIO_WritePin>

	/*Configure GPIO pin : DW_RSTn_Pin */
	GPIO_InitStruct.Pin = DW_RSTn_Pin;
 800290c:	2301      	movs	r3, #1
 800290e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002910:	2311      	movs	r3, #17
 8002912:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002918:	2302      	movs	r3, #2
 800291a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DW_RSTn_GPIO_Port, &GPIO_InitStruct);
 800291c:	f107 0310 	add.w	r3, r7, #16
 8002920:	4619      	mov	r1, r3
 8002922:	481c      	ldr	r0, [pc, #112]	@ (8002994 <MX_GPIO_Init+0x10c>)
 8002924:	f000 fb9e 	bl	8003064 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_EN_Pin NSS_Pin */
	GPIO_InitStruct.Pin = USB_EN_Pin | NSS_Pin;
 8002928:	2318      	movs	r3, #24
 800292a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292c:	2301      	movs	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002934:	2302      	movs	r3, #2
 8002936:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002938:	f107 0310 	add.w	r3, r7, #16
 800293c:	4619      	mov	r1, r3
 800293e:	4815      	ldr	r0, [pc, #84]	@ (8002994 <MX_GPIO_Init+0x10c>)
 8002940:	f000 fb90 	bl	8003064 <HAL_GPIO_Init>

	/*Configure GPIO pin : DW_IRQn_Pin */
	GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8002944:	2320      	movs	r3, #32
 8002946:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002948:	4b14      	ldr	r3, [pc, #80]	@ (800299c <MX_GPIO_Init+0x114>)
 800294a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8002950:	f107 0310 	add.w	r3, r7, #16
 8002954:	4619      	mov	r1, r3
 8002956:	4810      	ldr	r0, [pc, #64]	@ (8002998 <MX_GPIO_Init+0x110>)
 8002958:	f000 fb84 	bl	8003064 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD2_Pin;
 800295c:	23c0      	movs	r3, #192	@ 0xc0
 800295e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002960:	2301      	movs	r3, #1
 8002962:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002968:	2302      	movs	r3, #2
 800296a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296c:	f107 0310 	add.w	r3, r7, #16
 8002970:	4619      	mov	r1, r3
 8002972:	4809      	ldr	r0, [pc, #36]	@ (8002998 <MX_GPIO_Init+0x110>)
 8002974:	f000 fb76 	bl	8003064 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002978:	2200      	movs	r2, #0
 800297a:	2100      	movs	r1, #0
 800297c:	2017      	movs	r0, #23
 800297e:	f000 fb2c 	bl	8002fda <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002982:	2017      	movs	r0, #23
 8002984:	f000 fb45 	bl	8003012 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8002988:	bf00      	nop
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40021000 	.word	0x40021000
 8002994:	40010800 	.word	0x40010800
 8002998:	40010c00 	.word	0x40010c00
 800299c:	10310000 	.word	0x10310000

080029a0 <checkIrq>:

/* USER CODE BEGIN 4 */
//External interrupt handle
#define DWM_IRQn EXTI9_5_IRQn
#define DWM_IRQ_PIN GPIO_PIN_5
static int checkIrq() {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80029a4:	2120      	movs	r1, #32
 80029a6:	4803      	ldr	r0, [pc, #12]	@ (80029b4 <checkIrq+0x14>)
 80029a8:	f000 fce0 	bl	800336c <HAL_GPIO_ReadPin>
 80029ac:	4603      	mov	r3, r0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40010c00 	.word	0x40010c00

080029b8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == DWM_IRQ_PIN) // If The INT Source Is EXTI Line9 (A9 Pin)
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	2b20      	cmp	r3, #32
 80029c6:	d10c      	bne.n	80029e2 <HAL_GPIO_EXTI_Callback+0x2a>
	{ //GPIO_PIN_5- PB5
		do {
			dwHandleInterrupt(dwm);
 80029c8:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <HAL_GPIO_EXTI_Callback+0x34>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff f9fb 	bl	8001dc8 <dwHandleInterrupt>
		} while (checkIrq() != 0);
 80029d2:	f7ff ffe5 	bl	80029a0 <checkIrq>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f5      	bne.n	80029c8 <HAL_GPIO_EXTI_Callback+0x10>
		HAL_NVIC_ClearPendingIRQ(DWM_IRQn);
 80029dc:	2017      	movs	r0, #23
 80029de:	f000 fb32 	bl	8003046 <HAL_NVIC_ClearPendingIRQ>
	}
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000000 	.word	0x20000000

080029f0 <dwOpsInit>:

void dwOpsInit(dwDevice_t *device) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
	//dev = device;

	NVIC_EnableIRQ(DWM_IRQn);
 80029f8:	2017      	movs	r0, #23
 80029fa:	f7ff fc57 	bl	80022ac <__NVIC_EnableIRQ>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a0a:	b672      	cpsid	i
}
 8002a0c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a0e:	bf00      	nop
 8002a10:	e7fd      	b.n	8002a0e <Error_Handler+0x8>
	...

08002a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a1a:	4b15      	ldr	r3, [pc, #84]	@ (8002a70 <HAL_MspInit+0x5c>)
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	4a14      	ldr	r2, [pc, #80]	@ (8002a70 <HAL_MspInit+0x5c>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	6193      	str	r3, [r2, #24]
 8002a26:	4b12      	ldr	r3, [pc, #72]	@ (8002a70 <HAL_MspInit+0x5c>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	4b0f      	ldr	r3, [pc, #60]	@ (8002a70 <HAL_MspInit+0x5c>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4a0e      	ldr	r2, [pc, #56]	@ (8002a70 <HAL_MspInit+0x5c>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a3c:	61d3      	str	r3, [r2, #28]
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <HAL_MspInit+0x5c>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a46:	607b      	str	r3, [r7, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <HAL_MspInit+0x60>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	4a04      	ldr	r2, [pc, #16]	@ (8002a74 <HAL_MspInit+0x60>)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40010000 	.word	0x40010000

08002a78 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	f107 0310 	add.w	r3, r7, #16
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1b      	ldr	r2, [pc, #108]	@ (8002b00 <HAL_SPI_MspInit+0x88>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d12f      	bne.n	8002af8 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a98:	4b1a      	ldr	r3, [pc, #104]	@ (8002b04 <HAL_SPI_MspInit+0x8c>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	4a19      	ldr	r2, [pc, #100]	@ (8002b04 <HAL_SPI_MspInit+0x8c>)
 8002a9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002aa2:	6193      	str	r3, [r2, #24]
 8002aa4:	4b17      	ldr	r3, [pc, #92]	@ (8002b04 <HAL_SPI_MspInit+0x8c>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab0:	4b14      	ldr	r3, [pc, #80]	@ (8002b04 <HAL_SPI_MspInit+0x8c>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4a13      	ldr	r2, [pc, #76]	@ (8002b04 <HAL_SPI_MspInit+0x8c>)
 8002ab6:	f043 0304 	orr.w	r3, r3, #4
 8002aba:	6193      	str	r3, [r2, #24]
 8002abc:	4b11      	ldr	r3, [pc, #68]	@ (8002b04 <HAL_SPI_MspInit+0x8c>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002ac8:	23a0      	movs	r3, #160	@ 0xa0
 8002aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002acc:	2302      	movs	r3, #2
 8002ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad4:	f107 0310 	add.w	r3, r7, #16
 8002ad8:	4619      	mov	r1, r3
 8002ada:	480b      	ldr	r0, [pc, #44]	@ (8002b08 <HAL_SPI_MspInit+0x90>)
 8002adc:	f000 fac2 	bl	8003064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ae0:	2340      	movs	r3, #64	@ 0x40
 8002ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aec:	f107 0310 	add.w	r3, r7, #16
 8002af0:	4619      	mov	r1, r3
 8002af2:	4805      	ldr	r0, [pc, #20]	@ (8002b08 <HAL_SPI_MspInit+0x90>)
 8002af4:	f000 fab6 	bl	8003064 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002af8:	bf00      	nop
 8002afa:	3720      	adds	r7, #32
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40013000 	.word	0x40013000
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40010800 	.word	0x40010800

08002b0c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b14:	f107 0310 	add.w	r3, r7, #16
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1c      	ldr	r2, [pc, #112]	@ (8002b98 <HAL_UART_MspInit+0x8c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d131      	bne.n	8002b90 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b9c <HAL_UART_MspInit+0x90>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	4a1a      	ldr	r2, [pc, #104]	@ (8002b9c <HAL_UART_MspInit+0x90>)
 8002b32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b36:	6193      	str	r3, [r2, #24]
 8002b38:	4b18      	ldr	r3, [pc, #96]	@ (8002b9c <HAL_UART_MspInit+0x90>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b44:	4b15      	ldr	r3, [pc, #84]	@ (8002b9c <HAL_UART_MspInit+0x90>)
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	4a14      	ldr	r2, [pc, #80]	@ (8002b9c <HAL_UART_MspInit+0x90>)
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	6193      	str	r3, [r2, #24]
 8002b50:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <HAL_UART_MspInit+0x90>)
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b62:	2302      	movs	r3, #2
 8002b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b66:	2303      	movs	r3, #3
 8002b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6a:	f107 0310 	add.w	r3, r7, #16
 8002b6e:	4619      	mov	r1, r3
 8002b70:	480b      	ldr	r0, [pc, #44]	@ (8002ba0 <HAL_UART_MspInit+0x94>)
 8002b72:	f000 fa77 	bl	8003064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b84:	f107 0310 	add.w	r3, r7, #16
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4805      	ldr	r0, [pc, #20]	@ (8002ba0 <HAL_UART_MspInit+0x94>)
 8002b8c:	f000 fa6a 	bl	8003064 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002b90:	bf00      	nop
 8002b92:	3720      	adds	r7, #32
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40013800 	.word	0x40013800
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40010800 	.word	0x40010800

08002ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ba8:	bf00      	nop
 8002baa:	e7fd      	b.n	8002ba8 <NMI_Handler+0x4>

08002bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bb0:	bf00      	nop
 8002bb2:	e7fd      	b.n	8002bb0 <HardFault_Handler+0x4>

08002bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb8:	bf00      	nop
 8002bba:	e7fd      	b.n	8002bb8 <MemManage_Handler+0x4>

08002bbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <BusFault_Handler+0x4>

08002bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc8:	bf00      	nop
 8002bca:	e7fd      	b.n	8002bc8 <UsageFault_Handler+0x4>

08002bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bf4:	f000 f8bc 	bl	8002d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c00:	4802      	ldr	r0, [pc, #8]	@ (8002c0c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002c02:	f000 fd2f 	bl	8003664 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200010d8 	.word	0x200010d8

08002c10 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 8002c14:	2020      	movs	r0, #32
 8002c16:	f000 fbf1 	bl	80033fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c28:	4a14      	ldr	r2, [pc, #80]	@ (8002c7c <_sbrk+0x5c>)
 8002c2a:	4b15      	ldr	r3, [pc, #84]	@ (8002c80 <_sbrk+0x60>)
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c34:	4b13      	ldr	r3, [pc, #76]	@ (8002c84 <_sbrk+0x64>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d102      	bne.n	8002c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c3c:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <_sbrk+0x64>)
 8002c3e:	4a12      	ldr	r2, [pc, #72]	@ (8002c88 <_sbrk+0x68>)
 8002c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c42:	4b10      	ldr	r3, [pc, #64]	@ (8002c84 <_sbrk+0x64>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d207      	bcs.n	8002c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c50:	f008 f84e 	bl	800acf0 <__errno>
 8002c54:	4603      	mov	r3, r0
 8002c56:	220c      	movs	r2, #12
 8002c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5e:	e009      	b.n	8002c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c60:	4b08      	ldr	r3, [pc, #32]	@ (8002c84 <_sbrk+0x64>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c66:	4b07      	ldr	r3, [pc, #28]	@ (8002c84 <_sbrk+0x64>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	4a05      	ldr	r2, [pc, #20]	@ (8002c84 <_sbrk+0x64>)
 8002c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c72:	68fb      	ldr	r3, [r7, #12]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20005000 	.word	0x20005000
 8002c80:	00000400 	.word	0x00000400
 8002c84:	20000408 	.word	0x20000408
 8002c88:	20001718 	.word	0x20001718

08002c8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c98:	f7ff fff8 	bl	8002c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c9c:	480b      	ldr	r0, [pc, #44]	@ (8002ccc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c9e:	490c      	ldr	r1, [pc, #48]	@ (8002cd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8002cd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ca4:	e002      	b.n	8002cac <LoopCopyDataInit>

08002ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002caa:	3304      	adds	r3, #4

08002cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb0:	d3f9      	bcc.n	8002ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cb2:	4a09      	ldr	r2, [pc, #36]	@ (8002cd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002cb4:	4c09      	ldr	r4, [pc, #36]	@ (8002cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb8:	e001      	b.n	8002cbe <LoopFillZerobss>

08002cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cbc:	3204      	adds	r2, #4

08002cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc0:	d3fb      	bcc.n	8002cba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cc2:	f008 f81b 	bl	800acfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cc6:	f7ff fc19 	bl	80024fc <main>
  bx lr
 8002cca:	4770      	bx	lr
  ldr r0, =_sdata
 8002ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cd0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002cd4:	0800b7ac 	.word	0x0800b7ac
  ldr r2, =_sbss
 8002cd8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002cdc:	20001718 	.word	0x20001718

08002ce0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ce0:	e7fe      	b.n	8002ce0 <ADC1_2_IRQHandler>
	...

08002ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce8:	4b08      	ldr	r3, [pc, #32]	@ (8002d0c <HAL_Init+0x28>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a07      	ldr	r2, [pc, #28]	@ (8002d0c <HAL_Init+0x28>)
 8002cee:	f043 0310 	orr.w	r3, r3, #16
 8002cf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf4:	2003      	movs	r0, #3
 8002cf6:	f000 f965 	bl	8002fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cfa:	200f      	movs	r0, #15
 8002cfc:	f000 f808 	bl	8002d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d00:	f7ff fe88 	bl	8002a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40022000 	.word	0x40022000

08002d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d18:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <HAL_InitTick+0x54>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4b12      	ldr	r3, [pc, #72]	@ (8002d68 <HAL_InitTick+0x58>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	4619      	mov	r1, r3
 8002d22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f97d 	bl	800302e <HAL_SYSTICK_Config>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e00e      	b.n	8002d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b0f      	cmp	r3, #15
 8002d42:	d80a      	bhi.n	8002d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d44:	2200      	movs	r2, #0
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4c:	f000 f945 	bl	8002fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d50:	4a06      	ldr	r2, [pc, #24]	@ (8002d6c <HAL_InitTick+0x5c>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e000      	b.n	8002d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20000018 	.word	0x20000018
 8002d68:	20000020 	.word	0x20000020
 8002d6c:	2000001c 	.word	0x2000001c

08002d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d74:	4b05      	ldr	r3, [pc, #20]	@ (8002d8c <HAL_IncTick+0x1c>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_IncTick+0x20>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	4a03      	ldr	r2, [pc, #12]	@ (8002d90 <HAL_IncTick+0x20>)
 8002d82:	6013      	str	r3, [r2, #0]
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	20000020 	.word	0x20000020
 8002d90:	2000040c 	.word	0x2000040c

08002d94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return uwTick;
 8002d98:	4b02      	ldr	r3, [pc, #8]	@ (8002da4 <HAL_GetTick+0x10>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr
 8002da4:	2000040c 	.word	0x2000040c

08002da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db0:	f7ff fff0 	bl	8002d94 <HAL_GetTick>
 8002db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d005      	beq.n	8002dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002dec <HAL_Delay+0x44>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dce:	bf00      	nop
 8002dd0:	f7ff ffe0 	bl	8002d94 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d8f7      	bhi.n	8002dd0 <HAL_Delay+0x28>
  {
  }
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000020 	.word	0x20000020

08002df0 <__NVIC_SetPriorityGrouping>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e00:	4b0c      	ldr	r3, [pc, #48]	@ (8002e34 <__NVIC_SetPriorityGrouping+0x44>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e22:	4a04      	ldr	r2, [pc, #16]	@ (8002e34 <__NVIC_SetPriorityGrouping+0x44>)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	60d3      	str	r3, [r2, #12]
}
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <__NVIC_GetPriorityGrouping>:
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e3c:	4b04      	ldr	r3, [pc, #16]	@ (8002e50 <__NVIC_GetPriorityGrouping+0x18>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	0a1b      	lsrs	r3, r3, #8
 8002e42:	f003 0307 	and.w	r3, r3, #7
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <__NVIC_EnableIRQ>:
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	db0b      	blt.n	8002e7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	f003 021f 	and.w	r2, r3, #31
 8002e6c:	4906      	ldr	r1, [pc, #24]	@ (8002e88 <__NVIC_EnableIRQ+0x34>)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	2001      	movs	r0, #1
 8002e76:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	e000e100 	.word	0xe000e100

08002e8c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	db0c      	blt.n	8002eb8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	f003 021f 	and.w	r2, r3, #31
 8002ea4:	4907      	ldr	r1, [pc, #28]	@ (8002ec4 <__NVIC_ClearPendingIRQ+0x38>)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2001      	movs	r0, #1
 8002eae:	fa00 f202 	lsl.w	r2, r0, r2
 8002eb2:	3360      	adds	r3, #96	@ 0x60
 8002eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000e100 	.word	0xe000e100

08002ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	6039      	str	r1, [r7, #0]
 8002ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	db0a      	blt.n	8002ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	490c      	ldr	r1, [pc, #48]	@ (8002f14 <__NVIC_SetPriority+0x4c>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	0112      	lsls	r2, r2, #4
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	440b      	add	r3, r1
 8002eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef0:	e00a      	b.n	8002f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4908      	ldr	r1, [pc, #32]	@ (8002f18 <__NVIC_SetPriority+0x50>)
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	3b04      	subs	r3, #4
 8002f00:	0112      	lsls	r2, r2, #4
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	440b      	add	r3, r1
 8002f06:	761a      	strb	r2, [r3, #24]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000e100 	.word	0xe000e100
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	@ 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f1c3 0307 	rsb	r3, r3, #7
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	bf28      	it	cs
 8002f3a:	2304      	movcs	r3, #4
 8002f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d902      	bls.n	8002f4c <NVIC_EncodePriority+0x30>
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3b03      	subs	r3, #3
 8002f4a:	e000      	b.n	8002f4e <NVIC_EncodePriority+0x32>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	f04f 32ff 	mov.w	r2, #4294967295
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	401a      	ands	r2, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f64:	f04f 31ff 	mov.w	r1, #4294967295
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	43d9      	mvns	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	4313      	orrs	r3, r2
         );
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3724      	adds	r7, #36	@ 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f90:	d301      	bcc.n	8002f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f92:	2301      	movs	r3, #1
 8002f94:	e00f      	b.n	8002fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f96:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc0 <SysTick_Config+0x40>)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f9e:	210f      	movs	r1, #15
 8002fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa4:	f7ff ff90 	bl	8002ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fa8:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <SysTick_Config+0x40>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fae:	4b04      	ldr	r3, [pc, #16]	@ (8002fc0 <SysTick_Config+0x40>)
 8002fb0:	2207      	movs	r2, #7
 8002fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	e000e010 	.word	0xe000e010

08002fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff ff0f 	bl	8002df0 <__NVIC_SetPriorityGrouping>
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fec:	f7ff ff24 	bl	8002e38 <__NVIC_GetPriorityGrouping>
 8002ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	6978      	ldr	r0, [r7, #20]
 8002ff8:	f7ff ff90 	bl	8002f1c <NVIC_EncodePriority>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff ff5f 	bl	8002ec8 <__NVIC_SetPriority>
}
 800300a:	bf00      	nop
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	4603      	mov	r3, r0
 800301a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff ff17 	bl	8002e54 <__NVIC_EnableIRQ>
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff ffa2 	bl	8002f80 <SysTick_Config>
 800303c:	4603      	mov	r3, r0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	4603      	mov	r3, r0
 800304e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff ff19 	bl	8002e8c <__NVIC_ClearPendingIRQ>
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003064:	b480      	push	{r7}
 8003066:	b08b      	sub	sp, #44	@ 0x2c
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800306e:	2300      	movs	r3, #0
 8003070:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003072:	2300      	movs	r3, #0
 8003074:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003076:	e169      	b.n	800334c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003078:	2201      	movs	r2, #1
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	429a      	cmp	r2, r3
 8003092:	f040 8158 	bne.w	8003346 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4a9a      	ldr	r2, [pc, #616]	@ (8003304 <HAL_GPIO_Init+0x2a0>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d05e      	beq.n	800315e <HAL_GPIO_Init+0xfa>
 80030a0:	4a98      	ldr	r2, [pc, #608]	@ (8003304 <HAL_GPIO_Init+0x2a0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d875      	bhi.n	8003192 <HAL_GPIO_Init+0x12e>
 80030a6:	4a98      	ldr	r2, [pc, #608]	@ (8003308 <HAL_GPIO_Init+0x2a4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d058      	beq.n	800315e <HAL_GPIO_Init+0xfa>
 80030ac:	4a96      	ldr	r2, [pc, #600]	@ (8003308 <HAL_GPIO_Init+0x2a4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d86f      	bhi.n	8003192 <HAL_GPIO_Init+0x12e>
 80030b2:	4a96      	ldr	r2, [pc, #600]	@ (800330c <HAL_GPIO_Init+0x2a8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d052      	beq.n	800315e <HAL_GPIO_Init+0xfa>
 80030b8:	4a94      	ldr	r2, [pc, #592]	@ (800330c <HAL_GPIO_Init+0x2a8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d869      	bhi.n	8003192 <HAL_GPIO_Init+0x12e>
 80030be:	4a94      	ldr	r2, [pc, #592]	@ (8003310 <HAL_GPIO_Init+0x2ac>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d04c      	beq.n	800315e <HAL_GPIO_Init+0xfa>
 80030c4:	4a92      	ldr	r2, [pc, #584]	@ (8003310 <HAL_GPIO_Init+0x2ac>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d863      	bhi.n	8003192 <HAL_GPIO_Init+0x12e>
 80030ca:	4a92      	ldr	r2, [pc, #584]	@ (8003314 <HAL_GPIO_Init+0x2b0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d046      	beq.n	800315e <HAL_GPIO_Init+0xfa>
 80030d0:	4a90      	ldr	r2, [pc, #576]	@ (8003314 <HAL_GPIO_Init+0x2b0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d85d      	bhi.n	8003192 <HAL_GPIO_Init+0x12e>
 80030d6:	2b12      	cmp	r3, #18
 80030d8:	d82a      	bhi.n	8003130 <HAL_GPIO_Init+0xcc>
 80030da:	2b12      	cmp	r3, #18
 80030dc:	d859      	bhi.n	8003192 <HAL_GPIO_Init+0x12e>
 80030de:	a201      	add	r2, pc, #4	@ (adr r2, 80030e4 <HAL_GPIO_Init+0x80>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	0800315f 	.word	0x0800315f
 80030e8:	08003139 	.word	0x08003139
 80030ec:	0800314b 	.word	0x0800314b
 80030f0:	0800318d 	.word	0x0800318d
 80030f4:	08003193 	.word	0x08003193
 80030f8:	08003193 	.word	0x08003193
 80030fc:	08003193 	.word	0x08003193
 8003100:	08003193 	.word	0x08003193
 8003104:	08003193 	.word	0x08003193
 8003108:	08003193 	.word	0x08003193
 800310c:	08003193 	.word	0x08003193
 8003110:	08003193 	.word	0x08003193
 8003114:	08003193 	.word	0x08003193
 8003118:	08003193 	.word	0x08003193
 800311c:	08003193 	.word	0x08003193
 8003120:	08003193 	.word	0x08003193
 8003124:	08003193 	.word	0x08003193
 8003128:	08003141 	.word	0x08003141
 800312c:	08003155 	.word	0x08003155
 8003130:	4a79      	ldr	r2, [pc, #484]	@ (8003318 <HAL_GPIO_Init+0x2b4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d013      	beq.n	800315e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003136:	e02c      	b.n	8003192 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	623b      	str	r3, [r7, #32]
          break;
 800313e:	e029      	b.n	8003194 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	3304      	adds	r3, #4
 8003146:	623b      	str	r3, [r7, #32]
          break;
 8003148:	e024      	b.n	8003194 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	3308      	adds	r3, #8
 8003150:	623b      	str	r3, [r7, #32]
          break;
 8003152:	e01f      	b.n	8003194 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	330c      	adds	r3, #12
 800315a:	623b      	str	r3, [r7, #32]
          break;
 800315c:	e01a      	b.n	8003194 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d102      	bne.n	800316c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003166:	2304      	movs	r3, #4
 8003168:	623b      	str	r3, [r7, #32]
          break;
 800316a:	e013      	b.n	8003194 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d105      	bne.n	8003180 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003174:	2308      	movs	r3, #8
 8003176:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	611a      	str	r2, [r3, #16]
          break;
 800317e:	e009      	b.n	8003194 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003180:	2308      	movs	r3, #8
 8003182:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	615a      	str	r2, [r3, #20]
          break;
 800318a:	e003      	b.n	8003194 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800318c:	2300      	movs	r3, #0
 800318e:	623b      	str	r3, [r7, #32]
          break;
 8003190:	e000      	b.n	8003194 <HAL_GPIO_Init+0x130>
          break;
 8003192:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2bff      	cmp	r3, #255	@ 0xff
 8003198:	d801      	bhi.n	800319e <HAL_GPIO_Init+0x13a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	e001      	b.n	80031a2 <HAL_GPIO_Init+0x13e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3304      	adds	r3, #4
 80031a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2bff      	cmp	r3, #255	@ 0xff
 80031a8:	d802      	bhi.n	80031b0 <HAL_GPIO_Init+0x14c>
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	e002      	b.n	80031b6 <HAL_GPIO_Init+0x152>
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	3b08      	subs	r3, #8
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	210f      	movs	r1, #15
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	401a      	ands	r2, r3
 80031c8:	6a39      	ldr	r1, [r7, #32]
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	fa01 f303 	lsl.w	r3, r1, r3
 80031d0:	431a      	orrs	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 80b1 	beq.w	8003346 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031e4:	4b4d      	ldr	r3, [pc, #308]	@ (800331c <HAL_GPIO_Init+0x2b8>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	4a4c      	ldr	r2, [pc, #304]	@ (800331c <HAL_GPIO_Init+0x2b8>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6193      	str	r3, [r2, #24]
 80031f0:	4b4a      	ldr	r3, [pc, #296]	@ (800331c <HAL_GPIO_Init+0x2b8>)
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031fc:	4a48      	ldr	r2, [pc, #288]	@ (8003320 <HAL_GPIO_Init+0x2bc>)
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	089b      	lsrs	r3, r3, #2
 8003202:	3302      	adds	r3, #2
 8003204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003208:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	220f      	movs	r2, #15
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4013      	ands	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a40      	ldr	r2, [pc, #256]	@ (8003324 <HAL_GPIO_Init+0x2c0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <HAL_GPIO_Init+0x1ec>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a3f      	ldr	r2, [pc, #252]	@ (8003328 <HAL_GPIO_Init+0x2c4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00d      	beq.n	800324c <HAL_GPIO_Init+0x1e8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a3e      	ldr	r2, [pc, #248]	@ (800332c <HAL_GPIO_Init+0x2c8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d007      	beq.n	8003248 <HAL_GPIO_Init+0x1e4>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a3d      	ldr	r2, [pc, #244]	@ (8003330 <HAL_GPIO_Init+0x2cc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d101      	bne.n	8003244 <HAL_GPIO_Init+0x1e0>
 8003240:	2303      	movs	r3, #3
 8003242:	e006      	b.n	8003252 <HAL_GPIO_Init+0x1ee>
 8003244:	2304      	movs	r3, #4
 8003246:	e004      	b.n	8003252 <HAL_GPIO_Init+0x1ee>
 8003248:	2302      	movs	r3, #2
 800324a:	e002      	b.n	8003252 <HAL_GPIO_Init+0x1ee>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <HAL_GPIO_Init+0x1ee>
 8003250:	2300      	movs	r3, #0
 8003252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003254:	f002 0203 	and.w	r2, r2, #3
 8003258:	0092      	lsls	r2, r2, #2
 800325a:	4093      	lsls	r3, r2
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003262:	492f      	ldr	r1, [pc, #188]	@ (8003320 <HAL_GPIO_Init+0x2bc>)
 8003264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	3302      	adds	r3, #2
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d006      	beq.n	800328a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800327c:	4b2d      	ldr	r3, [pc, #180]	@ (8003334 <HAL_GPIO_Init+0x2d0>)
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	492c      	ldr	r1, [pc, #176]	@ (8003334 <HAL_GPIO_Init+0x2d0>)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	4313      	orrs	r3, r2
 8003286:	608b      	str	r3, [r1, #8]
 8003288:	e006      	b.n	8003298 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800328a:	4b2a      	ldr	r3, [pc, #168]	@ (8003334 <HAL_GPIO_Init+0x2d0>)
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	43db      	mvns	r3, r3
 8003292:	4928      	ldr	r1, [pc, #160]	@ (8003334 <HAL_GPIO_Init+0x2d0>)
 8003294:	4013      	ands	r3, r2
 8003296:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d006      	beq.n	80032b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032a4:	4b23      	ldr	r3, [pc, #140]	@ (8003334 <HAL_GPIO_Init+0x2d0>)
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	4922      	ldr	r1, [pc, #136]	@ (8003334 <HAL_GPIO_Init+0x2d0>)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60cb      	str	r3, [r1, #12]
 80032b0:	e006      	b.n	80032c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032b2:	4b20      	ldr	r3, [pc, #128]	@ (8003334 <HAL_GPIO_Init+0x2d0>)
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	43db      	mvns	r3, r3
 80032ba:	491e      	ldr	r1, [pc, #120]	@ (8003334 <HAL_GPIO_Init+0x2d0>)
 80032bc:	4013      	ands	r3, r2
 80032be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d006      	beq.n	80032da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032cc:	4b19      	ldr	r3, [pc, #100]	@ (8003334 <HAL_GPIO_Init+0x2d0>)
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	4918      	ldr	r1, [pc, #96]	@ (8003334 <HAL_GPIO_Init+0x2d0>)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]
 80032d8:	e006      	b.n	80032e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032da:	4b16      	ldr	r3, [pc, #88]	@ (8003334 <HAL_GPIO_Init+0x2d0>)
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	4914      	ldr	r1, [pc, #80]	@ (8003334 <HAL_GPIO_Init+0x2d0>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d021      	beq.n	8003338 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003334 <HAL_GPIO_Init+0x2d0>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	490e      	ldr	r1, [pc, #56]	@ (8003334 <HAL_GPIO_Init+0x2d0>)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]
 8003300:	e021      	b.n	8003346 <HAL_GPIO_Init+0x2e2>
 8003302:	bf00      	nop
 8003304:	10320000 	.word	0x10320000
 8003308:	10310000 	.word	0x10310000
 800330c:	10220000 	.word	0x10220000
 8003310:	10210000 	.word	0x10210000
 8003314:	10120000 	.word	0x10120000
 8003318:	10110000 	.word	0x10110000
 800331c:	40021000 	.word	0x40021000
 8003320:	40010000 	.word	0x40010000
 8003324:	40010800 	.word	0x40010800
 8003328:	40010c00 	.word	0x40010c00
 800332c:	40011000 	.word	0x40011000
 8003330:	40011400 	.word	0x40011400
 8003334:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003338:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <HAL_GPIO_Init+0x304>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	43db      	mvns	r3, r3
 8003340:	4909      	ldr	r1, [pc, #36]	@ (8003368 <HAL_GPIO_Init+0x304>)
 8003342:	4013      	ands	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	3301      	adds	r3, #1
 800334a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	fa22 f303 	lsr.w	r3, r2, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	f47f ae8e 	bne.w	8003078 <HAL_GPIO_Init+0x14>
  }
}
 800335c:	bf00      	nop
 800335e:	bf00      	nop
 8003360:	372c      	adds	r7, #44	@ 0x2c
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr
 8003368:	40010400 	.word	0x40010400

0800336c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	887b      	ldrh	r3, [r7, #2]
 800337e:	4013      	ands	r3, r2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
 8003388:	e001      	b.n	800338e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800338a:	2300      	movs	r3, #0
 800338c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800338e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	807b      	strh	r3, [r7, #2]
 80033a6:	4613      	mov	r3, r2
 80033a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033aa:	787b      	ldrb	r3, [r7, #1]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033b0:	887a      	ldrh	r2, [r7, #2]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033b6:	e003      	b.n	80033c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033b8:	887b      	ldrh	r3, [r7, #2]
 80033ba:	041a      	lsls	r2, r3, #16
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	611a      	str	r2, [r3, #16]
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr

080033ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b085      	sub	sp, #20
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033dc:	887a      	ldrh	r2, [r7, #2]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4013      	ands	r3, r2
 80033e2:	041a      	lsls	r2, r3, #16
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	43d9      	mvns	r1, r3
 80033e8:	887b      	ldrh	r3, [r7, #2]
 80033ea:	400b      	ands	r3, r1
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	611a      	str	r2, [r3, #16]
}
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003406:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	4013      	ands	r3, r2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d006      	beq.n	8003420 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003412:	4a05      	ldr	r2, [pc, #20]	@ (8003428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff facc 	bl	80029b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40010400 	.word	0x40010400

0800342c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e0e8      	b.n	8003610 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f007 f978 	bl	800a748 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2203      	movs	r2, #3
 800345c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f003 f89b 	bl	80065a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3304      	adds	r3, #4
 8003478:	cb0e      	ldmia	r3, {r1, r2, r3}
 800347a:	f003 f871 	bl	8006560 <USB_CoreInit>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0bf      	b.n	8003610 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f003 f89f 	bl	80065da <USB_SetCurrentMode>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2202      	movs	r2, #2
 80034a6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0b0      	b.n	8003610 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
 80034b2:	e03e      	b.n	8003532 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034b4:	7bfa      	ldrb	r2, [r7, #15]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	440b      	add	r3, r1
 80034c2:	3311      	adds	r3, #17
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	440b      	add	r3, r1
 80034d6:	3310      	adds	r3, #16
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	440b      	add	r3, r1
 80034ea:	3313      	adds	r3, #19
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034f0:	7bfa      	ldrb	r2, [r7, #15]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	440b      	add	r3, r1
 80034fe:	3320      	adds	r3, #32
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	440b      	add	r3, r1
 8003512:	3324      	adds	r3, #36	@ 0x24
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	440b      	add	r3, r1
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	3301      	adds	r3, #1
 8003530:	73fb      	strb	r3, [r7, #15]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	791b      	ldrb	r3, [r3, #4]
 8003536:	7bfa      	ldrb	r2, [r7, #15]
 8003538:	429a      	cmp	r2, r3
 800353a:	d3bb      	bcc.n	80034b4 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800353c:	2300      	movs	r3, #0
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	e044      	b.n	80035cc <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003542:	7bfa      	ldrb	r2, [r7, #15]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	440b      	add	r3, r1
 8003550:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003558:	7bfa      	ldrb	r2, [r7, #15]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	440b      	add	r3, r1
 8003566:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800356e:	7bfa      	ldrb	r2, [r7, #15]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	440b      	add	r3, r1
 800357c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003580:	2200      	movs	r2, #0
 8003582:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	440b      	add	r3, r1
 8003592:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800359a:	7bfa      	ldrb	r2, [r7, #15]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	440b      	add	r3, r1
 80035a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	440b      	add	r3, r1
 80035be:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
 80035c8:	3301      	adds	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	791b      	ldrb	r3, [r3, #4]
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d3b5      	bcc.n	8003542 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3304      	adds	r3, #4
 80035de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035e0:	f003 f807 	bl	80065f2 <USB_DevInit>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e00c      	b.n	8003610 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f005 fa86 	bl	8008b1a <USB_DevDisconnect>

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_PCD_Start+0x16>
 800362a:	2302      	movs	r3, #2
 800362c:	e016      	b.n	800365c <HAL_PCD_Start+0x44>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f002 ff9d 	bl	800657a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003640:	2101      	movs	r1, #1
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f007 faf3 	bl	800ac2e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f005 fa5a 	bl	8008b06 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f005 fa5c 	bl	8008b2e <USB_ReadInterrupts>
 8003676:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fb1a 	bl	8003cbc <PCD_EP_ISR_Handler>

    return;
 8003688:	e119      	b.n	80038be <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003690:	2b00      	cmp	r3, #0
 8003692:	d013      	beq.n	80036bc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800369c:	b29a      	uxth	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036a6:	b292      	uxth	r2, r2
 80036a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f007 f8c6 	bl	800a83e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80036b2:	2100      	movs	r1, #0
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f905 	bl	80038c4 <HAL_PCD_SetAddress>

    return;
 80036ba:	e100      	b.n	80038be <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00c      	beq.n	80036e0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036d8:	b292      	uxth	r2, r2
 80036da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80036de:	e0ee      	b.n	80038be <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00c      	beq.n	8003704 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036fc:	b292      	uxth	r2, r2
 80036fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003702:	e0dc      	b.n	80038be <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d027      	beq.n	800375e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0204 	bic.w	r2, r2, #4
 8003720:	b292      	uxth	r2, r2
 8003722:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800372e:	b29a      	uxth	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0208 	bic.w	r2, r2, #8
 8003738:	b292      	uxth	r2, r2
 800373a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f007 f8b6 	bl	800a8b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800374c:	b29a      	uxth	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003756:	b292      	uxth	r2, r2
 8003758:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800375c:	e0af      	b.n	80038be <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8083 	beq.w	8003870 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800376a:	2300      	movs	r3, #0
 800376c:	77fb      	strb	r3, [r7, #31]
 800376e:	e010      	b.n	8003792 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	7ffb      	ldrb	r3, [r7, #31]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	441a      	add	r2, r3
 800377c:	7ffb      	ldrb	r3, [r7, #31]
 800377e:	8812      	ldrh	r2, [r2, #0]
 8003780:	b292      	uxth	r2, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	3320      	adds	r3, #32
 8003786:	443b      	add	r3, r7
 8003788:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800378c:	7ffb      	ldrb	r3, [r7, #31]
 800378e:	3301      	adds	r3, #1
 8003790:	77fb      	strb	r3, [r7, #31]
 8003792:	7ffb      	ldrb	r3, [r7, #31]
 8003794:	2b07      	cmp	r3, #7
 8003796:	d9eb      	bls.n	8003770 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	b292      	uxth	r2, r2
 80037ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0201 	bic.w	r2, r2, #1
 80037c2:	b292      	uxth	r2, r2
 80037c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80037c8:	bf00      	nop
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f6      	beq.n	80037ca <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ee:	b292      	uxth	r2, r2
 80037f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80037f4:	2300      	movs	r3, #0
 80037f6:	77fb      	strb	r3, [r7, #31]
 80037f8:	e00f      	b.n	800381a <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80037fa:	7ffb      	ldrb	r3, [r7, #31]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	4611      	mov	r1, r2
 8003802:	7ffa      	ldrb	r2, [r7, #31]
 8003804:	0092      	lsls	r2, r2, #2
 8003806:	440a      	add	r2, r1
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	3320      	adds	r3, #32
 800380c:	443b      	add	r3, r7
 800380e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003812:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003814:	7ffb      	ldrb	r3, [r7, #31]
 8003816:	3301      	adds	r3, #1
 8003818:	77fb      	strb	r3, [r7, #31]
 800381a:	7ffb      	ldrb	r3, [r7, #31]
 800381c:	2b07      	cmp	r3, #7
 800381e:	d9ec      	bls.n	80037fa <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003828:	b29a      	uxth	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0208 	orr.w	r2, r2, #8
 8003832:	b292      	uxth	r2, r2
 8003834:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003840:	b29a      	uxth	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800384a:	b292      	uxth	r2, r2
 800384c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003858:	b29a      	uxth	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0204 	orr.w	r2, r2, #4
 8003862:	b292      	uxth	r2, r2
 8003864:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f007 f807 	bl	800a87c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800386e:	e026      	b.n	80038be <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00f      	beq.n	800389a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003882:	b29a      	uxth	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800388c:	b292      	uxth	r2, r2
 800388e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f006 ffc5 	bl	800a822 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003898:	e011      	b.n	80038be <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00c      	beq.n	80038be <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038b6:	b292      	uxth	r2, r2
 80038b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80038bc:	bf00      	nop
  }
}
 80038be:	3720      	adds	r7, #32
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_PCD_SetAddress+0x1a>
 80038da:	2302      	movs	r3, #2
 80038dc:	e012      	b.n	8003904 <HAL_PCD_SetAddress+0x40>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	78fa      	ldrb	r2, [r7, #3]
 80038ea:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	78fa      	ldrb	r2, [r7, #3]
 80038f2:	4611      	mov	r1, r2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f005 f8f3 	bl	8008ae0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	4608      	mov	r0, r1
 8003916:	4611      	mov	r1, r2
 8003918:	461a      	mov	r2, r3
 800391a:	4603      	mov	r3, r0
 800391c:	70fb      	strb	r3, [r7, #3]
 800391e:	460b      	mov	r3, r1
 8003920:	803b      	strh	r3, [r7, #0]
 8003922:	4613      	mov	r3, r2
 8003924:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800392a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800392e:	2b00      	cmp	r3, #0
 8003930:	da0e      	bge.n	8003950 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003932:	78fb      	ldrb	r3, [r7, #3]
 8003934:	f003 0207 	and.w	r2, r3, #7
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	3310      	adds	r3, #16
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	705a      	strb	r2, [r3, #1]
 800394e:	e00e      	b.n	800396e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	f003 0207 	and.w	r2, r3, #7
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4413      	add	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	b2da      	uxtb	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800397a:	883a      	ldrh	r2, [r7, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	78ba      	ldrb	r2, [r7, #2]
 8003984:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003986:	78bb      	ldrb	r3, [r7, #2]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d102      	bne.n	8003992 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_PCD_EP_Open+0x94>
 800399c:	2302      	movs	r3, #2
 800399e:	e00e      	b.n	80039be <HAL_PCD_EP_Open+0xb2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68f9      	ldr	r1, [r7, #12]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f002 fe3c 	bl	800662c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80039bc:	7afb      	ldrb	r3, [r7, #11]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	460b      	mov	r3, r1
 80039d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	da0e      	bge.n	80039f8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	f003 0207 	and.w	r2, r3, #7
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	3310      	adds	r3, #16
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	4413      	add	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	705a      	strb	r2, [r3, #1]
 80039f6:	e00e      	b.n	8003a16 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	f003 0207 	and.w	r2, r3, #7
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_PCD_EP_Close+0x6a>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e00e      	b.n	8003a4e <HAL_PCD_EP_Close+0x88>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68f9      	ldr	r1, [r7, #12]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f003 f9b4 	bl	8006dac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b086      	sub	sp, #24
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	460b      	mov	r3, r1
 8003a64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a66:	7afb      	ldrb	r3, [r7, #11]
 8003a68:	f003 0207 	and.w	r2, r3, #7
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2200      	movs	r2, #0
 8003a94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a96:	7afb      	ldrb	r3, [r7, #11]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6979      	ldr	r1, [r7, #20]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f003 fb6b 	bl	8007184 <USB_EPStartXfer>

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	f003 0207 	and.w	r2, r3, #7
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	440b      	add	r3, r1
 8003ad6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003ada:	681b      	ldr	r3, [r3, #0]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b086      	sub	sp, #24
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
 8003af2:	460b      	mov	r3, r1
 8003af4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003af6:	7afb      	ldrb	r3, [r7, #11]
 8003af8:	f003 0207 	and.w	r2, r3, #7
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	3310      	adds	r3, #16
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4413      	add	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b32:	7afb      	ldrb	r3, [r7, #11]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6979      	ldr	r1, [r7, #20]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f003 fb1d 	bl	8007184 <USB_EPStartXfer>

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	7912      	ldrb	r2, [r2, #4]
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e04c      	b.n	8003c0c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	da0e      	bge.n	8003b98 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b7a:	78fb      	ldrb	r3, [r7, #3]
 8003b7c:	f003 0207 	and.w	r2, r3, #7
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	3310      	adds	r3, #16
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2201      	movs	r2, #1
 8003b94:	705a      	strb	r2, [r3, #1]
 8003b96:	e00c      	b.n	8003bb2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b98:	78fa      	ldrb	r2, [r7, #3]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_PCD_EP_SetStall+0x7e>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e01c      	b.n	8003c0c <HAL_PCD_EP_SetStall+0xb8>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68f9      	ldr	r1, [r7, #12]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f004 fe80 	bl	80088e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d108      	bne.n	8003c02 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f004 ffa5 	bl	8008b4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	7912      	ldrb	r2, [r2, #4]
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e040      	b.n	8003cb4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	da0e      	bge.n	8003c58 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c3a:	78fb      	ldrb	r3, [r7, #3]
 8003c3c:	f003 0207 	and.w	r2, r3, #7
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	3310      	adds	r3, #16
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2201      	movs	r2, #1
 8003c54:	705a      	strb	r2, [r3, #1]
 8003c56:	e00e      	b.n	8003c76 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	f003 0207 	and.w	r2, r3, #7
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <HAL_PCD_EP_ClrStall+0x82>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e00e      	b.n	8003cb4 <HAL_PCD_EP_ClrStall+0xa0>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68f9      	ldr	r1, [r7, #12]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f004 fe6e 	bl	8008986 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b096      	sub	sp, #88	@ 0x58
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003cc4:	e3bb      	b.n	800443e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cce:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003cd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003ce0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f040 8175 	bne.w	8003fd4 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003cea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d14e      	bne.n	8003d94 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d06:	81fb      	strh	r3, [r7, #14]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	89fb      	ldrh	r3, [r7, #14]
 8003d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3310      	adds	r3, #16
 8003d1e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	4413      	add	r3, r2
 8003d34:	3302      	adds	r3, #2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6812      	ldr	r2, [r2, #0]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d4a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d4e:	695a      	ldr	r2, [r3, #20]
 8003d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	441a      	add	r2, r3
 8003d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d58:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f006 fd46 	bl	800a7ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	7b5b      	ldrb	r3, [r3, #13]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8368 	beq.w	800443e <PCD_EP_ISR_Handler+0x782>
 8003d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f040 8363 	bne.w	800443e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	7b5b      	ldrb	r3, [r3, #13]
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	735a      	strb	r2, [r3, #13]
 8003d92:	e354      	b.n	800443e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d9a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003da6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003daa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d034      	beq.n	8003e1c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3306      	adds	r3, #6
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ddc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dea:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dee:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	f004 fefc 	bl	8008bee <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e02:	4013      	ands	r3, r2
 8003e04:	823b      	strh	r3, [r7, #16]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	8a3a      	ldrh	r2, [r7, #16]
 8003e0c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e10:	b292      	uxth	r2, r2
 8003e12:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f006 fcbd 	bl	800a794 <HAL_PCD_SetupStageCallback>
 8003e1a:	e310      	b.n	800443e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e1c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f280 830c 	bge.w	800443e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e32:	4013      	ands	r3, r2
 8003e34:	83fb      	strh	r3, [r7, #30]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	8bfa      	ldrh	r2, [r7, #30]
 8003e3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e40:	b292      	uxth	r2, r2
 8003e42:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	3306      	adds	r3, #6
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6812      	ldr	r2, [r2, #0]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e6e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d019      	beq.n	8003eac <PCD_EP_ISR_Handler+0x1f0>
 8003e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d015      	beq.n	8003eac <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e86:	6959      	ldr	r1, [r3, #20]
 8003e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	f004 feac 	bl	8008bee <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e98:	695a      	ldr	r2, [r3, #20]
 8003e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	441a      	add	r2, r3
 8003ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f006 fc86 	bl	800a7b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003eb6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003eba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f040 82bd 	bne.w	800443e <PCD_EP_ISR_Handler+0x782>
 8003ec4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ec8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003ecc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ed0:	f000 82b5 	beq.w	800443e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	4413      	add	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	801a      	strh	r2, [r3, #0]
 8003f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f0a:	d91d      	bls.n	8003f48 <PCD_EP_ISR_Handler+0x28c>
 8003f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <PCD_EP_ISR_Handler+0x26a>
 8003f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f22:	3b01      	subs	r3, #1
 8003f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	029b      	lsls	r3, r3, #10
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	4313      	orrs	r3, r2
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	801a      	strh	r2, [r3, #0]
 8003f46:	e026      	b.n	8003f96 <PCD_EP_ISR_Handler+0x2da>
 8003f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10a      	bne.n	8003f66 <PCD_EP_ISR_Handler+0x2aa>
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	801a      	strh	r2, [r3, #0]
 8003f64:	e017      	b.n	8003f96 <PCD_EP_ISR_Handler+0x2da>
 8003f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	085b      	lsrs	r3, r3, #1
 8003f6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <PCD_EP_ISR_Handler+0x2c4>
 8003f7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	029b      	lsls	r3, r3, #10
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa6:	827b      	strh	r3, [r7, #18]
 8003fa8:	8a7b      	ldrh	r3, [r7, #18]
 8003faa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003fae:	827b      	strh	r3, [r7, #18]
 8003fb0:	8a7b      	ldrh	r3, [r7, #18]
 8003fb2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003fb6:	827b      	strh	r3, [r7, #18]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	8a7b      	ldrh	r3, [r7, #18]
 8003fbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	8013      	strh	r3, [r2, #0]
 8003fd2:	e234      	b.n	800443e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003fe8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f280 80fc 	bge.w	80041ea <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	b29a      	uxth	r2, r3
 8004004:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004008:	4013      	ands	r3, r2
 800400a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004020:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004024:	b292      	uxth	r2, r2
 8004026:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004028:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	4413      	add	r3, r2
 800403c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800403e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004040:	7b1b      	ldrb	r3, [r3, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d125      	bne.n	8004092 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800404e:	b29b      	uxth	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4413      	add	r3, r2
 800405a:	3306      	adds	r3, #6
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800406e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004072:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 8092 	beq.w	80041a0 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004082:	6959      	ldr	r1, [r3, #20]
 8004084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004086:	88da      	ldrh	r2, [r3, #6]
 8004088:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800408c:	f004 fdaf 	bl	8008bee <USB_ReadPMA>
 8004090:	e086      	b.n	80041a0 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004094:	78db      	ldrb	r3, [r3, #3]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d10a      	bne.n	80040b0 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800409a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800409e:	461a      	mov	r2, r3
 80040a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f9d9 	bl	800445a <HAL_PCD_EP_DB_Receive>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80040ae:	e077      	b.n	80041a0 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ca:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	441a      	add	r2, r3
 80040dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80040e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	b29b      	uxth	r3, r3
 8004106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d024      	beq.n	8004158 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004116:	b29b      	uxth	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	3302      	adds	r3, #2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6812      	ldr	r2, [r2, #0]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004136:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800413a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800413e:	2b00      	cmp	r3, #0
 8004140:	d02e      	beq.n	80041a0 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004148:	6959      	ldr	r1, [r3, #20]
 800414a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800414c:	891a      	ldrh	r2, [r3, #8]
 800414e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004152:	f004 fd4c 	bl	8008bee <USB_ReadPMA>
 8004156:	e023      	b.n	80041a0 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004160:	b29b      	uxth	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	3306      	adds	r3, #6
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004180:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004184:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004188:	2b00      	cmp	r3, #0
 800418a:	d009      	beq.n	80041a0 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6818      	ldr	r0, [r3, #0]
 8004190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004192:	6959      	ldr	r1, [r3, #20]
 8004194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004196:	895a      	ldrh	r2, [r3, #10]
 8004198:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800419c:	f004 fd27 	bl	8008bee <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80041a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a2:	69da      	ldr	r2, [r3, #28]
 80041a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041a8:	441a      	add	r2, r3
 80041aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80041ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041b6:	441a      	add	r2, r3
 80041b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ba:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80041bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <PCD_EP_ISR_Handler+0x514>
 80041c4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80041c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d206      	bcs.n	80041de <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80041d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f006 faee 	bl	800a7b8 <HAL_PCD_DataOutStageCallback>
 80041dc:	e005      	b.n	80041ea <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041e4:	4618      	mov	r0, r3
 80041e6:	f002 ffcd 	bl	8007184 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80041ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80041ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 8123 	beq.w	800443e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80041f8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	3310      	adds	r3, #16
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	4413      	add	r3, r2
 800420a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	b29b      	uxth	r3, r3
 800421e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004226:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	441a      	add	r2, r3
 8004238:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800423c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004244:	b29b      	uxth	r3, r3
 8004246:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800424a:	78db      	ldrb	r3, [r3, #3]
 800424c:	2b01      	cmp	r3, #1
 800424e:	f040 80a2 	bne.w	8004396 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8004252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004254:	2200      	movs	r2, #0
 8004256:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800425a:	7b1b      	ldrb	r3, [r3, #12]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8093 	beq.w	8004388 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004262:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d046      	beq.n	80042fc <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800426e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004270:	785b      	ldrb	r3, [r3, #1]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d126      	bne.n	80042c4 <PCD_EP_ISR_Handler+0x608>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	627b      	str	r3, [r7, #36]	@ 0x24
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004284:	b29b      	uxth	r3, r3
 8004286:	461a      	mov	r2, r3
 8004288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428a:	4413      	add	r3, r2
 800428c:	627b      	str	r3, [r7, #36]	@ 0x24
 800428e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	011a      	lsls	r2, r3, #4
 8004294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004296:	4413      	add	r3, r2
 8004298:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800429c:	623b      	str	r3, [r7, #32]
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	801a      	strh	r2, [r3, #0]
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042bc:	b29a      	uxth	r2, r3
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	801a      	strh	r2, [r3, #0]
 80042c2:	e061      	b.n	8004388 <PCD_EP_ISR_Handler+0x6cc>
 80042c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c6:	785b      	ldrb	r3, [r3, #1]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d15d      	bne.n	8004388 <PCD_EP_ISR_Handler+0x6cc>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042da:	b29b      	uxth	r3, r3
 80042dc:	461a      	mov	r2, r3
 80042de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e0:	4413      	add	r3, r2
 80042e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	011a      	lsls	r2, r3, #4
 80042ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ec:	4413      	add	r3, r2
 80042ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f6:	2200      	movs	r2, #0
 80042f8:	801a      	strh	r2, [r3, #0]
 80042fa:	e045      	b.n	8004388 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004304:	785b      	ldrb	r3, [r3, #1]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d126      	bne.n	8004358 <PCD_EP_ISR_Handler+0x69c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004318:	b29b      	uxth	r3, r3
 800431a:	461a      	mov	r2, r3
 800431c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800431e:	4413      	add	r3, r2
 8004320:	637b      	str	r3, [r7, #52]	@ 0x34
 8004322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	011a      	lsls	r2, r3, #4
 8004328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800432a:	4413      	add	r3, r2
 800432c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004330:	633b      	str	r3, [r7, #48]	@ 0x30
 8004332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	b29b      	uxth	r3, r3
 8004338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800433c:	b29a      	uxth	r2, r3
 800433e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004340:	801a      	strh	r2, [r3, #0]
 8004342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800434c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004350:	b29a      	uxth	r2, r3
 8004352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004354:	801a      	strh	r2, [r3, #0]
 8004356:	e017      	b.n	8004388 <PCD_EP_ISR_Handler+0x6cc>
 8004358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800435a:	785b      	ldrb	r3, [r3, #1]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d113      	bne.n	8004388 <PCD_EP_ISR_Handler+0x6cc>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004368:	b29b      	uxth	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800436e:	4413      	add	r3, r2
 8004370:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	011a      	lsls	r2, r3, #4
 8004378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800437a:	4413      	add	r3, r2
 800437c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004380:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004384:	2200      	movs	r2, #0
 8004386:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	4619      	mov	r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f006 fa2d 	bl	800a7ee <HAL_PCD_DataInStageCallback>
 8004394:	e053      	b.n	800443e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004396:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800439a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d146      	bne.n	8004430 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4413      	add	r3, r2
 80043b6:	3302      	adds	r3, #2
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6812      	ldr	r2, [r2, #0]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043ca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80043ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d907      	bls.n	80043ea <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80043da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043e2:	1ad2      	subs	r2, r2, r3
 80043e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e6:	619a      	str	r2, [r3, #24]
 80043e8:	e002      	b.n	80043f0 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80043ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ec:	2200      	movs	r2, #0
 80043ee:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80043f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d106      	bne.n	8004406 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f006 f9f5 	bl	800a7ee <HAL_PCD_DataInStageCallback>
 8004404:	e01b      	b.n	800443e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004408:	695a      	ldr	r2, [r3, #20]
 800440a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800440e:	441a      	add	r2, r3
 8004410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004412:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800441c:	441a      	add	r2, r3
 800441e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004420:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004428:	4618      	mov	r0, r3
 800442a:	f002 feab 	bl	8007184 <USB_EPStartXfer>
 800442e:	e006      	b.n	800443e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004430:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004434:	461a      	mov	r2, r3
 8004436:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f91b 	bl	8004674 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004446:	b29b      	uxth	r3, r3
 8004448:	b21b      	sxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	f6ff ac3b 	blt.w	8003cc6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3758      	adds	r7, #88	@ 0x58
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b088      	sub	sp, #32
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	4613      	mov	r3, r2
 8004466:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004468:	88fb      	ldrh	r3, [r7, #6]
 800446a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d07e      	beq.n	8004570 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800447a:	b29b      	uxth	r3, r3
 800447c:	461a      	mov	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4413      	add	r3, r2
 8004486:	3302      	adds	r3, #2
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800449a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	699a      	ldr	r2, [r3, #24]
 80044a0:	8b7b      	ldrh	r3, [r7, #26]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d306      	bcc.n	80044b4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	699a      	ldr	r2, [r3, #24]
 80044aa:	8b7b      	ldrh	r3, [r7, #26]
 80044ac:	1ad2      	subs	r2, r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	619a      	str	r2, [r3, #24]
 80044b2:	e002      	b.n	80044ba <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2200      	movs	r2, #0
 80044b8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d123      	bne.n	800450a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044dc:	833b      	strh	r3, [r7, #24]
 80044de:	8b3b      	ldrh	r3, [r7, #24]
 80044e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80044e4:	833b      	strh	r3, [r7, #24]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	441a      	add	r2, r3
 80044f4:	8b3b      	ldrh	r3, [r7, #24]
 80044f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004506:	b29b      	uxth	r3, r3
 8004508:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800450a:	88fb      	ldrh	r3, [r7, #6]
 800450c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01f      	beq.n	8004554 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	b29b      	uxth	r3, r3
 8004526:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800452a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800452e:	82fb      	strh	r3, [r7, #22]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	441a      	add	r2, r3
 800453e:	8afb      	ldrh	r3, [r7, #22]
 8004540:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004544:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004548:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800454c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004550:	b29b      	uxth	r3, r3
 8004552:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004554:	8b7b      	ldrh	r3, [r7, #26]
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 8087 	beq.w	800466a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	6959      	ldr	r1, [r3, #20]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	891a      	ldrh	r2, [r3, #8]
 8004568:	8b7b      	ldrh	r3, [r7, #26]
 800456a:	f004 fb40 	bl	8008bee <USB_ReadPMA>
 800456e:	e07c      	b.n	800466a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004578:	b29b      	uxth	r3, r3
 800457a:	461a      	mov	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	4413      	add	r3, r2
 8004584:	3306      	adds	r3, #6
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004598:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	8b7b      	ldrh	r3, [r7, #26]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d306      	bcc.n	80045b2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	8b7b      	ldrh	r3, [r7, #26]
 80045aa:	1ad2      	subs	r2, r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	619a      	str	r2, [r3, #24]
 80045b0:	e002      	b.n	80045b8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2200      	movs	r2, #0
 80045b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d123      	bne.n	8004608 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045da:	83fb      	strh	r3, [r7, #30]
 80045dc:	8bfb      	ldrh	r3, [r7, #30]
 80045de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045e2:	83fb      	strh	r3, [r7, #30]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	441a      	add	r2, r3
 80045f2:	8bfb      	ldrh	r3, [r7, #30]
 80045f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004604:	b29b      	uxth	r3, r3
 8004606:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004608:	88fb      	ldrh	r3, [r7, #6]
 800460a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d11f      	bne.n	8004652 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	b29b      	uxth	r3, r3
 8004624:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004628:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800462c:	83bb      	strh	r3, [r7, #28]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	441a      	add	r2, r3
 800463c:	8bbb      	ldrh	r3, [r7, #28]
 800463e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004642:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800464a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800464e:	b29b      	uxth	r3, r3
 8004650:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004652:	8b7b      	ldrh	r3, [r7, #26]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6818      	ldr	r0, [r3, #0]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	6959      	ldr	r1, [r3, #20]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	895a      	ldrh	r2, [r3, #10]
 8004664:	8b7b      	ldrh	r3, [r7, #26]
 8004666:	f004 fac2 	bl	8008bee <USB_ReadPMA>
    }
  }

  return count;
 800466a:	8b7b      	ldrh	r3, [r7, #26]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3720      	adds	r7, #32
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b0a4      	sub	sp, #144	@ 0x90
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	4613      	mov	r3, r2
 8004680:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004682:	88fb      	ldrh	r3, [r7, #6]
 8004684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 81dd 	beq.w	8004a48 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004696:	b29b      	uxth	r3, r3
 8004698:	461a      	mov	r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4413      	add	r3, r2
 80046a2:	3302      	adds	r3, #2
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046b6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d907      	bls.n	80046d6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046ce:	1ad2      	subs	r2, r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	619a      	str	r2, [r3, #24]
 80046d4:	e002      	b.n	80046dc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2200      	movs	r2, #0
 80046da:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f040 80b9 	bne.w	8004858 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	785b      	ldrb	r3, [r3, #1]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d126      	bne.n	800473c <HAL_PCD_EP_DB_Transmit+0xc8>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004702:	4413      	add	r3, r2
 8004704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	011a      	lsls	r2, r3, #4
 800470c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470e:	4413      	add	r3, r2
 8004710:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004714:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	b29b      	uxth	r3, r3
 800471c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004720:	b29a      	uxth	r2, r3
 8004722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004724:	801a      	strh	r2, [r3, #0]
 8004726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	b29b      	uxth	r3, r3
 800472c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004734:	b29a      	uxth	r2, r3
 8004736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004738:	801a      	strh	r2, [r3, #0]
 800473a:	e01a      	b.n	8004772 <HAL_PCD_EP_DB_Transmit+0xfe>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	785b      	ldrb	r3, [r3, #1]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d116      	bne.n	8004772 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	637b      	str	r3, [r7, #52]	@ 0x34
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004752:	b29b      	uxth	r3, r3
 8004754:	461a      	mov	r2, r3
 8004756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004758:	4413      	add	r3, r2
 800475a:	637b      	str	r3, [r7, #52]	@ 0x34
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	011a      	lsls	r2, r3, #4
 8004762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004764:	4413      	add	r3, r2
 8004766:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800476a:	633b      	str	r3, [r7, #48]	@ 0x30
 800476c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476e:	2200      	movs	r2, #0
 8004770:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	627b      	str	r3, [r7, #36]	@ 0x24
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	785b      	ldrb	r3, [r3, #1]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d126      	bne.n	80047ce <HAL_PCD_EP_DB_Transmit+0x15a>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800478e:	b29b      	uxth	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	4413      	add	r3, r2
 8004796:	61fb      	str	r3, [r7, #28]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	011a      	lsls	r2, r3, #4
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	4413      	add	r3, r2
 80047a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047a6:	61bb      	str	r3, [r7, #24]
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	801a      	strh	r2, [r3, #0]
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	801a      	strh	r2, [r3, #0]
 80047cc:	e017      	b.n	80047fe <HAL_PCD_EP_DB_Transmit+0x18a>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	785b      	ldrb	r3, [r3, #1]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d113      	bne.n	80047fe <HAL_PCD_EP_DB_Transmit+0x18a>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047de:	b29b      	uxth	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	4413      	add	r3, r2
 80047e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	011a      	lsls	r2, r3, #4
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	4413      	add	r3, r2
 80047f2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047f6:	623b      	str	r3, [r7, #32]
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	2200      	movs	r2, #0
 80047fc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	4619      	mov	r1, r3
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f005 fff2 	bl	800a7ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 82fc 	beq.w	8004e0e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b29b      	uxth	r3, r3
 8004828:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800482c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004830:	82fb      	strh	r3, [r7, #22]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	441a      	add	r2, r3
 8004840:	8afb      	ldrh	r3, [r7, #22]
 8004842:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004846:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800484a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800484e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004852:	b29b      	uxth	r3, r3
 8004854:	8013      	strh	r3, [r2, #0]
 8004856:	e2da      	b.n	8004e0e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d021      	beq.n	80048a6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	b29b      	uxth	r3, r3
 8004874:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	441a      	add	r2, r3
 800488e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004892:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004896:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800489a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800489e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	f040 82ae 	bne.w	8004e0e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048ba:	441a      	add	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048c8:	441a      	add	r2, r3
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	6a1a      	ldr	r2, [r3, #32]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d30b      	bcc.n	80048f2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	6a1a      	ldr	r2, [r3, #32]
 80048e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048ea:	1ad2      	subs	r2, r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	621a      	str	r2, [r3, #32]
 80048f0:	e017      	b.n	8004922 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d108      	bne.n	800490c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80048fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800490a:	e00a      	b.n	8004922 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2200      	movs	r2, #0
 8004920:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	785b      	ldrb	r3, [r3, #1]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d165      	bne.n	80049f6 <HAL_PCD_EP_DB_Transmit+0x382>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004938:	b29b      	uxth	r3, r3
 800493a:	461a      	mov	r2, r3
 800493c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800493e:	4413      	add	r3, r2
 8004940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	011a      	lsls	r2, r3, #4
 8004948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800494a:	4413      	add	r3, r2
 800494c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004950:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	b29b      	uxth	r3, r3
 8004958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800495c:	b29a      	uxth	r2, r3
 800495e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004960:	801a      	strh	r2, [r3, #0]
 8004962:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004966:	2b3e      	cmp	r3, #62	@ 0x3e
 8004968:	d91d      	bls.n	80049a6 <HAL_PCD_EP_DB_Transmit+0x332>
 800496a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004976:	f003 031f 	and.w	r3, r3, #31
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <HAL_PCD_EP_DB_Transmit+0x310>
 800497e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004980:	3b01      	subs	r3, #1
 8004982:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29a      	uxth	r2, r3
 800498a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800498c:	b29b      	uxth	r3, r3
 800498e:	029b      	lsls	r3, r3, #10
 8004990:	b29b      	uxth	r3, r3
 8004992:	4313      	orrs	r3, r2
 8004994:	b29b      	uxth	r3, r3
 8004996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800499a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800499e:	b29a      	uxth	r2, r3
 80049a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a2:	801a      	strh	r2, [r3, #0]
 80049a4:	e044      	b.n	8004a30 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80049a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10a      	bne.n	80049c4 <HAL_PCD_EP_DB_Transmit+0x350>
 80049ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049bc:	b29a      	uxth	r2, r3
 80049be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c0:	801a      	strh	r2, [r3, #0]
 80049c2:	e035      	b.n	8004a30 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80049c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049c8:	085b      	lsrs	r3, r3, #1
 80049ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <HAL_PCD_EP_DB_Transmit+0x36a>
 80049d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049da:	3301      	adds	r3, #1
 80049dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	029b      	lsls	r3, r3, #10
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	4313      	orrs	r3, r2
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f2:	801a      	strh	r2, [r3, #0]
 80049f4:	e01c      	b.n	8004a30 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	785b      	ldrb	r3, [r3, #1]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d118      	bne.n	8004a30 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	461a      	mov	r2, r3
 8004a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a12:	4413      	add	r3, r2
 8004a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	011a      	lsls	r2, r3, #4
 8004a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a1e:	4413      	add	r3, r2
 8004a20:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a24:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a2e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6818      	ldr	r0, [r3, #0]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	6959      	ldr	r1, [r3, #20]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	891a      	ldrh	r2, [r3, #8]
 8004a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f004 f88e 	bl	8008b62 <USB_WritePMA>
 8004a46:	e1e2      	b.n	8004e0e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3306      	adds	r3, #6
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a70:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	699a      	ldr	r2, [r3, #24]
 8004a78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d307      	bcc.n	8004a90 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	699a      	ldr	r2, [r3, #24]
 8004a84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a88:	1ad2      	subs	r2, r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	619a      	str	r2, [r3, #24]
 8004a8e:	e002      	b.n	8004a96 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2200      	movs	r2, #0
 8004a94:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f040 80c0 	bne.w	8004c20 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	785b      	ldrb	r3, [r3, #1]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d126      	bne.n	8004af6 <HAL_PCD_EP_DB_Transmit+0x482>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004abc:	4413      	add	r3, r2
 8004abe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	011a      	lsls	r2, r3, #4
 8004ac6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ac8:	4413      	add	r3, r2
 8004aca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ace:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ad0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ade:	801a      	strh	r2, [r3, #0]
 8004ae0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004af2:	801a      	strh	r2, [r3, #0]
 8004af4:	e01a      	b.n	8004b2c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	785b      	ldrb	r3, [r3, #1]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d116      	bne.n	8004b2c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	461a      	mov	r2, r3
 8004b10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b12:	4413      	add	r3, r2
 8004b14:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	011a      	lsls	r2, r3, #4
 8004b1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b1e:	4413      	add	r3, r2
 8004b20:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b24:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b28:	2200      	movs	r2, #0
 8004b2a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	785b      	ldrb	r3, [r3, #1]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d12b      	bne.n	8004b92 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b4e:	4413      	add	r3, r2
 8004b50:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	011a      	lsls	r2, r3, #4
 8004b58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004b60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b76:	801a      	strh	r2, [r3, #0]
 8004b78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b8e:	801a      	strh	r2, [r3, #0]
 8004b90:	e017      	b.n	8004bc2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	785b      	ldrb	r3, [r3, #1]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d113      	bne.n	8004bc2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ba8:	4413      	add	r3, r2
 8004baa:	677b      	str	r3, [r7, #116]	@ 0x74
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	011a      	lsls	r2, r3, #4
 8004bb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004bba:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f005 fe10 	bl	800a7ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f040 811a 	bne.w	8004e0e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	441a      	add	r2, r3
 8004c06:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004c0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	8013      	strh	r3, [r2, #0]
 8004c1e:	e0f6      	b.n	8004e0e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c20:	88fb      	ldrh	r3, [r7, #6]
 8004c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d121      	bne.n	8004c6e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c44:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	441a      	add	r2, r3
 8004c56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	f040 80ca 	bne.w	8004e0e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	695a      	ldr	r2, [r3, #20]
 8004c7e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c82:	441a      	add	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c90:	441a      	add	r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	6a1a      	ldr	r2, [r3, #32]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d30b      	bcc.n	8004cba <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	6a1a      	ldr	r2, [r3, #32]
 8004cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cb2:	1ad2      	subs	r2, r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	621a      	str	r2, [r3, #32]
 8004cb8:	e017      	b.n	8004cea <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d108      	bne.n	8004cd4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004cc2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004cd2:	e00a      	b.n	8004cea <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	785b      	ldrb	r3, [r3, #1]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d165      	bne.n	8004dc4 <HAL_PCD_EP_DB_Transmit+0x750>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d0c:	4413      	add	r3, r2
 8004d0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	011a      	lsls	r2, r3, #4
 8004d16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d18:	4413      	add	r3, r2
 8004d1a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d2e:	801a      	strh	r2, [r3, #0]
 8004d30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d34:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d36:	d91d      	bls.n	8004d74 <HAL_PCD_EP_DB_Transmit+0x700>
 8004d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d44:	f003 031f 	and.w	r3, r3, #31
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d102      	bne.n	8004d52 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004d4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	029b      	lsls	r3, r3, #10
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	4313      	orrs	r3, r2
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d70:	801a      	strh	r2, [r3, #0]
 8004d72:	e041      	b.n	8004df8 <HAL_PCD_EP_DB_Transmit+0x784>
 8004d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10a      	bne.n	8004d92 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004d7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d8e:	801a      	strh	r2, [r3, #0]
 8004d90:	e032      	b.n	8004df8 <HAL_PCD_EP_DB_Transmit+0x784>
 8004d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d96:	085b      	lsrs	r3, r3, #1
 8004d98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_PCD_EP_DB_Transmit+0x738>
 8004da6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004da8:	3301      	adds	r3, #1
 8004daa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	029b      	lsls	r3, r3, #10
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dc0:	801a      	strh	r2, [r3, #0]
 8004dc2:	e019      	b.n	8004df8 <HAL_PCD_EP_DB_Transmit+0x784>
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	785b      	ldrb	r3, [r3, #1]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d115      	bne.n	8004df8 <HAL_PCD_EP_DB_Transmit+0x784>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dda:	4413      	add	r3, r2
 8004ddc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	011a      	lsls	r2, r3, #4
 8004de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004de6:	4413      	add	r3, r2
 8004de8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004dec:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004df6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	6959      	ldr	r1, [r3, #20]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	895a      	ldrh	r2, [r3, #10]
 8004e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	f003 feaa 	bl	8008b62 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e28:	82bb      	strh	r3, [r7, #20]
 8004e2a:	8abb      	ldrh	r3, [r7, #20]
 8004e2c:	f083 0310 	eor.w	r3, r3, #16
 8004e30:	82bb      	strh	r3, [r7, #20]
 8004e32:	8abb      	ldrh	r3, [r7, #20]
 8004e34:	f083 0320 	eor.w	r3, r3, #32
 8004e38:	82bb      	strh	r3, [r7, #20]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	441a      	add	r2, r3
 8004e48:	8abb      	ldrh	r3, [r7, #20]
 8004e4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3790      	adds	r7, #144	@ 0x90
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	607b      	str	r3, [r7, #4]
 8004e72:	460b      	mov	r3, r1
 8004e74:	817b      	strh	r3, [r7, #10]
 8004e76:	4613      	mov	r3, r2
 8004e78:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004e7a:	897b      	ldrh	r3, [r7, #10]
 8004e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00b      	beq.n	8004e9e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e86:	897b      	ldrh	r3, [r7, #10]
 8004e88:	f003 0207 	and.w	r2, r3, #7
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	3310      	adds	r3, #16
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4413      	add	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	e009      	b.n	8004eb2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e9e:	897a      	ldrh	r2, [r7, #10]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4413      	add	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004eb2:	893b      	ldrh	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d107      	bne.n	8004ec8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	80da      	strh	r2, [r3, #6]
 8004ec6:	e00b      	b.n	8004ee0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	0c1b      	lsrs	r3, r3, #16
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr

08004eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e272      	b.n	80053e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 8087 	beq.w	800501a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f0c:	4b92      	ldr	r3, [pc, #584]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f003 030c 	and.w	r3, r3, #12
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d00c      	beq.n	8004f32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f18:	4b8f      	ldr	r3, [pc, #572]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f003 030c 	and.w	r3, r3, #12
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d112      	bne.n	8004f4a <HAL_RCC_OscConfig+0x5e>
 8004f24:	4b8c      	ldr	r3, [pc, #560]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f30:	d10b      	bne.n	8004f4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f32:	4b89      	ldr	r3, [pc, #548]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d06c      	beq.n	8005018 <HAL_RCC_OscConfig+0x12c>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d168      	bne.n	8005018 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e24c      	b.n	80053e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f52:	d106      	bne.n	8004f62 <HAL_RCC_OscConfig+0x76>
 8004f54:	4b80      	ldr	r3, [pc, #512]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a7f      	ldr	r2, [pc, #508]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	e02e      	b.n	8004fc0 <HAL_RCC_OscConfig+0xd4>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCC_OscConfig+0x98>
 8004f6a:	4b7b      	ldr	r3, [pc, #492]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a7a      	ldr	r2, [pc, #488]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004f70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	4b78      	ldr	r3, [pc, #480]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a77      	ldr	r2, [pc, #476]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004f7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	e01d      	b.n	8004fc0 <HAL_RCC_OscConfig+0xd4>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f8c:	d10c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0xbc>
 8004f8e:	4b72      	ldr	r3, [pc, #456]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a71      	ldr	r2, [pc, #452]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004f94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	4b6f      	ldr	r3, [pc, #444]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a6e      	ldr	r2, [pc, #440]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	e00b      	b.n	8004fc0 <HAL_RCC_OscConfig+0xd4>
 8004fa8:	4b6b      	ldr	r3, [pc, #428]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a6a      	ldr	r2, [pc, #424]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004fae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	4b68      	ldr	r3, [pc, #416]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a67      	ldr	r2, [pc, #412]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004fba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d013      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc8:	f7fd fee4 	bl	8002d94 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fd0:	f7fd fee0 	bl	8002d94 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b64      	cmp	r3, #100	@ 0x64
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e200      	b.n	80053e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCC_OscConfig+0xe4>
 8004fee:	e014      	b.n	800501a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff0:	f7fd fed0 	bl	8002d94 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ff8:	f7fd fecc 	bl	8002d94 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b64      	cmp	r3, #100	@ 0x64
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e1ec      	b.n	80053e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800500a:	4b53      	ldr	r3, [pc, #332]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f0      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x10c>
 8005016:	e000      	b.n	800501a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d063      	beq.n	80050ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005026:	4b4c      	ldr	r3, [pc, #304]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f003 030c 	and.w	r3, r3, #12
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00b      	beq.n	800504a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005032:	4b49      	ldr	r3, [pc, #292]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f003 030c 	and.w	r3, r3, #12
 800503a:	2b08      	cmp	r3, #8
 800503c:	d11c      	bne.n	8005078 <HAL_RCC_OscConfig+0x18c>
 800503e:	4b46      	ldr	r3, [pc, #280]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d116      	bne.n	8005078 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800504a:	4b43      	ldr	r3, [pc, #268]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_RCC_OscConfig+0x176>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d001      	beq.n	8005062 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e1c0      	b.n	80053e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005062:	4b3d      	ldr	r3, [pc, #244]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	4939      	ldr	r1, [pc, #228]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8005072:	4313      	orrs	r3, r2
 8005074:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005076:	e03a      	b.n	80050ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d020      	beq.n	80050c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005080:	4b36      	ldr	r3, [pc, #216]	@ (800515c <HAL_RCC_OscConfig+0x270>)
 8005082:	2201      	movs	r2, #1
 8005084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005086:	f7fd fe85 	bl	8002d94 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800508e:	f7fd fe81 	bl	8002d94 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e1a1      	b.n	80053e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a0:	4b2d      	ldr	r3, [pc, #180]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0f0      	beq.n	800508e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	4927      	ldr	r1, [pc, #156]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	600b      	str	r3, [r1, #0]
 80050c0:	e015      	b.n	80050ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050c2:	4b26      	ldr	r3, [pc, #152]	@ (800515c <HAL_RCC_OscConfig+0x270>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fd fe64 	bl	8002d94 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050d0:	f7fd fe60 	bl	8002d94 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e180      	b.n	80053e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d03a      	beq.n	8005170 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d019      	beq.n	8005136 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005102:	4b17      	ldr	r3, [pc, #92]	@ (8005160 <HAL_RCC_OscConfig+0x274>)
 8005104:	2201      	movs	r2, #1
 8005106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005108:	f7fd fe44 	bl	8002d94 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005110:	f7fd fe40 	bl	8002d94 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e160      	b.n	80053e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005122:	4b0d      	ldr	r3, [pc, #52]	@ (8005158 <HAL_RCC_OscConfig+0x26c>)
 8005124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800512e:	2001      	movs	r0, #1
 8005130:	f000 face 	bl	80056d0 <RCC_Delay>
 8005134:	e01c      	b.n	8005170 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005136:	4b0a      	ldr	r3, [pc, #40]	@ (8005160 <HAL_RCC_OscConfig+0x274>)
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800513c:	f7fd fe2a 	bl	8002d94 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005142:	e00f      	b.n	8005164 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005144:	f7fd fe26 	bl	8002d94 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d908      	bls.n	8005164 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e146      	b.n	80053e4 <HAL_RCC_OscConfig+0x4f8>
 8005156:	bf00      	nop
 8005158:	40021000 	.word	0x40021000
 800515c:	42420000 	.word	0x42420000
 8005160:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005164:	4b92      	ldr	r3, [pc, #584]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 8005166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e9      	bne.n	8005144 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 80a6 	beq.w	80052ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800517e:	2300      	movs	r3, #0
 8005180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005182:	4b8b      	ldr	r3, [pc, #556]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10d      	bne.n	80051aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800518e:	4b88      	ldr	r3, [pc, #544]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	4a87      	ldr	r2, [pc, #540]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 8005194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005198:	61d3      	str	r3, [r2, #28]
 800519a:	4b85      	ldr	r3, [pc, #532]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051a2:	60bb      	str	r3, [r7, #8]
 80051a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051a6:	2301      	movs	r3, #1
 80051a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051aa:	4b82      	ldr	r3, [pc, #520]	@ (80053b4 <HAL_RCC_OscConfig+0x4c8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d118      	bne.n	80051e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051b6:	4b7f      	ldr	r3, [pc, #508]	@ (80053b4 <HAL_RCC_OscConfig+0x4c8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a7e      	ldr	r2, [pc, #504]	@ (80053b4 <HAL_RCC_OscConfig+0x4c8>)
 80051bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051c2:	f7fd fde7 	bl	8002d94 <HAL_GetTick>
 80051c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c8:	e008      	b.n	80051dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ca:	f7fd fde3 	bl	8002d94 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b64      	cmp	r3, #100	@ 0x64
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e103      	b.n	80053e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051dc:	4b75      	ldr	r3, [pc, #468]	@ (80053b4 <HAL_RCC_OscConfig+0x4c8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f0      	beq.n	80051ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d106      	bne.n	80051fe <HAL_RCC_OscConfig+0x312>
 80051f0:	4b6f      	ldr	r3, [pc, #444]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	4a6e      	ldr	r2, [pc, #440]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 80051f6:	f043 0301 	orr.w	r3, r3, #1
 80051fa:	6213      	str	r3, [r2, #32]
 80051fc:	e02d      	b.n	800525a <HAL_RCC_OscConfig+0x36e>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10c      	bne.n	8005220 <HAL_RCC_OscConfig+0x334>
 8005206:	4b6a      	ldr	r3, [pc, #424]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	4a69      	ldr	r2, [pc, #420]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	6213      	str	r3, [r2, #32]
 8005212:	4b67      	ldr	r3, [pc, #412]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	4a66      	ldr	r2, [pc, #408]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 8005218:	f023 0304 	bic.w	r3, r3, #4
 800521c:	6213      	str	r3, [r2, #32]
 800521e:	e01c      	b.n	800525a <HAL_RCC_OscConfig+0x36e>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2b05      	cmp	r3, #5
 8005226:	d10c      	bne.n	8005242 <HAL_RCC_OscConfig+0x356>
 8005228:	4b61      	ldr	r3, [pc, #388]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	4a60      	ldr	r2, [pc, #384]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 800522e:	f043 0304 	orr.w	r3, r3, #4
 8005232:	6213      	str	r3, [r2, #32]
 8005234:	4b5e      	ldr	r3, [pc, #376]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	4a5d      	ldr	r2, [pc, #372]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	6213      	str	r3, [r2, #32]
 8005240:	e00b      	b.n	800525a <HAL_RCC_OscConfig+0x36e>
 8005242:	4b5b      	ldr	r3, [pc, #364]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	4a5a      	ldr	r2, [pc, #360]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 8005248:	f023 0301 	bic.w	r3, r3, #1
 800524c:	6213      	str	r3, [r2, #32]
 800524e:	4b58      	ldr	r3, [pc, #352]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	4a57      	ldr	r2, [pc, #348]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 8005254:	f023 0304 	bic.w	r3, r3, #4
 8005258:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d015      	beq.n	800528e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005262:	f7fd fd97 	bl	8002d94 <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005268:	e00a      	b.n	8005280 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526a:	f7fd fd93 	bl	8002d94 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005278:	4293      	cmp	r3, r2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e0b1      	b.n	80053e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005280:	4b4b      	ldr	r3, [pc, #300]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0ee      	beq.n	800526a <HAL_RCC_OscConfig+0x37e>
 800528c:	e014      	b.n	80052b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800528e:	f7fd fd81 	bl	8002d94 <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005294:	e00a      	b.n	80052ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005296:	f7fd fd7d 	bl	8002d94 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e09b      	b.n	80053e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ac:	4b40      	ldr	r3, [pc, #256]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1ee      	bne.n	8005296 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d105      	bne.n	80052ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052be:	4b3c      	ldr	r3, [pc, #240]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	4a3b      	ldr	r2, [pc, #236]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 80052c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 8087 	beq.w	80053e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052d4:	4b36      	ldr	r3, [pc, #216]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f003 030c 	and.w	r3, r3, #12
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d061      	beq.n	80053a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d146      	bne.n	8005376 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e8:	4b33      	ldr	r3, [pc, #204]	@ (80053b8 <HAL_RCC_OscConfig+0x4cc>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ee:	f7fd fd51 	bl	8002d94 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052f4:	e008      	b.n	8005308 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f6:	f7fd fd4d 	bl	8002d94 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e06d      	b.n	80053e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005308:	4b29      	ldr	r3, [pc, #164]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1f0      	bne.n	80052f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800531c:	d108      	bne.n	8005330 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800531e:	4b24      	ldr	r3, [pc, #144]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	4921      	ldr	r1, [pc, #132]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 800532c:	4313      	orrs	r3, r2
 800532e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005330:	4b1f      	ldr	r3, [pc, #124]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a19      	ldr	r1, [r3, #32]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005340:	430b      	orrs	r3, r1
 8005342:	491b      	ldr	r1, [pc, #108]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 8005344:	4313      	orrs	r3, r2
 8005346:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005348:	4b1b      	ldr	r3, [pc, #108]	@ (80053b8 <HAL_RCC_OscConfig+0x4cc>)
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534e:	f7fd fd21 	bl	8002d94 <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005356:	f7fd fd1d 	bl	8002d94 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e03d      	b.n	80053e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005368:	4b11      	ldr	r3, [pc, #68]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0x46a>
 8005374:	e035      	b.n	80053e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005376:	4b10      	ldr	r3, [pc, #64]	@ (80053b8 <HAL_RCC_OscConfig+0x4cc>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537c:	f7fd fd0a 	bl	8002d94 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005384:	f7fd fd06 	bl	8002d94 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e026      	b.n	80053e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005396:	4b06      	ldr	r3, [pc, #24]	@ (80053b0 <HAL_RCC_OscConfig+0x4c4>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f0      	bne.n	8005384 <HAL_RCC_OscConfig+0x498>
 80053a2:	e01e      	b.n	80053e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d107      	bne.n	80053bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e019      	b.n	80053e4 <HAL_RCC_OscConfig+0x4f8>
 80053b0:	40021000 	.word	0x40021000
 80053b4:	40007000 	.word	0x40007000
 80053b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053bc:	4b0b      	ldr	r3, [pc, #44]	@ (80053ec <HAL_RCC_OscConfig+0x500>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d106      	bne.n	80053de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053da:	429a      	cmp	r2, r3
 80053dc:	d001      	beq.n	80053e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40021000 	.word	0x40021000

080053f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e0d0      	b.n	80055a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005404:	4b6a      	ldr	r3, [pc, #424]	@ (80055b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d910      	bls.n	8005434 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005412:	4b67      	ldr	r3, [pc, #412]	@ (80055b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f023 0207 	bic.w	r2, r3, #7
 800541a:	4965      	ldr	r1, [pc, #404]	@ (80055b0 <HAL_RCC_ClockConfig+0x1c0>)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	4313      	orrs	r3, r2
 8005420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005422:	4b63      	ldr	r3, [pc, #396]	@ (80055b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d001      	beq.n	8005434 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e0b8      	b.n	80055a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d020      	beq.n	8005482 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800544c:	4b59      	ldr	r3, [pc, #356]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c4>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	4a58      	ldr	r2, [pc, #352]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005452:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005456:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005464:	4b53      	ldr	r3, [pc, #332]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	4a52      	ldr	r2, [pc, #328]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c4>)
 800546a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800546e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005470:	4b50      	ldr	r3, [pc, #320]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	494d      	ldr	r1, [pc, #308]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c4>)
 800547e:	4313      	orrs	r3, r2
 8005480:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d040      	beq.n	8005510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d107      	bne.n	80054a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005496:	4b47      	ldr	r3, [pc, #284]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d115      	bne.n	80054ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e07f      	b.n	80055a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d107      	bne.n	80054be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ae:	4b41      	ldr	r3, [pc, #260]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d109      	bne.n	80054ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e073      	b.n	80055a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054be:	4b3d      	ldr	r3, [pc, #244]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e06b      	b.n	80055a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054ce:	4b39      	ldr	r3, [pc, #228]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c4>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f023 0203 	bic.w	r2, r3, #3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	4936      	ldr	r1, [pc, #216]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c4>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054e0:	f7fd fc58 	bl	8002d94 <HAL_GetTick>
 80054e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e6:	e00a      	b.n	80054fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054e8:	f7fd fc54 	bl	8002d94 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e053      	b.n	80055a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fe:	4b2d      	ldr	r3, [pc, #180]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f003 020c 	and.w	r2, r3, #12
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	429a      	cmp	r2, r3
 800550e:	d1eb      	bne.n	80054e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005510:	4b27      	ldr	r3, [pc, #156]	@ (80055b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d210      	bcs.n	8005540 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800551e:	4b24      	ldr	r3, [pc, #144]	@ (80055b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f023 0207 	bic.w	r2, r3, #7
 8005526:	4922      	ldr	r1, [pc, #136]	@ (80055b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	4313      	orrs	r3, r2
 800552c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800552e:	4b20      	ldr	r3, [pc, #128]	@ (80055b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d001      	beq.n	8005540 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e032      	b.n	80055a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d008      	beq.n	800555e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800554c:	4b19      	ldr	r3, [pc, #100]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c4>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	4916      	ldr	r1, [pc, #88]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c4>)
 800555a:	4313      	orrs	r3, r2
 800555c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d009      	beq.n	800557e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800556a:	4b12      	ldr	r3, [pc, #72]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c4>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	490e      	ldr	r1, [pc, #56]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c4>)
 800557a:	4313      	orrs	r3, r2
 800557c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800557e:	f000 f821 	bl	80055c4 <HAL_RCC_GetSysClockFreq>
 8005582:	4602      	mov	r2, r0
 8005584:	4b0b      	ldr	r3, [pc, #44]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	091b      	lsrs	r3, r3, #4
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	490a      	ldr	r1, [pc, #40]	@ (80055b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005590:	5ccb      	ldrb	r3, [r1, r3]
 8005592:	fa22 f303 	lsr.w	r3, r2, r3
 8005596:	4a09      	ldr	r2, [pc, #36]	@ (80055bc <HAL_RCC_ClockConfig+0x1cc>)
 8005598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800559a:	4b09      	ldr	r3, [pc, #36]	@ (80055c0 <HAL_RCC_ClockConfig+0x1d0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fd fbb6 	bl	8002d10 <HAL_InitTick>

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40022000 	.word	0x40022000
 80055b4:	40021000 	.word	0x40021000
 80055b8:	0800b73c 	.word	0x0800b73c
 80055bc:	20000018 	.word	0x20000018
 80055c0:	2000001c 	.word	0x2000001c

080055c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	2300      	movs	r3, #0
 80055d0:	60bb      	str	r3, [r7, #8]
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	2300      	movs	r3, #0
 80055d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80055de:	4b1e      	ldr	r3, [pc, #120]	@ (8005658 <HAL_RCC_GetSysClockFreq+0x94>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f003 030c 	and.w	r3, r3, #12
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d002      	beq.n	80055f4 <HAL_RCC_GetSysClockFreq+0x30>
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d003      	beq.n	80055fa <HAL_RCC_GetSysClockFreq+0x36>
 80055f2:	e027      	b.n	8005644 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055f4:	4b19      	ldr	r3, [pc, #100]	@ (800565c <HAL_RCC_GetSysClockFreq+0x98>)
 80055f6:	613b      	str	r3, [r7, #16]
      break;
 80055f8:	e027      	b.n	800564a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	0c9b      	lsrs	r3, r3, #18
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	4a17      	ldr	r2, [pc, #92]	@ (8005660 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005604:	5cd3      	ldrb	r3, [r2, r3]
 8005606:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d010      	beq.n	8005634 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005612:	4b11      	ldr	r3, [pc, #68]	@ (8005658 <HAL_RCC_GetSysClockFreq+0x94>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	0c5b      	lsrs	r3, r3, #17
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	4a11      	ldr	r2, [pc, #68]	@ (8005664 <HAL_RCC_GetSysClockFreq+0xa0>)
 800561e:	5cd3      	ldrb	r3, [r2, r3]
 8005620:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a0d      	ldr	r2, [pc, #52]	@ (800565c <HAL_RCC_GetSysClockFreq+0x98>)
 8005626:	fb03 f202 	mul.w	r2, r3, r2
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	e004      	b.n	800563e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a0c      	ldr	r2, [pc, #48]	@ (8005668 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005638:	fb02 f303 	mul.w	r3, r2, r3
 800563c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	613b      	str	r3, [r7, #16]
      break;
 8005642:	e002      	b.n	800564a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005644:	4b05      	ldr	r3, [pc, #20]	@ (800565c <HAL_RCC_GetSysClockFreq+0x98>)
 8005646:	613b      	str	r3, [r7, #16]
      break;
 8005648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800564a:	693b      	ldr	r3, [r7, #16]
}
 800564c:	4618      	mov	r0, r3
 800564e:	371c      	adds	r7, #28
 8005650:	46bd      	mov	sp, r7
 8005652:	bc80      	pop	{r7}
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40021000 	.word	0x40021000
 800565c:	007a1200 	.word	0x007a1200
 8005660:	0800b754 	.word	0x0800b754
 8005664:	0800b764 	.word	0x0800b764
 8005668:	003d0900 	.word	0x003d0900

0800566c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005670:	4b02      	ldr	r3, [pc, #8]	@ (800567c <HAL_RCC_GetHCLKFreq+0x10>)
 8005672:	681b      	ldr	r3, [r3, #0]
}
 8005674:	4618      	mov	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr
 800567c:	20000018 	.word	0x20000018

08005680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005684:	f7ff fff2 	bl	800566c <HAL_RCC_GetHCLKFreq>
 8005688:	4602      	mov	r2, r0
 800568a:	4b05      	ldr	r3, [pc, #20]	@ (80056a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	0a1b      	lsrs	r3, r3, #8
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	4903      	ldr	r1, [pc, #12]	@ (80056a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005696:	5ccb      	ldrb	r3, [r1, r3]
 8005698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800569c:	4618      	mov	r0, r3
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40021000 	.word	0x40021000
 80056a4:	0800b74c 	.word	0x0800b74c

080056a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056ac:	f7ff ffde 	bl	800566c <HAL_RCC_GetHCLKFreq>
 80056b0:	4602      	mov	r2, r0
 80056b2:	4b05      	ldr	r3, [pc, #20]	@ (80056c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	0adb      	lsrs	r3, r3, #11
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	4903      	ldr	r1, [pc, #12]	@ (80056cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80056be:	5ccb      	ldrb	r3, [r1, r3]
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40021000 	.word	0x40021000
 80056cc:	0800b74c 	.word	0x0800b74c

080056d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80056d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005704 <RCC_Delay+0x34>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005708 <RCC_Delay+0x38>)
 80056de:	fba2 2303 	umull	r2, r3, r2, r3
 80056e2:	0a5b      	lsrs	r3, r3, #9
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	fb02 f303 	mul.w	r3, r2, r3
 80056ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80056ec:	bf00      	nop
  }
  while (Delay --);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1e5a      	subs	r2, r3, #1
 80056f2:	60fa      	str	r2, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1f9      	bne.n	80056ec <RCC_Delay+0x1c>
}
 80056f8:	bf00      	nop
 80056fa:	bf00      	nop
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr
 8005704:	20000018 	.word	0x20000018
 8005708:	10624dd3 	.word	0x10624dd3

0800570c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	613b      	str	r3, [r7, #16]
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d07d      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005728:	2300      	movs	r3, #0
 800572a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800572c:	4b4f      	ldr	r3, [pc, #316]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10d      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005738:	4b4c      	ldr	r3, [pc, #304]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	4a4b      	ldr	r2, [pc, #300]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005742:	61d3      	str	r3, [r2, #28]
 8005744:	4b49      	ldr	r3, [pc, #292]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800574c:	60bb      	str	r3, [r7, #8]
 800574e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005750:	2301      	movs	r3, #1
 8005752:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005754:	4b46      	ldr	r3, [pc, #280]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800575c:	2b00      	cmp	r3, #0
 800575e:	d118      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005760:	4b43      	ldr	r3, [pc, #268]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a42      	ldr	r2, [pc, #264]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800576a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800576c:	f7fd fb12 	bl	8002d94 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005772:	e008      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005774:	f7fd fb0e 	bl	8002d94 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b64      	cmp	r3, #100	@ 0x64
 8005780:	d901      	bls.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e06d      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005786:	4b3a      	ldr	r3, [pc, #232]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0f0      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005792:	4b36      	ldr	r3, [pc, #216]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800579a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d02e      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d027      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057b0:	4b2e      	ldr	r3, [pc, #184]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057ba:	4b2e      	ldr	r3, [pc, #184]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057bc:	2201      	movs	r2, #1
 80057be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057c0:	4b2c      	ldr	r3, [pc, #176]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80057c6:	4a29      	ldr	r2, [pc, #164]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d014      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d6:	f7fd fadd 	bl	8002d94 <HAL_GetTick>
 80057da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057dc:	e00a      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057de:	f7fd fad9 	bl	8002d94 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e036      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057f4:	4b1d      	ldr	r3, [pc, #116]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0ee      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005800:	4b1a      	ldr	r3, [pc, #104]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	4917      	ldr	r1, [pc, #92]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800580e:	4313      	orrs	r3, r2
 8005810:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005812:	7dfb      	ldrb	r3, [r7, #23]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d105      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005818:	4b14      	ldr	r3, [pc, #80]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	4a13      	ldr	r2, [pc, #76]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800581e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005822:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d008      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005830:	4b0e      	ldr	r3, [pc, #56]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	490b      	ldr	r1, [pc, #44]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800583e:	4313      	orrs	r3, r2
 8005840:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b00      	cmp	r3, #0
 800584c:	d008      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800584e:	4b07      	ldr	r3, [pc, #28]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	4904      	ldr	r1, [pc, #16]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800585c:	4313      	orrs	r3, r2
 800585e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40021000 	.word	0x40021000
 8005870:	40007000 	.word	0x40007000
 8005874:	42420440 	.word	0x42420440

08005878 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e076      	b.n	8005978 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588e:	2b00      	cmp	r3, #0
 8005890:	d108      	bne.n	80058a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800589a:	d009      	beq.n	80058b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	61da      	str	r2, [r3, #28]
 80058a2:	e005      	b.n	80058b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d106      	bne.n	80058d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7fd f8d4 	bl	8002a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058f8:	431a      	orrs	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005934:	ea42 0103 	orr.w	r1, r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	0c1a      	lsrs	r2, r3, #16
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f002 0204 	and.w	r2, r2, #4
 8005956:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	69da      	ldr	r2, [r3, #28]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005966:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	603b      	str	r3, [r7, #0]
 800598c:	4613      	mov	r3, r2
 800598e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005990:	f7fd fa00 	bl	8002d94 <HAL_GetTick>
 8005994:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005996:	88fb      	ldrh	r3, [r7, #6]
 8005998:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d001      	beq.n	80059aa <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80059a6:	2302      	movs	r3, #2
 80059a8:	e12a      	b.n	8005c00 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <HAL_SPI_Transmit+0x36>
 80059b0:	88fb      	ldrh	r3, [r7, #6]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e122      	b.n	8005c00 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_SPI_Transmit+0x48>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e11b      	b.n	8005c00 <HAL_SPI_Transmit+0x280>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2203      	movs	r2, #3
 80059d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	88fa      	ldrh	r2, [r7, #6]
 80059e8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	88fa      	ldrh	r2, [r7, #6]
 80059ee:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a16:	d10f      	bne.n	8005a38 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a42:	2b40      	cmp	r3, #64	@ 0x40
 8005a44:	d007      	beq.n	8005a56 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a5e:	d152      	bne.n	8005b06 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <HAL_SPI_Transmit+0xee>
 8005a68:	8b7b      	ldrh	r3, [r7, #26]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d145      	bne.n	8005afa <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a72:	881a      	ldrh	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a7e:	1c9a      	adds	r2, r3, #2
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a92:	e032      	b.n	8005afa <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d112      	bne.n	8005ac8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa6:	881a      	ldrh	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab2:	1c9a      	adds	r2, r3, #2
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ac6:	e018      	b.n	8005afa <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ac8:	f7fd f964 	bl	8002d94 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d803      	bhi.n	8005ae0 <HAL_SPI_Transmit+0x160>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ade:	d102      	bne.n	8005ae6 <HAL_SPI_Transmit+0x166>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d109      	bne.n	8005afa <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e082      	b.n	8005c00 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1c7      	bne.n	8005a94 <HAL_SPI_Transmit+0x114>
 8005b04:	e053      	b.n	8005bae <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <HAL_SPI_Transmit+0x194>
 8005b0e:	8b7b      	ldrh	r3, [r7, #26]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d147      	bne.n	8005ba4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	330c      	adds	r3, #12
 8005b1e:	7812      	ldrb	r2, [r2, #0]
 8005b20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b3a:	e033      	b.n	8005ba4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d113      	bne.n	8005b72 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	330c      	adds	r3, #12
 8005b54:	7812      	ldrb	r2, [r2, #0]
 8005b56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b70:	e018      	b.n	8005ba4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b72:	f7fd f90f 	bl	8002d94 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d803      	bhi.n	8005b8a <HAL_SPI_Transmit+0x20a>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d102      	bne.n	8005b90 <HAL_SPI_Transmit+0x210>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d109      	bne.n	8005ba4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e02d      	b.n	8005c00 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1c6      	bne.n	8005b3c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 fbc4 	bl	8006340 <SPI_EndRxTxTransaction>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e000      	b.n	8005c00 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
  }
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3720      	adds	r7, #32
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	4613      	mov	r3, r2
 8005c16:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d001      	beq.n	8005c28 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005c24:	2302      	movs	r3, #2
 8005c26:	e104      	b.n	8005e32 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c30:	d112      	bne.n	8005c58 <HAL_SPI_Receive+0x50>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10e      	bne.n	8005c58 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2204      	movs	r2, #4
 8005c3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c42:	88fa      	ldrh	r2, [r7, #6]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 f8f3 	bl	8005e3a <HAL_SPI_TransmitReceive>
 8005c54:	4603      	mov	r3, r0
 8005c56:	e0ec      	b.n	8005e32 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c58:	f7fd f89c 	bl	8002d94 <HAL_GetTick>
 8005c5c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <HAL_SPI_Receive+0x62>
 8005c64:	88fb      	ldrh	r3, [r7, #6]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e0e1      	b.n	8005e32 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_SPI_Receive+0x74>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e0da      	b.n	8005e32 <HAL_SPI_Receive+0x22a>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2204      	movs	r2, #4
 8005c88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	88fa      	ldrh	r2, [r7, #6]
 8005c9c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	88fa      	ldrh	r2, [r7, #6]
 8005ca2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cca:	d10f      	bne.n	8005cec <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005cea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf6:	2b40      	cmp	r3, #64	@ 0x40
 8005cf8:	d007      	beq.n	8005d0a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d08:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d170      	bne.n	8005df4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d12:	e035      	b.n	8005d80 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d115      	bne.n	8005d4e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f103 020c 	add.w	r2, r3, #12
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2e:	7812      	ldrb	r2, [r2, #0]
 8005d30:	b2d2      	uxtb	r2, r2
 8005d32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d4c:	e018      	b.n	8005d80 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d4e:	f7fd f821 	bl	8002d94 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d803      	bhi.n	8005d66 <HAL_SPI_Receive+0x15e>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d64:	d102      	bne.n	8005d6c <HAL_SPI_Receive+0x164>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d109      	bne.n	8005d80 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e058      	b.n	8005e32 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1c4      	bne.n	8005d14 <HAL_SPI_Receive+0x10c>
 8005d8a:	e038      	b.n	8005dfe <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d113      	bne.n	8005dc2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da4:	b292      	uxth	r2, r2
 8005da6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dac:	1c9a      	adds	r2, r3, #2
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	3b01      	subs	r3, #1
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005dc0:	e018      	b.n	8005df4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dc2:	f7fc ffe7 	bl	8002d94 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d803      	bhi.n	8005dda <HAL_SPI_Receive+0x1d2>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d102      	bne.n	8005de0 <HAL_SPI_Receive+0x1d8>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d109      	bne.n	8005df4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e01e      	b.n	8005e32 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1c6      	bne.n	8005d8c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 fa4a 	bl	800629c <SPI_EndRxTransaction>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2220      	movs	r2, #32
 8005e12:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e000      	b.n	8005e32 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005e30:	2300      	movs	r3, #0
  }
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b08a      	sub	sp, #40	@ 0x28
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	60f8      	str	r0, [r7, #12]
 8005e42:	60b9      	str	r1, [r7, #8]
 8005e44:	607a      	str	r2, [r7, #4]
 8005e46:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e4c:	f7fc ffa2 	bl	8002d94 <HAL_GetTick>
 8005e50:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e58:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005e60:	887b      	ldrh	r3, [r7, #2]
 8005e62:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e64:	7ffb      	ldrb	r3, [r7, #31]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d00c      	beq.n	8005e84 <HAL_SPI_TransmitReceive+0x4a>
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e70:	d106      	bne.n	8005e80 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d102      	bne.n	8005e80 <HAL_SPI_TransmitReceive+0x46>
 8005e7a:	7ffb      	ldrb	r3, [r7, #31]
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d001      	beq.n	8005e84 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005e80:	2302      	movs	r3, #2
 8005e82:	e17f      	b.n	8006184 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <HAL_SPI_TransmitReceive+0x5c>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <HAL_SPI_TransmitReceive+0x5c>
 8005e90:	887b      	ldrh	r3, [r7, #2]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e174      	b.n	8006184 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_SPI_TransmitReceive+0x6e>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e16d      	b.n	8006184 <HAL_SPI_TransmitReceive+0x34a>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d003      	beq.n	8005ec4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2205      	movs	r2, #5
 8005ec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	887a      	ldrh	r2, [r7, #2]
 8005ed4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	887a      	ldrh	r2, [r7, #2]
 8005eda:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	887a      	ldrh	r2, [r7, #2]
 8005ee6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	887a      	ldrh	r2, [r7, #2]
 8005eec:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f04:	2b40      	cmp	r3, #64	@ 0x40
 8005f06:	d007      	beq.n	8005f18 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f20:	d17e      	bne.n	8006020 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d002      	beq.n	8005f30 <HAL_SPI_TransmitReceive+0xf6>
 8005f2a:	8afb      	ldrh	r3, [r7, #22]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d16c      	bne.n	800600a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f34:	881a      	ldrh	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f40:	1c9a      	adds	r2, r3, #2
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f54:	e059      	b.n	800600a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d11b      	bne.n	8005f9c <HAL_SPI_TransmitReceive+0x162>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d016      	beq.n	8005f9c <HAL_SPI_TransmitReceive+0x162>
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d113      	bne.n	8005f9c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f78:	881a      	ldrh	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f84:	1c9a      	adds	r2, r3, #2
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d119      	bne.n	8005fde <HAL_SPI_TransmitReceive+0x1a4>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d014      	beq.n	8005fde <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fbe:	b292      	uxth	r2, r2
 8005fc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc6:	1c9a      	adds	r2, r3, #2
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fde:	f7fc fed9 	bl	8002d94 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d80d      	bhi.n	800600a <HAL_SPI_TransmitReceive+0x1d0>
 8005fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff4:	d009      	beq.n	800600a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e0bc      	b.n	8006184 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1a0      	bne.n	8005f56 <HAL_SPI_TransmitReceive+0x11c>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d19b      	bne.n	8005f56 <HAL_SPI_TransmitReceive+0x11c>
 800601e:	e082      	b.n	8006126 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <HAL_SPI_TransmitReceive+0x1f4>
 8006028:	8afb      	ldrh	r3, [r7, #22]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d171      	bne.n	8006112 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	330c      	adds	r3, #12
 8006038:	7812      	ldrb	r2, [r2, #0]
 800603a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800604a:	b29b      	uxth	r3, r3
 800604c:	3b01      	subs	r3, #1
 800604e:	b29a      	uxth	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006054:	e05d      	b.n	8006112 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b02      	cmp	r3, #2
 8006062:	d11c      	bne.n	800609e <HAL_SPI_TransmitReceive+0x264>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d017      	beq.n	800609e <HAL_SPI_TransmitReceive+0x264>
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	2b01      	cmp	r3, #1
 8006072:	d114      	bne.n	800609e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	330c      	adds	r3, #12
 800607e:	7812      	ldrb	r2, [r2, #0]
 8006080:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006090:	b29b      	uxth	r3, r3
 8006092:	3b01      	subs	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d119      	bne.n	80060e0 <HAL_SPI_TransmitReceive+0x2a6>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d014      	beq.n	80060e0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68da      	ldr	r2, [r3, #12]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	3b01      	subs	r3, #1
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060dc:	2301      	movs	r3, #1
 80060de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060e0:	f7fc fe58 	bl	8002d94 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d803      	bhi.n	80060f8 <HAL_SPI_TransmitReceive+0x2be>
 80060f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f6:	d102      	bne.n	80060fe <HAL_SPI_TransmitReceive+0x2c4>
 80060f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d109      	bne.n	8006112 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e038      	b.n	8006184 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d19c      	bne.n	8006056 <HAL_SPI_TransmitReceive+0x21c>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006120:	b29b      	uxth	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d197      	bne.n	8006056 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006126:	6a3a      	ldr	r2, [r7, #32]
 8006128:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f908 	bl	8006340 <SPI_EndRxTxTransaction>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d008      	beq.n	8006148 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2220      	movs	r2, #32
 800613a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e01d      	b.n	8006184 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006150:	2300      	movs	r3, #0
 8006152:	613b      	str	r3, [r7, #16]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	613b      	str	r3, [r7, #16]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	613b      	str	r3, [r7, #16]
 8006164:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006182:	2300      	movs	r3, #0
  }
}
 8006184:	4618      	mov	r0, r3
 8006186:	3728      	adds	r7, #40	@ 0x28
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	4613      	mov	r3, r2
 800619a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800619c:	f7fc fdfa 	bl	8002d94 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	4413      	add	r3, r2
 80061aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061ac:	f7fc fdf2 	bl	8002d94 <HAL_GetTick>
 80061b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061b2:	4b39      	ldr	r3, [pc, #228]	@ (8006298 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	015b      	lsls	r3, r3, #5
 80061b8:	0d1b      	lsrs	r3, r3, #20
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	fb02 f303 	mul.w	r3, r2, r3
 80061c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061c2:	e054      	b.n	800626e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ca:	d050      	beq.n	800626e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061cc:	f7fc fde2 	bl	8002d94 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d902      	bls.n	80061e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d13d      	bne.n	800625e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061fa:	d111      	bne.n	8006220 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006204:	d004      	beq.n	8006210 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800620e:	d107      	bne.n	8006220 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800621e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006228:	d10f      	bne.n	800624a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006248:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e017      	b.n	800628e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	3b01      	subs	r3, #1
 800626c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4013      	ands	r3, r2
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	429a      	cmp	r2, r3
 800627c:	bf0c      	ite	eq
 800627e:	2301      	moveq	r3, #1
 8006280:	2300      	movne	r3, #0
 8006282:	b2db      	uxtb	r3, r3
 8006284:	461a      	mov	r2, r3
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	429a      	cmp	r2, r3
 800628a:	d19b      	bne.n	80061c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3720      	adds	r7, #32
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	20000018 	.word	0x20000018

0800629c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af02      	add	r7, sp, #8
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062b0:	d111      	bne.n	80062d6 <SPI_EndRxTransaction+0x3a>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062ba:	d004      	beq.n	80062c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062c4:	d107      	bne.n	80062d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062d4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062de:	d117      	bne.n	8006310 <SPI_EndRxTransaction+0x74>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062e8:	d112      	bne.n	8006310 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2200      	movs	r2, #0
 80062f2:	2101      	movs	r1, #1
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7ff ff49 	bl	800618c <SPI_WaitFlagStateUntilTimeout>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01a      	beq.n	8006336 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006304:	f043 0220 	orr.w	r2, r3, #32
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e013      	b.n	8006338 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2200      	movs	r2, #0
 8006318:	2180      	movs	r1, #128	@ 0x80
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f7ff ff36 	bl	800618c <SPI_WaitFlagStateUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d007      	beq.n	8006336 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800632a:	f043 0220 	orr.w	r2, r3, #32
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e000      	b.n	8006338 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af02      	add	r7, sp, #8
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2201      	movs	r2, #1
 8006354:	2102      	movs	r1, #2
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f7ff ff18 	bl	800618c <SPI_WaitFlagStateUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d007      	beq.n	8006372 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006366:	f043 0220 	orr.w	r2, r3, #32
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e013      	b.n	800639a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2200      	movs	r2, #0
 800637a:	2180      	movs	r1, #128	@ 0x80
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f7ff ff05 	bl	800618c <SPI_WaitFlagStateUntilTimeout>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d007      	beq.n	8006398 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800638c:	f043 0220 	orr.w	r2, r3, #32
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e000      	b.n	800639a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b082      	sub	sp, #8
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e042      	b.n	800643a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d106      	bne.n	80063ce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7fc fb9f 	bl	8002b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2224      	movs	r2, #36	@ 0x24
 80063d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063e4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f82c 	bl	8006444 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	695a      	ldr	r2, [r3, #20]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800640a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800641a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2220      	movs	r2, #32
 8006426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
	...

08006444 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	431a      	orrs	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	4313      	orrs	r3, r2
 8006472:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800647e:	f023 030c 	bic.w	r3, r3, #12
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6812      	ldr	r2, [r2, #0]
 8006486:	68b9      	ldr	r1, [r7, #8]
 8006488:	430b      	orrs	r3, r1
 800648a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006558 <UART_SetConfig+0x114>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d103      	bne.n	80064b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80064ac:	f7ff f8fc 	bl	80056a8 <HAL_RCC_GetPCLK2Freq>
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	e002      	b.n	80064ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80064b4:	f7ff f8e4 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 80064b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	009a      	lsls	r2, r3, #2
 80064c4:	441a      	add	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d0:	4a22      	ldr	r2, [pc, #136]	@ (800655c <UART_SetConfig+0x118>)
 80064d2:	fba2 2303 	umull	r2, r3, r2, r3
 80064d6:	095b      	lsrs	r3, r3, #5
 80064d8:	0119      	lsls	r1, r3, #4
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4613      	mov	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	009a      	lsls	r2, r3, #2
 80064e4:	441a      	add	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80064f0:	4b1a      	ldr	r3, [pc, #104]	@ (800655c <UART_SetConfig+0x118>)
 80064f2:	fba3 0302 	umull	r0, r3, r3, r2
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	2064      	movs	r0, #100	@ 0x64
 80064fa:	fb00 f303 	mul.w	r3, r0, r3
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	011b      	lsls	r3, r3, #4
 8006502:	3332      	adds	r3, #50	@ 0x32
 8006504:	4a15      	ldr	r2, [pc, #84]	@ (800655c <UART_SetConfig+0x118>)
 8006506:	fba2 2303 	umull	r2, r3, r2, r3
 800650a:	095b      	lsrs	r3, r3, #5
 800650c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006510:	4419      	add	r1, r3
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	009a      	lsls	r2, r3, #2
 800651c:	441a      	add	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	fbb2 f2f3 	udiv	r2, r2, r3
 8006528:	4b0c      	ldr	r3, [pc, #48]	@ (800655c <UART_SetConfig+0x118>)
 800652a:	fba3 0302 	umull	r0, r3, r3, r2
 800652e:	095b      	lsrs	r3, r3, #5
 8006530:	2064      	movs	r0, #100	@ 0x64
 8006532:	fb00 f303 	mul.w	r3, r0, r3
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	011b      	lsls	r3, r3, #4
 800653a:	3332      	adds	r3, #50	@ 0x32
 800653c:	4a07      	ldr	r2, [pc, #28]	@ (800655c <UART_SetConfig+0x118>)
 800653e:	fba2 2303 	umull	r2, r3, r2, r3
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	f003 020f 	and.w	r2, r3, #15
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	440a      	add	r2, r1
 800654e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006550:	bf00      	nop
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40013800 	.word	0x40013800
 800655c:	51eb851f 	.word	0x51eb851f

08006560 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	4638      	mov	r0, r7
 800656a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	bc80      	pop	{r7}
 8006578:	4770      	bx	lr

0800657a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800657a:	b480      	push	{r7}
 800657c:	b085      	sub	sp, #20
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800658a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800658e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	b29a      	uxth	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bc80      	pop	{r7}
 80065a4:	4770      	bx	lr

080065a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065ae:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80065b2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	43db      	mvns	r3, r3
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	4013      	ands	r3, r2
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc80      	pop	{r7}
 80065d8:	4770      	bx	lr

080065da <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80065da:	b480      	push	{r7}
 80065dc:	b083      	sub	sp, #12
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	460b      	mov	r3, r1
 80065e4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bc80      	pop	{r7}
 80065f0:	4770      	bx	lr

080065f2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b085      	sub	sp, #20
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	60f8      	str	r0, [r7, #12]
 80065fa:	4638      	mov	r0, r7
 80065fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2201      	movs	r2, #1
 8006604:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr

0800662c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800662c:	b480      	push	{r7}
 800662e:	b09d      	sub	sp, #116	@ 0x74
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800664e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006652:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	78db      	ldrb	r3, [r3, #3]
 800665a:	2b03      	cmp	r3, #3
 800665c:	d81f      	bhi.n	800669e <USB_ActivateEndpoint+0x72>
 800665e:	a201      	add	r2, pc, #4	@ (adr r2, 8006664 <USB_ActivateEndpoint+0x38>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	08006675 	.word	0x08006675
 8006668:	08006691 	.word	0x08006691
 800666c:	080066a7 	.word	0x080066a7
 8006670:	08006683 	.word	0x08006683
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006674:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006678:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800667c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006680:	e012      	b.n	80066a8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006682:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006686:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800668a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800668e:	e00b      	b.n	80066a8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006690:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006694:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006698:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800669c:	e004      	b.n	80066a8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80066a4:	e000      	b.n	80066a8 <USB_ActivateEndpoint+0x7c>
      break;
 80066a6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	441a      	add	r2, r3
 80066b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	7812      	ldrb	r2, [r2, #0]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	441a      	add	r2, r3
 80066f6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80066fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800670a:	b29b      	uxth	r3, r3
 800670c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	7b1b      	ldrb	r3, [r3, #12]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f040 8178 	bne.w	8006a08 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 8084 	beq.w	800682a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	61bb      	str	r3, [r7, #24]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800672c:	b29b      	uxth	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	4413      	add	r3, r2
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	011a      	lsls	r2, r3, #4
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	88db      	ldrh	r3, [r3, #6]
 800674a:	085b      	lsrs	r3, r3, #1
 800674c:	b29b      	uxth	r3, r3
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	881b      	ldrh	r3, [r3, #0]
 8006762:	827b      	strh	r3, [r7, #18]
 8006764:	8a7b      	ldrh	r3, [r7, #18]
 8006766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01b      	beq.n	80067a6 <USB_ActivateEndpoint+0x17a>
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006780:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006784:	823b      	strh	r3, [r7, #16]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	441a      	add	r2, r3
 8006790:	8a3b      	ldrh	r3, [r7, #16]
 8006792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800679a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800679e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	78db      	ldrb	r3, [r3, #3]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d020      	beq.n	80067f0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067c4:	81bb      	strh	r3, [r7, #12]
 80067c6:	89bb      	ldrh	r3, [r7, #12]
 80067c8:	f083 0320 	eor.w	r3, r3, #32
 80067cc:	81bb      	strh	r3, [r7, #12]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	441a      	add	r2, r3
 80067d8:	89bb      	ldrh	r3, [r7, #12]
 80067da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	8013      	strh	r3, [r2, #0]
 80067ee:	e2d5      	b.n	8006d9c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006802:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006806:	81fb      	strh	r3, [r7, #14]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	441a      	add	r2, r3
 8006812:	89fb      	ldrh	r3, [r7, #14]
 8006814:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006818:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800681c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006824:	b29b      	uxth	r3, r3
 8006826:	8013      	strh	r3, [r2, #0]
 8006828:	e2b8      	b.n	8006d9c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	633b      	str	r3, [r7, #48]	@ 0x30
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006834:	b29b      	uxth	r3, r3
 8006836:	461a      	mov	r2, r3
 8006838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683a:	4413      	add	r3, r2
 800683c:	633b      	str	r3, [r7, #48]	@ 0x30
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	011a      	lsls	r2, r3, #4
 8006844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006846:	4413      	add	r3, r2
 8006848:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800684c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	88db      	ldrh	r3, [r3, #6]
 8006852:	085b      	lsrs	r3, r3, #1
 8006854:	b29b      	uxth	r3, r3
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	b29a      	uxth	r2, r3
 800685a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006868:	b29b      	uxth	r3, r3
 800686a:	461a      	mov	r2, r3
 800686c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686e:	4413      	add	r3, r2
 8006870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	011a      	lsls	r2, r3, #4
 8006878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687a:	4413      	add	r3, r2
 800687c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006880:	627b      	str	r3, [r7, #36]	@ 0x24
 8006882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	b29b      	uxth	r3, r3
 8006888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800688c:	b29a      	uxth	r2, r3
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	801a      	strh	r2, [r3, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	2b3e      	cmp	r3, #62	@ 0x3e
 8006898:	d91d      	bls.n	80068d6 <USB_ActivateEndpoint+0x2aa>
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	095b      	lsrs	r3, r3, #5
 80068a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f003 031f 	and.w	r3, r3, #31
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d102      	bne.n	80068b4 <USB_ActivateEndpoint+0x288>
 80068ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068b0:	3b01      	subs	r3, #1
 80068b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068bc:	b29b      	uxth	r3, r3
 80068be:	029b      	lsls	r3, r3, #10
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	4313      	orrs	r3, r2
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d2:	801a      	strh	r2, [r3, #0]
 80068d4:	e026      	b.n	8006924 <USB_ActivateEndpoint+0x2f8>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10a      	bne.n	80068f4 <USB_ActivateEndpoint+0x2c8>
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f0:	801a      	strh	r2, [r3, #0]
 80068f2:	e017      	b.n	8006924 <USB_ActivateEndpoint+0x2f8>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	085b      	lsrs	r3, r3, #1
 80068fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <USB_ActivateEndpoint+0x2e2>
 8006908:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800690a:	3301      	adds	r3, #1
 800690c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800690e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	b29a      	uxth	r2, r3
 8006914:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006916:	b29b      	uxth	r3, r3
 8006918:	029b      	lsls	r3, r3, #10
 800691a:	b29b      	uxth	r3, r3
 800691c:	4313      	orrs	r3, r2
 800691e:	b29a      	uxth	r2, r3
 8006920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006922:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006932:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01b      	beq.n	8006974 <USB_ActivateEndpoint+0x348>
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800694e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006952:	843b      	strh	r3, [r7, #32]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	441a      	add	r2, r3
 800695e:	8c3b      	ldrh	r3, [r7, #32]
 8006960:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006964:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006968:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800696c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006970:	b29b      	uxth	r3, r3
 8006972:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d124      	bne.n	80069c6 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	b29b      	uxth	r3, r3
 800698a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800698e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006992:	83bb      	strh	r3, [r7, #28]
 8006994:	8bbb      	ldrh	r3, [r7, #28]
 8006996:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800699a:	83bb      	strh	r3, [r7, #28]
 800699c:	8bbb      	ldrh	r3, [r7, #28]
 800699e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069a2:	83bb      	strh	r3, [r7, #28]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	441a      	add	r2, r3
 80069ae:	8bbb      	ldrh	r3, [r7, #28]
 80069b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	8013      	strh	r3, [r2, #0]
 80069c4:	e1ea      	b.n	8006d9c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069dc:	83fb      	strh	r3, [r7, #30]
 80069de:	8bfb      	ldrh	r3, [r7, #30]
 80069e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069e4:	83fb      	strh	r3, [r7, #30]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	441a      	add	r2, r3
 80069f0:	8bfb      	ldrh	r3, [r7, #30]
 80069f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	8013      	strh	r3, [r2, #0]
 8006a06:	e1c9      	b.n	8006d9c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	78db      	ldrb	r3, [r3, #3]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d11e      	bne.n	8006a4e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a26:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	441a      	add	r2, r3
 8006a34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006a38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a40:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	8013      	strh	r3, [r2, #0]
 8006a4c:	e01d      	b.n	8006a8a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006a60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a64:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	441a      	add	r2, r3
 8006a72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006a76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	461a      	mov	r2, r3
 8006a98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a9a:	4413      	add	r3, r2
 8006a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	011a      	lsls	r2, r3, #4
 8006aa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006aac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	891b      	ldrh	r3, [r3, #8]
 8006ab2:	085b      	lsrs	r3, r3, #1
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006abc:	801a      	strh	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	461a      	mov	r2, r3
 8006acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ace:	4413      	add	r3, r2
 8006ad0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	011a      	lsls	r2, r3, #4
 8006ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006ae0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	895b      	ldrh	r3, [r3, #10]
 8006ae6:	085b      	lsrs	r3, r3, #1
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006af0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	785b      	ldrb	r3, [r3, #1]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f040 8093 	bne.w	8006c22 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006b0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006b10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d01b      	beq.n	8006b50 <USB_ActivateEndpoint+0x524>
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b2e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	441a      	add	r2, r3
 8006b3a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006b3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006b5e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d01b      	beq.n	8006ba0 <USB_ActivateEndpoint+0x574>
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b7e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	441a      	add	r2, r3
 8006b8a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006b8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006bb8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006bba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006bbe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006bc0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006bc2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006bc6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	441a      	add	r2, r3
 8006bd2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006bd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bfe:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	441a      	add	r2, r3
 8006c0a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	8013      	strh	r3, [r2, #0]
 8006c20:	e0bc      	b.n	8006d9c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006c32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d01d      	beq.n	8006c7a <USB_ActivateEndpoint+0x64e>
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c54:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	441a      	add	r2, r3
 8006c62:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006c66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006c8a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d01d      	beq.n	8006cd2 <USB_ActivateEndpoint+0x6a6>
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cac:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	441a      	add	r2, r3
 8006cba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006cbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	78db      	ldrb	r3, [r3, #3]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d024      	beq.n	8006d24 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cf0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006cf4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006cf8:	f083 0320 	eor.w	r3, r3, #32
 8006cfc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	441a      	add	r2, r3
 8006d0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006d0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	8013      	strh	r3, [r2, #0]
 8006d22:	e01d      	b.n	8006d60 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d3a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	441a      	add	r2, r3
 8006d48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d76:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	441a      	add	r2, r3
 8006d84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006d88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006d9c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3774      	adds	r7, #116	@ 0x74
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bc80      	pop	{r7}
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop

08006dac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b08d      	sub	sp, #52	@ 0x34
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	7b1b      	ldrb	r3, [r3, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f040 808e 	bne.w	8006edc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	785b      	ldrb	r3, [r3, #1]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d044      	beq.n	8006e52 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	81bb      	strh	r3, [r7, #12]
 8006dd6:	89bb      	ldrh	r3, [r7, #12]
 8006dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01b      	beq.n	8006e18 <USB_DeactivateEndpoint+0x6c>
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006df6:	817b      	strh	r3, [r7, #10]
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	441a      	add	r2, r3
 8006e02:	897b      	ldrh	r3, [r7, #10]
 8006e04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e2e:	813b      	strh	r3, [r7, #8]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	441a      	add	r2, r3
 8006e3a:	893b      	ldrh	r3, [r7, #8]
 8006e3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	8013      	strh	r3, [r2, #0]
 8006e50:	e192      	b.n	8007178 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	827b      	strh	r3, [r7, #18]
 8006e60:	8a7b      	ldrh	r3, [r7, #18]
 8006e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d01b      	beq.n	8006ea2 <USB_DeactivateEndpoint+0xf6>
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e80:	823b      	strh	r3, [r7, #16]
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	441a      	add	r2, r3
 8006e8c:	8a3b      	ldrh	r3, [r7, #16]
 8006e8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006eb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb8:	81fb      	strh	r3, [r7, #14]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	441a      	add	r2, r3
 8006ec4:	89fb      	ldrh	r3, [r7, #14]
 8006ec6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ece:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	8013      	strh	r3, [r2, #0]
 8006eda:	e14d      	b.n	8007178 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	785b      	ldrb	r3, [r3, #1]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f040 80a5 	bne.w	8007030 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	843b      	strh	r3, [r7, #32]
 8006ef4:	8c3b      	ldrh	r3, [r7, #32]
 8006ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d01b      	beq.n	8006f36 <USB_DeactivateEndpoint+0x18a>
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f14:	83fb      	strh	r3, [r7, #30]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	441a      	add	r2, r3
 8006f20:	8bfb      	ldrh	r3, [r7, #30]
 8006f22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	83bb      	strh	r3, [r7, #28]
 8006f44:	8bbb      	ldrh	r3, [r7, #28]
 8006f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d01b      	beq.n	8006f86 <USB_DeactivateEndpoint+0x1da>
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f64:	837b      	strh	r3, [r7, #26]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	441a      	add	r2, r3
 8006f70:	8b7b      	ldrh	r3, [r7, #26]
 8006f72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f7e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f9c:	833b      	strh	r3, [r7, #24]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	441a      	add	r2, r3
 8006fa8:	8b3b      	ldrh	r3, [r7, #24]
 8006faa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fb6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd4:	82fb      	strh	r3, [r7, #22]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	441a      	add	r2, r3
 8006fe0:	8afb      	ldrh	r3, [r7, #22]
 8006fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	b29b      	uxth	r3, r3
 8007004:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007008:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800700c:	82bb      	strh	r3, [r7, #20]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	441a      	add	r2, r3
 8007018:	8abb      	ldrh	r3, [r7, #20]
 800701a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800701e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800702a:	b29b      	uxth	r3, r3
 800702c:	8013      	strh	r3, [r2, #0]
 800702e:	e0a3      	b.n	8007178 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800703e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01b      	beq.n	8007080 <USB_DeactivateEndpoint+0x2d4>
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800705a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800705e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	441a      	add	r2, r3
 800706a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800706c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007070:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007074:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800707c:	b29b      	uxth	r3, r3
 800707e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800708e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01b      	beq.n	80070d0 <USB_DeactivateEndpoint+0x324>
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	441a      	add	r2, r3
 80070ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80070bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	441a      	add	r2, r3
 80070f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80070f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007104:	b29b      	uxth	r3, r3
 8007106:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800711a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800711e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	441a      	add	r2, r3
 800712a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800712c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007130:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007134:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800713c:	b29b      	uxth	r3, r3
 800713e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	b29b      	uxth	r3, r3
 800714e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007156:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	441a      	add	r2, r3
 8007162:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007164:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007168:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800716c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007174:	b29b      	uxth	r3, r3
 8007176:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3734      	adds	r7, #52	@ 0x34
 800717e:	46bd      	mov	sp, r7
 8007180:	bc80      	pop	{r7}
 8007182:	4770      	bx	lr

08007184 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b0c2      	sub	sp, #264	@ 0x108
 8007188:	af00      	add	r7, sp, #0
 800718a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800718e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007192:	6018      	str	r0, [r3, #0]
 8007194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800719e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	785b      	ldrb	r3, [r3, #1]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	f040 86b7 	bne.w	8007f1e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80071b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	699a      	ldr	r2, [r3, #24]
 80071bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d908      	bls.n	80071de <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80071cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80071dc:	e007      	b.n	80071ee <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80071de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80071ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	7b1b      	ldrb	r3, [r3, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d13a      	bne.n	8007274 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80071fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6959      	ldr	r1, [r3, #20]
 800720a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	88da      	ldrh	r2, [r3, #6]
 8007216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800721a:	b29b      	uxth	r3, r3
 800721c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007220:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007224:	6800      	ldr	r0, [r0, #0]
 8007226:	f001 fc9c 	bl	8008b62 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800722a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800722e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	613b      	str	r3, [r7, #16]
 8007236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007244:	b29b      	uxth	r3, r3
 8007246:	461a      	mov	r2, r3
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	4413      	add	r3, r2
 800724c:	613b      	str	r3, [r7, #16]
 800724e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	011a      	lsls	r2, r3, #4
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	4413      	add	r3, r2
 8007260:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007264:	60fb      	str	r3, [r7, #12]
 8007266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	801a      	strh	r2, [r3, #0]
 8007270:	f000 be1f 	b.w	8007eb2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	78db      	ldrb	r3, [r3, #3]
 8007280:	2b02      	cmp	r3, #2
 8007282:	f040 8462 	bne.w	8007b4a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6a1a      	ldr	r2, [r3, #32]
 8007292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	429a      	cmp	r2, r3
 80072a0:	f240 83df 	bls.w	8007a62 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80072a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ca:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80072ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	441a      	add	r2, r3
 80072e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80072ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072f4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80072f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6a1a      	ldr	r2, [r3, #32]
 800730c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007310:	1ad2      	subs	r2, r2, r3
 8007312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800731e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	b29b      	uxth	r3, r3
 800733c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 81c7 	beq.w	80076d4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	633b      	str	r3, [r7, #48]	@ 0x30
 8007352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	785b      	ldrb	r3, [r3, #1]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d177      	bne.n	8007452 <USB_EPStartXfer+0x2ce>
 8007362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007366:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800736e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800737c:	b29b      	uxth	r3, r3
 800737e:	461a      	mov	r2, r3
 8007380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007382:	4413      	add	r3, r2
 8007384:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	011a      	lsls	r2, r3, #4
 8007394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007396:	4413      	add	r3, r2
 8007398:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800739c:	627b      	str	r3, [r7, #36]	@ 0x24
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ac:	801a      	strh	r2, [r3, #0]
 80073ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80073b4:	d921      	bls.n	80073fa <USB_EPStartXfer+0x276>
 80073b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ba:	095b      	lsrs	r3, r3, #5
 80073bc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80073c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c4:	f003 031f 	and.w	r3, r3, #31
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d104      	bne.n	80073d6 <USB_EPStartXfer+0x252>
 80073cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80073d0:	3b01      	subs	r3, #1
 80073d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29a      	uxth	r2, r3
 80073dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	029b      	lsls	r3, r3, #10
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	4313      	orrs	r3, r2
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f6:	801a      	strh	r2, [r3, #0]
 80073f8:	e050      	b.n	800749c <USB_EPStartXfer+0x318>
 80073fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10a      	bne.n	8007418 <USB_EPStartXfer+0x294>
 8007402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	b29b      	uxth	r3, r3
 8007408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800740c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007410:	b29a      	uxth	r2, r3
 8007412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007414:	801a      	strh	r2, [r3, #0]
 8007416:	e041      	b.n	800749c <USB_EPStartXfer+0x318>
 8007418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800741c:	085b      	lsrs	r3, r3, #1
 800741e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d004      	beq.n	8007438 <USB_EPStartXfer+0x2b4>
 800742e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007432:	3301      	adds	r3, #1
 8007434:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	b29a      	uxth	r2, r3
 800743e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007442:	b29b      	uxth	r3, r3
 8007444:	029b      	lsls	r3, r3, #10
 8007446:	b29b      	uxth	r3, r3
 8007448:	4313      	orrs	r3, r2
 800744a:	b29a      	uxth	r2, r3
 800744c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744e:	801a      	strh	r2, [r3, #0]
 8007450:	e024      	b.n	800749c <USB_EPStartXfer+0x318>
 8007452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	785b      	ldrb	r3, [r3, #1]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d11c      	bne.n	800749c <USB_EPStartXfer+0x318>
 8007462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007466:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007470:	b29b      	uxth	r3, r3
 8007472:	461a      	mov	r2, r3
 8007474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007476:	4413      	add	r3, r2
 8007478:	633b      	str	r3, [r7, #48]	@ 0x30
 800747a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	011a      	lsls	r2, r3, #4
 8007488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748a:	4413      	add	r3, r2
 800748c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007496:	b29a      	uxth	r2, r3
 8007498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800749a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800749c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	895b      	ldrh	r3, [r3, #10]
 80074a8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6959      	ldr	r1, [r3, #20]
 80074b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074bc:	b29b      	uxth	r3, r3
 80074be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074c2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074c6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074ca:	6800      	ldr	r0, [r0, #0]
 80074cc:	f001 fb49 	bl	8008b62 <USB_WritePMA>
            ep->xfer_buff += len;
 80074d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	695a      	ldr	r2, [r3, #20]
 80074dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e0:	441a      	add	r2, r3
 80074e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80074ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6a1a      	ldr	r2, [r3, #32]
 80074fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	429a      	cmp	r2, r3
 8007508:	d90f      	bls.n	800752a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800750a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800750e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6a1a      	ldr	r2, [r3, #32]
 8007516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800751a:	1ad2      	subs	r2, r2, r3
 800751c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	621a      	str	r2, [r3, #32]
 8007528:	e00e      	b.n	8007548 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800752a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800752e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800753a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2200      	movs	r2, #0
 8007546:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	785b      	ldrb	r3, [r3, #1]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d177      	bne.n	8007648 <USB_EPStartXfer+0x4c4>
 8007558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800755c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	61bb      	str	r3, [r7, #24]
 8007564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007568:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007572:	b29b      	uxth	r3, r3
 8007574:	461a      	mov	r2, r3
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	4413      	add	r3, r2
 800757a:	61bb      	str	r3, [r7, #24]
 800757c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	011a      	lsls	r2, r3, #4
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	4413      	add	r3, r2
 800758e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007592:	617b      	str	r3, [r7, #20]
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	b29b      	uxth	r3, r3
 800759a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800759e:	b29a      	uxth	r2, r3
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	801a      	strh	r2, [r3, #0]
 80075a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80075aa:	d921      	bls.n	80075f0 <USB_EPStartXfer+0x46c>
 80075ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b0:	095b      	lsrs	r3, r3, #5
 80075b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80075b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ba:	f003 031f 	and.w	r3, r3, #31
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d104      	bne.n	80075cc <USB_EPStartXfer+0x448>
 80075c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075c6:	3b01      	subs	r3, #1
 80075c8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	881b      	ldrh	r3, [r3, #0]
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	029b      	lsls	r3, r3, #10
 80075da:	b29b      	uxth	r3, r3
 80075dc:	4313      	orrs	r3, r2
 80075de:	b29b      	uxth	r3, r3
 80075e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	801a      	strh	r2, [r3, #0]
 80075ee:	e056      	b.n	800769e <USB_EPStartXfer+0x51a>
 80075f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10a      	bne.n	800760e <USB_EPStartXfer+0x48a>
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007606:	b29a      	uxth	r2, r3
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	801a      	strh	r2, [r3, #0]
 800760c:	e047      	b.n	800769e <USB_EPStartXfer+0x51a>
 800760e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007612:	085b      	lsrs	r3, r3, #1
 8007614:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	2b00      	cmp	r3, #0
 8007622:	d004      	beq.n	800762e <USB_EPStartXfer+0x4aa>
 8007624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007628:	3301      	adds	r3, #1
 800762a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	b29a      	uxth	r2, r3
 8007634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007638:	b29b      	uxth	r3, r3
 800763a:	029b      	lsls	r3, r3, #10
 800763c:	b29b      	uxth	r3, r3
 800763e:	4313      	orrs	r3, r2
 8007640:	b29a      	uxth	r2, r3
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	801a      	strh	r2, [r3, #0]
 8007646:	e02a      	b.n	800769e <USB_EPStartXfer+0x51a>
 8007648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	785b      	ldrb	r3, [r3, #1]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d122      	bne.n	800769e <USB_EPStartXfer+0x51a>
 8007658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	623b      	str	r3, [r7, #32]
 8007664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007668:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007672:	b29b      	uxth	r3, r3
 8007674:	461a      	mov	r2, r3
 8007676:	6a3b      	ldr	r3, [r7, #32]
 8007678:	4413      	add	r3, r2
 800767a:	623b      	str	r3, [r7, #32]
 800767c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	011a      	lsls	r2, r3, #4
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	4413      	add	r3, r2
 800768e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007692:	61fb      	str	r3, [r7, #28]
 8007694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007698:	b29a      	uxth	r2, r3
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800769e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	891b      	ldrh	r3, [r3, #8]
 80076aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6959      	ldr	r1, [r3, #20]
 80076ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076be:	b29b      	uxth	r3, r3
 80076c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076c4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80076c8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80076cc:	6800      	ldr	r0, [r0, #0]
 80076ce:	f001 fa48 	bl	8008b62 <USB_WritePMA>
 80076d2:	e3ee      	b.n	8007eb2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80076d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	785b      	ldrb	r3, [r3, #1]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d177      	bne.n	80077d4 <USB_EPStartXfer+0x650>
 80076e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076fe:	b29b      	uxth	r3, r3
 8007700:	461a      	mov	r2, r3
 8007702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007704:	4413      	add	r3, r2
 8007706:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	011a      	lsls	r2, r3, #4
 8007716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007718:	4413      	add	r3, r2
 800771a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800771e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	b29b      	uxth	r3, r3
 8007726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800772a:	b29a      	uxth	r2, r3
 800772c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800772e:	801a      	strh	r2, [r3, #0]
 8007730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007734:	2b3e      	cmp	r3, #62	@ 0x3e
 8007736:	d921      	bls.n	800777c <USB_EPStartXfer+0x5f8>
 8007738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773c:	095b      	lsrs	r3, r3, #5
 800773e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007746:	f003 031f 	and.w	r3, r3, #31
 800774a:	2b00      	cmp	r3, #0
 800774c:	d104      	bne.n	8007758 <USB_EPStartXfer+0x5d4>
 800774e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007752:	3b01      	subs	r3, #1
 8007754:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29a      	uxth	r2, r3
 800775e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007762:	b29b      	uxth	r3, r3
 8007764:	029b      	lsls	r3, r3, #10
 8007766:	b29b      	uxth	r3, r3
 8007768:	4313      	orrs	r3, r2
 800776a:	b29b      	uxth	r3, r3
 800776c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007774:	b29a      	uxth	r2, r3
 8007776:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007778:	801a      	strh	r2, [r3, #0]
 800777a:	e056      	b.n	800782a <USB_EPStartXfer+0x6a6>
 800777c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10a      	bne.n	800779a <USB_EPStartXfer+0x616>
 8007784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	b29b      	uxth	r3, r3
 800778a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800778e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007792:	b29a      	uxth	r2, r3
 8007794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007796:	801a      	strh	r2, [r3, #0]
 8007798:	e047      	b.n	800782a <USB_EPStartXfer+0x6a6>
 800779a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800779e:	085b      	lsrs	r3, r3, #1
 80077a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80077a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d004      	beq.n	80077ba <USB_EPStartXfer+0x636>
 80077b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077b4:	3301      	adds	r3, #1
 80077b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80077ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	b29a      	uxth	r2, r3
 80077c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	029b      	lsls	r3, r3, #10
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	4313      	orrs	r3, r2
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077d0:	801a      	strh	r2, [r3, #0]
 80077d2:	e02a      	b.n	800782a <USB_EPStartXfer+0x6a6>
 80077d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	785b      	ldrb	r3, [r3, #1]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d122      	bne.n	800782a <USB_EPStartXfer+0x6a6>
 80077e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80077f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077fe:	b29b      	uxth	r3, r3
 8007800:	461a      	mov	r2, r3
 8007802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007804:	4413      	add	r3, r2
 8007806:	653b      	str	r3, [r7, #80]	@ 0x50
 8007808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	011a      	lsls	r2, r3, #4
 8007816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007818:	4413      	add	r3, r2
 800781a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800781e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007824:	b29a      	uxth	r2, r3
 8007826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007828:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800782a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	891b      	ldrh	r3, [r3, #8]
 8007836:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800783a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6959      	ldr	r1, [r3, #20]
 8007846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800784a:	b29b      	uxth	r3, r3
 800784c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007850:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007854:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007858:	6800      	ldr	r0, [r0, #0]
 800785a:	f001 f982 	bl	8008b62 <USB_WritePMA>
            ep->xfer_buff += len;
 800785e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	695a      	ldr	r2, [r3, #20]
 800786a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786e:	441a      	add	r2, r3
 8007870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800787c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6a1a      	ldr	r2, [r3, #32]
 8007888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800788c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	429a      	cmp	r2, r3
 8007896:	d90f      	bls.n	80078b8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6a1a      	ldr	r2, [r3, #32]
 80078a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a8:	1ad2      	subs	r2, r2, r3
 80078aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	621a      	str	r2, [r3, #32]
 80078b6:	e00e      	b.n	80078d6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80078b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	6a1b      	ldr	r3, [r3, #32]
 80078c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80078c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2200      	movs	r2, #0
 80078d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80078e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	785b      	ldrb	r3, [r3, #1]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d177      	bne.n	80079e2 <USB_EPStartXfer+0x85e>
 80078f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80078fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007902:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800790c:	b29b      	uxth	r3, r3
 800790e:	461a      	mov	r2, r3
 8007910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007912:	4413      	add	r3, r2
 8007914:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	011a      	lsls	r2, r3, #4
 8007924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007926:	4413      	add	r3, r2
 8007928:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800792c:	637b      	str	r3, [r7, #52]	@ 0x34
 800792e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	b29b      	uxth	r3, r3
 8007934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007938:	b29a      	uxth	r2, r3
 800793a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800793c:	801a      	strh	r2, [r3, #0]
 800793e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007942:	2b3e      	cmp	r3, #62	@ 0x3e
 8007944:	d921      	bls.n	800798a <USB_EPStartXfer+0x806>
 8007946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800794a:	095b      	lsrs	r3, r3, #5
 800794c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007954:	f003 031f 	and.w	r3, r3, #31
 8007958:	2b00      	cmp	r3, #0
 800795a:	d104      	bne.n	8007966 <USB_EPStartXfer+0x7e2>
 800795c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007960:	3b01      	subs	r3, #1
 8007962:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	b29a      	uxth	r2, r3
 800796c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007970:	b29b      	uxth	r3, r3
 8007972:	029b      	lsls	r3, r3, #10
 8007974:	b29b      	uxth	r3, r3
 8007976:	4313      	orrs	r3, r2
 8007978:	b29b      	uxth	r3, r3
 800797a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800797e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007982:	b29a      	uxth	r2, r3
 8007984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007986:	801a      	strh	r2, [r3, #0]
 8007988:	e050      	b.n	8007a2c <USB_EPStartXfer+0x8a8>
 800798a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10a      	bne.n	80079a8 <USB_EPStartXfer+0x824>
 8007992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	b29b      	uxth	r3, r3
 8007998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800799c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a4:	801a      	strh	r2, [r3, #0]
 80079a6:	e041      	b.n	8007a2c <USB_EPStartXfer+0x8a8>
 80079a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ac:	085b      	lsrs	r3, r3, #1
 80079ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80079b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d004      	beq.n	80079c8 <USB_EPStartXfer+0x844>
 80079be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079c2:	3301      	adds	r3, #1
 80079c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80079c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	029b      	lsls	r3, r3, #10
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	4313      	orrs	r3, r2
 80079da:	b29a      	uxth	r2, r3
 80079dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079de:	801a      	strh	r2, [r3, #0]
 80079e0:	e024      	b.n	8007a2c <USB_EPStartXfer+0x8a8>
 80079e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	785b      	ldrb	r3, [r3, #1]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d11c      	bne.n	8007a2c <USB_EPStartXfer+0x8a8>
 80079f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	461a      	mov	r2, r3
 8007a04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a06:	4413      	add	r3, r2
 8007a08:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	011a      	lsls	r2, r3, #4
 8007a18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a2a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	895b      	ldrh	r3, [r3, #10]
 8007a38:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6959      	ldr	r1, [r3, #20]
 8007a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a52:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a56:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a5a:	6800      	ldr	r0, [r0, #0]
 8007a5c:	f001 f881 	bl	8008b62 <USB_WritePMA>
 8007a60:	e227      	b.n	8007eb2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a98:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	441a      	add	r2, r3
 8007ab6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007aba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007abe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ac2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ade:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	461a      	mov	r2, r3
 8007aec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007aee:	4413      	add	r3, r2
 8007af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	011a      	lsls	r2, r3, #4
 8007b00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b02:	4413      	add	r3, r2
 8007b04:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	891b      	ldrh	r3, [r3, #8]
 8007b20:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6959      	ldr	r1, [r3, #20]
 8007b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b3a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b3e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b42:	6800      	ldr	r0, [r0, #0]
 8007b44:	f001 f80d 	bl	8008b62 <USB_WritePMA>
 8007b48:	e1b3      	b.n	8007eb2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6a1a      	ldr	r2, [r3, #32]
 8007b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5a:	1ad2      	subs	r2, r2, r3
 8007b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f000 80c6 	beq.w	8007d1c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	785b      	ldrb	r3, [r3, #1]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d177      	bne.n	8007c9c <USB_EPStartXfer+0xb18>
 8007bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	461a      	mov	r2, r3
 8007bca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007bcc:	4413      	add	r3, r2
 8007bce:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	011a      	lsls	r2, r3, #4
 8007bde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007be0:	4413      	add	r3, r2
 8007be2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007be6:	667b      	str	r3, [r7, #100]	@ 0x64
 8007be8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bf6:	801a      	strh	r2, [r3, #0]
 8007bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bfe:	d921      	bls.n	8007c44 <USB_EPStartXfer+0xac0>
 8007c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c04:	095b      	lsrs	r3, r3, #5
 8007c06:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0e:	f003 031f 	and.w	r3, r3, #31
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d104      	bne.n	8007c20 <USB_EPStartXfer+0xa9c>
 8007c16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	029b      	lsls	r3, r3, #10
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	4313      	orrs	r3, r2
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c40:	801a      	strh	r2, [r3, #0]
 8007c42:	e050      	b.n	8007ce6 <USB_EPStartXfer+0xb62>
 8007c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10a      	bne.n	8007c62 <USB_EPStartXfer+0xade>
 8007c4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c5e:	801a      	strh	r2, [r3, #0]
 8007c60:	e041      	b.n	8007ce6 <USB_EPStartXfer+0xb62>
 8007c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c66:	085b      	lsrs	r3, r3, #1
 8007c68:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d004      	beq.n	8007c82 <USB_EPStartXfer+0xafe>
 8007c78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	029b      	lsls	r3, r3, #10
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	4313      	orrs	r3, r2
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c98:	801a      	strh	r2, [r3, #0]
 8007c9a:	e024      	b.n	8007ce6 <USB_EPStartXfer+0xb62>
 8007c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	785b      	ldrb	r3, [r3, #1]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d11c      	bne.n	8007ce6 <USB_EPStartXfer+0xb62>
 8007cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007cc0:	4413      	add	r3, r2
 8007cc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	011a      	lsls	r2, r3, #4
 8007cd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007cda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ce4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	895b      	ldrh	r3, [r3, #10]
 8007cf2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6959      	ldr	r1, [r3, #20]
 8007d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d0c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d10:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d14:	6800      	ldr	r0, [r0, #0]
 8007d16:	f000 ff24 	bl	8008b62 <USB_WritePMA>
 8007d1a:	e0ca      	b.n	8007eb2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	785b      	ldrb	r3, [r3, #1]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d177      	bne.n	8007e1c <USB_EPStartXfer+0xc98>
 8007d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	461a      	mov	r2, r3
 8007d4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d4c:	4413      	add	r3, r2
 8007d4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	011a      	lsls	r2, r3, #4
 8007d5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d60:	4413      	add	r3, r2
 8007d62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d76:	801a      	strh	r2, [r3, #0]
 8007d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d7e:	d921      	bls.n	8007dc4 <USB_EPStartXfer+0xc40>
 8007d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d84:	095b      	lsrs	r3, r3, #5
 8007d86:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d8e:	f003 031f 	and.w	r3, r3, #31
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d104      	bne.n	8007da0 <USB_EPStartXfer+0xc1c>
 8007d96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007da0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	029b      	lsls	r3, r3, #10
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	4313      	orrs	r3, r2
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dc0:	801a      	strh	r2, [r3, #0]
 8007dc2:	e05c      	b.n	8007e7e <USB_EPStartXfer+0xcfa>
 8007dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10a      	bne.n	8007de2 <USB_EPStartXfer+0xc5e>
 8007dcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dde:	801a      	strh	r2, [r3, #0]
 8007de0:	e04d      	b.n	8007e7e <USB_EPStartXfer+0xcfa>
 8007de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de6:	085b      	lsrs	r3, r3, #1
 8007de8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d004      	beq.n	8007e02 <USB_EPStartXfer+0xc7e>
 8007df8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	029b      	lsls	r3, r3, #10
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	4313      	orrs	r3, r2
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e18:	801a      	strh	r2, [r3, #0]
 8007e1a:	e030      	b.n	8007e7e <USB_EPStartXfer+0xcfa>
 8007e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	785b      	ldrb	r3, [r3, #1]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d128      	bne.n	8007e7e <USB_EPStartXfer+0xcfa>
 8007e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e50:	4413      	add	r3, r2
 8007e52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	011a      	lsls	r2, r3, #4
 8007e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e68:	4413      	add	r3, r2
 8007e6a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007e7c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	891b      	ldrh	r3, [r3, #8]
 8007e8a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6959      	ldr	r1, [r3, #20]
 8007e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007ea4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007ea8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007eac:	6800      	ldr	r0, [r0, #0]
 8007eae:	f000 fe58 	bl	8008b62 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ed4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ed8:	817b      	strh	r3, [r7, #10]
 8007eda:	897b      	ldrh	r3, [r7, #10]
 8007edc:	f083 0310 	eor.w	r3, r3, #16
 8007ee0:	817b      	strh	r3, [r7, #10]
 8007ee2:	897b      	ldrh	r3, [r7, #10]
 8007ee4:	f083 0320 	eor.w	r3, r3, #32
 8007ee8:	817b      	strh	r3, [r7, #10]
 8007eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	441a      	add	r2, r3
 8007f04:	897b      	ldrh	r3, [r7, #10]
 8007f06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	8013      	strh	r3, [r2, #0]
 8007f1a:	f000 bcde 	b.w	80088da <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	7b1b      	ldrb	r3, [r3, #12]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f040 80bb 	bne.w	80080a6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	699a      	ldr	r2, [r3, #24]
 8007f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d917      	bls.n	8007f7c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	699a      	ldr	r2, [r3, #24]
 8007f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f6c:	1ad2      	subs	r2, r2, r3
 8007f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	619a      	str	r2, [r3, #24]
 8007f7a:	e00e      	b.n	8007f9a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2200      	movs	r2, #0
 8007f98:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	461a      	mov	r2, r3
 8007fba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	011a      	lsls	r2, r3, #4
 8007fd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007fdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007fe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ff2:	801a      	strh	r2, [r3, #0]
 8007ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ffa:	d924      	bls.n	8008046 <USB_EPStartXfer+0xec2>
 8007ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008000:	095b      	lsrs	r3, r3, #5
 8008002:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800800a:	f003 031f 	and.w	r3, r3, #31
 800800e:	2b00      	cmp	r3, #0
 8008010:	d104      	bne.n	800801c <USB_EPStartXfer+0xe98>
 8008012:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008016:	3b01      	subs	r3, #1
 8008018:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800801c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	b29a      	uxth	r2, r3
 8008024:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008028:	b29b      	uxth	r3, r3
 800802a:	029b      	lsls	r3, r3, #10
 800802c:	b29b      	uxth	r3, r3
 800802e:	4313      	orrs	r3, r2
 8008030:	b29b      	uxth	r3, r3
 8008032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800803a:	b29a      	uxth	r2, r3
 800803c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008040:	801a      	strh	r2, [r3, #0]
 8008042:	f000 bc10 	b.w	8008866 <USB_EPStartXfer+0x16e2>
 8008046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10c      	bne.n	8008068 <USB_EPStartXfer+0xee4>
 800804e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	b29b      	uxth	r3, r3
 8008056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800805a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800805e:	b29a      	uxth	r2, r3
 8008060:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008064:	801a      	strh	r2, [r3, #0]
 8008066:	e3fe      	b.n	8008866 <USB_EPStartXfer+0x16e2>
 8008068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800806c:	085b      	lsrs	r3, r3, #1
 800806e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008076:	f003 0301 	and.w	r3, r3, #1
 800807a:	2b00      	cmp	r3, #0
 800807c:	d004      	beq.n	8008088 <USB_EPStartXfer+0xf04>
 800807e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008082:	3301      	adds	r3, #1
 8008084:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008088:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	b29a      	uxth	r2, r3
 8008090:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008094:	b29b      	uxth	r3, r3
 8008096:	029b      	lsls	r3, r3, #10
 8008098:	b29b      	uxth	r3, r3
 800809a:	4313      	orrs	r3, r2
 800809c:	b29a      	uxth	r2, r3
 800809e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080a2:	801a      	strh	r2, [r3, #0]
 80080a4:	e3df      	b.n	8008866 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80080a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	78db      	ldrb	r3, [r3, #3]
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	f040 8218 	bne.w	80084e8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80080b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	785b      	ldrb	r3, [r3, #1]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f040 809d 	bne.w	8008204 <USB_EPStartXfer+0x1080>
 80080ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	461a      	mov	r2, r3
 80080ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080ee:	4413      	add	r3, r2
 80080f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	011a      	lsls	r2, r3, #4
 8008102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008106:	4413      	add	r3, r2
 8008108:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800810c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	b29b      	uxth	r3, r3
 8008118:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800811c:	b29a      	uxth	r2, r3
 800811e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008122:	801a      	strh	r2, [r3, #0]
 8008124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	2b3e      	cmp	r3, #62	@ 0x3e
 8008132:	d92b      	bls.n	800818c <USB_EPStartXfer+0x1008>
 8008134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	095b      	lsrs	r3, r3, #5
 8008142:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800814a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	f003 031f 	and.w	r3, r3, #31
 8008156:	2b00      	cmp	r3, #0
 8008158:	d104      	bne.n	8008164 <USB_EPStartXfer+0xfe0>
 800815a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800815e:	3b01      	subs	r3, #1
 8008160:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	b29a      	uxth	r2, r3
 800816c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008170:	b29b      	uxth	r3, r3
 8008172:	029b      	lsls	r3, r3, #10
 8008174:	b29b      	uxth	r3, r3
 8008176:	4313      	orrs	r3, r2
 8008178:	b29b      	uxth	r3, r3
 800817a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800817e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008182:	b29a      	uxth	r2, r3
 8008184:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008188:	801a      	strh	r2, [r3, #0]
 800818a:	e070      	b.n	800826e <USB_EPStartXfer+0x10ea>
 800818c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10c      	bne.n	80081b6 <USB_EPStartXfer+0x1032>
 800819c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081b2:	801a      	strh	r2, [r3, #0]
 80081b4:	e05b      	b.n	800826e <USB_EPStartXfer+0x10ea>
 80081b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	085b      	lsrs	r3, r3, #1
 80081c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80081c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d004      	beq.n	80081e6 <USB_EPStartXfer+0x1062>
 80081dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081e0:	3301      	adds	r3, #1
 80081e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80081e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	029b      	lsls	r3, r3, #10
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	4313      	orrs	r3, r2
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008200:	801a      	strh	r2, [r3, #0]
 8008202:	e034      	b.n	800826e <USB_EPStartXfer+0x10ea>
 8008204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	785b      	ldrb	r3, [r3, #1]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d12c      	bne.n	800826e <USB_EPStartXfer+0x10ea>
 8008214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008218:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008226:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008230:	b29b      	uxth	r3, r3
 8008232:	461a      	mov	r2, r3
 8008234:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008238:	4413      	add	r3, r2
 800823a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800823e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	011a      	lsls	r2, r3, #4
 800824c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008250:	4413      	add	r3, r2
 8008252:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008256:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800825a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800825e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	b29a      	uxth	r2, r3
 8008268:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800826c:	801a      	strh	r2, [r3, #0]
 800826e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008272:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800827c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	785b      	ldrb	r3, [r3, #1]
 8008288:	2b00      	cmp	r3, #0
 800828a:	f040 809d 	bne.w	80083c8 <USB_EPStartXfer+0x1244>
 800828e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008292:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800829c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	461a      	mov	r2, r3
 80082ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082b2:	4413      	add	r3, r2
 80082b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80082b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	011a      	lsls	r2, r3, #4
 80082c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082ca:	4413      	add	r3, r2
 80082cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80082d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80082d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	b29b      	uxth	r3, r3
 80082dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082e6:	801a      	strh	r2, [r3, #0]
 80082e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80082f6:	d92b      	bls.n	8008350 <USB_EPStartXfer+0x11cc>
 80082f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	095b      	lsrs	r3, r3, #5
 8008306:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800830a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800830e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	f003 031f 	and.w	r3, r3, #31
 800831a:	2b00      	cmp	r3, #0
 800831c:	d104      	bne.n	8008328 <USB_EPStartXfer+0x11a4>
 800831e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008322:	3b01      	subs	r3, #1
 8008324:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008328:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	b29a      	uxth	r2, r3
 8008330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008334:	b29b      	uxth	r3, r3
 8008336:	029b      	lsls	r3, r3, #10
 8008338:	b29b      	uxth	r3, r3
 800833a:	4313      	orrs	r3, r2
 800833c:	b29b      	uxth	r3, r3
 800833e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008346:	b29a      	uxth	r2, r3
 8008348:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800834c:	801a      	strh	r2, [r3, #0]
 800834e:	e069      	b.n	8008424 <USB_EPStartXfer+0x12a0>
 8008350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10c      	bne.n	800837a <USB_EPStartXfer+0x11f6>
 8008360:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	b29b      	uxth	r3, r3
 8008368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800836c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008370:	b29a      	uxth	r2, r3
 8008372:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008376:	801a      	strh	r2, [r3, #0]
 8008378:	e054      	b.n	8008424 <USB_EPStartXfer+0x12a0>
 800837a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	085b      	lsrs	r3, r3, #1
 8008388:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800838c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b00      	cmp	r3, #0
 800839e:	d004      	beq.n	80083aa <USB_EPStartXfer+0x1226>
 80083a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083a4:	3301      	adds	r3, #1
 80083a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	029b      	lsls	r3, r3, #10
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	4313      	orrs	r3, r2
 80083be:	b29a      	uxth	r2, r3
 80083c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083c4:	801a      	strh	r2, [r3, #0]
 80083c6:	e02d      	b.n	8008424 <USB_EPStartXfer+0x12a0>
 80083c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	785b      	ldrb	r3, [r3, #1]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d125      	bne.n	8008424 <USB_EPStartXfer+0x12a0>
 80083d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	461a      	mov	r2, r3
 80083ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80083ee:	4413      	add	r3, r2
 80083f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80083f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	011a      	lsls	r2, r3, #4
 8008402:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008406:	4413      	add	r3, r2
 8008408:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800840c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	b29a      	uxth	r2, r3
 800841e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008422:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 8218 	beq.w	8008866 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800843a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008456:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800845a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d005      	beq.n	800846e <USB_EPStartXfer+0x12ea>
 8008462:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10d      	bne.n	800848a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800846e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008476:	2b00      	cmp	r3, #0
 8008478:	f040 81f5 	bne.w	8008866 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800847c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008484:	2b00      	cmp	r3, #0
 8008486:	f040 81ee 	bne.w	8008866 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800848a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084b0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80084b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	441a      	add	r2, r3
 80084ce:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80084d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	8013      	strh	r3, [r2, #0]
 80084e6:	e1be      	b.n	8008866 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80084e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	78db      	ldrb	r3, [r3, #3]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	f040 81b4 	bne.w	8008862 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80084fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	699a      	ldr	r2, [r3, #24]
 8008506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800850a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	429a      	cmp	r2, r3
 8008514:	d917      	bls.n	8008546 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800851a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800852a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	699a      	ldr	r2, [r3, #24]
 8008532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008536:	1ad2      	subs	r2, r2, r3
 8008538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800853c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	619a      	str	r2, [r3, #24]
 8008544:	e00e      	b.n	8008564 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800854a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800855a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2200      	movs	r2, #0
 8008562:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	785b      	ldrb	r3, [r3, #1]
 8008570:	2b00      	cmp	r3, #0
 8008572:	f040 8085 	bne.w	8008680 <USB_EPStartXfer+0x14fc>
 8008576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800857a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008588:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008592:	b29b      	uxth	r3, r3
 8008594:	461a      	mov	r2, r3
 8008596:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800859a:	4413      	add	r3, r2
 800859c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	011a      	lsls	r2, r3, #4
 80085ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085b2:	4413      	add	r3, r2
 80085b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80085b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085c0:	881b      	ldrh	r3, [r3, #0]
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085ce:	801a      	strh	r2, [r3, #0]
 80085d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80085d6:	d923      	bls.n	8008620 <USB_EPStartXfer+0x149c>
 80085d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085dc:	095b      	lsrs	r3, r3, #5
 80085de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80085e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085e6:	f003 031f 	and.w	r3, r3, #31
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d104      	bne.n	80085f8 <USB_EPStartXfer+0x1474>
 80085ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085f2:	3b01      	subs	r3, #1
 80085f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80085f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	b29a      	uxth	r2, r3
 8008600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008604:	b29b      	uxth	r3, r3
 8008606:	029b      	lsls	r3, r3, #10
 8008608:	b29b      	uxth	r3, r3
 800860a:	4313      	orrs	r3, r2
 800860c:	b29b      	uxth	r3, r3
 800860e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008616:	b29a      	uxth	r2, r3
 8008618:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800861c:	801a      	strh	r2, [r3, #0]
 800861e:	e060      	b.n	80086e2 <USB_EPStartXfer+0x155e>
 8008620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10c      	bne.n	8008642 <USB_EPStartXfer+0x14be>
 8008628:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	b29b      	uxth	r3, r3
 8008630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008638:	b29a      	uxth	r2, r3
 800863a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800863e:	801a      	strh	r2, [r3, #0]
 8008640:	e04f      	b.n	80086e2 <USB_EPStartXfer+0x155e>
 8008642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008646:	085b      	lsrs	r3, r3, #1
 8008648:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800864c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008650:	f003 0301 	and.w	r3, r3, #1
 8008654:	2b00      	cmp	r3, #0
 8008656:	d004      	beq.n	8008662 <USB_EPStartXfer+0x14de>
 8008658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800865c:	3301      	adds	r3, #1
 800865e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008662:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008666:	881b      	ldrh	r3, [r3, #0]
 8008668:	b29a      	uxth	r2, r3
 800866a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800866e:	b29b      	uxth	r3, r3
 8008670:	029b      	lsls	r3, r3, #10
 8008672:	b29b      	uxth	r3, r3
 8008674:	4313      	orrs	r3, r2
 8008676:	b29a      	uxth	r2, r3
 8008678:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800867c:	801a      	strh	r2, [r3, #0]
 800867e:	e030      	b.n	80086e2 <USB_EPStartXfer+0x155e>
 8008680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	785b      	ldrb	r3, [r3, #1]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d128      	bne.n	80086e2 <USB_EPStartXfer+0x155e>
 8008690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008694:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800869e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	461a      	mov	r2, r3
 80086b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086b4:	4413      	add	r3, r2
 80086b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80086ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	011a      	lsls	r2, r3, #4
 80086c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086cc:	4413      	add	r3, r2
 80086ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80086d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80086d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086da:	b29a      	uxth	r2, r3
 80086dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80086e0:	801a      	strh	r2, [r3, #0]
 80086e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	785b      	ldrb	r3, [r3, #1]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f040 8085 	bne.w	800880c <USB_EPStartXfer+0x1688>
 8008702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008714:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800871e:	b29b      	uxth	r3, r3
 8008720:	461a      	mov	r2, r3
 8008722:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008726:	4413      	add	r3, r2
 8008728:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800872c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	011a      	lsls	r2, r3, #4
 800873a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800873e:	4413      	add	r3, r2
 8008740:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008744:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008748:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	b29b      	uxth	r3, r3
 8008750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008754:	b29a      	uxth	r2, r3
 8008756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800875a:	801a      	strh	r2, [r3, #0]
 800875c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008760:	2b3e      	cmp	r3, #62	@ 0x3e
 8008762:	d923      	bls.n	80087ac <USB_EPStartXfer+0x1628>
 8008764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008768:	095b      	lsrs	r3, r3, #5
 800876a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800876e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008772:	f003 031f 	and.w	r3, r3, #31
 8008776:	2b00      	cmp	r3, #0
 8008778:	d104      	bne.n	8008784 <USB_EPStartXfer+0x1600>
 800877a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800877e:	3b01      	subs	r3, #1
 8008780:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008784:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	b29a      	uxth	r2, r3
 800878c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008790:	b29b      	uxth	r3, r3
 8008792:	029b      	lsls	r3, r3, #10
 8008794:	b29b      	uxth	r3, r3
 8008796:	4313      	orrs	r3, r2
 8008798:	b29b      	uxth	r3, r3
 800879a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800879e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087a8:	801a      	strh	r2, [r3, #0]
 80087aa:	e05c      	b.n	8008866 <USB_EPStartXfer+0x16e2>
 80087ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10c      	bne.n	80087ce <USB_EPStartXfer+0x164a>
 80087b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087ca:	801a      	strh	r2, [r3, #0]
 80087cc:	e04b      	b.n	8008866 <USB_EPStartXfer+0x16e2>
 80087ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d2:	085b      	lsrs	r3, r3, #1
 80087d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d004      	beq.n	80087ee <USB_EPStartXfer+0x166a>
 80087e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087e8:	3301      	adds	r3, #1
 80087ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087f2:	881b      	ldrh	r3, [r3, #0]
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	029b      	lsls	r3, r3, #10
 80087fe:	b29b      	uxth	r3, r3
 8008800:	4313      	orrs	r3, r2
 8008802:	b29a      	uxth	r2, r3
 8008804:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008808:	801a      	strh	r2, [r3, #0]
 800880a:	e02c      	b.n	8008866 <USB_EPStartXfer+0x16e2>
 800880c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	785b      	ldrb	r3, [r3, #1]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d124      	bne.n	8008866 <USB_EPStartXfer+0x16e2>
 800881c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008820:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800882a:	b29b      	uxth	r3, r3
 800882c:	461a      	mov	r2, r3
 800882e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008832:	4413      	add	r3, r2
 8008834:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800883c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	011a      	lsls	r2, r3, #4
 8008846:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800884a:	4413      	add	r3, r2
 800884c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008850:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008858:	b29a      	uxth	r2, r3
 800885a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800885e:	801a      	strh	r2, [r3, #0]
 8008860:	e001      	b.n	8008866 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e03a      	b.n	80088dc <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800886a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	881b      	ldrh	r3, [r3, #0]
 8008882:	b29b      	uxth	r3, r3
 8008884:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800888c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008890:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008894:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008898:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800889c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80088a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80088a4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80088a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	441a      	add	r2, r3
 80088c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80088c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b085      	sub	sp, #20
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	785b      	ldrb	r3, [r3, #1]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d020      	beq.n	800893a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	b29b      	uxth	r3, r3
 8008906:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800890a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800890e:	81bb      	strh	r3, [r7, #12]
 8008910:	89bb      	ldrh	r3, [r7, #12]
 8008912:	f083 0310 	eor.w	r3, r3, #16
 8008916:	81bb      	strh	r3, [r7, #12]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	441a      	add	r2, r3
 8008922:	89bb      	ldrh	r3, [r7, #12]
 8008924:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008928:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800892c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008934:	b29b      	uxth	r3, r3
 8008936:	8013      	strh	r3, [r2, #0]
 8008938:	e01f      	b.n	800897a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	b29b      	uxth	r3, r3
 8008948:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800894c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008950:	81fb      	strh	r3, [r7, #14]
 8008952:	89fb      	ldrh	r3, [r7, #14]
 8008954:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008958:	81fb      	strh	r3, [r7, #14]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	441a      	add	r2, r3
 8008964:	89fb      	ldrh	r3, [r7, #14]
 8008966:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800896a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800896e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008976:	b29b      	uxth	r3, r3
 8008978:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	bc80      	pop	{r7}
 8008984:	4770      	bx	lr

08008986 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008986:	b480      	push	{r7}
 8008988:	b087      	sub	sp, #28
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	7b1b      	ldrb	r3, [r3, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	f040 809d 	bne.w	8008ad4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	785b      	ldrb	r3, [r3, #1]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d04c      	beq.n	8008a3c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	823b      	strh	r3, [r7, #16]
 80089b0:	8a3b      	ldrh	r3, [r7, #16]
 80089b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d01b      	beq.n	80089f2 <USB_EPClearStall+0x6c>
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089d0:	81fb      	strh	r3, [r7, #14]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	441a      	add	r2, r3
 80089dc:	89fb      	ldrh	r3, [r7, #14]
 80089de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	78db      	ldrb	r3, [r3, #3]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d06c      	beq.n	8008ad4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4413      	add	r3, r2
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a10:	81bb      	strh	r3, [r7, #12]
 8008a12:	89bb      	ldrh	r3, [r7, #12]
 8008a14:	f083 0320 	eor.w	r3, r3, #32
 8008a18:	81bb      	strh	r3, [r7, #12]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	441a      	add	r2, r3
 8008a24:	89bb      	ldrh	r3, [r7, #12]
 8008a26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	8013      	strh	r3, [r2, #0]
 8008a3a:	e04b      	b.n	8008ad4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	881b      	ldrh	r3, [r3, #0]
 8008a48:	82fb      	strh	r3, [r7, #22]
 8008a4a:	8afb      	ldrh	r3, [r7, #22]
 8008a4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d01b      	beq.n	8008a8c <USB_EPClearStall+0x106>
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4413      	add	r3, r2
 8008a5e:	881b      	ldrh	r3, [r3, #0]
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a6a:	82bb      	strh	r3, [r7, #20]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	441a      	add	r2, r3
 8008a76:	8abb      	ldrh	r3, [r7, #20]
 8008a78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	881b      	ldrh	r3, [r3, #0]
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aa2:	827b      	strh	r3, [r7, #18]
 8008aa4:	8a7b      	ldrh	r3, [r7, #18]
 8008aa6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008aaa:	827b      	strh	r3, [r7, #18]
 8008aac:	8a7b      	ldrh	r3, [r7, #18]
 8008aae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008ab2:	827b      	strh	r3, [r7, #18]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	441a      	add	r2, r3
 8008abe:	8a7b      	ldrh	r3, [r7, #18]
 8008ac0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ac4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	371c      	adds	r7, #28
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bc80      	pop	{r7}
 8008ade:	4770      	bx	lr

08008ae0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008aec:	78fb      	ldrb	r3, [r7, #3]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d103      	bne.n	8008afa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2280      	movs	r2, #128	@ 0x80
 8008af6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bc80      	pop	{r7}
 8008b04:	4770      	bx	lr

08008b06 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b083      	sub	sp, #12
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bc80      	pop	{r7}
 8008b18:	4770      	bx	lr

08008b1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b083      	sub	sp, #12
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bc80      	pop	{r7}
 8008b2c:	4770      	bx	lr

08008b2e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008b2e:	b480      	push	{r7}
 8008b30:	b085      	sub	sp, #20
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b40:	68fb      	ldr	r3, [r7, #12]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bc80      	pop	{r7}
 8008b4a:	4770      	bx	lr

08008b4c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bc80      	pop	{r7}
 8008b60:	4770      	bx	lr

08008b62 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b08b      	sub	sp, #44	@ 0x2c
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	60b9      	str	r1, [r7, #8]
 8008b6c:	4611      	mov	r1, r2
 8008b6e:	461a      	mov	r2, r3
 8008b70:	460b      	mov	r3, r1
 8008b72:	80fb      	strh	r3, [r7, #6]
 8008b74:	4613      	mov	r3, r2
 8008b76:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008b78:	88bb      	ldrh	r3, [r7, #4]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	085b      	lsrs	r3, r3, #1
 8008b7e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b88:	88fb      	ldrh	r3, [r7, #6]
 8008b8a:	005a      	lsls	r2, r3, #1
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	4413      	add	r3, r2
 8008b90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b94:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b9a:	e01f      	b.n	8008bdc <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	b21b      	sxth	r3, r3
 8008baa:	021b      	lsls	r3, r3, #8
 8008bac:	b21a      	sxth	r2, r3
 8008bae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	b21b      	sxth	r3, r3
 8008bb6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008bb8:	6a3b      	ldr	r3, [r7, #32]
 8008bba:	8a7a      	ldrh	r2, [r7, #18]
 8008bbc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008bbe:	6a3b      	ldr	r3, [r7, #32]
 8008bc0:	3302      	adds	r3, #2
 8008bc2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	3302      	adds	r3, #2
 8008bc8:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1dc      	bne.n	8008b9c <USB_WritePMA+0x3a>
  }
}
 8008be2:	bf00      	nop
 8008be4:	bf00      	nop
 8008be6:	372c      	adds	r7, #44	@ 0x2c
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bc80      	pop	{r7}
 8008bec:	4770      	bx	lr

08008bee <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b08b      	sub	sp, #44	@ 0x2c
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	60f8      	str	r0, [r7, #12]
 8008bf6:	60b9      	str	r1, [r7, #8]
 8008bf8:	4611      	mov	r1, r2
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	80fb      	strh	r3, [r7, #6]
 8008c00:	4613      	mov	r3, r2
 8008c02:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008c04:	88bb      	ldrh	r3, [r7, #4]
 8008c06:	085b      	lsrs	r3, r3, #1
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c14:	88fb      	ldrh	r3, [r7, #6]
 8008c16:	005a      	lsls	r2, r3, #1
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c20:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c26:	e01b      	b.n	8008c60 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008c28:	6a3b      	ldr	r3, [r7, #32]
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	3302      	adds	r3, #2
 8008c34:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	3301      	adds	r3, #1
 8008c42:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	0a1b      	lsrs	r3, r3, #8
 8008c48:	b2da      	uxtb	r2, r3
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	3301      	adds	r3, #1
 8008c52:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008c54:	6a3b      	ldr	r3, [r7, #32]
 8008c56:	3302      	adds	r3, #2
 8008c58:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1e0      	bne.n	8008c28 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008c66:	88bb      	ldrh	r3, [r7, #4]
 8008c68:	f003 0301 	and.w	r3, r3, #1
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d007      	beq.n	8008c82 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008c72:	6a3b      	ldr	r3, [r7, #32]
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	701a      	strb	r2, [r3, #0]
  }
}
 8008c82:	bf00      	nop
 8008c84:	372c      	adds	r7, #44	@ 0x2c
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bc80      	pop	{r7}
 8008c8a:	4770      	bx	lr

08008c8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	460b      	mov	r3, r1
 8008c96:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	7c1b      	ldrb	r3, [r3, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d115      	bne.n	8008cd0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ca4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ca8:	2202      	movs	r2, #2
 8008caa:	2181      	movs	r1, #129	@ 0x81
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f001 fe82 	bl	800a9b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008cb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f001 fe78 	bl	800a9b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008cce:	e012      	b.n	8008cf6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008cd0:	2340      	movs	r3, #64	@ 0x40
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	2181      	movs	r1, #129	@ 0x81
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f001 fe6d 	bl	800a9b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ce2:	2340      	movs	r3, #64	@ 0x40
 8008ce4:	2202      	movs	r2, #2
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f001 fe64 	bl	800a9b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008cf6:	2308      	movs	r3, #8
 8008cf8:	2203      	movs	r2, #3
 8008cfa:	2182      	movs	r1, #130	@ 0x82
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f001 fe5a 	bl	800a9b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d08:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008d0c:	f001 ff7a 	bl	800ac04 <USBD_static_malloc>
 8008d10:	4602      	mov	r2, r0
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d102      	bne.n	8008d28 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008d22:	2301      	movs	r3, #1
 8008d24:	73fb      	strb	r3, [r7, #15]
 8008d26:	e026      	b.n	8008d76 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d2e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	7c1b      	ldrb	r3, [r3, #16]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d109      	bne.n	8008d66 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f001 ff19 	bl	800ab96 <USBD_LL_PrepareReceive>
 8008d64:	e007      	b.n	8008d76 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d6c:	2340      	movs	r3, #64	@ 0x40
 8008d6e:	2101      	movs	r1, #1
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f001 ff10 	bl	800ab96 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	460b      	mov	r3, r1
 8008d8a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008d90:	2181      	movs	r1, #129	@ 0x81
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f001 fe35 	bl	800aa02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008d9e:	2101      	movs	r1, #1
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f001 fe2e 	bl	800aa02 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008dae:	2182      	movs	r1, #130	@ 0x82
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f001 fe26 	bl	800aa02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00e      	beq.n	8008de4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f001 ff20 	bl	800ac1c <USBD_static_free>
    pdev->pClassData = NULL;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b086      	sub	sp, #24
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dfe:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d039      	beq.n	8008e8c <USBD_CDC_Setup+0x9e>
 8008e18:	2b20      	cmp	r3, #32
 8008e1a:	d17f      	bne.n	8008f1c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	88db      	ldrh	r3, [r3, #6]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d029      	beq.n	8008e78 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	b25b      	sxtb	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	da11      	bge.n	8008e52 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008e3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	88d2      	ldrh	r2, [r2, #6]
 8008e40:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e42:	6939      	ldr	r1, [r7, #16]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	88db      	ldrh	r3, [r3, #6]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f001 fa06 	bl	800a25c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008e50:	e06b      	b.n	8008f2a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	785a      	ldrb	r2, [r3, #1]
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	88db      	ldrh	r3, [r3, #6]
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e68:	6939      	ldr	r1, [r7, #16]
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	88db      	ldrh	r3, [r3, #6]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f001 fa21 	bl	800a2b8 <USBD_CtlPrepareRx>
      break;
 8008e76:	e058      	b.n	8008f2a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	7850      	ldrb	r0, [r2, #1]
 8008e84:	2200      	movs	r2, #0
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	4798      	blx	r3
      break;
 8008e8a:	e04e      	b.n	8008f2a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	785b      	ldrb	r3, [r3, #1]
 8008e90:	2b0b      	cmp	r3, #11
 8008e92:	d02e      	beq.n	8008ef2 <USBD_CDC_Setup+0x104>
 8008e94:	2b0b      	cmp	r3, #11
 8008e96:	dc38      	bgt.n	8008f0a <USBD_CDC_Setup+0x11c>
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d002      	beq.n	8008ea2 <USBD_CDC_Setup+0xb4>
 8008e9c:	2b0a      	cmp	r3, #10
 8008e9e:	d014      	beq.n	8008eca <USBD_CDC_Setup+0xdc>
 8008ea0:	e033      	b.n	8008f0a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d107      	bne.n	8008ebc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008eac:	f107 030c 	add.w	r3, r7, #12
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f001 f9d1 	bl	800a25c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008eba:	e02e      	b.n	8008f1a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f001 f962 	bl	800a188 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	75fb      	strb	r3, [r7, #23]
          break;
 8008ec8:	e027      	b.n	8008f1a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	d107      	bne.n	8008ee4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008ed4:	f107 030f 	add.w	r3, r7, #15
 8008ed8:	2201      	movs	r2, #1
 8008eda:	4619      	mov	r1, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f001 f9bd 	bl	800a25c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ee2:	e01a      	b.n	8008f1a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f001 f94e 	bl	800a188 <USBD_CtlError>
            ret = USBD_FAIL;
 8008eec:	2302      	movs	r3, #2
 8008eee:	75fb      	strb	r3, [r7, #23]
          break;
 8008ef0:	e013      	b.n	8008f1a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ef8:	2b03      	cmp	r3, #3
 8008efa:	d00d      	beq.n	8008f18 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f001 f942 	bl	800a188 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f04:	2302      	movs	r3, #2
 8008f06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f08:	e006      	b.n	8008f18 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f001 f93b 	bl	800a188 <USBD_CtlError>
          ret = USBD_FAIL;
 8008f12:	2302      	movs	r3, #2
 8008f14:	75fb      	strb	r3, [r7, #23]
          break;
 8008f16:	e000      	b.n	8008f1a <USBD_CDC_Setup+0x12c>
          break;
 8008f18:	bf00      	nop
      }
      break;
 8008f1a:	e006      	b.n	8008f2a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f001 f932 	bl	800a188 <USBD_CtlError>
      ret = USBD_FAIL;
 8008f24:	2302      	movs	r3, #2
 8008f26:	75fb      	strb	r3, [r7, #23]
      break;
 8008f28:	bf00      	nop
  }

  return ret;
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f46:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008f4e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d03a      	beq.n	8008fd0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008f5a:	78fa      	ldrb	r2, [r7, #3]
 8008f5c:	6879      	ldr	r1, [r7, #4]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	4413      	add	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	440b      	add	r3, r1
 8008f68:	331c      	adds	r3, #28
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d029      	beq.n	8008fc4 <USBD_CDC_DataIn+0x90>
 8008f70:	78fa      	ldrb	r2, [r7, #3]
 8008f72:	6879      	ldr	r1, [r7, #4]
 8008f74:	4613      	mov	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	440b      	add	r3, r1
 8008f7e:	331c      	adds	r3, #28
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	78f9      	ldrb	r1, [r7, #3]
 8008f84:	68b8      	ldr	r0, [r7, #8]
 8008f86:	460b      	mov	r3, r1
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	440b      	add	r3, r1
 8008f8c:	00db      	lsls	r3, r3, #3
 8008f8e:	4403      	add	r3, r0
 8008f90:	3320      	adds	r3, #32
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f98:	fb01 f303 	mul.w	r3, r1, r3
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d110      	bne.n	8008fc4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008fa2:	78fa      	ldrb	r2, [r7, #3]
 8008fa4:	6879      	ldr	r1, [r7, #4]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4413      	add	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	440b      	add	r3, r1
 8008fb0:	331c      	adds	r3, #28
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008fb6:	78f9      	ldrb	r1, [r7, #3]
 8008fb8:	2300      	movs	r3, #0
 8008fba:	2200      	movs	r2, #0
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f001 fdc7 	bl	800ab50 <USBD_LL_Transmit>
 8008fc2:	e003      	b.n	8008fcc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	e000      	b.n	8008fd2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008fd0:	2302      	movs	r3, #2
  }
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b084      	sub	sp, #16
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fec:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008fee:	78fb      	ldrb	r3, [r7, #3]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f001 fdf2 	bl	800abdc <USBD_LL_GetRxDataSize>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00d      	beq.n	8009026 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800901e:	4611      	mov	r1, r2
 8009020:	4798      	blx	r3

    return USBD_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	e000      	b.n	8009028 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009026:	2302      	movs	r3, #2
  }
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800903e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009046:	2b00      	cmp	r3, #0
 8009048:	d014      	beq.n	8009074 <USBD_CDC_EP0_RxReady+0x44>
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009050:	2bff      	cmp	r3, #255	@ 0xff
 8009052:	d00f      	beq.n	8009074 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009062:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800906a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	22ff      	movs	r2, #255	@ 0xff
 8009070:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2243      	movs	r2, #67	@ 0x43
 800908c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800908e:	4b03      	ldr	r3, [pc, #12]	@ (800909c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009090:	4618      	mov	r0, r3
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	bc80      	pop	{r7}
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	200000ac 	.word	0x200000ac

080090a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2243      	movs	r2, #67	@ 0x43
 80090ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80090ae:	4b03      	ldr	r3, [pc, #12]	@ (80090bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bc80      	pop	{r7}
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	20000068 	.word	0x20000068

080090c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2243      	movs	r2, #67	@ 0x43
 80090cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80090ce:	4b03      	ldr	r3, [pc, #12]	@ (80090dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bc80      	pop	{r7}
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	200000f0 	.word	0x200000f0

080090e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	220a      	movs	r2, #10
 80090ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80090ee:	4b03      	ldr	r3, [pc, #12]	@ (80090fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bc80      	pop	{r7}
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	20000024 	.word	0x20000024

08009100 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800910a:	2302      	movs	r3, #2
 800910c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d005      	beq.n	8009120 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009120:	7bfb      	ldrb	r3, [r7, #15]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	bc80      	pop	{r7}
 800912a:	4770      	bx	lr

0800912c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	4613      	mov	r3, r2
 8009138:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009140:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800914a:	88fa      	ldrh	r2, [r7, #6]
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	371c      	adds	r7, #28
 8009158:	46bd      	mov	sp, r7
 800915a:	bc80      	pop	{r7}
 800915c:	4770      	bx	lr

0800915e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800915e:	b480      	push	{r7}
 8009160:	b085      	sub	sp, #20
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800916e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3714      	adds	r7, #20
 800917e:	46bd      	mov	sp, r7
 8009180:	bc80      	pop	{r7}
 8009182:	4770      	bx	lr

08009184 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009192:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800919a:	2b00      	cmp	r3, #0
 800919c:	d01c      	beq.n	80091d8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d115      	bne.n	80091d4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	2181      	movs	r1, #129	@ 0x81
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f001 fcc0 	bl	800ab50 <USBD_LL_Transmit>

      return USBD_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	e002      	b.n	80091da <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80091d4:	2301      	movs	r3, #1
 80091d6:	e000      	b.n	80091da <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80091d8:	2302      	movs	r3, #2
  }
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091f0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d017      	beq.n	800922c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	7c1b      	ldrb	r3, [r3, #16]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d109      	bne.n	8009218 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800920a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800920e:	2101      	movs	r1, #1
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f001 fcc0 	bl	800ab96 <USBD_LL_PrepareReceive>
 8009216:	e007      	b.n	8009228 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800921e:	2340      	movs	r3, #64	@ 0x40
 8009220:	2101      	movs	r1, #1
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f001 fcb7 	bl	800ab96 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009228:	2300      	movs	r3, #0
 800922a:	e000      	b.n	800922e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800922c:	2302      	movs	r3, #2
  }
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b084      	sub	sp, #16
 800923a:	af00      	add	r7, sp, #0
 800923c:	60f8      	str	r0, [r7, #12]
 800923e:	60b9      	str	r1, [r7, #8]
 8009240:	4613      	mov	r3, r2
 8009242:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d101      	bne.n	800924e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800924a:	2302      	movs	r3, #2
 800924c:	e01a      	b.n	8009284 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009254:	2b00      	cmp	r3, #0
 8009256:	d003      	beq.n	8009260 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d003      	beq.n	800926e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2201      	movs	r2, #1
 8009272:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	79fa      	ldrb	r2, [r7, #7]
 800927a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f001 fb25 	bl	800a8cc <USBD_LL_Init>

  return USBD_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d006      	beq.n	80092ae <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73fb      	strb	r3, [r7, #15]
 80092ac:	e001      	b.n	80092b2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80092ae:	2302      	movs	r3, #2
 80092b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3714      	adds	r7, #20
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bc80      	pop	{r7}
 80092bc:	4770      	bx	lr

080092be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b082      	sub	sp, #8
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f001 fb5a 	bl	800a980 <USBD_LL_Start>

  return USBD_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80092d6:	b480      	push	{r7}
 80092d8:	b083      	sub	sp, #12
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bc80      	pop	{r7}
 80092e8:	4770      	bx	lr

080092ea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b084      	sub	sp, #16
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
 80092f2:	460b      	mov	r3, r1
 80092f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80092f6:	2302      	movs	r3, #2
 80092f8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00c      	beq.n	800931e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	78fa      	ldrb	r2, [r7, #3]
 800930e:	4611      	mov	r1, r2
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	4798      	blx	r3
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800931a:	2300      	movs	r3, #0
 800931c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800931e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	460b      	mov	r3, r1
 8009332:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	78fa      	ldrb	r2, [r7, #3]
 800933e:	4611      	mov	r1, r2
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	4798      	blx	r3

  return USBD_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b082      	sub	sp, #8
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	4618      	mov	r0, r3
 8009362:	f000 fed8 	bl	800a116 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2201      	movs	r2, #1
 800936a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009374:	461a      	mov	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009382:	f003 031f 	and.w	r3, r3, #31
 8009386:	2b02      	cmp	r3, #2
 8009388:	d016      	beq.n	80093b8 <USBD_LL_SetupStage+0x6a>
 800938a:	2b02      	cmp	r3, #2
 800938c:	d81c      	bhi.n	80093c8 <USBD_LL_SetupStage+0x7a>
 800938e:	2b00      	cmp	r3, #0
 8009390:	d002      	beq.n	8009398 <USBD_LL_SetupStage+0x4a>
 8009392:	2b01      	cmp	r3, #1
 8009394:	d008      	beq.n	80093a8 <USBD_LL_SetupStage+0x5a>
 8009396:	e017      	b.n	80093c8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f9cb 	bl	800973c <USBD_StdDevReq>
      break;
 80093a6:	e01a      	b.n	80093de <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80093ae:	4619      	mov	r1, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fa2d 	bl	8009810 <USBD_StdItfReq>
      break;
 80093b6:	e012      	b.n	80093de <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80093be:	4619      	mov	r1, r3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fa6d 	bl	80098a0 <USBD_StdEPReq>
      break;
 80093c6:	e00a      	b.n	80093de <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80093ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 fb32 	bl	800aa40 <USBD_LL_StallEP>
      break;
 80093dc:	bf00      	nop
  }

  return USBD_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	460b      	mov	r3, r1
 80093f2:	607a      	str	r2, [r7, #4]
 80093f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80093f6:	7afb      	ldrb	r3, [r7, #11]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d14b      	bne.n	8009494 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009402:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800940a:	2b03      	cmp	r3, #3
 800940c:	d134      	bne.n	8009478 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	68da      	ldr	r2, [r3, #12]
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	429a      	cmp	r2, r3
 8009418:	d919      	bls.n	800944e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	68da      	ldr	r2, [r3, #12]
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	1ad2      	subs	r2, r2, r3
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	68da      	ldr	r2, [r3, #12]
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009430:	429a      	cmp	r2, r3
 8009432:	d203      	bcs.n	800943c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009438:	b29b      	uxth	r3, r3
 800943a:	e002      	b.n	8009442 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009440:	b29b      	uxth	r3, r3
 8009442:	461a      	mov	r2, r3
 8009444:	6879      	ldr	r1, [r7, #4]
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f000 ff54 	bl	800a2f4 <USBD_CtlContinueRx>
 800944c:	e038      	b.n	80094c0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00a      	beq.n	8009470 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009460:	2b03      	cmp	r3, #3
 8009462:	d105      	bne.n	8009470 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 ff51 	bl	800a318 <USBD_CtlSendStatus>
 8009476:	e023      	b.n	80094c0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800947e:	2b05      	cmp	r3, #5
 8009480:	d11e      	bne.n	80094c0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800948a:	2100      	movs	r1, #0
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f001 fad7 	bl	800aa40 <USBD_LL_StallEP>
 8009492:	e015      	b.n	80094c0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00d      	beq.n	80094bc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d108      	bne.n	80094bc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	7afa      	ldrb	r2, [r7, #11]
 80094b4:	4611      	mov	r1, r2
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	4798      	blx	r3
 80094ba:	e001      	b.n	80094c0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80094bc:	2302      	movs	r3, #2
 80094be:	e000      	b.n	80094c2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3718      	adds	r7, #24
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b086      	sub	sp, #24
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	60f8      	str	r0, [r7, #12]
 80094d2:	460b      	mov	r3, r1
 80094d4:	607a      	str	r2, [r7, #4]
 80094d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80094d8:	7afb      	ldrb	r3, [r7, #11]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d17f      	bne.n	80095de <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3314      	adds	r3, #20
 80094e2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d15c      	bne.n	80095a8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	68da      	ldr	r2, [r3, #12]
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d915      	bls.n	8009526 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	68da      	ldr	r2, [r3, #12]
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	1ad2      	subs	r2, r2, r3
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	b29b      	uxth	r3, r3
 800950e:	461a      	mov	r2, r3
 8009510:	6879      	ldr	r1, [r7, #4]
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f000 febe 	bl	800a294 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009518:	2300      	movs	r3, #0
 800951a:	2200      	movs	r2, #0
 800951c:	2100      	movs	r1, #0
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f001 fb39 	bl	800ab96 <USBD_LL_PrepareReceive>
 8009524:	e04e      	b.n	80095c4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	6912      	ldr	r2, [r2, #16]
 800952e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009532:	fb01 f202 	mul.w	r2, r1, r2
 8009536:	1a9b      	subs	r3, r3, r2
 8009538:	2b00      	cmp	r3, #0
 800953a:	d11c      	bne.n	8009576 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	689a      	ldr	r2, [r3, #8]
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009544:	429a      	cmp	r2, r3
 8009546:	d316      	bcc.n	8009576 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	689a      	ldr	r2, [r3, #8]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009552:	429a      	cmp	r2, r3
 8009554:	d20f      	bcs.n	8009576 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009556:	2200      	movs	r2, #0
 8009558:	2100      	movs	r1, #0
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 fe9a 	bl	800a294 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009568:	2300      	movs	r3, #0
 800956a:	2200      	movs	r2, #0
 800956c:	2100      	movs	r1, #0
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f001 fb11 	bl	800ab96 <USBD_LL_PrepareReceive>
 8009574:	e026      	b.n	80095c4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00a      	beq.n	8009598 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009588:	2b03      	cmp	r3, #3
 800958a:	d105      	bne.n	8009598 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009598:	2180      	movs	r1, #128	@ 0x80
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f001 fa50 	bl	800aa40 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f000 fecc 	bl	800a33e <USBD_CtlReceiveStatus>
 80095a6:	e00d      	b.n	80095c4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80095ae:	2b04      	cmp	r3, #4
 80095b0:	d004      	beq.n	80095bc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d103      	bne.n	80095c4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80095bc:	2180      	movs	r1, #128	@ 0x80
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f001 fa3e 	bl	800aa40 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d11d      	bne.n	800960a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	f7ff fe81 	bl	80092d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80095dc:	e015      	b.n	800960a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00d      	beq.n	8009606 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d108      	bne.n	8009606 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095fa:	695b      	ldr	r3, [r3, #20]
 80095fc:	7afa      	ldrb	r2, [r7, #11]
 80095fe:	4611      	mov	r1, r2
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	4798      	blx	r3
 8009604:	e001      	b.n	800960a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009606:	2302      	movs	r3, #2
 8009608:	e000      	b.n	800960c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800961c:	2340      	movs	r3, #64	@ 0x40
 800961e:	2200      	movs	r2, #0
 8009620:	2100      	movs	r1, #0
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f001 f9c7 	bl	800a9b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2240      	movs	r2, #64	@ 0x40
 8009634:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009638:	2340      	movs	r3, #64	@ 0x40
 800963a:	2200      	movs	r2, #0
 800963c:	2180      	movs	r1, #128	@ 0x80
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f001 f9b9 	bl	800a9b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2240      	movs	r2, #64	@ 0x40
 800964e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009674:	2b00      	cmp	r3, #0
 8009676:	d009      	beq.n	800968c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	6852      	ldr	r2, [r2, #4]
 8009684:	b2d2      	uxtb	r2, r2
 8009686:	4611      	mov	r1, r2
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	4798      	blx	r3
  }

  return USBD_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	460b      	mov	r3, r1
 80096a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	78fa      	ldrb	r2, [r7, #3]
 80096a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bc80      	pop	{r7}
 80096b2:	4770      	bx	lr

080096b4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2204      	movs	r2, #4
 80096cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bc80      	pop	{r7}
 80096da:	4770      	bx	lr

080096dc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096ea:	2b04      	cmp	r3, #4
 80096ec:	d105      	bne.n	80096fa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	bc80      	pop	{r7}
 8009704:	4770      	bx	lr

08009706 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b082      	sub	sp, #8
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009714:	2b03      	cmp	r3, #3
 8009716:	d10b      	bne.n	8009730 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800971e:	69db      	ldr	r3, [r3, #28]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d005      	beq.n	8009730 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800972a:	69db      	ldr	r3, [r3, #28]
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
	...

0800973c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009752:	2b40      	cmp	r3, #64	@ 0x40
 8009754:	d005      	beq.n	8009762 <USBD_StdDevReq+0x26>
 8009756:	2b40      	cmp	r3, #64	@ 0x40
 8009758:	d84f      	bhi.n	80097fa <USBD_StdDevReq+0xbe>
 800975a:	2b00      	cmp	r3, #0
 800975c:	d009      	beq.n	8009772 <USBD_StdDevReq+0x36>
 800975e:	2b20      	cmp	r3, #32
 8009760:	d14b      	bne.n	80097fa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	6839      	ldr	r1, [r7, #0]
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	4798      	blx	r3
      break;
 8009770:	e048      	b.n	8009804 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	785b      	ldrb	r3, [r3, #1]
 8009776:	2b09      	cmp	r3, #9
 8009778:	d839      	bhi.n	80097ee <USBD_StdDevReq+0xb2>
 800977a:	a201      	add	r2, pc, #4	@ (adr r2, 8009780 <USBD_StdDevReq+0x44>)
 800977c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009780:	080097d1 	.word	0x080097d1
 8009784:	080097e5 	.word	0x080097e5
 8009788:	080097ef 	.word	0x080097ef
 800978c:	080097db 	.word	0x080097db
 8009790:	080097ef 	.word	0x080097ef
 8009794:	080097b3 	.word	0x080097b3
 8009798:	080097a9 	.word	0x080097a9
 800979c:	080097ef 	.word	0x080097ef
 80097a0:	080097c7 	.word	0x080097c7
 80097a4:	080097bd 	.word	0x080097bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f9dc 	bl	8009b68 <USBD_GetDescriptor>
          break;
 80097b0:	e022      	b.n	80097f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fb3f 	bl	8009e38 <USBD_SetAddress>
          break;
 80097ba:	e01d      	b.n	80097f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fb7e 	bl	8009ec0 <USBD_SetConfig>
          break;
 80097c4:	e018      	b.n	80097f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80097c6:	6839      	ldr	r1, [r7, #0]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fc07 	bl	8009fdc <USBD_GetConfig>
          break;
 80097ce:	e013      	b.n	80097f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fc37 	bl	800a046 <USBD_GetStatus>
          break;
 80097d8:	e00e      	b.n	80097f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fc65 	bl	800a0ac <USBD_SetFeature>
          break;
 80097e2:	e009      	b.n	80097f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fc74 	bl	800a0d4 <USBD_ClrFeature>
          break;
 80097ec:	e004      	b.n	80097f8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fcc9 	bl	800a188 <USBD_CtlError>
          break;
 80097f6:	bf00      	nop
      }
      break;
 80097f8:	e004      	b.n	8009804 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80097fa:	6839      	ldr	r1, [r7, #0]
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 fcc3 	bl	800a188 <USBD_CtlError>
      break;
 8009802:	bf00      	nop
  }

  return ret;
 8009804:	7bfb      	ldrb	r3, [r7, #15]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop

08009810 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009826:	2b40      	cmp	r3, #64	@ 0x40
 8009828:	d005      	beq.n	8009836 <USBD_StdItfReq+0x26>
 800982a:	2b40      	cmp	r3, #64	@ 0x40
 800982c:	d82e      	bhi.n	800988c <USBD_StdItfReq+0x7c>
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <USBD_StdItfReq+0x26>
 8009832:	2b20      	cmp	r3, #32
 8009834:	d12a      	bne.n	800988c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800983c:	3b01      	subs	r3, #1
 800983e:	2b02      	cmp	r3, #2
 8009840:	d81d      	bhi.n	800987e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	889b      	ldrh	r3, [r3, #4]
 8009846:	b2db      	uxtb	r3, r3
 8009848:	2b01      	cmp	r3, #1
 800984a:	d813      	bhi.n	8009874 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	4798      	blx	r3
 800985a:	4603      	mov	r3, r0
 800985c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	88db      	ldrh	r3, [r3, #6]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d110      	bne.n	8009888 <USBD_StdItfReq+0x78>
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10d      	bne.n	8009888 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fd53 	bl	800a318 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009872:	e009      	b.n	8009888 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fc86 	bl	800a188 <USBD_CtlError>
          break;
 800987c:	e004      	b.n	8009888 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800987e:	6839      	ldr	r1, [r7, #0]
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fc81 	bl	800a188 <USBD_CtlError>
          break;
 8009886:	e000      	b.n	800988a <USBD_StdItfReq+0x7a>
          break;
 8009888:	bf00      	nop
      }
      break;
 800988a:	e004      	b.n	8009896 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800988c:	6839      	ldr	r1, [r7, #0]
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fc7a 	bl	800a188 <USBD_CtlError>
      break;
 8009894:	bf00      	nop
  }

  return USBD_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80098aa:	2300      	movs	r3, #0
 80098ac:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	889b      	ldrh	r3, [r3, #4]
 80098b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098bc:	2b40      	cmp	r3, #64	@ 0x40
 80098be:	d007      	beq.n	80098d0 <USBD_StdEPReq+0x30>
 80098c0:	2b40      	cmp	r3, #64	@ 0x40
 80098c2:	f200 8146 	bhi.w	8009b52 <USBD_StdEPReq+0x2b2>
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00a      	beq.n	80098e0 <USBD_StdEPReq+0x40>
 80098ca:	2b20      	cmp	r3, #32
 80098cc:	f040 8141 	bne.w	8009b52 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	6839      	ldr	r1, [r7, #0]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	4798      	blx	r3
      break;
 80098de:	e13d      	b.n	8009b5c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098e8:	2b20      	cmp	r3, #32
 80098ea:	d10a      	bne.n	8009902 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	4798      	blx	r3
 80098fa:	4603      	mov	r3, r0
 80098fc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80098fe:	7bfb      	ldrb	r3, [r7, #15]
 8009900:	e12d      	b.n	8009b5e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	785b      	ldrb	r3, [r3, #1]
 8009906:	2b03      	cmp	r3, #3
 8009908:	d007      	beq.n	800991a <USBD_StdEPReq+0x7a>
 800990a:	2b03      	cmp	r3, #3
 800990c:	f300 811b 	bgt.w	8009b46 <USBD_StdEPReq+0x2a6>
 8009910:	2b00      	cmp	r3, #0
 8009912:	d072      	beq.n	80099fa <USBD_StdEPReq+0x15a>
 8009914:	2b01      	cmp	r3, #1
 8009916:	d03a      	beq.n	800998e <USBD_StdEPReq+0xee>
 8009918:	e115      	b.n	8009b46 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009920:	2b02      	cmp	r3, #2
 8009922:	d002      	beq.n	800992a <USBD_StdEPReq+0x8a>
 8009924:	2b03      	cmp	r3, #3
 8009926:	d015      	beq.n	8009954 <USBD_StdEPReq+0xb4>
 8009928:	e02b      	b.n	8009982 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800992a:	7bbb      	ldrb	r3, [r7, #14]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00c      	beq.n	800994a <USBD_StdEPReq+0xaa>
 8009930:	7bbb      	ldrb	r3, [r7, #14]
 8009932:	2b80      	cmp	r3, #128	@ 0x80
 8009934:	d009      	beq.n	800994a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009936:	7bbb      	ldrb	r3, [r7, #14]
 8009938:	4619      	mov	r1, r3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f001 f880 	bl	800aa40 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009940:	2180      	movs	r1, #128	@ 0x80
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f001 f87c 	bl	800aa40 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009948:	e020      	b.n	800998c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800994a:	6839      	ldr	r1, [r7, #0]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fc1b 	bl	800a188 <USBD_CtlError>
              break;
 8009952:	e01b      	b.n	800998c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	885b      	ldrh	r3, [r3, #2]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10e      	bne.n	800997a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800995c:	7bbb      	ldrb	r3, [r7, #14]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00b      	beq.n	800997a <USBD_StdEPReq+0xda>
 8009962:	7bbb      	ldrb	r3, [r7, #14]
 8009964:	2b80      	cmp	r3, #128	@ 0x80
 8009966:	d008      	beq.n	800997a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	88db      	ldrh	r3, [r3, #6]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d104      	bne.n	800997a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	4619      	mov	r1, r3
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f001 f863 	bl	800aa40 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fccc 	bl	800a318 <USBD_CtlSendStatus>

              break;
 8009980:	e004      	b.n	800998c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009982:	6839      	ldr	r1, [r7, #0]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fbff 	bl	800a188 <USBD_CtlError>
              break;
 800998a:	bf00      	nop
          }
          break;
 800998c:	e0e0      	b.n	8009b50 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009994:	2b02      	cmp	r3, #2
 8009996:	d002      	beq.n	800999e <USBD_StdEPReq+0xfe>
 8009998:	2b03      	cmp	r3, #3
 800999a:	d015      	beq.n	80099c8 <USBD_StdEPReq+0x128>
 800999c:	e026      	b.n	80099ec <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800999e:	7bbb      	ldrb	r3, [r7, #14]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00c      	beq.n	80099be <USBD_StdEPReq+0x11e>
 80099a4:	7bbb      	ldrb	r3, [r7, #14]
 80099a6:	2b80      	cmp	r3, #128	@ 0x80
 80099a8:	d009      	beq.n	80099be <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80099aa:	7bbb      	ldrb	r3, [r7, #14]
 80099ac:	4619      	mov	r1, r3
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f001 f846 	bl	800aa40 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80099b4:	2180      	movs	r1, #128	@ 0x80
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f001 f842 	bl	800aa40 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099bc:	e01c      	b.n	80099f8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fbe1 	bl	800a188 <USBD_CtlError>
              break;
 80099c6:	e017      	b.n	80099f8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	885b      	ldrh	r3, [r3, #2]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d112      	bne.n	80099f6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80099d0:	7bbb      	ldrb	r3, [r7, #14]
 80099d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d004      	beq.n	80099e4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80099da:	7bbb      	ldrb	r3, [r7, #14]
 80099dc:	4619      	mov	r1, r3
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f001 f84d 	bl	800aa7e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 fc97 	bl	800a318 <USBD_CtlSendStatus>
              }
              break;
 80099ea:	e004      	b.n	80099f6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fbca 	bl	800a188 <USBD_CtlError>
              break;
 80099f4:	e000      	b.n	80099f8 <USBD_StdEPReq+0x158>
              break;
 80099f6:	bf00      	nop
          }
          break;
 80099f8:	e0aa      	b.n	8009b50 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d002      	beq.n	8009a0a <USBD_StdEPReq+0x16a>
 8009a04:	2b03      	cmp	r3, #3
 8009a06:	d032      	beq.n	8009a6e <USBD_StdEPReq+0x1ce>
 8009a08:	e097      	b.n	8009b3a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a0a:	7bbb      	ldrb	r3, [r7, #14]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d007      	beq.n	8009a20 <USBD_StdEPReq+0x180>
 8009a10:	7bbb      	ldrb	r3, [r7, #14]
 8009a12:	2b80      	cmp	r3, #128	@ 0x80
 8009a14:	d004      	beq.n	8009a20 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009a16:	6839      	ldr	r1, [r7, #0]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fbb5 	bl	800a188 <USBD_CtlError>
                break;
 8009a1e:	e091      	b.n	8009b44 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	da0b      	bge.n	8009a40 <USBD_StdEPReq+0x1a0>
 8009a28:	7bbb      	ldrb	r3, [r7, #14]
 8009a2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a2e:	4613      	mov	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	3310      	adds	r3, #16
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	e00b      	b.n	8009a58 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a40:	7bbb      	ldrb	r3, [r7, #14]
 8009a42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a46:	4613      	mov	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4413      	add	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	4413      	add	r3, r2
 8009a56:	3304      	adds	r3, #4
 8009a58:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	2202      	movs	r2, #2
 8009a64:	4619      	mov	r1, r3
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fbf8 	bl	800a25c <USBD_CtlSendData>
              break;
 8009a6c:	e06a      	b.n	8009b44 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	da11      	bge.n	8009a9a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a76:	7bbb      	ldrb	r3, [r7, #14]
 8009a78:	f003 020f 	and.w	r2, r3, #15
 8009a7c:	6879      	ldr	r1, [r7, #4]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	440b      	add	r3, r1
 8009a88:	3318      	adds	r3, #24
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d117      	bne.n	8009ac0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009a90:	6839      	ldr	r1, [r7, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fb78 	bl	800a188 <USBD_CtlError>
                  break;
 8009a98:	e054      	b.n	8009b44 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a9a:	7bbb      	ldrb	r3, [r7, #14]
 8009a9c:	f003 020f 	and.w	r2, r3, #15
 8009aa0:	6879      	ldr	r1, [r7, #4]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	4413      	add	r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	440b      	add	r3, r1
 8009aac:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d104      	bne.n	8009ac0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ab6:	6839      	ldr	r1, [r7, #0]
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fb65 	bl	800a188 <USBD_CtlError>
                  break;
 8009abe:	e041      	b.n	8009b44 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ac0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	da0b      	bge.n	8009ae0 <USBD_StdEPReq+0x240>
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ace:	4613      	mov	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4413      	add	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	3310      	adds	r3, #16
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	4413      	add	r3, r2
 8009adc:	3304      	adds	r3, #4
 8009ade:	e00b      	b.n	8009af8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ae0:	7bbb      	ldrb	r3, [r7, #14]
 8009ae2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	4413      	add	r3, r2
 8009af6:	3304      	adds	r3, #4
 8009af8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009afa:	7bbb      	ldrb	r3, [r7, #14]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <USBD_StdEPReq+0x266>
 8009b00:	7bbb      	ldrb	r3, [r7, #14]
 8009b02:	2b80      	cmp	r3, #128	@ 0x80
 8009b04:	d103      	bne.n	8009b0e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	601a      	str	r2, [r3, #0]
 8009b0c:	e00e      	b.n	8009b2c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009b0e:	7bbb      	ldrb	r3, [r7, #14]
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 ffd2 	bl	800aabc <USBD_LL_IsStallEP>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d003      	beq.n	8009b26 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	2201      	movs	r2, #1
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	e002      	b.n	8009b2c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2202      	movs	r2, #2
 8009b30:	4619      	mov	r1, r3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fb92 	bl	800a25c <USBD_CtlSendData>
              break;
 8009b38:	e004      	b.n	8009b44 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009b3a:	6839      	ldr	r1, [r7, #0]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fb23 	bl	800a188 <USBD_CtlError>
              break;
 8009b42:	bf00      	nop
          }
          break;
 8009b44:	e004      	b.n	8009b50 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fb1d 	bl	800a188 <USBD_CtlError>
          break;
 8009b4e:	bf00      	nop
      }
      break;
 8009b50:	e004      	b.n	8009b5c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009b52:	6839      	ldr	r1, [r7, #0]
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fb17 	bl	800a188 <USBD_CtlError>
      break;
 8009b5a:	bf00      	nop
  }

  return ret;
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
	...

08009b68 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b76:	2300      	movs	r3, #0
 8009b78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	885b      	ldrh	r3, [r3, #2]
 8009b82:	0a1b      	lsrs	r3, r3, #8
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	3b01      	subs	r3, #1
 8009b88:	2b06      	cmp	r3, #6
 8009b8a:	f200 8128 	bhi.w	8009dde <USBD_GetDescriptor+0x276>
 8009b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b94 <USBD_GetDescriptor+0x2c>)
 8009b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b94:	08009bb1 	.word	0x08009bb1
 8009b98:	08009bc9 	.word	0x08009bc9
 8009b9c:	08009c09 	.word	0x08009c09
 8009ba0:	08009ddf 	.word	0x08009ddf
 8009ba4:	08009ddf 	.word	0x08009ddf
 8009ba8:	08009d7f 	.word	0x08009d7f
 8009bac:	08009dab 	.word	0x08009dab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	7c12      	ldrb	r2, [r2, #16]
 8009bbc:	f107 0108 	add.w	r1, r7, #8
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	4798      	blx	r3
 8009bc4:	60f8      	str	r0, [r7, #12]
      break;
 8009bc6:	e112      	b.n	8009dee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	7c1b      	ldrb	r3, [r3, #16]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10d      	bne.n	8009bec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd8:	f107 0208 	add.w	r2, r7, #8
 8009bdc:	4610      	mov	r0, r2
 8009bde:	4798      	blx	r3
 8009be0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	3301      	adds	r3, #1
 8009be6:	2202      	movs	r2, #2
 8009be8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009bea:	e100      	b.n	8009dee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf4:	f107 0208 	add.w	r2, r7, #8
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	4798      	blx	r3
 8009bfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3301      	adds	r3, #1
 8009c02:	2202      	movs	r2, #2
 8009c04:	701a      	strb	r2, [r3, #0]
      break;
 8009c06:	e0f2      	b.n	8009dee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	885b      	ldrh	r3, [r3, #2]
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b05      	cmp	r3, #5
 8009c10:	f200 80ac 	bhi.w	8009d6c <USBD_GetDescriptor+0x204>
 8009c14:	a201      	add	r2, pc, #4	@ (adr r2, 8009c1c <USBD_GetDescriptor+0xb4>)
 8009c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c1a:	bf00      	nop
 8009c1c:	08009c35 	.word	0x08009c35
 8009c20:	08009c69 	.word	0x08009c69
 8009c24:	08009c9d 	.word	0x08009c9d
 8009c28:	08009cd1 	.word	0x08009cd1
 8009c2c:	08009d05 	.word	0x08009d05
 8009c30:	08009d39 	.word	0x08009d39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00b      	beq.n	8009c58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	7c12      	ldrb	r2, [r2, #16]
 8009c4c:	f107 0108 	add.w	r1, r7, #8
 8009c50:	4610      	mov	r0, r2
 8009c52:	4798      	blx	r3
 8009c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c56:	e091      	b.n	8009d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fa94 	bl	800a188 <USBD_CtlError>
            err++;
 8009c60:	7afb      	ldrb	r3, [r7, #11]
 8009c62:	3301      	adds	r3, #1
 8009c64:	72fb      	strb	r3, [r7, #11]
          break;
 8009c66:	e089      	b.n	8009d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00b      	beq.n	8009c8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	7c12      	ldrb	r2, [r2, #16]
 8009c80:	f107 0108 	add.w	r1, r7, #8
 8009c84:	4610      	mov	r0, r2
 8009c86:	4798      	blx	r3
 8009c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c8a:	e077      	b.n	8009d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fa7a 	bl	800a188 <USBD_CtlError>
            err++;
 8009c94:	7afb      	ldrb	r3, [r7, #11]
 8009c96:	3301      	adds	r3, #1
 8009c98:	72fb      	strb	r3, [r7, #11]
          break;
 8009c9a:	e06f      	b.n	8009d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00b      	beq.n	8009cc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	7c12      	ldrb	r2, [r2, #16]
 8009cb4:	f107 0108 	add.w	r1, r7, #8
 8009cb8:	4610      	mov	r0, r2
 8009cba:	4798      	blx	r3
 8009cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cbe:	e05d      	b.n	8009d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cc0:	6839      	ldr	r1, [r7, #0]
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fa60 	bl	800a188 <USBD_CtlError>
            err++;
 8009cc8:	7afb      	ldrb	r3, [r7, #11]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8009cce:	e055      	b.n	8009d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00b      	beq.n	8009cf4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	7c12      	ldrb	r2, [r2, #16]
 8009ce8:	f107 0108 	add.w	r1, r7, #8
 8009cec:	4610      	mov	r0, r2
 8009cee:	4798      	blx	r3
 8009cf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cf2:	e043      	b.n	8009d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cf4:	6839      	ldr	r1, [r7, #0]
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fa46 	bl	800a188 <USBD_CtlError>
            err++;
 8009cfc:	7afb      	ldrb	r3, [r7, #11]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	72fb      	strb	r3, [r7, #11]
          break;
 8009d02:	e03b      	b.n	8009d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d0a:	695b      	ldr	r3, [r3, #20]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00b      	beq.n	8009d28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d16:	695b      	ldr	r3, [r3, #20]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	7c12      	ldrb	r2, [r2, #16]
 8009d1c:	f107 0108 	add.w	r1, r7, #8
 8009d20:	4610      	mov	r0, r2
 8009d22:	4798      	blx	r3
 8009d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d26:	e029      	b.n	8009d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fa2c 	bl	800a188 <USBD_CtlError>
            err++;
 8009d30:	7afb      	ldrb	r3, [r7, #11]
 8009d32:	3301      	adds	r3, #1
 8009d34:	72fb      	strb	r3, [r7, #11]
          break;
 8009d36:	e021      	b.n	8009d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00b      	beq.n	8009d5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	7c12      	ldrb	r2, [r2, #16]
 8009d50:	f107 0108 	add.w	r1, r7, #8
 8009d54:	4610      	mov	r0, r2
 8009d56:	4798      	blx	r3
 8009d58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d5a:	e00f      	b.n	8009d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fa12 	bl	800a188 <USBD_CtlError>
            err++;
 8009d64:	7afb      	ldrb	r3, [r7, #11]
 8009d66:	3301      	adds	r3, #1
 8009d68:	72fb      	strb	r3, [r7, #11]
          break;
 8009d6a:	e007      	b.n	8009d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fa0a 	bl	800a188 <USBD_CtlError>
          err++;
 8009d74:	7afb      	ldrb	r3, [r7, #11]
 8009d76:	3301      	adds	r3, #1
 8009d78:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009d7a:	e038      	b.n	8009dee <USBD_GetDescriptor+0x286>
 8009d7c:	e037      	b.n	8009dee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	7c1b      	ldrb	r3, [r3, #16]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d109      	bne.n	8009d9a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d8e:	f107 0208 	add.w	r2, r7, #8
 8009d92:	4610      	mov	r0, r2
 8009d94:	4798      	blx	r3
 8009d96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d98:	e029      	b.n	8009dee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d9a:	6839      	ldr	r1, [r7, #0]
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f9f3 	bl	800a188 <USBD_CtlError>
        err++;
 8009da2:	7afb      	ldrb	r3, [r7, #11]
 8009da4:	3301      	adds	r3, #1
 8009da6:	72fb      	strb	r3, [r7, #11]
      break;
 8009da8:	e021      	b.n	8009dee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	7c1b      	ldrb	r3, [r3, #16]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10d      	bne.n	8009dce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dba:	f107 0208 	add.w	r2, r7, #8
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	4798      	blx	r3
 8009dc2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	2207      	movs	r2, #7
 8009dca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dcc:	e00f      	b.n	8009dee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dce:	6839      	ldr	r1, [r7, #0]
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 f9d9 	bl	800a188 <USBD_CtlError>
        err++;
 8009dd6:	7afb      	ldrb	r3, [r7, #11]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	72fb      	strb	r3, [r7, #11]
      break;
 8009ddc:	e007      	b.n	8009dee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f9d1 	bl	800a188 <USBD_CtlError>
      err++;
 8009de6:	7afb      	ldrb	r3, [r7, #11]
 8009de8:	3301      	adds	r3, #1
 8009dea:	72fb      	strb	r3, [r7, #11]
      break;
 8009dec:	bf00      	nop
  }

  if (err != 0U)
 8009dee:	7afb      	ldrb	r3, [r7, #11]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d11c      	bne.n	8009e2e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009df4:	893b      	ldrh	r3, [r7, #8]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d011      	beq.n	8009e1e <USBD_GetDescriptor+0x2b6>
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	88db      	ldrh	r3, [r3, #6]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00d      	beq.n	8009e1e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	88da      	ldrh	r2, [r3, #6]
 8009e06:	893b      	ldrh	r3, [r7, #8]
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	bf28      	it	cs
 8009e0c:	4613      	movcs	r3, r2
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e12:	893b      	ldrh	r3, [r7, #8]
 8009e14:	461a      	mov	r2, r3
 8009e16:	68f9      	ldr	r1, [r7, #12]
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 fa1f 	bl	800a25c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	88db      	ldrh	r3, [r3, #6]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d104      	bne.n	8009e30 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fa76 	bl	800a318 <USBD_CtlSendStatus>
 8009e2c:	e000      	b.n	8009e30 <USBD_GetDescriptor+0x2c8>
    return;
 8009e2e:	bf00      	nop
    }
  }
}
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop

08009e38 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	889b      	ldrh	r3, [r3, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d130      	bne.n	8009eac <USBD_SetAddress+0x74>
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	88db      	ldrh	r3, [r3, #6]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d12c      	bne.n	8009eac <USBD_SetAddress+0x74>
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	885b      	ldrh	r3, [r3, #2]
 8009e56:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e58:	d828      	bhi.n	8009eac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	885b      	ldrh	r3, [r3, #2]
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e6c:	2b03      	cmp	r3, #3
 8009e6e:	d104      	bne.n	8009e7a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f988 	bl	800a188 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e78:	e01d      	b.n	8009eb6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	7bfa      	ldrb	r2, [r7, #15]
 8009e7e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
 8009e84:	4619      	mov	r1, r3
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fe43 	bl	800ab12 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 fa43 	bl	800a318 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e92:	7bfb      	ldrb	r3, [r7, #15]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d004      	beq.n	8009ea2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2202      	movs	r2, #2
 8009e9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea0:	e009      	b.n	8009eb6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eaa:	e004      	b.n	8009eb6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f96a 	bl	800a188 <USBD_CtlError>
  }
}
 8009eb4:	bf00      	nop
 8009eb6:	bf00      	nop
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
	...

08009ec0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	885b      	ldrh	r3, [r3, #2]
 8009ece:	b2da      	uxtb	r2, r3
 8009ed0:	4b41      	ldr	r3, [pc, #260]	@ (8009fd8 <USBD_SetConfig+0x118>)
 8009ed2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ed4:	4b40      	ldr	r3, [pc, #256]	@ (8009fd8 <USBD_SetConfig+0x118>)
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d904      	bls.n	8009ee6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009edc:	6839      	ldr	r1, [r7, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f952 	bl	800a188 <USBD_CtlError>
 8009ee4:	e075      	b.n	8009fd2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d002      	beq.n	8009ef6 <USBD_SetConfig+0x36>
 8009ef0:	2b03      	cmp	r3, #3
 8009ef2:	d023      	beq.n	8009f3c <USBD_SetConfig+0x7c>
 8009ef4:	e062      	b.n	8009fbc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009ef6:	4b38      	ldr	r3, [pc, #224]	@ (8009fd8 <USBD_SetConfig+0x118>)
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d01a      	beq.n	8009f34 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009efe:	4b36      	ldr	r3, [pc, #216]	@ (8009fd8 <USBD_SetConfig+0x118>)
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	461a      	mov	r2, r3
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2203      	movs	r2, #3
 8009f0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f10:	4b31      	ldr	r3, [pc, #196]	@ (8009fd8 <USBD_SetConfig+0x118>)
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	4619      	mov	r1, r3
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f7ff f9e7 	bl	80092ea <USBD_SetClassConfig>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d104      	bne.n	8009f2c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009f22:	6839      	ldr	r1, [r7, #0]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f92f 	bl	800a188 <USBD_CtlError>
            return;
 8009f2a:	e052      	b.n	8009fd2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f9f3 	bl	800a318 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f32:	e04e      	b.n	8009fd2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 f9ef 	bl	800a318 <USBD_CtlSendStatus>
        break;
 8009f3a:	e04a      	b.n	8009fd2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009f3c:	4b26      	ldr	r3, [pc, #152]	@ (8009fd8 <USBD_SetConfig+0x118>)
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d112      	bne.n	8009f6a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2202      	movs	r2, #2
 8009f48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009f4c:	4b22      	ldr	r3, [pc, #136]	@ (8009fd8 <USBD_SetConfig+0x118>)
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	461a      	mov	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009f56:	4b20      	ldr	r3, [pc, #128]	@ (8009fd8 <USBD_SetConfig+0x118>)
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7ff f9e3 	bl	8009328 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 f9d8 	bl	800a318 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f68:	e033      	b.n	8009fd2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8009fd8 <USBD_SetConfig+0x118>)
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d01d      	beq.n	8009fb4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f7ff f9d1 	bl	8009328 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009f86:	4b14      	ldr	r3, [pc, #80]	@ (8009fd8 <USBD_SetConfig+0x118>)
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f90:	4b11      	ldr	r3, [pc, #68]	@ (8009fd8 <USBD_SetConfig+0x118>)
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	4619      	mov	r1, r3
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7ff f9a7 	bl	80092ea <USBD_SetClassConfig>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	d104      	bne.n	8009fac <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009fa2:	6839      	ldr	r1, [r7, #0]
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 f8ef 	bl	800a188 <USBD_CtlError>
            return;
 8009faa:	e012      	b.n	8009fd2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f9b3 	bl	800a318 <USBD_CtlSendStatus>
        break;
 8009fb2:	e00e      	b.n	8009fd2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 f9af 	bl	800a318 <USBD_CtlSendStatus>
        break;
 8009fba:	e00a      	b.n	8009fd2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f8e2 	bl	800a188 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009fc4:	4b04      	ldr	r3, [pc, #16]	@ (8009fd8 <USBD_SetConfig+0x118>)
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f7ff f9ac 	bl	8009328 <USBD_ClrClassConfig>
        break;
 8009fd0:	bf00      	nop
    }
  }
}
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	20000410 	.word	0x20000410

08009fdc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	88db      	ldrh	r3, [r3, #6]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d004      	beq.n	8009ff8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009fee:	6839      	ldr	r1, [r7, #0]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f8c9 	bl	800a188 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ff6:	e022      	b.n	800a03e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	dc02      	bgt.n	800a008 <USBD_GetConfig+0x2c>
 800a002:	2b00      	cmp	r3, #0
 800a004:	dc03      	bgt.n	800a00e <USBD_GetConfig+0x32>
 800a006:	e015      	b.n	800a034 <USBD_GetConfig+0x58>
 800a008:	2b03      	cmp	r3, #3
 800a00a:	d00b      	beq.n	800a024 <USBD_GetConfig+0x48>
 800a00c:	e012      	b.n	800a034 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	3308      	adds	r3, #8
 800a018:	2201      	movs	r2, #1
 800a01a:	4619      	mov	r1, r3
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 f91d 	bl	800a25c <USBD_CtlSendData>
        break;
 800a022:	e00c      	b.n	800a03e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	3304      	adds	r3, #4
 800a028:	2201      	movs	r2, #1
 800a02a:	4619      	mov	r1, r3
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 f915 	bl	800a25c <USBD_CtlSendData>
        break;
 800a032:	e004      	b.n	800a03e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a034:	6839      	ldr	r1, [r7, #0]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f8a6 	bl	800a188 <USBD_CtlError>
        break;
 800a03c:	bf00      	nop
}
 800a03e:	bf00      	nop
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b082      	sub	sp, #8
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
 800a04e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a056:	3b01      	subs	r3, #1
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d81e      	bhi.n	800a09a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	88db      	ldrh	r3, [r3, #6]
 800a060:	2b02      	cmp	r3, #2
 800a062:	d004      	beq.n	800a06e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a064:	6839      	ldr	r1, [r7, #0]
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f88e 	bl	800a188 <USBD_CtlError>
        break;
 800a06c:	e01a      	b.n	800a0a4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2201      	movs	r2, #1
 800a072:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d005      	beq.n	800a08a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	f043 0202 	orr.w	r2, r3, #2
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	330c      	adds	r3, #12
 800a08e:	2202      	movs	r2, #2
 800a090:	4619      	mov	r1, r3
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f8e2 	bl	800a25c <USBD_CtlSendData>
      break;
 800a098:	e004      	b.n	800a0a4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 f873 	bl	800a188 <USBD_CtlError>
      break;
 800a0a2:	bf00      	nop
  }
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	885b      	ldrh	r3, [r3, #2]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d106      	bne.n	800a0cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 f926 	bl	800a318 <USBD_CtlSendStatus>
  }
}
 800a0cc:	bf00      	nop
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d80b      	bhi.n	800a102 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	885b      	ldrh	r3, [r3, #2]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d10c      	bne.n	800a10c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f90c 	bl	800a318 <USBD_CtlSendStatus>
      }
      break;
 800a100:	e004      	b.n	800a10c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a102:	6839      	ldr	r1, [r7, #0]
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f83f 	bl	800a188 <USBD_CtlError>
      break;
 800a10a:	e000      	b.n	800a10e <USBD_ClrFeature+0x3a>
      break;
 800a10c:	bf00      	nop
  }
}
 800a10e:	bf00      	nop
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a116:	b480      	push	{r7}
 800a118:	b083      	sub	sp, #12
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	781a      	ldrb	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	785a      	ldrb	r2, [r3, #1]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	3302      	adds	r3, #2
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	461a      	mov	r2, r3
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	3303      	adds	r3, #3
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	021b      	lsls	r3, r3, #8
 800a140:	b29b      	uxth	r3, r3
 800a142:	4413      	add	r3, r2
 800a144:	b29a      	uxth	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	3304      	adds	r3, #4
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	461a      	mov	r2, r3
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	3305      	adds	r3, #5
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	021b      	lsls	r3, r3, #8
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	4413      	add	r3, r2
 800a15e:	b29a      	uxth	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	3306      	adds	r3, #6
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	461a      	mov	r2, r3
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	3307      	adds	r3, #7
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	021b      	lsls	r3, r3, #8
 800a174:	b29b      	uxth	r3, r3
 800a176:	4413      	add	r3, r2
 800a178:	b29a      	uxth	r2, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	80da      	strh	r2, [r3, #6]

}
 800a17e:	bf00      	nop
 800a180:	370c      	adds	r7, #12
 800a182:	46bd      	mov	sp, r7
 800a184:	bc80      	pop	{r7}
 800a186:	4770      	bx	lr

0800a188 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a192:	2180      	movs	r1, #128	@ 0x80
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 fc53 	bl	800aa40 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a19a:	2100      	movs	r1, #0
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 fc4f 	bl	800aa40 <USBD_LL_StallEP>
}
 800a1a2:	bf00      	nop
 800a1a4:	3708      	adds	r7, #8
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b086      	sub	sp, #24
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	60f8      	str	r0, [r7, #12]
 800a1b2:	60b9      	str	r1, [r7, #8]
 800a1b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d032      	beq.n	800a226 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f000 f834 	bl	800a22e <USBD_GetLen>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	005b      	lsls	r3, r3, #1
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a1d4:	7dfb      	ldrb	r3, [r7, #23]
 800a1d6:	1c5a      	adds	r2, r3, #1
 800a1d8:	75fa      	strb	r2, [r7, #23]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	4413      	add	r3, r2
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	7812      	ldrb	r2, [r2, #0]
 800a1e4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a1e6:	7dfb      	ldrb	r3, [r7, #23]
 800a1e8:	1c5a      	adds	r2, r3, #1
 800a1ea:	75fa      	strb	r2, [r7, #23]
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	2203      	movs	r2, #3
 800a1f4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a1f6:	e012      	b.n	800a21e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	1c5a      	adds	r2, r3, #1
 800a1fc:	60fa      	str	r2, [r7, #12]
 800a1fe:	7dfa      	ldrb	r2, [r7, #23]
 800a200:	1c51      	adds	r1, r2, #1
 800a202:	75f9      	strb	r1, [r7, #23]
 800a204:	4611      	mov	r1, r2
 800a206:	68ba      	ldr	r2, [r7, #8]
 800a208:	440a      	add	r2, r1
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a20e:	7dfb      	ldrb	r3, [r7, #23]
 800a210:	1c5a      	adds	r2, r3, #1
 800a212:	75fa      	strb	r2, [r7, #23]
 800a214:	461a      	mov	r2, r3
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	4413      	add	r3, r2
 800a21a:	2200      	movs	r2, #0
 800a21c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d1e8      	bne.n	800a1f8 <USBD_GetString+0x4e>
    }
  }
}
 800a226:	bf00      	nop
 800a228:	3718      	adds	r7, #24
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a22e:	b480      	push	{r7}
 800a230:	b085      	sub	sp, #20
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a236:	2300      	movs	r3, #0
 800a238:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a23a:	e005      	b.n	800a248 <USBD_GetLen+0x1a>
  {
    len++;
 800a23c:	7bfb      	ldrb	r3, [r7, #15]
 800a23e:	3301      	adds	r3, #1
 800a240:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	3301      	adds	r3, #1
 800a246:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1f5      	bne.n	800a23c <USBD_GetLen+0xe>
  }

  return len;
 800a250:	7bfb      	ldrb	r3, [r7, #15]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3714      	adds	r7, #20
 800a256:	46bd      	mov	sp, r7
 800a258:	bc80      	pop	{r7}
 800a25a:	4770      	bx	lr

0800a25c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	4613      	mov	r3, r2
 800a268:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2202      	movs	r2, #2
 800a26e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a272:	88fa      	ldrh	r2, [r7, #6]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a278:	88fa      	ldrh	r2, [r7, #6]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a27e:	88fb      	ldrh	r3, [r7, #6]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	2100      	movs	r1, #0
 800a284:	68f8      	ldr	r0, [r7, #12]
 800a286:	f000 fc63 	bl	800ab50 <USBD_LL_Transmit>

  return USBD_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2a2:	88fb      	ldrh	r3, [r7, #6]
 800a2a4:	68ba      	ldr	r2, [r7, #8]
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f000 fc51 	bl	800ab50 <USBD_LL_Transmit>

  return USBD_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2203      	movs	r2, #3
 800a2ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a2ce:	88fa      	ldrh	r2, [r7, #6]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a2d6:	88fa      	ldrh	r2, [r7, #6]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2de:	88fb      	ldrh	r3, [r7, #6]
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f000 fc56 	bl	800ab96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2ea:	2300      	movs	r3, #0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	4613      	mov	r3, r2
 800a300:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a302:	88fb      	ldrh	r3, [r7, #6]
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	2100      	movs	r1, #0
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 fc44 	bl	800ab96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2204      	movs	r2, #4
 800a324:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a328:	2300      	movs	r3, #0
 800a32a:	2200      	movs	r2, #0
 800a32c:	2100      	movs	r1, #0
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 fc0e 	bl	800ab50 <USBD_LL_Transmit>

  return USBD_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b082      	sub	sp, #8
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2205      	movs	r2, #5
 800a34a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a34e:	2300      	movs	r3, #0
 800a350:	2200      	movs	r2, #0
 800a352:	2100      	movs	r1, #0
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fc1e 	bl	800ab96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a368:	2200      	movs	r2, #0
 800a36a:	4912      	ldr	r1, [pc, #72]	@ (800a3b4 <MX_USB_DEVICE_Init+0x50>)
 800a36c:	4812      	ldr	r0, [pc, #72]	@ (800a3b8 <MX_USB_DEVICE_Init+0x54>)
 800a36e:	f7fe ff62 	bl	8009236 <USBD_Init>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d001      	beq.n	800a37c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a378:	f7f8 fb45 	bl	8002a06 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a37c:	490f      	ldr	r1, [pc, #60]	@ (800a3bc <MX_USB_DEVICE_Init+0x58>)
 800a37e:	480e      	ldr	r0, [pc, #56]	@ (800a3b8 <MX_USB_DEVICE_Init+0x54>)
 800a380:	f7fe ff84 	bl	800928c <USBD_RegisterClass>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a38a:	f7f8 fb3c 	bl	8002a06 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a38e:	490c      	ldr	r1, [pc, #48]	@ (800a3c0 <MX_USB_DEVICE_Init+0x5c>)
 800a390:	4809      	ldr	r0, [pc, #36]	@ (800a3b8 <MX_USB_DEVICE_Init+0x54>)
 800a392:	f7fe feb5 	bl	8009100 <USBD_CDC_RegisterInterface>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d001      	beq.n	800a3a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a39c:	f7f8 fb33 	bl	8002a06 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a3a0:	4805      	ldr	r0, [pc, #20]	@ (800a3b8 <MX_USB_DEVICE_Init+0x54>)
 800a3a2:	f7fe ff8c 	bl	80092be <USBD_Start>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d001      	beq.n	800a3b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a3ac:	f7f8 fb2b 	bl	8002a06 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a3b0:	bf00      	nop
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	20000144 	.word	0x20000144
 800a3b8:	20000414 	.word	0x20000414
 800a3bc:	20000030 	.word	0x20000030
 800a3c0:	20000134 	.word	0x20000134

0800a3c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	4905      	ldr	r1, [pc, #20]	@ (800a3e0 <CDC_Init_FS+0x1c>)
 800a3cc:	4805      	ldr	r0, [pc, #20]	@ (800a3e4 <CDC_Init_FS+0x20>)
 800a3ce:	f7fe fead 	bl	800912c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a3d2:	4905      	ldr	r1, [pc, #20]	@ (800a3e8 <CDC_Init_FS+0x24>)
 800a3d4:	4803      	ldr	r0, [pc, #12]	@ (800a3e4 <CDC_Init_FS+0x20>)
 800a3d6:	f7fe fec2 	bl	800915e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a3da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	20000ad8 	.word	0x20000ad8
 800a3e4:	20000414 	.word	0x20000414
 800a3e8:	200006d8 	.word	0x200006d8

0800a3ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a3f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bc80      	pop	{r7}
 800a3f8:	4770      	bx	lr
	...

0800a3fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	6039      	str	r1, [r7, #0]
 800a406:	71fb      	strb	r3, [r7, #7]
 800a408:	4613      	mov	r3, r2
 800a40a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a40c:	79fb      	ldrb	r3, [r7, #7]
 800a40e:	2b23      	cmp	r3, #35	@ 0x23
 800a410:	d84a      	bhi.n	800a4a8 <CDC_Control_FS+0xac>
 800a412:	a201      	add	r2, pc, #4	@ (adr r2, 800a418 <CDC_Control_FS+0x1c>)
 800a414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a418:	0800a4a9 	.word	0x0800a4a9
 800a41c:	0800a4a9 	.word	0x0800a4a9
 800a420:	0800a4a9 	.word	0x0800a4a9
 800a424:	0800a4a9 	.word	0x0800a4a9
 800a428:	0800a4a9 	.word	0x0800a4a9
 800a42c:	0800a4a9 	.word	0x0800a4a9
 800a430:	0800a4a9 	.word	0x0800a4a9
 800a434:	0800a4a9 	.word	0x0800a4a9
 800a438:	0800a4a9 	.word	0x0800a4a9
 800a43c:	0800a4a9 	.word	0x0800a4a9
 800a440:	0800a4a9 	.word	0x0800a4a9
 800a444:	0800a4a9 	.word	0x0800a4a9
 800a448:	0800a4a9 	.word	0x0800a4a9
 800a44c:	0800a4a9 	.word	0x0800a4a9
 800a450:	0800a4a9 	.word	0x0800a4a9
 800a454:	0800a4a9 	.word	0x0800a4a9
 800a458:	0800a4a9 	.word	0x0800a4a9
 800a45c:	0800a4a9 	.word	0x0800a4a9
 800a460:	0800a4a9 	.word	0x0800a4a9
 800a464:	0800a4a9 	.word	0x0800a4a9
 800a468:	0800a4a9 	.word	0x0800a4a9
 800a46c:	0800a4a9 	.word	0x0800a4a9
 800a470:	0800a4a9 	.word	0x0800a4a9
 800a474:	0800a4a9 	.word	0x0800a4a9
 800a478:	0800a4a9 	.word	0x0800a4a9
 800a47c:	0800a4a9 	.word	0x0800a4a9
 800a480:	0800a4a9 	.word	0x0800a4a9
 800a484:	0800a4a9 	.word	0x0800a4a9
 800a488:	0800a4a9 	.word	0x0800a4a9
 800a48c:	0800a4a9 	.word	0x0800a4a9
 800a490:	0800a4a9 	.word	0x0800a4a9
 800a494:	0800a4a9 	.word	0x0800a4a9
 800a498:	0800a4a9 	.word	0x0800a4a9
 800a49c:	0800a4a9 	.word	0x0800a4a9
 800a4a0:	0800a4a9 	.word	0x0800a4a9
 800a4a4:	0800a4a9 	.word	0x0800a4a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a4a8:	bf00      	nop
  }

  return (USBD_OK);
 800a4aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bc80      	pop	{r7}
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop

0800a4b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a4c2:	6879      	ldr	r1, [r7, #4]
 800a4c4:	4805      	ldr	r0, [pc, #20]	@ (800a4dc <CDC_Receive_FS+0x24>)
 800a4c6:	f7fe fe4a 	bl	800915e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a4ca:	4804      	ldr	r0, [pc, #16]	@ (800a4dc <CDC_Receive_FS+0x24>)
 800a4cc:	f7fe fe89 	bl	80091e2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a4d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	20000414 	.word	0x20000414

0800a4e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a4f0:	4b0d      	ldr	r3, [pc, #52]	@ (800a528 <CDC_Transmit_FS+0x48>)
 800a4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4f6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a502:	2301      	movs	r3, #1
 800a504:	e00b      	b.n	800a51e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a506:	887b      	ldrh	r3, [r7, #2]
 800a508:	461a      	mov	r2, r3
 800a50a:	6879      	ldr	r1, [r7, #4]
 800a50c:	4806      	ldr	r0, [pc, #24]	@ (800a528 <CDC_Transmit_FS+0x48>)
 800a50e:	f7fe fe0d 	bl	800912c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a512:	4805      	ldr	r0, [pc, #20]	@ (800a528 <CDC_Transmit_FS+0x48>)
 800a514:	f7fe fe36 	bl	8009184 <USBD_CDC_TransmitPacket>
 800a518:	4603      	mov	r3, r0
 800a51a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	20000414 	.word	0x20000414

0800a52c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	4603      	mov	r3, r0
 800a534:	6039      	str	r1, [r7, #0]
 800a536:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	2212      	movs	r2, #18
 800a53c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a53e:	4b03      	ldr	r3, [pc, #12]	@ (800a54c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a540:	4618      	mov	r0, r3
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	bc80      	pop	{r7}
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	20000160 	.word	0x20000160

0800a550 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	4603      	mov	r3, r0
 800a558:	6039      	str	r1, [r7, #0]
 800a55a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	2204      	movs	r2, #4
 800a560:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a562:	4b03      	ldr	r3, [pc, #12]	@ (800a570 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a564:	4618      	mov	r0, r3
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	bc80      	pop	{r7}
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	20000174 	.word	0x20000174

0800a574 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	4603      	mov	r3, r0
 800a57c:	6039      	str	r1, [r7, #0]
 800a57e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a580:	79fb      	ldrb	r3, [r7, #7]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d105      	bne.n	800a592 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	4907      	ldr	r1, [pc, #28]	@ (800a5a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a58a:	4808      	ldr	r0, [pc, #32]	@ (800a5ac <USBD_FS_ProductStrDescriptor+0x38>)
 800a58c:	f7ff fe0d 	bl	800a1aa <USBD_GetString>
 800a590:	e004      	b.n	800a59c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	4904      	ldr	r1, [pc, #16]	@ (800a5a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a596:	4805      	ldr	r0, [pc, #20]	@ (800a5ac <USBD_FS_ProductStrDescriptor+0x38>)
 800a598:	f7ff fe07 	bl	800a1aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a59c:	4b02      	ldr	r3, [pc, #8]	@ (800a5a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	20000ed8 	.word	0x20000ed8
 800a5ac:	0800b6f8 	.word	0x0800b6f8

0800a5b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	6039      	str	r1, [r7, #0]
 800a5ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a5bc:	683a      	ldr	r2, [r7, #0]
 800a5be:	4904      	ldr	r1, [pc, #16]	@ (800a5d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a5c0:	4804      	ldr	r0, [pc, #16]	@ (800a5d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a5c2:	f7ff fdf2 	bl	800a1aa <USBD_GetString>
  return USBD_StrDesc;
 800a5c6:	4b02      	ldr	r3, [pc, #8]	@ (800a5d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	20000ed8 	.word	0x20000ed8
 800a5d4:	0800b710 	.word	0x0800b710

0800a5d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	4603      	mov	r3, r0
 800a5e0:	6039      	str	r1, [r7, #0]
 800a5e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	221a      	movs	r2, #26
 800a5e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a5ea:	f000 f843 	bl	800a674 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a5ee:	4b02      	ldr	r3, [pc, #8]	@ (800a5f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3708      	adds	r7, #8
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	20000178 	.word	0x20000178

0800a5fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	4603      	mov	r3, r0
 800a604:	6039      	str	r1, [r7, #0]
 800a606:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a608:	79fb      	ldrb	r3, [r7, #7]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d105      	bne.n	800a61a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a60e:	683a      	ldr	r2, [r7, #0]
 800a610:	4907      	ldr	r1, [pc, #28]	@ (800a630 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a612:	4808      	ldr	r0, [pc, #32]	@ (800a634 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a614:	f7ff fdc9 	bl	800a1aa <USBD_GetString>
 800a618:	e004      	b.n	800a624 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a61a:	683a      	ldr	r2, [r7, #0]
 800a61c:	4904      	ldr	r1, [pc, #16]	@ (800a630 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a61e:	4805      	ldr	r0, [pc, #20]	@ (800a634 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a620:	f7ff fdc3 	bl	800a1aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a624:	4b02      	ldr	r3, [pc, #8]	@ (800a630 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a626:	4618      	mov	r0, r3
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	20000ed8 	.word	0x20000ed8
 800a634:	0800b718 	.word	0x0800b718

0800a638 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	4603      	mov	r3, r0
 800a640:	6039      	str	r1, [r7, #0]
 800a642:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a644:	79fb      	ldrb	r3, [r7, #7]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d105      	bne.n	800a656 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a64a:	683a      	ldr	r2, [r7, #0]
 800a64c:	4907      	ldr	r1, [pc, #28]	@ (800a66c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a64e:	4808      	ldr	r0, [pc, #32]	@ (800a670 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a650:	f7ff fdab 	bl	800a1aa <USBD_GetString>
 800a654:	e004      	b.n	800a660 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	4904      	ldr	r1, [pc, #16]	@ (800a66c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a65a:	4805      	ldr	r0, [pc, #20]	@ (800a670 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a65c:	f7ff fda5 	bl	800a1aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a660:	4b02      	ldr	r3, [pc, #8]	@ (800a66c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a662:	4618      	mov	r0, r3
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	20000ed8 	.word	0x20000ed8
 800a670:	0800b724 	.word	0x0800b724

0800a674 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a67a:	4b0f      	ldr	r3, [pc, #60]	@ (800a6b8 <Get_SerialNum+0x44>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a680:	4b0e      	ldr	r3, [pc, #56]	@ (800a6bc <Get_SerialNum+0x48>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a686:	4b0e      	ldr	r3, [pc, #56]	@ (800a6c0 <Get_SerialNum+0x4c>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4413      	add	r3, r2
 800a692:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d009      	beq.n	800a6ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a69a:	2208      	movs	r2, #8
 800a69c:	4909      	ldr	r1, [pc, #36]	@ (800a6c4 <Get_SerialNum+0x50>)
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f000 f814 	bl	800a6cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a6a4:	2204      	movs	r2, #4
 800a6a6:	4908      	ldr	r1, [pc, #32]	@ (800a6c8 <Get_SerialNum+0x54>)
 800a6a8:	68b8      	ldr	r0, [r7, #8]
 800a6aa:	f000 f80f 	bl	800a6cc <IntToUnicode>
  }
}
 800a6ae:	bf00      	nop
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	1ffff7e8 	.word	0x1ffff7e8
 800a6bc:	1ffff7ec 	.word	0x1ffff7ec
 800a6c0:	1ffff7f0 	.word	0x1ffff7f0
 800a6c4:	2000017a 	.word	0x2000017a
 800a6c8:	2000018a 	.word	0x2000018a

0800a6cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b087      	sub	sp, #28
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a6de:	2300      	movs	r3, #0
 800a6e0:	75fb      	strb	r3, [r7, #23]
 800a6e2:	e027      	b.n	800a734 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	0f1b      	lsrs	r3, r3, #28
 800a6e8:	2b09      	cmp	r3, #9
 800a6ea:	d80b      	bhi.n	800a704 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	0f1b      	lsrs	r3, r3, #28
 800a6f0:	b2da      	uxtb	r2, r3
 800a6f2:	7dfb      	ldrb	r3, [r7, #23]
 800a6f4:	005b      	lsls	r3, r3, #1
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	440b      	add	r3, r1
 800a6fc:	3230      	adds	r2, #48	@ 0x30
 800a6fe:	b2d2      	uxtb	r2, r2
 800a700:	701a      	strb	r2, [r3, #0]
 800a702:	e00a      	b.n	800a71a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	0f1b      	lsrs	r3, r3, #28
 800a708:	b2da      	uxtb	r2, r3
 800a70a:	7dfb      	ldrb	r3, [r7, #23]
 800a70c:	005b      	lsls	r3, r3, #1
 800a70e:	4619      	mov	r1, r3
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	440b      	add	r3, r1
 800a714:	3237      	adds	r2, #55	@ 0x37
 800a716:	b2d2      	uxtb	r2, r2
 800a718:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	011b      	lsls	r3, r3, #4
 800a71e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a720:	7dfb      	ldrb	r3, [r7, #23]
 800a722:	005b      	lsls	r3, r3, #1
 800a724:	3301      	adds	r3, #1
 800a726:	68ba      	ldr	r2, [r7, #8]
 800a728:	4413      	add	r3, r2
 800a72a:	2200      	movs	r2, #0
 800a72c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a72e:	7dfb      	ldrb	r3, [r7, #23]
 800a730:	3301      	adds	r3, #1
 800a732:	75fb      	strb	r3, [r7, #23]
 800a734:	7dfa      	ldrb	r2, [r7, #23]
 800a736:	79fb      	ldrb	r3, [r7, #7]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d3d3      	bcc.n	800a6e4 <IntToUnicode+0x18>
  }
}
 800a73c:	bf00      	nop
 800a73e:	bf00      	nop
 800a740:	371c      	adds	r7, #28
 800a742:	46bd      	mov	sp, r7
 800a744:	bc80      	pop	{r7}
 800a746:	4770      	bx	lr

0800a748 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a0d      	ldr	r2, [pc, #52]	@ (800a78c <HAL_PCD_MspInit+0x44>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d113      	bne.n	800a782 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a75a:	4b0d      	ldr	r3, [pc, #52]	@ (800a790 <HAL_PCD_MspInit+0x48>)
 800a75c:	69db      	ldr	r3, [r3, #28]
 800a75e:	4a0c      	ldr	r2, [pc, #48]	@ (800a790 <HAL_PCD_MspInit+0x48>)
 800a760:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a764:	61d3      	str	r3, [r2, #28]
 800a766:	4b0a      	ldr	r3, [pc, #40]	@ (800a790 <HAL_PCD_MspInit+0x48>)
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a76e:	60fb      	str	r3, [r7, #12]
 800a770:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a772:	2200      	movs	r2, #0
 800a774:	2100      	movs	r1, #0
 800a776:	2014      	movs	r0, #20
 800a778:	f7f8 fc2f 	bl	8002fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a77c:	2014      	movs	r0, #20
 800a77e:	f7f8 fc48 	bl	8003012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a782:	bf00      	nop
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	40005c00 	.word	0x40005c00
 800a790:	40021000 	.word	0x40021000

0800a794 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	f7fe fdcf 	bl	800934e <USBD_LL_SetupStage>
}
 800a7b0:	bf00      	nop
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a7ca:	78fa      	ldrb	r2, [r7, #3]
 800a7cc:	6879      	ldr	r1, [r7, #4]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4413      	add	r3, r2
 800a7d4:	00db      	lsls	r3, r3, #3
 800a7d6:	440b      	add	r3, r1
 800a7d8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	78fb      	ldrb	r3, [r7, #3]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	f7fe fe01 	bl	80093e8 <USBD_LL_DataOutStage>
}
 800a7e6:	bf00      	nop
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b082      	sub	sp, #8
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a800:	78fa      	ldrb	r2, [r7, #3]
 800a802:	6879      	ldr	r1, [r7, #4]
 800a804:	4613      	mov	r3, r2
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4413      	add	r3, r2
 800a80a:	00db      	lsls	r3, r3, #3
 800a80c:	440b      	add	r3, r1
 800a80e:	3324      	adds	r3, #36	@ 0x24
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	78fb      	ldrb	r3, [r7, #3]
 800a814:	4619      	mov	r1, r3
 800a816:	f7fe fe58 	bl	80094ca <USBD_LL_DataInStage>
}
 800a81a:	bf00      	nop
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b082      	sub	sp, #8
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a830:	4618      	mov	r0, r3
 800a832:	f7fe ff68 	bl	8009706 <USBD_LL_SOF>
}
 800a836:	bf00      	nop
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b084      	sub	sp, #16
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a846:	2301      	movs	r3, #1
 800a848:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	799b      	ldrb	r3, [r3, #6]
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d001      	beq.n	800a856 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a852:	f7f8 f8d8 	bl	8002a06 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a85c:	7bfa      	ldrb	r2, [r7, #15]
 800a85e:	4611      	mov	r1, r2
 800a860:	4618      	mov	r0, r3
 800a862:	f7fe ff18 	bl	8009696 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7fe fed1 	bl	8009614 <USBD_LL_Reset>
}
 800a872:	bf00      	nop
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
	...

0800a87c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7fe ff12 	bl	80096b4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	7a9b      	ldrb	r3, [r3, #10]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d005      	beq.n	800a8a4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a898:	4b04      	ldr	r3, [pc, #16]	@ (800a8ac <HAL_PCD_SuspendCallback+0x30>)
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	4a03      	ldr	r2, [pc, #12]	@ (800a8ac <HAL_PCD_SuspendCallback+0x30>)
 800a89e:	f043 0306 	orr.w	r3, r3, #6
 800a8a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a8a4:	bf00      	nop
 800a8a6:	3708      	adds	r7, #8
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	e000ed00 	.word	0xe000ed00

0800a8b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7fe ff0c 	bl	80096dc <USBD_LL_Resume>
}
 800a8c4:	bf00      	nop
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a8d4:	4a28      	ldr	r2, [pc, #160]	@ (800a978 <USBD_LL_Init+0xac>)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a26      	ldr	r2, [pc, #152]	@ (800a978 <USBD_LL_Init+0xac>)
 800a8e0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a8e4:	4b24      	ldr	r3, [pc, #144]	@ (800a978 <USBD_LL_Init+0xac>)
 800a8e6:	4a25      	ldr	r2, [pc, #148]	@ (800a97c <USBD_LL_Init+0xb0>)
 800a8e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a8ea:	4b23      	ldr	r3, [pc, #140]	@ (800a978 <USBD_LL_Init+0xac>)
 800a8ec:	2208      	movs	r2, #8
 800a8ee:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a8f0:	4b21      	ldr	r3, [pc, #132]	@ (800a978 <USBD_LL_Init+0xac>)
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a8f6:	4b20      	ldr	r3, [pc, #128]	@ (800a978 <USBD_LL_Init+0xac>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a8fc:	4b1e      	ldr	r3, [pc, #120]	@ (800a978 <USBD_LL_Init+0xac>)
 800a8fe:	2200      	movs	r2, #0
 800a900:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a902:	4b1d      	ldr	r3, [pc, #116]	@ (800a978 <USBD_LL_Init+0xac>)
 800a904:	2200      	movs	r2, #0
 800a906:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a908:	481b      	ldr	r0, [pc, #108]	@ (800a978 <USBD_LL_Init+0xac>)
 800a90a:	f7f8 fd8f 	bl	800342c <HAL_PCD_Init>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d001      	beq.n	800a918 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a914:	f7f8 f877 	bl	8002a06 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a91e:	2318      	movs	r3, #24
 800a920:	2200      	movs	r2, #0
 800a922:	2100      	movs	r1, #0
 800a924:	f7fa faa0 	bl	8004e68 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a92e:	2358      	movs	r3, #88	@ 0x58
 800a930:	2200      	movs	r2, #0
 800a932:	2180      	movs	r1, #128	@ 0x80
 800a934:	f7fa fa98 	bl	8004e68 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a93e:	23c0      	movs	r3, #192	@ 0xc0
 800a940:	2200      	movs	r2, #0
 800a942:	2181      	movs	r1, #129	@ 0x81
 800a944:	f7fa fa90 	bl	8004e68 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a94e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a952:	2200      	movs	r2, #0
 800a954:	2101      	movs	r1, #1
 800a956:	f7fa fa87 	bl	8004e68 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a960:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a964:	2200      	movs	r2, #0
 800a966:	2182      	movs	r1, #130	@ 0x82
 800a968:	f7fa fa7e 	bl	8004e68 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	200010d8 	.word	0x200010d8
 800a97c:	40005c00 	.word	0x40005c00

0800a980 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a988:	2300      	movs	r3, #0
 800a98a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a996:	4618      	mov	r0, r3
 800a998:	f7f8 fe3e 	bl	8003618 <HAL_PCD_Start>
 800a99c:	4603      	mov	r3, r0
 800a99e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f000 f94e 	bl	800ac44 <USBD_Get_USB_Status>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b084      	sub	sp, #16
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	4608      	mov	r0, r1
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	70fb      	strb	r3, [r7, #3]
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	70bb      	strb	r3, [r7, #2]
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a9de:	78bb      	ldrb	r3, [r7, #2]
 800a9e0:	883a      	ldrh	r2, [r7, #0]
 800a9e2:	78f9      	ldrb	r1, [r7, #3]
 800a9e4:	f7f8 ff92 	bl	800390c <HAL_PCD_EP_Open>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ec:	7bfb      	ldrb	r3, [r7, #15]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 f928 	bl	800ac44 <USBD_Get_USB_Status>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b084      	sub	sp, #16
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa1c:	78fa      	ldrb	r2, [r7, #3]
 800aa1e:	4611      	mov	r1, r2
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7f8 ffd0 	bl	80039c6 <HAL_PCD_EP_Close>
 800aa26:	4603      	mov	r3, r0
 800aa28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa2a:	7bfb      	ldrb	r3, [r7, #15]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f000 f909 	bl	800ac44 <USBD_Get_USB_Status>
 800aa32:	4603      	mov	r3, r0
 800aa34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa36:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	460b      	mov	r3, r1
 800aa4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa50:	2300      	movs	r3, #0
 800aa52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa5a:	78fa      	ldrb	r2, [r7, #3]
 800aa5c:	4611      	mov	r1, r2
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7f9 f878 	bl	8003b54 <HAL_PCD_EP_SetStall>
 800aa64:	4603      	mov	r3, r0
 800aa66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa68:	7bfb      	ldrb	r3, [r7, #15]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f000 f8ea 	bl	800ac44 <USBD_Get_USB_Status>
 800aa70:	4603      	mov	r3, r0
 800aa72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa74:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b084      	sub	sp, #16
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	460b      	mov	r3, r1
 800aa88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa98:	78fa      	ldrb	r2, [r7, #3]
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7f9 f8b9 	bl	8003c14 <HAL_PCD_EP_ClrStall>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaa6:	7bfb      	ldrb	r3, [r7, #15]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 f8cb 	bl	800ac44 <USBD_Get_USB_Status>
 800aaae:	4603      	mov	r3, r0
 800aab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aab2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aace:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	da0b      	bge.n	800aaf0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aad8:	78fb      	ldrb	r3, [r7, #3]
 800aada:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aade:	68f9      	ldr	r1, [r7, #12]
 800aae0:	4613      	mov	r3, r2
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4413      	add	r3, r2
 800aae6:	00db      	lsls	r3, r3, #3
 800aae8:	440b      	add	r3, r1
 800aaea:	3312      	adds	r3, #18
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	e00b      	b.n	800ab08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aaf0:	78fb      	ldrb	r3, [r7, #3]
 800aaf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aaf6:	68f9      	ldr	r1, [r7, #12]
 800aaf8:	4613      	mov	r3, r2
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4413      	add	r3, r2
 800aafe:	00db      	lsls	r3, r3, #3
 800ab00:	440b      	add	r3, r1
 800ab02:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ab06:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3714      	adds	r7, #20
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bc80      	pop	{r7}
 800ab10:	4770      	bx	lr

0800ab12 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b084      	sub	sp, #16
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab2c:	78fa      	ldrb	r2, [r7, #3]
 800ab2e:	4611      	mov	r1, r2
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7f8 fec7 	bl	80038c4 <HAL_PCD_SetAddress>
 800ab36:	4603      	mov	r3, r0
 800ab38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab3a:	7bfb      	ldrb	r3, [r7, #15]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f000 f881 	bl	800ac44 <USBD_Get_USB_Status>
 800ab42:	4603      	mov	r3, r0
 800ab44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	607a      	str	r2, [r7, #4]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	72fb      	strb	r3, [r7, #11]
 800ab60:	4613      	mov	r3, r2
 800ab62:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ab72:	893b      	ldrh	r3, [r7, #8]
 800ab74:	7af9      	ldrb	r1, [r7, #11]
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	f7f8 ffb5 	bl	8003ae6 <HAL_PCD_EP_Transmit>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab80:	7dfb      	ldrb	r3, [r7, #23]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f000 f85e 	bl	800ac44 <USBD_Get_USB_Status>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab8c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3718      	adds	r7, #24
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b086      	sub	sp, #24
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	60f8      	str	r0, [r7, #12]
 800ab9e:	607a      	str	r2, [r7, #4]
 800aba0:	461a      	mov	r2, r3
 800aba2:	460b      	mov	r3, r1
 800aba4:	72fb      	strb	r3, [r7, #11]
 800aba6:	4613      	mov	r3, r2
 800aba8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abaa:	2300      	movs	r3, #0
 800abac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abae:	2300      	movs	r3, #0
 800abb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800abb8:	893b      	ldrh	r3, [r7, #8]
 800abba:	7af9      	ldrb	r1, [r7, #11]
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	f7f8 ff4a 	bl	8003a56 <HAL_PCD_EP_Receive>
 800abc2:	4603      	mov	r3, r0
 800abc4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abc6:	7dfb      	ldrb	r3, [r7, #23]
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 f83b 	bl	800ac44 <USBD_Get_USB_Status>
 800abce:	4603      	mov	r3, r0
 800abd0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abd2:	7dbb      	ldrb	r3, [r7, #22]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3718      	adds	r7, #24
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	460b      	mov	r3, r1
 800abe6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800abee:	78fa      	ldrb	r2, [r7, #3]
 800abf0:	4611      	mov	r1, r2
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7f8 ff60 	bl	8003ab8 <HAL_PCD_EP_GetRxCount>
 800abf8:	4603      	mov	r3, r0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3708      	adds	r7, #8
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
	...

0800ac04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ac0c:	4b02      	ldr	r3, [pc, #8]	@ (800ac18 <USBD_static_malloc+0x14>)
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	370c      	adds	r7, #12
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bc80      	pop	{r7}
 800ac16:	4770      	bx	lr
 800ac18:	200013b0 	.word	0x200013b0

0800ac1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]

}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bc80      	pop	{r7}
 800ac2c:	4770      	bx	lr

0800ac2e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac2e:	b480      	push	{r7}
 800ac30:	b083      	sub	sp, #12
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	460b      	mov	r3, r1
 800ac38:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ac3a:	bf00      	nop
 800ac3c:	370c      	adds	r7, #12
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bc80      	pop	{r7}
 800ac42:	4770      	bx	lr

0800ac44 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac52:	79fb      	ldrb	r3, [r7, #7]
 800ac54:	2b03      	cmp	r3, #3
 800ac56:	d817      	bhi.n	800ac88 <USBD_Get_USB_Status+0x44>
 800ac58:	a201      	add	r2, pc, #4	@ (adr r2, 800ac60 <USBD_Get_USB_Status+0x1c>)
 800ac5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5e:	bf00      	nop
 800ac60:	0800ac71 	.word	0x0800ac71
 800ac64:	0800ac77 	.word	0x0800ac77
 800ac68:	0800ac7d 	.word	0x0800ac7d
 800ac6c:	0800ac83 	.word	0x0800ac83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	73fb      	strb	r3, [r7, #15]
    break;
 800ac74:	e00b      	b.n	800ac8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac76:	2302      	movs	r3, #2
 800ac78:	73fb      	strb	r3, [r7, #15]
    break;
 800ac7a:	e008      	b.n	800ac8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac80:	e005      	b.n	800ac8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac82:	2302      	movs	r3, #2
 800ac84:	73fb      	strb	r3, [r7, #15]
    break;
 800ac86:	e002      	b.n	800ac8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac88:	2302      	movs	r3, #2
 800ac8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac8c:	bf00      	nop
  }
  return usb_status;
 800ac8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bc80      	pop	{r7}
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop

0800ac9c <siprintf>:
 800ac9c:	b40e      	push	{r1, r2, r3}
 800ac9e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aca2:	b510      	push	{r4, lr}
 800aca4:	2400      	movs	r4, #0
 800aca6:	b09d      	sub	sp, #116	@ 0x74
 800aca8:	ab1f      	add	r3, sp, #124	@ 0x7c
 800acaa:	9002      	str	r0, [sp, #8]
 800acac:	9006      	str	r0, [sp, #24]
 800acae:	9107      	str	r1, [sp, #28]
 800acb0:	9104      	str	r1, [sp, #16]
 800acb2:	4809      	ldr	r0, [pc, #36]	@ (800acd8 <siprintf+0x3c>)
 800acb4:	4909      	ldr	r1, [pc, #36]	@ (800acdc <siprintf+0x40>)
 800acb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800acba:	9105      	str	r1, [sp, #20]
 800acbc:	6800      	ldr	r0, [r0, #0]
 800acbe:	a902      	add	r1, sp, #8
 800acc0:	9301      	str	r3, [sp, #4]
 800acc2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800acc4:	f000 f9a0 	bl	800b008 <_svfiprintf_r>
 800acc8:	9b02      	ldr	r3, [sp, #8]
 800acca:	701c      	strb	r4, [r3, #0]
 800accc:	b01d      	add	sp, #116	@ 0x74
 800acce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acd2:	b003      	add	sp, #12
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	20000194 	.word	0x20000194
 800acdc:	ffff0208 	.word	0xffff0208

0800ace0 <memset>:
 800ace0:	4603      	mov	r3, r0
 800ace2:	4402      	add	r2, r0
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d100      	bne.n	800acea <memset+0xa>
 800ace8:	4770      	bx	lr
 800acea:	f803 1b01 	strb.w	r1, [r3], #1
 800acee:	e7f9      	b.n	800ace4 <memset+0x4>

0800acf0 <__errno>:
 800acf0:	4b01      	ldr	r3, [pc, #4]	@ (800acf8 <__errno+0x8>)
 800acf2:	6818      	ldr	r0, [r3, #0]
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	20000194 	.word	0x20000194

0800acfc <__libc_init_array>:
 800acfc:	b570      	push	{r4, r5, r6, lr}
 800acfe:	2600      	movs	r6, #0
 800ad00:	4d0c      	ldr	r5, [pc, #48]	@ (800ad34 <__libc_init_array+0x38>)
 800ad02:	4c0d      	ldr	r4, [pc, #52]	@ (800ad38 <__libc_init_array+0x3c>)
 800ad04:	1b64      	subs	r4, r4, r5
 800ad06:	10a4      	asrs	r4, r4, #2
 800ad08:	42a6      	cmp	r6, r4
 800ad0a:	d109      	bne.n	800ad20 <__libc_init_array+0x24>
 800ad0c:	f000 fc76 	bl	800b5fc <_init>
 800ad10:	2600      	movs	r6, #0
 800ad12:	4d0a      	ldr	r5, [pc, #40]	@ (800ad3c <__libc_init_array+0x40>)
 800ad14:	4c0a      	ldr	r4, [pc, #40]	@ (800ad40 <__libc_init_array+0x44>)
 800ad16:	1b64      	subs	r4, r4, r5
 800ad18:	10a4      	asrs	r4, r4, #2
 800ad1a:	42a6      	cmp	r6, r4
 800ad1c:	d105      	bne.n	800ad2a <__libc_init_array+0x2e>
 800ad1e:	bd70      	pop	{r4, r5, r6, pc}
 800ad20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad24:	4798      	blx	r3
 800ad26:	3601      	adds	r6, #1
 800ad28:	e7ee      	b.n	800ad08 <__libc_init_array+0xc>
 800ad2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad2e:	4798      	blx	r3
 800ad30:	3601      	adds	r6, #1
 800ad32:	e7f2      	b.n	800ad1a <__libc_init_array+0x1e>
 800ad34:	0800b7a4 	.word	0x0800b7a4
 800ad38:	0800b7a4 	.word	0x0800b7a4
 800ad3c:	0800b7a4 	.word	0x0800b7a4
 800ad40:	0800b7a8 	.word	0x0800b7a8

0800ad44 <__retarget_lock_acquire_recursive>:
 800ad44:	4770      	bx	lr

0800ad46 <__retarget_lock_release_recursive>:
 800ad46:	4770      	bx	lr

0800ad48 <memcpy>:
 800ad48:	440a      	add	r2, r1
 800ad4a:	4291      	cmp	r1, r2
 800ad4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad50:	d100      	bne.n	800ad54 <memcpy+0xc>
 800ad52:	4770      	bx	lr
 800ad54:	b510      	push	{r4, lr}
 800ad56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad5a:	4291      	cmp	r1, r2
 800ad5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad60:	d1f9      	bne.n	800ad56 <memcpy+0xe>
 800ad62:	bd10      	pop	{r4, pc}

0800ad64 <_free_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4605      	mov	r5, r0
 800ad68:	2900      	cmp	r1, #0
 800ad6a:	d040      	beq.n	800adee <_free_r+0x8a>
 800ad6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad70:	1f0c      	subs	r4, r1, #4
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	bfb8      	it	lt
 800ad76:	18e4      	addlt	r4, r4, r3
 800ad78:	f000 f8de 	bl	800af38 <__malloc_lock>
 800ad7c:	4a1c      	ldr	r2, [pc, #112]	@ (800adf0 <_free_r+0x8c>)
 800ad7e:	6813      	ldr	r3, [r2, #0]
 800ad80:	b933      	cbnz	r3, 800ad90 <_free_r+0x2c>
 800ad82:	6063      	str	r3, [r4, #4]
 800ad84:	6014      	str	r4, [r2, #0]
 800ad86:	4628      	mov	r0, r5
 800ad88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad8c:	f000 b8da 	b.w	800af44 <__malloc_unlock>
 800ad90:	42a3      	cmp	r3, r4
 800ad92:	d908      	bls.n	800ada6 <_free_r+0x42>
 800ad94:	6820      	ldr	r0, [r4, #0]
 800ad96:	1821      	adds	r1, r4, r0
 800ad98:	428b      	cmp	r3, r1
 800ad9a:	bf01      	itttt	eq
 800ad9c:	6819      	ldreq	r1, [r3, #0]
 800ad9e:	685b      	ldreq	r3, [r3, #4]
 800ada0:	1809      	addeq	r1, r1, r0
 800ada2:	6021      	streq	r1, [r4, #0]
 800ada4:	e7ed      	b.n	800ad82 <_free_r+0x1e>
 800ada6:	461a      	mov	r2, r3
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	b10b      	cbz	r3, 800adb0 <_free_r+0x4c>
 800adac:	42a3      	cmp	r3, r4
 800adae:	d9fa      	bls.n	800ada6 <_free_r+0x42>
 800adb0:	6811      	ldr	r1, [r2, #0]
 800adb2:	1850      	adds	r0, r2, r1
 800adb4:	42a0      	cmp	r0, r4
 800adb6:	d10b      	bne.n	800add0 <_free_r+0x6c>
 800adb8:	6820      	ldr	r0, [r4, #0]
 800adba:	4401      	add	r1, r0
 800adbc:	1850      	adds	r0, r2, r1
 800adbe:	4283      	cmp	r3, r0
 800adc0:	6011      	str	r1, [r2, #0]
 800adc2:	d1e0      	bne.n	800ad86 <_free_r+0x22>
 800adc4:	6818      	ldr	r0, [r3, #0]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	4408      	add	r0, r1
 800adca:	6010      	str	r0, [r2, #0]
 800adcc:	6053      	str	r3, [r2, #4]
 800adce:	e7da      	b.n	800ad86 <_free_r+0x22>
 800add0:	d902      	bls.n	800add8 <_free_r+0x74>
 800add2:	230c      	movs	r3, #12
 800add4:	602b      	str	r3, [r5, #0]
 800add6:	e7d6      	b.n	800ad86 <_free_r+0x22>
 800add8:	6820      	ldr	r0, [r4, #0]
 800adda:	1821      	adds	r1, r4, r0
 800addc:	428b      	cmp	r3, r1
 800adde:	bf01      	itttt	eq
 800ade0:	6819      	ldreq	r1, [r3, #0]
 800ade2:	685b      	ldreq	r3, [r3, #4]
 800ade4:	1809      	addeq	r1, r1, r0
 800ade6:	6021      	streq	r1, [r4, #0]
 800ade8:	6063      	str	r3, [r4, #4]
 800adea:	6054      	str	r4, [r2, #4]
 800adec:	e7cb      	b.n	800ad86 <_free_r+0x22>
 800adee:	bd38      	pop	{r3, r4, r5, pc}
 800adf0:	20001714 	.word	0x20001714

0800adf4 <sbrk_aligned>:
 800adf4:	b570      	push	{r4, r5, r6, lr}
 800adf6:	4e0f      	ldr	r6, [pc, #60]	@ (800ae34 <sbrk_aligned+0x40>)
 800adf8:	460c      	mov	r4, r1
 800adfa:	6831      	ldr	r1, [r6, #0]
 800adfc:	4605      	mov	r5, r0
 800adfe:	b911      	cbnz	r1, 800ae06 <sbrk_aligned+0x12>
 800ae00:	f000 fba8 	bl	800b554 <_sbrk_r>
 800ae04:	6030      	str	r0, [r6, #0]
 800ae06:	4621      	mov	r1, r4
 800ae08:	4628      	mov	r0, r5
 800ae0a:	f000 fba3 	bl	800b554 <_sbrk_r>
 800ae0e:	1c43      	adds	r3, r0, #1
 800ae10:	d103      	bne.n	800ae1a <sbrk_aligned+0x26>
 800ae12:	f04f 34ff 	mov.w	r4, #4294967295
 800ae16:	4620      	mov	r0, r4
 800ae18:	bd70      	pop	{r4, r5, r6, pc}
 800ae1a:	1cc4      	adds	r4, r0, #3
 800ae1c:	f024 0403 	bic.w	r4, r4, #3
 800ae20:	42a0      	cmp	r0, r4
 800ae22:	d0f8      	beq.n	800ae16 <sbrk_aligned+0x22>
 800ae24:	1a21      	subs	r1, r4, r0
 800ae26:	4628      	mov	r0, r5
 800ae28:	f000 fb94 	bl	800b554 <_sbrk_r>
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	d1f2      	bne.n	800ae16 <sbrk_aligned+0x22>
 800ae30:	e7ef      	b.n	800ae12 <sbrk_aligned+0x1e>
 800ae32:	bf00      	nop
 800ae34:	20001710 	.word	0x20001710

0800ae38 <_malloc_r>:
 800ae38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae3c:	1ccd      	adds	r5, r1, #3
 800ae3e:	f025 0503 	bic.w	r5, r5, #3
 800ae42:	3508      	adds	r5, #8
 800ae44:	2d0c      	cmp	r5, #12
 800ae46:	bf38      	it	cc
 800ae48:	250c      	movcc	r5, #12
 800ae4a:	2d00      	cmp	r5, #0
 800ae4c:	4606      	mov	r6, r0
 800ae4e:	db01      	blt.n	800ae54 <_malloc_r+0x1c>
 800ae50:	42a9      	cmp	r1, r5
 800ae52:	d904      	bls.n	800ae5e <_malloc_r+0x26>
 800ae54:	230c      	movs	r3, #12
 800ae56:	6033      	str	r3, [r6, #0]
 800ae58:	2000      	movs	r0, #0
 800ae5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af34 <_malloc_r+0xfc>
 800ae62:	f000 f869 	bl	800af38 <__malloc_lock>
 800ae66:	f8d8 3000 	ldr.w	r3, [r8]
 800ae6a:	461c      	mov	r4, r3
 800ae6c:	bb44      	cbnz	r4, 800aec0 <_malloc_r+0x88>
 800ae6e:	4629      	mov	r1, r5
 800ae70:	4630      	mov	r0, r6
 800ae72:	f7ff ffbf 	bl	800adf4 <sbrk_aligned>
 800ae76:	1c43      	adds	r3, r0, #1
 800ae78:	4604      	mov	r4, r0
 800ae7a:	d158      	bne.n	800af2e <_malloc_r+0xf6>
 800ae7c:	f8d8 4000 	ldr.w	r4, [r8]
 800ae80:	4627      	mov	r7, r4
 800ae82:	2f00      	cmp	r7, #0
 800ae84:	d143      	bne.n	800af0e <_malloc_r+0xd6>
 800ae86:	2c00      	cmp	r4, #0
 800ae88:	d04b      	beq.n	800af22 <_malloc_r+0xea>
 800ae8a:	6823      	ldr	r3, [r4, #0]
 800ae8c:	4639      	mov	r1, r7
 800ae8e:	4630      	mov	r0, r6
 800ae90:	eb04 0903 	add.w	r9, r4, r3
 800ae94:	f000 fb5e 	bl	800b554 <_sbrk_r>
 800ae98:	4581      	cmp	r9, r0
 800ae9a:	d142      	bne.n	800af22 <_malloc_r+0xea>
 800ae9c:	6821      	ldr	r1, [r4, #0]
 800ae9e:	4630      	mov	r0, r6
 800aea0:	1a6d      	subs	r5, r5, r1
 800aea2:	4629      	mov	r1, r5
 800aea4:	f7ff ffa6 	bl	800adf4 <sbrk_aligned>
 800aea8:	3001      	adds	r0, #1
 800aeaa:	d03a      	beq.n	800af22 <_malloc_r+0xea>
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	442b      	add	r3, r5
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	f8d8 3000 	ldr.w	r3, [r8]
 800aeb6:	685a      	ldr	r2, [r3, #4]
 800aeb8:	bb62      	cbnz	r2, 800af14 <_malloc_r+0xdc>
 800aeba:	f8c8 7000 	str.w	r7, [r8]
 800aebe:	e00f      	b.n	800aee0 <_malloc_r+0xa8>
 800aec0:	6822      	ldr	r2, [r4, #0]
 800aec2:	1b52      	subs	r2, r2, r5
 800aec4:	d420      	bmi.n	800af08 <_malloc_r+0xd0>
 800aec6:	2a0b      	cmp	r2, #11
 800aec8:	d917      	bls.n	800aefa <_malloc_r+0xc2>
 800aeca:	1961      	adds	r1, r4, r5
 800aecc:	42a3      	cmp	r3, r4
 800aece:	6025      	str	r5, [r4, #0]
 800aed0:	bf18      	it	ne
 800aed2:	6059      	strne	r1, [r3, #4]
 800aed4:	6863      	ldr	r3, [r4, #4]
 800aed6:	bf08      	it	eq
 800aed8:	f8c8 1000 	streq.w	r1, [r8]
 800aedc:	5162      	str	r2, [r4, r5]
 800aede:	604b      	str	r3, [r1, #4]
 800aee0:	4630      	mov	r0, r6
 800aee2:	f000 f82f 	bl	800af44 <__malloc_unlock>
 800aee6:	f104 000b 	add.w	r0, r4, #11
 800aeea:	1d23      	adds	r3, r4, #4
 800aeec:	f020 0007 	bic.w	r0, r0, #7
 800aef0:	1ac2      	subs	r2, r0, r3
 800aef2:	bf1c      	itt	ne
 800aef4:	1a1b      	subne	r3, r3, r0
 800aef6:	50a3      	strne	r3, [r4, r2]
 800aef8:	e7af      	b.n	800ae5a <_malloc_r+0x22>
 800aefa:	6862      	ldr	r2, [r4, #4]
 800aefc:	42a3      	cmp	r3, r4
 800aefe:	bf0c      	ite	eq
 800af00:	f8c8 2000 	streq.w	r2, [r8]
 800af04:	605a      	strne	r2, [r3, #4]
 800af06:	e7eb      	b.n	800aee0 <_malloc_r+0xa8>
 800af08:	4623      	mov	r3, r4
 800af0a:	6864      	ldr	r4, [r4, #4]
 800af0c:	e7ae      	b.n	800ae6c <_malloc_r+0x34>
 800af0e:	463c      	mov	r4, r7
 800af10:	687f      	ldr	r7, [r7, #4]
 800af12:	e7b6      	b.n	800ae82 <_malloc_r+0x4a>
 800af14:	461a      	mov	r2, r3
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	42a3      	cmp	r3, r4
 800af1a:	d1fb      	bne.n	800af14 <_malloc_r+0xdc>
 800af1c:	2300      	movs	r3, #0
 800af1e:	6053      	str	r3, [r2, #4]
 800af20:	e7de      	b.n	800aee0 <_malloc_r+0xa8>
 800af22:	230c      	movs	r3, #12
 800af24:	4630      	mov	r0, r6
 800af26:	6033      	str	r3, [r6, #0]
 800af28:	f000 f80c 	bl	800af44 <__malloc_unlock>
 800af2c:	e794      	b.n	800ae58 <_malloc_r+0x20>
 800af2e:	6005      	str	r5, [r0, #0]
 800af30:	e7d6      	b.n	800aee0 <_malloc_r+0xa8>
 800af32:	bf00      	nop
 800af34:	20001714 	.word	0x20001714

0800af38 <__malloc_lock>:
 800af38:	4801      	ldr	r0, [pc, #4]	@ (800af40 <__malloc_lock+0x8>)
 800af3a:	f7ff bf03 	b.w	800ad44 <__retarget_lock_acquire_recursive>
 800af3e:	bf00      	nop
 800af40:	2000170c 	.word	0x2000170c

0800af44 <__malloc_unlock>:
 800af44:	4801      	ldr	r0, [pc, #4]	@ (800af4c <__malloc_unlock+0x8>)
 800af46:	f7ff befe 	b.w	800ad46 <__retarget_lock_release_recursive>
 800af4a:	bf00      	nop
 800af4c:	2000170c 	.word	0x2000170c

0800af50 <__ssputs_r>:
 800af50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af54:	461f      	mov	r7, r3
 800af56:	688e      	ldr	r6, [r1, #8]
 800af58:	4682      	mov	sl, r0
 800af5a:	42be      	cmp	r6, r7
 800af5c:	460c      	mov	r4, r1
 800af5e:	4690      	mov	r8, r2
 800af60:	680b      	ldr	r3, [r1, #0]
 800af62:	d82d      	bhi.n	800afc0 <__ssputs_r+0x70>
 800af64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800af6c:	d026      	beq.n	800afbc <__ssputs_r+0x6c>
 800af6e:	6965      	ldr	r5, [r4, #20]
 800af70:	6909      	ldr	r1, [r1, #16]
 800af72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af76:	eba3 0901 	sub.w	r9, r3, r1
 800af7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af7e:	1c7b      	adds	r3, r7, #1
 800af80:	444b      	add	r3, r9
 800af82:	106d      	asrs	r5, r5, #1
 800af84:	429d      	cmp	r5, r3
 800af86:	bf38      	it	cc
 800af88:	461d      	movcc	r5, r3
 800af8a:	0553      	lsls	r3, r2, #21
 800af8c:	d527      	bpl.n	800afde <__ssputs_r+0x8e>
 800af8e:	4629      	mov	r1, r5
 800af90:	f7ff ff52 	bl	800ae38 <_malloc_r>
 800af94:	4606      	mov	r6, r0
 800af96:	b360      	cbz	r0, 800aff2 <__ssputs_r+0xa2>
 800af98:	464a      	mov	r2, r9
 800af9a:	6921      	ldr	r1, [r4, #16]
 800af9c:	f7ff fed4 	bl	800ad48 <memcpy>
 800afa0:	89a3      	ldrh	r3, [r4, #12]
 800afa2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800afa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afaa:	81a3      	strh	r3, [r4, #12]
 800afac:	6126      	str	r6, [r4, #16]
 800afae:	444e      	add	r6, r9
 800afb0:	6026      	str	r6, [r4, #0]
 800afb2:	463e      	mov	r6, r7
 800afb4:	6165      	str	r5, [r4, #20]
 800afb6:	eba5 0509 	sub.w	r5, r5, r9
 800afba:	60a5      	str	r5, [r4, #8]
 800afbc:	42be      	cmp	r6, r7
 800afbe:	d900      	bls.n	800afc2 <__ssputs_r+0x72>
 800afc0:	463e      	mov	r6, r7
 800afc2:	4632      	mov	r2, r6
 800afc4:	4641      	mov	r1, r8
 800afc6:	6820      	ldr	r0, [r4, #0]
 800afc8:	f000 faaa 	bl	800b520 <memmove>
 800afcc:	2000      	movs	r0, #0
 800afce:	68a3      	ldr	r3, [r4, #8]
 800afd0:	1b9b      	subs	r3, r3, r6
 800afd2:	60a3      	str	r3, [r4, #8]
 800afd4:	6823      	ldr	r3, [r4, #0]
 800afd6:	4433      	add	r3, r6
 800afd8:	6023      	str	r3, [r4, #0]
 800afda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afde:	462a      	mov	r2, r5
 800afe0:	f000 fad6 	bl	800b590 <_realloc_r>
 800afe4:	4606      	mov	r6, r0
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d1e0      	bne.n	800afac <__ssputs_r+0x5c>
 800afea:	4650      	mov	r0, sl
 800afec:	6921      	ldr	r1, [r4, #16]
 800afee:	f7ff feb9 	bl	800ad64 <_free_r>
 800aff2:	230c      	movs	r3, #12
 800aff4:	f8ca 3000 	str.w	r3, [sl]
 800aff8:	89a3      	ldrh	r3, [r4, #12]
 800affa:	f04f 30ff 	mov.w	r0, #4294967295
 800affe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b002:	81a3      	strh	r3, [r4, #12]
 800b004:	e7e9      	b.n	800afda <__ssputs_r+0x8a>
	...

0800b008 <_svfiprintf_r>:
 800b008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00c:	4698      	mov	r8, r3
 800b00e:	898b      	ldrh	r3, [r1, #12]
 800b010:	4607      	mov	r7, r0
 800b012:	061b      	lsls	r3, r3, #24
 800b014:	460d      	mov	r5, r1
 800b016:	4614      	mov	r4, r2
 800b018:	b09d      	sub	sp, #116	@ 0x74
 800b01a:	d510      	bpl.n	800b03e <_svfiprintf_r+0x36>
 800b01c:	690b      	ldr	r3, [r1, #16]
 800b01e:	b973      	cbnz	r3, 800b03e <_svfiprintf_r+0x36>
 800b020:	2140      	movs	r1, #64	@ 0x40
 800b022:	f7ff ff09 	bl	800ae38 <_malloc_r>
 800b026:	6028      	str	r0, [r5, #0]
 800b028:	6128      	str	r0, [r5, #16]
 800b02a:	b930      	cbnz	r0, 800b03a <_svfiprintf_r+0x32>
 800b02c:	230c      	movs	r3, #12
 800b02e:	603b      	str	r3, [r7, #0]
 800b030:	f04f 30ff 	mov.w	r0, #4294967295
 800b034:	b01d      	add	sp, #116	@ 0x74
 800b036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b03a:	2340      	movs	r3, #64	@ 0x40
 800b03c:	616b      	str	r3, [r5, #20]
 800b03e:	2300      	movs	r3, #0
 800b040:	9309      	str	r3, [sp, #36]	@ 0x24
 800b042:	2320      	movs	r3, #32
 800b044:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b048:	2330      	movs	r3, #48	@ 0x30
 800b04a:	f04f 0901 	mov.w	r9, #1
 800b04e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b052:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b1ec <_svfiprintf_r+0x1e4>
 800b056:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b05a:	4623      	mov	r3, r4
 800b05c:	469a      	mov	sl, r3
 800b05e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b062:	b10a      	cbz	r2, 800b068 <_svfiprintf_r+0x60>
 800b064:	2a25      	cmp	r2, #37	@ 0x25
 800b066:	d1f9      	bne.n	800b05c <_svfiprintf_r+0x54>
 800b068:	ebba 0b04 	subs.w	fp, sl, r4
 800b06c:	d00b      	beq.n	800b086 <_svfiprintf_r+0x7e>
 800b06e:	465b      	mov	r3, fp
 800b070:	4622      	mov	r2, r4
 800b072:	4629      	mov	r1, r5
 800b074:	4638      	mov	r0, r7
 800b076:	f7ff ff6b 	bl	800af50 <__ssputs_r>
 800b07a:	3001      	adds	r0, #1
 800b07c:	f000 80a7 	beq.w	800b1ce <_svfiprintf_r+0x1c6>
 800b080:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b082:	445a      	add	r2, fp
 800b084:	9209      	str	r2, [sp, #36]	@ 0x24
 800b086:	f89a 3000 	ldrb.w	r3, [sl]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f000 809f 	beq.w	800b1ce <_svfiprintf_r+0x1c6>
 800b090:	2300      	movs	r3, #0
 800b092:	f04f 32ff 	mov.w	r2, #4294967295
 800b096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b09a:	f10a 0a01 	add.w	sl, sl, #1
 800b09e:	9304      	str	r3, [sp, #16]
 800b0a0:	9307      	str	r3, [sp, #28]
 800b0a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0a6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0a8:	4654      	mov	r4, sl
 800b0aa:	2205      	movs	r2, #5
 800b0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b0:	484e      	ldr	r0, [pc, #312]	@ (800b1ec <_svfiprintf_r+0x1e4>)
 800b0b2:	f000 fa5f 	bl	800b574 <memchr>
 800b0b6:	9a04      	ldr	r2, [sp, #16]
 800b0b8:	b9d8      	cbnz	r0, 800b0f2 <_svfiprintf_r+0xea>
 800b0ba:	06d0      	lsls	r0, r2, #27
 800b0bc:	bf44      	itt	mi
 800b0be:	2320      	movmi	r3, #32
 800b0c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0c4:	0711      	lsls	r1, r2, #28
 800b0c6:	bf44      	itt	mi
 800b0c8:	232b      	movmi	r3, #43	@ 0x2b
 800b0ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0ce:	f89a 3000 	ldrb.w	r3, [sl]
 800b0d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0d4:	d015      	beq.n	800b102 <_svfiprintf_r+0xfa>
 800b0d6:	4654      	mov	r4, sl
 800b0d8:	2000      	movs	r0, #0
 800b0da:	f04f 0c0a 	mov.w	ip, #10
 800b0de:	9a07      	ldr	r2, [sp, #28]
 800b0e0:	4621      	mov	r1, r4
 800b0e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0e6:	3b30      	subs	r3, #48	@ 0x30
 800b0e8:	2b09      	cmp	r3, #9
 800b0ea:	d94b      	bls.n	800b184 <_svfiprintf_r+0x17c>
 800b0ec:	b1b0      	cbz	r0, 800b11c <_svfiprintf_r+0x114>
 800b0ee:	9207      	str	r2, [sp, #28]
 800b0f0:	e014      	b.n	800b11c <_svfiprintf_r+0x114>
 800b0f2:	eba0 0308 	sub.w	r3, r0, r8
 800b0f6:	fa09 f303 	lsl.w	r3, r9, r3
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	46a2      	mov	sl, r4
 800b0fe:	9304      	str	r3, [sp, #16]
 800b100:	e7d2      	b.n	800b0a8 <_svfiprintf_r+0xa0>
 800b102:	9b03      	ldr	r3, [sp, #12]
 800b104:	1d19      	adds	r1, r3, #4
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	9103      	str	r1, [sp, #12]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	bfbb      	ittet	lt
 800b10e:	425b      	neglt	r3, r3
 800b110:	f042 0202 	orrlt.w	r2, r2, #2
 800b114:	9307      	strge	r3, [sp, #28]
 800b116:	9307      	strlt	r3, [sp, #28]
 800b118:	bfb8      	it	lt
 800b11a:	9204      	strlt	r2, [sp, #16]
 800b11c:	7823      	ldrb	r3, [r4, #0]
 800b11e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b120:	d10a      	bne.n	800b138 <_svfiprintf_r+0x130>
 800b122:	7863      	ldrb	r3, [r4, #1]
 800b124:	2b2a      	cmp	r3, #42	@ 0x2a
 800b126:	d132      	bne.n	800b18e <_svfiprintf_r+0x186>
 800b128:	9b03      	ldr	r3, [sp, #12]
 800b12a:	3402      	adds	r4, #2
 800b12c:	1d1a      	adds	r2, r3, #4
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	9203      	str	r2, [sp, #12]
 800b132:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b136:	9305      	str	r3, [sp, #20]
 800b138:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b1f0 <_svfiprintf_r+0x1e8>
 800b13c:	2203      	movs	r2, #3
 800b13e:	4650      	mov	r0, sl
 800b140:	7821      	ldrb	r1, [r4, #0]
 800b142:	f000 fa17 	bl	800b574 <memchr>
 800b146:	b138      	cbz	r0, 800b158 <_svfiprintf_r+0x150>
 800b148:	2240      	movs	r2, #64	@ 0x40
 800b14a:	9b04      	ldr	r3, [sp, #16]
 800b14c:	eba0 000a 	sub.w	r0, r0, sl
 800b150:	4082      	lsls	r2, r0
 800b152:	4313      	orrs	r3, r2
 800b154:	3401      	adds	r4, #1
 800b156:	9304      	str	r3, [sp, #16]
 800b158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b15c:	2206      	movs	r2, #6
 800b15e:	4825      	ldr	r0, [pc, #148]	@ (800b1f4 <_svfiprintf_r+0x1ec>)
 800b160:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b164:	f000 fa06 	bl	800b574 <memchr>
 800b168:	2800      	cmp	r0, #0
 800b16a:	d036      	beq.n	800b1da <_svfiprintf_r+0x1d2>
 800b16c:	4b22      	ldr	r3, [pc, #136]	@ (800b1f8 <_svfiprintf_r+0x1f0>)
 800b16e:	bb1b      	cbnz	r3, 800b1b8 <_svfiprintf_r+0x1b0>
 800b170:	9b03      	ldr	r3, [sp, #12]
 800b172:	3307      	adds	r3, #7
 800b174:	f023 0307 	bic.w	r3, r3, #7
 800b178:	3308      	adds	r3, #8
 800b17a:	9303      	str	r3, [sp, #12]
 800b17c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b17e:	4433      	add	r3, r6
 800b180:	9309      	str	r3, [sp, #36]	@ 0x24
 800b182:	e76a      	b.n	800b05a <_svfiprintf_r+0x52>
 800b184:	460c      	mov	r4, r1
 800b186:	2001      	movs	r0, #1
 800b188:	fb0c 3202 	mla	r2, ip, r2, r3
 800b18c:	e7a8      	b.n	800b0e0 <_svfiprintf_r+0xd8>
 800b18e:	2300      	movs	r3, #0
 800b190:	f04f 0c0a 	mov.w	ip, #10
 800b194:	4619      	mov	r1, r3
 800b196:	3401      	adds	r4, #1
 800b198:	9305      	str	r3, [sp, #20]
 800b19a:	4620      	mov	r0, r4
 800b19c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1a0:	3a30      	subs	r2, #48	@ 0x30
 800b1a2:	2a09      	cmp	r2, #9
 800b1a4:	d903      	bls.n	800b1ae <_svfiprintf_r+0x1a6>
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d0c6      	beq.n	800b138 <_svfiprintf_r+0x130>
 800b1aa:	9105      	str	r1, [sp, #20]
 800b1ac:	e7c4      	b.n	800b138 <_svfiprintf_r+0x130>
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1b6:	e7f0      	b.n	800b19a <_svfiprintf_r+0x192>
 800b1b8:	ab03      	add	r3, sp, #12
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	462a      	mov	r2, r5
 800b1be:	4638      	mov	r0, r7
 800b1c0:	4b0e      	ldr	r3, [pc, #56]	@ (800b1fc <_svfiprintf_r+0x1f4>)
 800b1c2:	a904      	add	r1, sp, #16
 800b1c4:	f3af 8000 	nop.w
 800b1c8:	1c42      	adds	r2, r0, #1
 800b1ca:	4606      	mov	r6, r0
 800b1cc:	d1d6      	bne.n	800b17c <_svfiprintf_r+0x174>
 800b1ce:	89ab      	ldrh	r3, [r5, #12]
 800b1d0:	065b      	lsls	r3, r3, #25
 800b1d2:	f53f af2d 	bmi.w	800b030 <_svfiprintf_r+0x28>
 800b1d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1d8:	e72c      	b.n	800b034 <_svfiprintf_r+0x2c>
 800b1da:	ab03      	add	r3, sp, #12
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	462a      	mov	r2, r5
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	4b06      	ldr	r3, [pc, #24]	@ (800b1fc <_svfiprintf_r+0x1f4>)
 800b1e4:	a904      	add	r1, sp, #16
 800b1e6:	f000 f87d 	bl	800b2e4 <_printf_i>
 800b1ea:	e7ed      	b.n	800b1c8 <_svfiprintf_r+0x1c0>
 800b1ec:	0800b766 	.word	0x0800b766
 800b1f0:	0800b76c 	.word	0x0800b76c
 800b1f4:	0800b770 	.word	0x0800b770
 800b1f8:	00000000 	.word	0x00000000
 800b1fc:	0800af51 	.word	0x0800af51

0800b200 <_printf_common>:
 800b200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b204:	4616      	mov	r6, r2
 800b206:	4698      	mov	r8, r3
 800b208:	688a      	ldr	r2, [r1, #8]
 800b20a:	690b      	ldr	r3, [r1, #16]
 800b20c:	4607      	mov	r7, r0
 800b20e:	4293      	cmp	r3, r2
 800b210:	bfb8      	it	lt
 800b212:	4613      	movlt	r3, r2
 800b214:	6033      	str	r3, [r6, #0]
 800b216:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b21a:	460c      	mov	r4, r1
 800b21c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b220:	b10a      	cbz	r2, 800b226 <_printf_common+0x26>
 800b222:	3301      	adds	r3, #1
 800b224:	6033      	str	r3, [r6, #0]
 800b226:	6823      	ldr	r3, [r4, #0]
 800b228:	0699      	lsls	r1, r3, #26
 800b22a:	bf42      	ittt	mi
 800b22c:	6833      	ldrmi	r3, [r6, #0]
 800b22e:	3302      	addmi	r3, #2
 800b230:	6033      	strmi	r3, [r6, #0]
 800b232:	6825      	ldr	r5, [r4, #0]
 800b234:	f015 0506 	ands.w	r5, r5, #6
 800b238:	d106      	bne.n	800b248 <_printf_common+0x48>
 800b23a:	f104 0a19 	add.w	sl, r4, #25
 800b23e:	68e3      	ldr	r3, [r4, #12]
 800b240:	6832      	ldr	r2, [r6, #0]
 800b242:	1a9b      	subs	r3, r3, r2
 800b244:	42ab      	cmp	r3, r5
 800b246:	dc2b      	bgt.n	800b2a0 <_printf_common+0xa0>
 800b248:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b24c:	6822      	ldr	r2, [r4, #0]
 800b24e:	3b00      	subs	r3, #0
 800b250:	bf18      	it	ne
 800b252:	2301      	movne	r3, #1
 800b254:	0692      	lsls	r2, r2, #26
 800b256:	d430      	bmi.n	800b2ba <_printf_common+0xba>
 800b258:	4641      	mov	r1, r8
 800b25a:	4638      	mov	r0, r7
 800b25c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b260:	47c8      	blx	r9
 800b262:	3001      	adds	r0, #1
 800b264:	d023      	beq.n	800b2ae <_printf_common+0xae>
 800b266:	6823      	ldr	r3, [r4, #0]
 800b268:	6922      	ldr	r2, [r4, #16]
 800b26a:	f003 0306 	and.w	r3, r3, #6
 800b26e:	2b04      	cmp	r3, #4
 800b270:	bf14      	ite	ne
 800b272:	2500      	movne	r5, #0
 800b274:	6833      	ldreq	r3, [r6, #0]
 800b276:	f04f 0600 	mov.w	r6, #0
 800b27a:	bf08      	it	eq
 800b27c:	68e5      	ldreq	r5, [r4, #12]
 800b27e:	f104 041a 	add.w	r4, r4, #26
 800b282:	bf08      	it	eq
 800b284:	1aed      	subeq	r5, r5, r3
 800b286:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b28a:	bf08      	it	eq
 800b28c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b290:	4293      	cmp	r3, r2
 800b292:	bfc4      	itt	gt
 800b294:	1a9b      	subgt	r3, r3, r2
 800b296:	18ed      	addgt	r5, r5, r3
 800b298:	42b5      	cmp	r5, r6
 800b29a:	d11a      	bne.n	800b2d2 <_printf_common+0xd2>
 800b29c:	2000      	movs	r0, #0
 800b29e:	e008      	b.n	800b2b2 <_printf_common+0xb2>
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	4652      	mov	r2, sl
 800b2a4:	4641      	mov	r1, r8
 800b2a6:	4638      	mov	r0, r7
 800b2a8:	47c8      	blx	r9
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	d103      	bne.n	800b2b6 <_printf_common+0xb6>
 800b2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2b6:	3501      	adds	r5, #1
 800b2b8:	e7c1      	b.n	800b23e <_printf_common+0x3e>
 800b2ba:	2030      	movs	r0, #48	@ 0x30
 800b2bc:	18e1      	adds	r1, r4, r3
 800b2be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b2c2:	1c5a      	adds	r2, r3, #1
 800b2c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b2c8:	4422      	add	r2, r4
 800b2ca:	3302      	adds	r3, #2
 800b2cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b2d0:	e7c2      	b.n	800b258 <_printf_common+0x58>
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	4622      	mov	r2, r4
 800b2d6:	4641      	mov	r1, r8
 800b2d8:	4638      	mov	r0, r7
 800b2da:	47c8      	blx	r9
 800b2dc:	3001      	adds	r0, #1
 800b2de:	d0e6      	beq.n	800b2ae <_printf_common+0xae>
 800b2e0:	3601      	adds	r6, #1
 800b2e2:	e7d9      	b.n	800b298 <_printf_common+0x98>

0800b2e4 <_printf_i>:
 800b2e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2e8:	7e0f      	ldrb	r7, [r1, #24]
 800b2ea:	4691      	mov	r9, r2
 800b2ec:	2f78      	cmp	r7, #120	@ 0x78
 800b2ee:	4680      	mov	r8, r0
 800b2f0:	460c      	mov	r4, r1
 800b2f2:	469a      	mov	sl, r3
 800b2f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b2f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b2fa:	d807      	bhi.n	800b30c <_printf_i+0x28>
 800b2fc:	2f62      	cmp	r7, #98	@ 0x62
 800b2fe:	d80a      	bhi.n	800b316 <_printf_i+0x32>
 800b300:	2f00      	cmp	r7, #0
 800b302:	f000 80d1 	beq.w	800b4a8 <_printf_i+0x1c4>
 800b306:	2f58      	cmp	r7, #88	@ 0x58
 800b308:	f000 80b8 	beq.w	800b47c <_printf_i+0x198>
 800b30c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b310:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b314:	e03a      	b.n	800b38c <_printf_i+0xa8>
 800b316:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b31a:	2b15      	cmp	r3, #21
 800b31c:	d8f6      	bhi.n	800b30c <_printf_i+0x28>
 800b31e:	a101      	add	r1, pc, #4	@ (adr r1, 800b324 <_printf_i+0x40>)
 800b320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b324:	0800b37d 	.word	0x0800b37d
 800b328:	0800b391 	.word	0x0800b391
 800b32c:	0800b30d 	.word	0x0800b30d
 800b330:	0800b30d 	.word	0x0800b30d
 800b334:	0800b30d 	.word	0x0800b30d
 800b338:	0800b30d 	.word	0x0800b30d
 800b33c:	0800b391 	.word	0x0800b391
 800b340:	0800b30d 	.word	0x0800b30d
 800b344:	0800b30d 	.word	0x0800b30d
 800b348:	0800b30d 	.word	0x0800b30d
 800b34c:	0800b30d 	.word	0x0800b30d
 800b350:	0800b48f 	.word	0x0800b48f
 800b354:	0800b3bb 	.word	0x0800b3bb
 800b358:	0800b449 	.word	0x0800b449
 800b35c:	0800b30d 	.word	0x0800b30d
 800b360:	0800b30d 	.word	0x0800b30d
 800b364:	0800b4b1 	.word	0x0800b4b1
 800b368:	0800b30d 	.word	0x0800b30d
 800b36c:	0800b3bb 	.word	0x0800b3bb
 800b370:	0800b30d 	.word	0x0800b30d
 800b374:	0800b30d 	.word	0x0800b30d
 800b378:	0800b451 	.word	0x0800b451
 800b37c:	6833      	ldr	r3, [r6, #0]
 800b37e:	1d1a      	adds	r2, r3, #4
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	6032      	str	r2, [r6, #0]
 800b384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b388:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b38c:	2301      	movs	r3, #1
 800b38e:	e09c      	b.n	800b4ca <_printf_i+0x1e6>
 800b390:	6833      	ldr	r3, [r6, #0]
 800b392:	6820      	ldr	r0, [r4, #0]
 800b394:	1d19      	adds	r1, r3, #4
 800b396:	6031      	str	r1, [r6, #0]
 800b398:	0606      	lsls	r6, r0, #24
 800b39a:	d501      	bpl.n	800b3a0 <_printf_i+0xbc>
 800b39c:	681d      	ldr	r5, [r3, #0]
 800b39e:	e003      	b.n	800b3a8 <_printf_i+0xc4>
 800b3a0:	0645      	lsls	r5, r0, #25
 800b3a2:	d5fb      	bpl.n	800b39c <_printf_i+0xb8>
 800b3a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3a8:	2d00      	cmp	r5, #0
 800b3aa:	da03      	bge.n	800b3b4 <_printf_i+0xd0>
 800b3ac:	232d      	movs	r3, #45	@ 0x2d
 800b3ae:	426d      	negs	r5, r5
 800b3b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3b4:	230a      	movs	r3, #10
 800b3b6:	4858      	ldr	r0, [pc, #352]	@ (800b518 <_printf_i+0x234>)
 800b3b8:	e011      	b.n	800b3de <_printf_i+0xfa>
 800b3ba:	6821      	ldr	r1, [r4, #0]
 800b3bc:	6833      	ldr	r3, [r6, #0]
 800b3be:	0608      	lsls	r0, r1, #24
 800b3c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b3c4:	d402      	bmi.n	800b3cc <_printf_i+0xe8>
 800b3c6:	0649      	lsls	r1, r1, #25
 800b3c8:	bf48      	it	mi
 800b3ca:	b2ad      	uxthmi	r5, r5
 800b3cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b3ce:	6033      	str	r3, [r6, #0]
 800b3d0:	bf14      	ite	ne
 800b3d2:	230a      	movne	r3, #10
 800b3d4:	2308      	moveq	r3, #8
 800b3d6:	4850      	ldr	r0, [pc, #320]	@ (800b518 <_printf_i+0x234>)
 800b3d8:	2100      	movs	r1, #0
 800b3da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b3de:	6866      	ldr	r6, [r4, #4]
 800b3e0:	2e00      	cmp	r6, #0
 800b3e2:	60a6      	str	r6, [r4, #8]
 800b3e4:	db05      	blt.n	800b3f2 <_printf_i+0x10e>
 800b3e6:	6821      	ldr	r1, [r4, #0]
 800b3e8:	432e      	orrs	r6, r5
 800b3ea:	f021 0104 	bic.w	r1, r1, #4
 800b3ee:	6021      	str	r1, [r4, #0]
 800b3f0:	d04b      	beq.n	800b48a <_printf_i+0x1a6>
 800b3f2:	4616      	mov	r6, r2
 800b3f4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b3f8:	fb03 5711 	mls	r7, r3, r1, r5
 800b3fc:	5dc7      	ldrb	r7, [r0, r7]
 800b3fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b402:	462f      	mov	r7, r5
 800b404:	42bb      	cmp	r3, r7
 800b406:	460d      	mov	r5, r1
 800b408:	d9f4      	bls.n	800b3f4 <_printf_i+0x110>
 800b40a:	2b08      	cmp	r3, #8
 800b40c:	d10b      	bne.n	800b426 <_printf_i+0x142>
 800b40e:	6823      	ldr	r3, [r4, #0]
 800b410:	07df      	lsls	r7, r3, #31
 800b412:	d508      	bpl.n	800b426 <_printf_i+0x142>
 800b414:	6923      	ldr	r3, [r4, #16]
 800b416:	6861      	ldr	r1, [r4, #4]
 800b418:	4299      	cmp	r1, r3
 800b41a:	bfde      	ittt	le
 800b41c:	2330      	movle	r3, #48	@ 0x30
 800b41e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b422:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b426:	1b92      	subs	r2, r2, r6
 800b428:	6122      	str	r2, [r4, #16]
 800b42a:	464b      	mov	r3, r9
 800b42c:	4621      	mov	r1, r4
 800b42e:	4640      	mov	r0, r8
 800b430:	f8cd a000 	str.w	sl, [sp]
 800b434:	aa03      	add	r2, sp, #12
 800b436:	f7ff fee3 	bl	800b200 <_printf_common>
 800b43a:	3001      	adds	r0, #1
 800b43c:	d14a      	bne.n	800b4d4 <_printf_i+0x1f0>
 800b43e:	f04f 30ff 	mov.w	r0, #4294967295
 800b442:	b004      	add	sp, #16
 800b444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b448:	6823      	ldr	r3, [r4, #0]
 800b44a:	f043 0320 	orr.w	r3, r3, #32
 800b44e:	6023      	str	r3, [r4, #0]
 800b450:	2778      	movs	r7, #120	@ 0x78
 800b452:	4832      	ldr	r0, [pc, #200]	@ (800b51c <_printf_i+0x238>)
 800b454:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b458:	6823      	ldr	r3, [r4, #0]
 800b45a:	6831      	ldr	r1, [r6, #0]
 800b45c:	061f      	lsls	r7, r3, #24
 800b45e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b462:	d402      	bmi.n	800b46a <_printf_i+0x186>
 800b464:	065f      	lsls	r7, r3, #25
 800b466:	bf48      	it	mi
 800b468:	b2ad      	uxthmi	r5, r5
 800b46a:	6031      	str	r1, [r6, #0]
 800b46c:	07d9      	lsls	r1, r3, #31
 800b46e:	bf44      	itt	mi
 800b470:	f043 0320 	orrmi.w	r3, r3, #32
 800b474:	6023      	strmi	r3, [r4, #0]
 800b476:	b11d      	cbz	r5, 800b480 <_printf_i+0x19c>
 800b478:	2310      	movs	r3, #16
 800b47a:	e7ad      	b.n	800b3d8 <_printf_i+0xf4>
 800b47c:	4826      	ldr	r0, [pc, #152]	@ (800b518 <_printf_i+0x234>)
 800b47e:	e7e9      	b.n	800b454 <_printf_i+0x170>
 800b480:	6823      	ldr	r3, [r4, #0]
 800b482:	f023 0320 	bic.w	r3, r3, #32
 800b486:	6023      	str	r3, [r4, #0]
 800b488:	e7f6      	b.n	800b478 <_printf_i+0x194>
 800b48a:	4616      	mov	r6, r2
 800b48c:	e7bd      	b.n	800b40a <_printf_i+0x126>
 800b48e:	6833      	ldr	r3, [r6, #0]
 800b490:	6825      	ldr	r5, [r4, #0]
 800b492:	1d18      	adds	r0, r3, #4
 800b494:	6961      	ldr	r1, [r4, #20]
 800b496:	6030      	str	r0, [r6, #0]
 800b498:	062e      	lsls	r6, r5, #24
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	d501      	bpl.n	800b4a2 <_printf_i+0x1be>
 800b49e:	6019      	str	r1, [r3, #0]
 800b4a0:	e002      	b.n	800b4a8 <_printf_i+0x1c4>
 800b4a2:	0668      	lsls	r0, r5, #25
 800b4a4:	d5fb      	bpl.n	800b49e <_printf_i+0x1ba>
 800b4a6:	8019      	strh	r1, [r3, #0]
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	4616      	mov	r6, r2
 800b4ac:	6123      	str	r3, [r4, #16]
 800b4ae:	e7bc      	b.n	800b42a <_printf_i+0x146>
 800b4b0:	6833      	ldr	r3, [r6, #0]
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	1d1a      	adds	r2, r3, #4
 800b4b6:	6032      	str	r2, [r6, #0]
 800b4b8:	681e      	ldr	r6, [r3, #0]
 800b4ba:	6862      	ldr	r2, [r4, #4]
 800b4bc:	4630      	mov	r0, r6
 800b4be:	f000 f859 	bl	800b574 <memchr>
 800b4c2:	b108      	cbz	r0, 800b4c8 <_printf_i+0x1e4>
 800b4c4:	1b80      	subs	r0, r0, r6
 800b4c6:	6060      	str	r0, [r4, #4]
 800b4c8:	6863      	ldr	r3, [r4, #4]
 800b4ca:	6123      	str	r3, [r4, #16]
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4d2:	e7aa      	b.n	800b42a <_printf_i+0x146>
 800b4d4:	4632      	mov	r2, r6
 800b4d6:	4649      	mov	r1, r9
 800b4d8:	4640      	mov	r0, r8
 800b4da:	6923      	ldr	r3, [r4, #16]
 800b4dc:	47d0      	blx	sl
 800b4de:	3001      	adds	r0, #1
 800b4e0:	d0ad      	beq.n	800b43e <_printf_i+0x15a>
 800b4e2:	6823      	ldr	r3, [r4, #0]
 800b4e4:	079b      	lsls	r3, r3, #30
 800b4e6:	d413      	bmi.n	800b510 <_printf_i+0x22c>
 800b4e8:	68e0      	ldr	r0, [r4, #12]
 800b4ea:	9b03      	ldr	r3, [sp, #12]
 800b4ec:	4298      	cmp	r0, r3
 800b4ee:	bfb8      	it	lt
 800b4f0:	4618      	movlt	r0, r3
 800b4f2:	e7a6      	b.n	800b442 <_printf_i+0x15e>
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	4632      	mov	r2, r6
 800b4f8:	4649      	mov	r1, r9
 800b4fa:	4640      	mov	r0, r8
 800b4fc:	47d0      	blx	sl
 800b4fe:	3001      	adds	r0, #1
 800b500:	d09d      	beq.n	800b43e <_printf_i+0x15a>
 800b502:	3501      	adds	r5, #1
 800b504:	68e3      	ldr	r3, [r4, #12]
 800b506:	9903      	ldr	r1, [sp, #12]
 800b508:	1a5b      	subs	r3, r3, r1
 800b50a:	42ab      	cmp	r3, r5
 800b50c:	dcf2      	bgt.n	800b4f4 <_printf_i+0x210>
 800b50e:	e7eb      	b.n	800b4e8 <_printf_i+0x204>
 800b510:	2500      	movs	r5, #0
 800b512:	f104 0619 	add.w	r6, r4, #25
 800b516:	e7f5      	b.n	800b504 <_printf_i+0x220>
 800b518:	0800b777 	.word	0x0800b777
 800b51c:	0800b788 	.word	0x0800b788

0800b520 <memmove>:
 800b520:	4288      	cmp	r0, r1
 800b522:	b510      	push	{r4, lr}
 800b524:	eb01 0402 	add.w	r4, r1, r2
 800b528:	d902      	bls.n	800b530 <memmove+0x10>
 800b52a:	4284      	cmp	r4, r0
 800b52c:	4623      	mov	r3, r4
 800b52e:	d807      	bhi.n	800b540 <memmove+0x20>
 800b530:	1e43      	subs	r3, r0, #1
 800b532:	42a1      	cmp	r1, r4
 800b534:	d008      	beq.n	800b548 <memmove+0x28>
 800b536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b53a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b53e:	e7f8      	b.n	800b532 <memmove+0x12>
 800b540:	4601      	mov	r1, r0
 800b542:	4402      	add	r2, r0
 800b544:	428a      	cmp	r2, r1
 800b546:	d100      	bne.n	800b54a <memmove+0x2a>
 800b548:	bd10      	pop	{r4, pc}
 800b54a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b54e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b552:	e7f7      	b.n	800b544 <memmove+0x24>

0800b554 <_sbrk_r>:
 800b554:	b538      	push	{r3, r4, r5, lr}
 800b556:	2300      	movs	r3, #0
 800b558:	4d05      	ldr	r5, [pc, #20]	@ (800b570 <_sbrk_r+0x1c>)
 800b55a:	4604      	mov	r4, r0
 800b55c:	4608      	mov	r0, r1
 800b55e:	602b      	str	r3, [r5, #0]
 800b560:	f7f7 fb5e 	bl	8002c20 <_sbrk>
 800b564:	1c43      	adds	r3, r0, #1
 800b566:	d102      	bne.n	800b56e <_sbrk_r+0x1a>
 800b568:	682b      	ldr	r3, [r5, #0]
 800b56a:	b103      	cbz	r3, 800b56e <_sbrk_r+0x1a>
 800b56c:	6023      	str	r3, [r4, #0]
 800b56e:	bd38      	pop	{r3, r4, r5, pc}
 800b570:	20001708 	.word	0x20001708

0800b574 <memchr>:
 800b574:	4603      	mov	r3, r0
 800b576:	b510      	push	{r4, lr}
 800b578:	b2c9      	uxtb	r1, r1
 800b57a:	4402      	add	r2, r0
 800b57c:	4293      	cmp	r3, r2
 800b57e:	4618      	mov	r0, r3
 800b580:	d101      	bne.n	800b586 <memchr+0x12>
 800b582:	2000      	movs	r0, #0
 800b584:	e003      	b.n	800b58e <memchr+0x1a>
 800b586:	7804      	ldrb	r4, [r0, #0]
 800b588:	3301      	adds	r3, #1
 800b58a:	428c      	cmp	r4, r1
 800b58c:	d1f6      	bne.n	800b57c <memchr+0x8>
 800b58e:	bd10      	pop	{r4, pc}

0800b590 <_realloc_r>:
 800b590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b594:	4607      	mov	r7, r0
 800b596:	4614      	mov	r4, r2
 800b598:	460d      	mov	r5, r1
 800b59a:	b921      	cbnz	r1, 800b5a6 <_realloc_r+0x16>
 800b59c:	4611      	mov	r1, r2
 800b59e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a2:	f7ff bc49 	b.w	800ae38 <_malloc_r>
 800b5a6:	b92a      	cbnz	r2, 800b5b4 <_realloc_r+0x24>
 800b5a8:	f7ff fbdc 	bl	800ad64 <_free_r>
 800b5ac:	4625      	mov	r5, r4
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b4:	f000 f81a 	bl	800b5ec <_malloc_usable_size_r>
 800b5b8:	4284      	cmp	r4, r0
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	d802      	bhi.n	800b5c4 <_realloc_r+0x34>
 800b5be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b5c2:	d8f4      	bhi.n	800b5ae <_realloc_r+0x1e>
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	4638      	mov	r0, r7
 800b5c8:	f7ff fc36 	bl	800ae38 <_malloc_r>
 800b5cc:	4680      	mov	r8, r0
 800b5ce:	b908      	cbnz	r0, 800b5d4 <_realloc_r+0x44>
 800b5d0:	4645      	mov	r5, r8
 800b5d2:	e7ec      	b.n	800b5ae <_realloc_r+0x1e>
 800b5d4:	42b4      	cmp	r4, r6
 800b5d6:	4622      	mov	r2, r4
 800b5d8:	4629      	mov	r1, r5
 800b5da:	bf28      	it	cs
 800b5dc:	4632      	movcs	r2, r6
 800b5de:	f7ff fbb3 	bl	800ad48 <memcpy>
 800b5e2:	4629      	mov	r1, r5
 800b5e4:	4638      	mov	r0, r7
 800b5e6:	f7ff fbbd 	bl	800ad64 <_free_r>
 800b5ea:	e7f1      	b.n	800b5d0 <_realloc_r+0x40>

0800b5ec <_malloc_usable_size_r>:
 800b5ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5f0:	1f18      	subs	r0, r3, #4
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	bfbc      	itt	lt
 800b5f6:	580b      	ldrlt	r3, [r1, r0]
 800b5f8:	18c0      	addlt	r0, r0, r3
 800b5fa:	4770      	bx	lr

0800b5fc <_init>:
 800b5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fe:	bf00      	nop
 800b600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b602:	bc08      	pop	{r3}
 800b604:	469e      	mov	lr, r3
 800b606:	4770      	bx	lr

0800b608 <_fini>:
 800b608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b60a:	bf00      	nop
 800b60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b60e:	bc08      	pop	{r3}
 800b610:	469e      	mov	lr, r3
 800b612:	4770      	bx	lr
