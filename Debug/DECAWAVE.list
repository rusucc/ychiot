
DECAWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aea4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800afb0  0800afb0  0000bfb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b100  0800b100  0000d1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b100  0800b100  0000c100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b108  0800b108  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b108  0800b108  0000c108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b10c  0800b10c  0000c10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800b110  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001530  200001e8  0800b2f4  0000d1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001718  0800b2f4  0000d718  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014034  00000000  00000000  0000d20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036e7  00000000  00000000  00021241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  00024928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ddb  00000000  00000000  00025b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa15  00000000  00000000  00026963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015423  00000000  00000000  00041378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b63f  00000000  00000000  0005679b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1dda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005088  00000000  00000000  000e1e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e6ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e8 	.word	0x200001e8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800af98 	.word	0x0800af98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ec 	.word	0x200001ec
 8000148:	0800af98 	.word	0x0800af98

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <dummy>:
static void writeValueToBytes(uint8_t data[], long val, unsigned int n);
static bool getBit(uint8_t data[], unsigned int n, unsigned int bit);

static void readBytesOTP(dwDevice_t* dev, uint16_t address, uint8_t data[]);

static void dummy(){
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
	;
}
 8000160:	bf00      	nop
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr

08000168 <dwInit>:

void dwInit(dwDevice_t* dev, dwOps_t* ops)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
 800016e:	6078      	str	r0, [r7, #4]
 8000170:	6039      	str	r1, [r7, #0]
	dev->ops = ops;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	683a      	ldr	r2, [r7, #0]
 8000176:	601a      	str	r2, [r3, #0]
	dev->userdata = NULL;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2200      	movs	r2, #0
 800017c:	605a      	str	r2, [r3, #4]

	/* Device default state */
	dev->extendedFrameLength = FRAME_LENGTH_NORMAL;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2200      	movs	r2, #0
 8000182:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	dev->pacSize = PAC_SIZE_8;
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	2208      	movs	r2, #8
 800018a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	dev->pulseFrequency = TX_PULSE_FREQ_16MHZ;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	2201      	movs	r2, #1
 8000192:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	dev->dataRate = TRX_RATE_6800KBPS;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2202      	movs	r2, #2
 800019a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	dev->preambleLength = TX_PREAMBLE_LEN_128;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2205      	movs	r2, #5
 80001a2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	dev->preambleCode = PREAMBLE_CODE_16MHZ_4;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2204      	movs	r2, #4
 80001aa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	dev->channel = CHANNEL_5;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2205      	movs	r2, #5
 80001b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	dev->smartPower = false;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	dev->frameCheck = true;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2201      	movs	r2, #1
 80001c2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	dev->permanentReceive = false;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2200      	movs	r2, #0
 80001ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	dev->deviceMode = IDLE_MODE;
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2200      	movs	r2, #0
 80001d2:	731a      	strb	r2, [r3, #12]

	dev->forceTxPower = false;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2200      	movs	r2, #0
 80001d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

	writeValueToBytes(dev->antennaDelay.raw, 16384, LEN_STAMP);
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	3338      	adds	r3, #56	@ 0x38
 80001e0:	2205      	movs	r2, #5
 80001e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 fd30 	bl	8001c4c <writeValueToBytes>

	// Dummy callback handlers
	dev->handleSent = dummy;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000218 <dwInit+0xb0>)
 80001f0:	641a      	str	r2, [r3, #64]	@ 0x40
	dev->handleError = dummy;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	4a08      	ldr	r2, [pc, #32]	@ (8000218 <dwInit+0xb0>)
 80001f6:	645a      	str	r2, [r3, #68]	@ 0x44
	dev->handleReceived = dummy;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	4a07      	ldr	r2, [pc, #28]	@ (8000218 <dwInit+0xb0>)
 80001fc:	649a      	str	r2, [r3, #72]	@ 0x48
	dev->handleReceiveTimeout = dummy;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4a05      	ldr	r2, [pc, #20]	@ (8000218 <dwInit+0xb0>)
 8000202:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->handleReceiveFailed = dummy;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a04      	ldr	r2, [pc, #16]	@ (8000218 <dwInit+0xb0>)
 8000208:	651a      	str	r2, [r3, #80]	@ 0x50
	dev->handleReceiveTimestampAvailable = dummy;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a02      	ldr	r2, [pc, #8]	@ (8000218 <dwInit+0xb0>)
 800020e:	655a      	str	r2, [r3, #84]	@ 0x54

}
 8000210:	bf00      	nop
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	0800015d 	.word	0x0800015d

0800021c <dwConfigure>:
{
	return dev->userdata;
}

int dwConfigure(dwDevice_t* dev)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af02      	add	r7, sp, #8
 8000222:	6078      	str	r0, [r7, #4]
	dwEnableClock(dev, dwClockAuto);
 8000224:	2100      	movs	r1, #0
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f000 f916 	bl	8000458 <dwEnableClock>
	delayms(5);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	2105      	movs	r1, #5
 8000234:	6878      	ldr	r0, [r7, #4]
 8000236:	4798      	blx	r3

	// Reset the chip
	if (dev->ops->reset) {
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	691b      	ldr	r3, [r3, #16]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d005      	beq.n	800024e <dwConfigure+0x32>
		dev->ops->reset(dev);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	691b      	ldr	r3, [r3, #16]
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	4798      	blx	r3
 800024c:	e002      	b.n	8000254 <dwConfigure+0x38>
	} else {
		dwSoftReset(dev);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 f966 	bl	8000520 <dwSoftReset>
	}

	if (dwGetDeviceId(dev) != 0xdeca0130) {
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 f8a8 	bl	80003aa <dwGetDeviceId>
 800025a:	4603      	mov	r3, r0
 800025c:	4a27      	ldr	r2, [pc, #156]	@ (80002fc <dwConfigure+0xe0>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d001      	beq.n	8000266 <dwConfigure+0x4a>
		return DW_ERROR_WRONG_ID;
 8000262:	2301      	movs	r3, #1
 8000264:	e045      	b.n	80002f2 <dwConfigure+0xd6>
	}

	// Set default address
	memset(dev->networkAndAddress, 0xff, LEN_PANADR);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	330d      	adds	r3, #13
 800026a:	2204      	movs	r2, #4
 800026c:	21ff      	movs	r1, #255	@ 0xff
 800026e:	4618      	mov	r0, r3
 8000270:	f00a fa04 	bl	800a67c <memset>
	dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	330d      	adds	r3, #13
 8000278:	2204      	movs	r2, #4
 800027a:	9200      	str	r2, [sp, #0]
 800027c:	2200      	movs	r2, #0
 800027e:	2103      	movs	r1, #3
 8000280:	6878      	ldr	r0, [r7, #4]
 8000282:	f001 fd8c 	bl	8001d9e <dwSpiWrite>

	// default configuration
	memset(dev->syscfg, 0, LEN_SYS_CFG);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	3311      	adds	r3, #17
 800028a:	2204      	movs	r2, #4
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f00a f9f4 	bl	800a67c <memset>
	dwSetDoubleBuffering(dev, false);
 8000294:	2100      	movs	r1, #0
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f000 fa5f 	bl	800075a <dwSetDoubleBuffering>
	dwSetInterruptPolarity(dev, true);
 800029c:	2101      	movs	r1, #1
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f000 fa78 	bl	8000794 <dwSetInterruptPolarity>
	dwWriteSystemConfigurationRegister(dev);
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f000 f989 	bl	80005bc <dwWriteSystemConfigurationRegister>
	// default interrupt mask, i.e. no interrupts
	dwClearInterrupts(dev);
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f000 fb3a 	bl	8000924 <dwClearInterrupts>
	dwWriteSystemEventMaskRegister(dev);
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f000 f9c7 	bl	8000644 <dwWriteSystemEventMaskRegister>
	// load LDE micro-code
	dwEnableClock(dev, dwClockXti);
 80002b6:	2101      	movs	r1, #1
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f000 f8cd 	bl	8000458 <dwEnableClock>
	delayms(5);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	2105      	movs	r1, #5
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	4798      	blx	r3
	dwManageLDE(dev);
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f000 f818 	bl	8000300 <dwManageLDE>
	delayms(5);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	68db      	ldr	r3, [r3, #12]
 80002d6:	2105      	movs	r1, #5
 80002d8:	6878      	ldr	r0, [r7, #4]
 80002da:	4798      	blx	r3
	dwEnableClock(dev, dwClockPll);
 80002dc:	2102      	movs	r1, #2
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f000 f8ba 	bl	8000458 <dwEnableClock>
	delayms(5);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	2105      	movs	r1, #5
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	4798      	blx	r3
	//
	// delayms(1);

	// Initialize for default configuration (as per datasheet)

	return DW_ERROR_OK;
 80002f0:	2300      	movs	r3, #0
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	deca0130 	.word	0xdeca0130

08000300 <dwManageLDE>:

void dwManageLDE(dwDevice_t* dev) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af02      	add	r7, sp, #8
 8000306:	6078      	str	r0, [r7, #4]
	// }
	// tell the chip to load the LDE microcode
	// TODO remove clock-related code (PMSC_CTRL) as handled separately
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	uint8_t otpctrl[LEN_OTP_CTRL];
	memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 8000308:	f107 030c 	add.w	r3, r7, #12
 800030c:	2204      	movs	r2, #4
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f00a f9b3 	bl	800a67c <memset>
	memset(otpctrl, 0, LEN_OTP_CTRL);
 8000316:	f107 0308 	add.w	r3, r7, #8
 800031a:	2202      	movs	r2, #2
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f00a f9ac 	bl	800a67c <memset>
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000324:	f107 030c 	add.w	r3, r7, #12
 8000328:	2204      	movs	r2, #4
 800032a:	9200      	str	r2, [sp, #0]
 800032c:	2200      	movs	r2, #0
 800032e:	2136      	movs	r1, #54	@ 0x36
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f001 fce1 	bl	8001cf8 <dwSpiRead>
	dwSpiRead(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	2202      	movs	r2, #2
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	2206      	movs	r2, #6
 8000340:	212d      	movs	r1, #45	@ 0x2d
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f001 fcd8 	bl	8001cf8 <dwSpiRead>
	pmscctrl0[0] = 0x01;
 8000348:	2301      	movs	r3, #1
 800034a:	733b      	strb	r3, [r7, #12]
	pmscctrl0[1] = 0x03;
 800034c:	2303      	movs	r3, #3
 800034e:	737b      	strb	r3, [r7, #13]
	otpctrl[0] = 0x00;
 8000350:	2300      	movs	r3, #0
 8000352:	723b      	strb	r3, [r7, #8]
	otpctrl[1] = 0x80;
 8000354:	2380      	movs	r3, #128	@ 0x80
 8000356:	727b      	strb	r3, [r7, #9]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	2204      	movs	r2, #4
 800035e:	9200      	str	r2, [sp, #0]
 8000360:	2200      	movs	r2, #0
 8000362:	2136      	movs	r1, #54	@ 0x36
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f001 fd1a 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	2202      	movs	r2, #2
 8000370:	9200      	str	r2, [sp, #0]
 8000372:	2206      	movs	r2, #6
 8000374:	212d      	movs	r1, #45	@ 0x2d
 8000376:	6878      	ldr	r0, [r7, #4]
 8000378:	f001 fd11 	bl	8001d9e <dwSpiWrite>
	delayms(5);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	68db      	ldr	r3, [r3, #12]
 8000382:	2105      	movs	r1, #5
 8000384:	6878      	ldr	r0, [r7, #4]
 8000386:	4798      	blx	r3
	pmscctrl0[0] = 0x00;
 8000388:	2300      	movs	r3, #0
 800038a:	733b      	strb	r3, [r7, #12]
	pmscctrl0[1] = 0x02;
 800038c:	2302      	movs	r3, #2
 800038e:	737b      	strb	r3, [r7, #13]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000390:	f107 030c 	add.w	r3, r7, #12
 8000394:	2204      	movs	r2, #4
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	2200      	movs	r2, #0
 800039a:	2136      	movs	r1, #54	@ 0x36
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f001 fcfe 	bl	8001d9e <dwSpiWrite>
}
 80003a2:	bf00      	nop
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <dwGetDeviceId>:


uint32_t dwGetDeviceId(dwDevice_t* dev)
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
	return dwSpiRead32(dev, DEV_ID, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2100      	movs	r1, #0
 80003b6:	6878      	ldr	r0, [r7, #4]
 80003b8:	f001 fcdc 	bl	8001d74 <dwSpiRead32>
 80003bc:	4603      	mov	r3, r0
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <dwEnableAllLeds>:

void dwEnableAllLeds(dwDevice_t* dev)
{
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b084      	sub	sp, #16
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
	uint32_t reg;

	// Set all 4 GPIO in LED mode
	reg = dwSpiRead32(dev, GPIO_CTRL, GPIO_MODE_SUB);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2126      	movs	r1, #38	@ 0x26
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f001 fcce 	bl	8001d74 <dwSpiRead32>
 80003d8:	60f8      	str	r0, [r7, #12]
	reg &= ~0x00003FC0ul;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80003e0:	60fb      	str	r3, [r7, #12]
	reg |= 0x00001540ul;
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	f443 53aa 	orr.w	r3, r3, #5440	@ 0x1540
 80003e8:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, GPIO_CTRL, GPIO_MODE_SUB, reg);
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	2200      	movs	r2, #0
 80003ee:	2126      	movs	r1, #38	@ 0x26
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f001 fd2e 	bl	8001e52 <dwSpiWrite32>

	// Enable debounce clock (used to clock the LED blinking)
	reg = dwSpiRead32(dev, PMSC, PMSC_CTRL0_SUB);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2136      	movs	r1, #54	@ 0x36
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f001 fcba 	bl	8001d74 <dwSpiRead32>
 8000400:	60f8      	str	r0, [r7, #12]
	reg |= 0x00840000ul;
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	f443 0304 	orr.w	r3, r3, #8650752	@ 0x840000
 8000408:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_CTRL0_SUB, reg);
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	2200      	movs	r2, #0
 800040e:	2136      	movs	r1, #54	@ 0x36
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f001 fd1e 	bl	8001e52 <dwSpiWrite32>

	// Enable LED blinking and set the rate
	reg = 0x00000110ul;
 8000416:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800041a:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	2228      	movs	r2, #40	@ 0x28
 8000420:	2136      	movs	r1, #54	@ 0x36
 8000422:	6878      	ldr	r0, [r7, #4]
 8000424:	f001 fd15 	bl	8001e52 <dwSpiWrite32>

	// Trigger a manual blink of the LEDs for test
	reg |= 0x000f0000ul;
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 800042e:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	2228      	movs	r2, #40	@ 0x28
 8000434:	2136      	movs	r1, #54	@ 0x36
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	f001 fd0b 	bl	8001e52 <dwSpiWrite32>
	reg &= ~0x000f0000ul;
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000442:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	2228      	movs	r2, #40	@ 0x28
 8000448:	2136      	movs	r1, #54	@ 0x36
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f001 fd01 	bl	8001e52 <dwSpiWrite32>
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <dwEnableClock>:

void dwEnableClock(dwDevice_t* dev, dwClock_t clock) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af02      	add	r7, sp, #8
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 8000464:	f107 030c 	add.w	r3, r7, #12
 8000468:	2204      	movs	r2, #4
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f00a f905 	bl	800a67c <memset>
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000472:	f107 030c 	add.w	r3, r7, #12
 8000476:	2204      	movs	r2, #4
 8000478:	9200      	str	r2, [sp, #0]
 800047a:	2200      	movs	r2, #0
 800047c:	2136      	movs	r1, #54	@ 0x36
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f001 fc3a 	bl	8001cf8 <dwSpiRead>
	if(clock == dwClockAuto) {
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d10d      	bne.n	80004a6 <dwEnableClock+0x4e>
		dev->ops->spiSetSpeed(dev, dwSpiSpeedLow);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	2100      	movs	r1, #0
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	4798      	blx	r3
		pmscctrl0[0] = dwClockAuto;
 8000496:	2300      	movs	r3, #0
 8000498:	733b      	strb	r3, [r7, #12]
		pmscctrl0[1] &= 0xFE;
 800049a:	7b7b      	ldrb	r3, [r7, #13]
 800049c:	f023 0301 	bic.w	r3, r3, #1
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	737b      	strb	r3, [r7, #13]
 80004a4:	e026      	b.n	80004f4 <dwEnableClock+0x9c>
	} else if(clock == dwClockXti) {
 80004a6:	78fb      	ldrb	r3, [r7, #3]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d110      	bne.n	80004ce <dwEnableClock+0x76>
		dev->ops->spiSetSpeed(dev, dwSpiSpeedLow);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	2100      	movs	r1, #0
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	4798      	blx	r3
		pmscctrl0[0] &= 0xFC;
 80004b8:	7b3b      	ldrb	r3, [r7, #12]
 80004ba:	f023 0303 	bic.w	r3, r3, #3
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	733b      	strb	r3, [r7, #12]
		pmscctrl0[0] |= dwClockXti;
 80004c2:	7b3b      	ldrb	r3, [r7, #12]
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	733b      	strb	r3, [r7, #12]
 80004cc:	e012      	b.n	80004f4 <dwEnableClock+0x9c>
	} else if(clock == dwClockPll) {
 80004ce:	78fb      	ldrb	r3, [r7, #3]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d10f      	bne.n	80004f4 <dwEnableClock+0x9c>
		dev->ops->spiSetSpeed(dev, dwSpiSpeedHigh);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	2101      	movs	r1, #1
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	4798      	blx	r3
		pmscctrl0[0] &= 0xFC;
 80004e0:	7b3b      	ldrb	r3, [r7, #12]
 80004e2:	f023 0303 	bic.w	r3, r3, #3
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	733b      	strb	r3, [r7, #12]
		pmscctrl0[0] |= dwClockPll;
 80004ea:	7b3b      	ldrb	r3, [r7, #12]
 80004ec:	f043 0302 	orr.w	r3, r3, #2
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	733b      	strb	r3, [r7, #12]
	} else {
		// TODO deliver proper warning
	}
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, 1);
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	2201      	movs	r2, #1
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	2200      	movs	r2, #0
 80004fe:	2136      	movs	r1, #54	@ 0x36
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f001 fc4c 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	2204      	movs	r2, #4
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	2200      	movs	r2, #0
 8000510:	2136      	movs	r1, #54	@ 0x36
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f001 fc43 	bl	8001d9e <dwSpiWrite>
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <dwSoftReset>:

void dwSoftReset(dwDevice_t* dev)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af02      	add	r7, sp, #8
 8000526:	6078      	str	r0, [r7, #4]
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2204      	movs	r2, #4
 800052e:	9200      	str	r2, [sp, #0]
 8000530:	2200      	movs	r2, #0
 8000532:	2136      	movs	r1, #54	@ 0x36
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f001 fbdf 	bl	8001cf8 <dwSpiRead>
	pmscctrl0[0] = 0x01;
 800053a:	2301      	movs	r3, #1
 800053c:	733b      	strb	r3, [r7, #12]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 800053e:	f107 030c 	add.w	r3, r7, #12
 8000542:	2204      	movs	r2, #4
 8000544:	9200      	str	r2, [sp, #0]
 8000546:	2200      	movs	r2, #0
 8000548:	2136      	movs	r1, #54	@ 0x36
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f001 fc27 	bl	8001d9e <dwSpiWrite>
	pmscctrl0[3] = 0x00;
 8000550:	2300      	movs	r3, #0
 8000552:	73fb      	strb	r3, [r7, #15]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2204      	movs	r2, #4
 800055a:	9200      	str	r2, [sp, #0]
 800055c:	2200      	movs	r2, #0
 800055e:	2136      	movs	r1, #54	@ 0x36
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f001 fc1c 	bl	8001d9e <dwSpiWrite>
	delayms(10);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	210a      	movs	r1, #10
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	4798      	blx	r3
	pmscctrl0[0] = 0x00;
 8000572:	2300      	movs	r3, #0
 8000574:	733b      	strb	r3, [r7, #12]
	pmscctrl0[3] = 0xF0;
 8000576:	23f0      	movs	r3, #240	@ 0xf0
 8000578:	73fb      	strb	r3, [r7, #15]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	2204      	movs	r2, #4
 8000580:	9200      	str	r2, [sp, #0]
 8000582:	2200      	movs	r2, #0
 8000584:	2136      	movs	r1, #54	@ 0x36
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f001 fc09 	bl	8001d9e <dwSpiWrite>
	// force into idle mode
	dwIdle(dev);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 f9d8 	bl	8000942 <dwIdle>
}
 8000592:	bf00      	nop
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <dwReadSystemConfigurationRegister>:

/* ###########################################################################
 * #### DW1000 register read/write ###########################################
 * ######################################################################### */

void dwReadSystemConfigurationRegister(dwDevice_t* dev) {
 800059a:	b580      	push	{r7, lr}
 800059c:	b084      	sub	sp, #16
 800059e:	af02      	add	r7, sp, #8
 80005a0:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	3311      	adds	r3, #17
 80005a6:	2204      	movs	r2, #4
 80005a8:	9200      	str	r2, [sp, #0]
 80005aa:	2200      	movs	r2, #0
 80005ac:	2104      	movs	r1, #4
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f001 fba2 	bl	8001cf8 <dwSpiRead>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <dwWriteSystemConfigurationRegister>:

void dwWriteSystemConfigurationRegister(dwDevice_t* dev) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af02      	add	r7, sp, #8
 80005c2:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3311      	adds	r3, #17
 80005c8:	2204      	movs	r2, #4
 80005ca:	9200      	str	r2, [sp, #0]
 80005cc:	2200      	movs	r2, #0
 80005ce:	2104      	movs	r1, #4
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f001 fbe4 	bl	8001d9e <dwSpiWrite>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <dwReadNetworkIdAndDeviceAddress>:

void dwReadSystemEventStatusRegister(dwDevice_t* dev) {
	dwSpiRead(dev, SYS_STATUS, NO_SUB, dev->sysstatus, LEN_SYS_STATUS);
}

void dwReadNetworkIdAndDeviceAddress(dwDevice_t* dev) {
 80005de:	b580      	push	{r7, lr}
 80005e0:	b084      	sub	sp, #16
 80005e2:	af02      	add	r7, sp, #8
 80005e4:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	330d      	adds	r3, #13
 80005ea:	2204      	movs	r2, #4
 80005ec:	9200      	str	r2, [sp, #0]
 80005ee:	2200      	movs	r2, #0
 80005f0:	2103      	movs	r1, #3
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f001 fb80 	bl	8001cf8 <dwSpiRead>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <dwWriteNetworkIdAndDeviceAddress>:

void dwWriteNetworkIdAndDeviceAddress(dwDevice_t* dev) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af02      	add	r7, sp, #8
 8000606:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	330d      	adds	r3, #13
 800060c:	2204      	movs	r2, #4
 800060e:	9200      	str	r2, [sp, #0]
 8000610:	2200      	movs	r2, #0
 8000612:	2103      	movs	r1, #3
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f001 fbc2 	bl	8001d9e <dwSpiWrite>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <dwReadSystemEventMaskRegister>:

void dwReadSystemEventMaskRegister(dwDevice_t* dev) {
 8000622:	b580      	push	{r7, lr}
 8000624:	b084      	sub	sp, #16
 8000626:	af02      	add	r7, sp, #8
 8000628:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3315      	adds	r3, #21
 800062e:	2204      	movs	r2, #4
 8000630:	9200      	str	r2, [sp, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	210e      	movs	r1, #14
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f001 fb5e 	bl	8001cf8 <dwSpiRead>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <dwWriteSystemEventMaskRegister>:

void dwWriteSystemEventMaskRegister(dwDevice_t* dev) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af02      	add	r7, sp, #8
 800064a:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3315      	adds	r3, #21
 8000650:	2204      	movs	r2, #4
 8000652:	9200      	str	r2, [sp, #0]
 8000654:	2200      	movs	r2, #0
 8000656:	210e      	movs	r1, #14
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f001 fba0 	bl	8001d9e <dwSpiWrite>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <dwReadChannelControlRegister>:

void dwReadChannelControlRegister(dwDevice_t* dev) {
 8000666:	b580      	push	{r7, lr}
 8000668:	b084      	sub	sp, #16
 800066a:	af02      	add	r7, sp, #8
 800066c:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3319      	adds	r3, #25
 8000672:	2204      	movs	r2, #4
 8000674:	9200      	str	r2, [sp, #0]
 8000676:	2200      	movs	r2, #0
 8000678:	211f      	movs	r1, #31
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f001 fb3c 	bl	8001cf8 <dwSpiRead>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <dwWriteChannelControlRegister>:

void dwWriteChannelControlRegister(dwDevice_t* dev) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3319      	adds	r3, #25
 8000694:	2204      	movs	r2, #4
 8000696:	9200      	str	r2, [sp, #0]
 8000698:	2200      	movs	r2, #0
 800069a:	211f      	movs	r1, #31
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f001 fb7e 	bl	8001d9e <dwSpiWrite>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <dwReadTransmitFrameControlRegister>:

void dwReadTransmitFrameControlRegister(dwDevice_t* dev) {
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b084      	sub	sp, #16
 80006ae:	af02      	add	r7, sp, #8
 80006b0:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	3322      	adds	r3, #34	@ 0x22
 80006b6:	2205      	movs	r2, #5
 80006b8:	9200      	str	r2, [sp, #0]
 80006ba:	2200      	movs	r2, #0
 80006bc:	2108      	movs	r1, #8
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f001 fb1a 	bl	8001cf8 <dwSpiRead>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <dwWriteTransmitFrameControlRegister>:

void dwWriteTransmitFrameControlRegister(dwDevice_t* dev) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af02      	add	r7, sp, #8
 80006d2:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3322      	adds	r3, #34	@ 0x22
 80006d8:	2205      	movs	r2, #5
 80006da:	9200      	str	r2, [sp, #0]
 80006dc:	2200      	movs	r2, #0
 80006de:	2108      	movs	r1, #8
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f001 fb5c 	bl	8001d9e <dwSpiWrite>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <dwSetFrameFilter>:
void dwSetReceiveWaitTimeout(dwDevice_t *dev, uint16_t timeout) {
	dwSpiWrite(dev, RX_FWTO, NO_SUB, &timeout, 2);
	setBit(dev->syscfg, LEN_SYS_CFG, RXWTOE_BIT, timeout!=0);
}

void dwSetFrameFilter(dwDevice_t* dev, bool val) {
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
 80006f6:	460b      	mov	r3, r1
 80006f8:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, FFEN_BIT, val);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f103 0011 	add.w	r0, r3, #17
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	2200      	movs	r2, #0
 8000704:	2104      	movs	r1, #4
 8000706:	f001 fa65 	bl	8001bd4 <setBit>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <dwSetFrameFilterAllowData>:

void dwSetFrameFilterAllowBeacon(dwDevice_t* dev, bool val) {
	setBit(dev->syscfg, LEN_SYS_CFG, FFAB_BIT, val);
}

void dwSetFrameFilterAllowData(dwDevice_t* dev, bool val) {
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
 800071a:	460b      	mov	r3, r1
 800071c:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, FFAD_BIT, val);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f103 0011 	add.w	r0, r3, #17
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	2203      	movs	r2, #3
 8000728:	2104      	movs	r1, #4
 800072a:	f001 fa53 	bl	8001bd4 <setBit>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <dwSetFrameFilterAllowReserved>:

void dwSetFrameFilterAllowMAC(dwDevice_t* dev, bool val) {
	setBit(dev->syscfg, LEN_SYS_CFG, FFAM_BIT, val);
}

void dwSetFrameFilterAllowReserved(dwDevice_t* dev, bool val) {
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	460b      	mov	r3, r1
 8000740:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, FFAR_BIT, val);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f103 0011 	add.w	r0, r3, #17
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	2206      	movs	r2, #6
 800074c:	2104      	movs	r1, #4
 800074e:	f001 fa41 	bl	8001bd4 <setBit>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <dwSetDoubleBuffering>:

void dwSetDoubleBuffering(dwDevice_t* dev, bool val) {
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
 8000762:	460b      	mov	r3, r1
 8000764:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, DIS_DRXB_BIT, !val);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f103 0011 	add.w	r0, r3, #17
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	2b00      	cmp	r3, #0
 8000770:	bf14      	ite	ne
 8000772:	2301      	movne	r3, #1
 8000774:	2300      	moveq	r3, #0
 8000776:	b2db      	uxtb	r3, r3
 8000778:	f083 0301 	eor.w	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	b2db      	uxtb	r3, r3
 8000784:	220c      	movs	r2, #12
 8000786:	2104      	movs	r1, #4
 8000788:	f001 fa24 	bl	8001bd4 <setBit>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <dwSetInterruptPolarity>:

void dwSetInterruptPolarity(dwDevice_t* dev, bool val) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, HIRQ_POL_BIT, val);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f103 0011 	add.w	r0, r3, #17
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	2209      	movs	r2, #9
 80007aa:	2104      	movs	r1, #4
 80007ac:	f001 fa12 	bl	8001bd4 <setBit>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <dwSetReceiverAutoReenable>:

void dwSetReceiverAutoReenable(dwDevice_t* dev, bool val) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, RXAUTR_BIT, val);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f103 0011 	add.w	r0, r3, #17
 80007ca:	78fb      	ldrb	r3, [r7, #3]
 80007cc:	221d      	movs	r2, #29
 80007ce:	2104      	movs	r1, #4
 80007d0:	f001 fa00 	bl	8001bd4 <setBit>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <dwInterruptOnSent>:

void dwInterruptOnSent(dwDevice_t* dev, bool val) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, TXFRS_BIT, val);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f103 0015 	add.w	r0, r3, #21
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	2207      	movs	r2, #7
 80007f2:	2104      	movs	r1, #4
 80007f4:	f001 f9ee 	bl	8001bd4 <setBit>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <dwInterruptOnReceived>:

void dwInterruptOnReceived(dwDevice_t* dev, bool val) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, RXDFR_BIT, val);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f103 0015 	add.w	r0, r3, #21
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	220d      	movs	r2, #13
 8000816:	2104      	movs	r1, #4
 8000818:	f001 f9dc 	bl	8001bd4 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, RXFCG_BIT, val);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f103 0015 	add.w	r0, r3, #21
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	220e      	movs	r2, #14
 8000826:	2104      	movs	r1, #4
 8000828:	f001 f9d4 	bl	8001bd4 <setBit>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <dwInterruptOnReceiveFailed>:

void dwInterruptOnReceiveFailed(dwDevice_t* dev, bool val) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_STATUS, LDEERR_BIT, val);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f103 0015 	add.w	r0, r3, #21
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	2212      	movs	r2, #18
 800084a:	2105      	movs	r1, #5
 800084c:	f001 f9c2 	bl	8001bd4 <setBit>
	setBit(dev->sysmask, LEN_SYS_STATUS, RXFCE_BIT, val);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f103 0015 	add.w	r0, r3, #21
 8000856:	78fb      	ldrb	r3, [r7, #3]
 8000858:	220f      	movs	r2, #15
 800085a:	2105      	movs	r1, #5
 800085c:	f001 f9ba 	bl	8001bd4 <setBit>
	setBit(dev->sysmask, LEN_SYS_STATUS, RXPHE_BIT, val);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f103 0015 	add.w	r0, r3, #21
 8000866:	78fb      	ldrb	r3, [r7, #3]
 8000868:	220c      	movs	r2, #12
 800086a:	2105      	movs	r1, #5
 800086c:	f001 f9b2 	bl	8001bd4 <setBit>
	setBit(dev->sysmask, LEN_SYS_STATUS, RXRFSL_BIT, val);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f103 0015 	add.w	r0, r3, #21
 8000876:	78fb      	ldrb	r3, [r7, #3]
 8000878:	2210      	movs	r2, #16
 800087a:	2105      	movs	r1, #5
 800087c:	f001 f9aa 	bl	8001bd4 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, RXSFDTO_BIT, val);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f103 0015 	add.w	r0, r3, #21
 8000886:	78fb      	ldrb	r3, [r7, #3]
 8000888:	221a      	movs	r2, #26
 800088a:	2104      	movs	r1, #4
 800088c:	f001 f9a2 	bl	8001bd4 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, AFFREJ_BIT, val);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f103 0015 	add.w	r0, r3, #21
 8000896:	78fb      	ldrb	r3, [r7, #3]
 8000898:	221d      	movs	r2, #29
 800089a:	2104      	movs	r1, #4
 800089c:	f001 f99a 	bl	8001bd4 <setBit>
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <dwInterruptOnReceiveTimeout>:

void dwInterruptOnReceiveTimeout(dwDevice_t* dev, bool val) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, RXRFTO_BIT, val);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f103 0015 	add.w	r0, r3, #21
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	2211      	movs	r2, #17
 80008be:	2104      	movs	r1, #4
 80008c0:	f001 f988 	bl	8001bd4 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, RXPTO_BIT, val);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f103 0015 	add.w	r0, r3, #21
 80008ca:	78fb      	ldrb	r3, [r7, #3]
 80008cc:	2215      	movs	r2, #21
 80008ce:	2104      	movs	r1, #4
 80008d0:	f001 f980 	bl	8001bd4 <setBit>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <dwInterruptOnReceiveTimestampAvailable>:

void dwInterruptOnReceiveTimestampAvailable(dwDevice_t* dev, bool val) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, LDEDONE_BIT, val);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f103 0015 	add.w	r0, r3, #21
 80008ee:	78fb      	ldrb	r3, [r7, #3]
 80008f0:	220a      	movs	r2, #10
 80008f2:	2104      	movs	r1, #4
 80008f4:	f001 f96e 	bl	8001bd4 <setBit>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <dwInterruptOnAutomaticAcknowledgeTrigger>:

void dwInterruptOnAutomaticAcknowledgeTrigger(dwDevice_t* dev, bool val) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, AAT_BIT, val);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f103 0015 	add.w	r0, r3, #21
 8000912:	78fb      	ldrb	r3, [r7, #3]
 8000914:	2203      	movs	r2, #3
 8000916:	2104      	movs	r1, #4
 8000918:	f001 f95c 	bl	8001bd4 <setBit>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <dwClearInterrupts>:

void dwClearInterrupts(dwDevice_t* dev) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	memset(dev->sysmask, 0, LEN_SYS_MASK);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3315      	adds	r3, #21
 8000930:	2204      	movs	r2, #4
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f009 fea1 	bl	800a67c <memset>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <dwIdle>:

void dwIdle(dwDevice_t* dev)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b084      	sub	sp, #16
 8000946:	af02      	add	r7, sp, #8
 8000948:	6078      	str	r0, [r7, #4]
	 memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3308      	adds	r3, #8
 800094e:	2204      	movs	r2, #4
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f009 fe92 	bl	800a67c <memset>
	 dev->sysctrl[0] |= 1<<TRXOFF_BIT;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	7a1b      	ldrb	r3, [r3, #8]
 800095c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000960:	b2da      	uxtb	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	721a      	strb	r2, [r3, #8]
	 dev->deviceMode = IDLE_MODE;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2200      	movs	r2, #0
 800096a:	731a      	strb	r2, [r3, #12]
	 dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3308      	adds	r3, #8
 8000970:	2204      	movs	r2, #4
 8000972:	9200      	str	r2, [sp, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	210d      	movs	r1, #13
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f001 fa10 	bl	8001d9e <dwSpiWrite>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <dwNewReceive>:

void dwNewReceive(dwDevice_t* dev) {
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
	dwIdle(dev);
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff ffd7 	bl	8000942 <dwIdle>
	memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3308      	adds	r3, #8
 8000998:	2204      	movs	r2, #4
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f009 fe6d 	bl	800a67c <memset>
	dwClearReceiveStatus(dev);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f000 fa84 	bl	8000eb0 <dwClearReceiveStatus>
	dev->deviceMode = RX_MODE;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2201      	movs	r2, #1
 80009ac:	731a      	strb	r2, [r3, #12]
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <dwStartReceive>:

void dwStartReceive(dwDevice_t* dev) {
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b084      	sub	sp, #16
 80009ba:	af02      	add	r7, sp, #8
 80009bc:	6078      	str	r0, [r7, #4]
	setBit(dev->sysctrl, LEN_SYS_CTRL, SFCST_BIT, !dev->frameCheck);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f103 0008 	add.w	r0, r3, #8
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	bf14      	ite	ne
 80009ce:	2301      	movne	r3, #1
 80009d0:	2300      	moveq	r3, #0
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	f083 0301 	eor.w	r3, r3, #1
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2200      	movs	r2, #0
 80009e2:	2104      	movs	r1, #4
 80009e4:	f001 f8f6 	bl	8001bd4 <setBit>
	setBit(dev->sysctrl, LEN_SYS_CTRL, RXENAB_BIT, true);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f103 0008 	add.w	r0, r3, #8
 80009ee:	2301      	movs	r3, #1
 80009f0:	2208      	movs	r2, #8
 80009f2:	2104      	movs	r1, #4
 80009f4:	f001 f8ee 	bl	8001bd4 <setBit>
	dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3308      	adds	r3, #8
 80009fc:	2204      	movs	r2, #4
 80009fe:	9200      	str	r2, [sp, #0]
 8000a00:	2200      	movs	r2, #0
 8000a02:	210d      	movs	r1, #13
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f001 f9ca 	bl	8001d9e <dwSpiWrite>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <dwNewConfiguration>:
	} else {
		dev->deviceMode = IDLE_MODE;
	}
}

void dwNewConfiguration(dwDevice_t* dev) {
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
	dwIdle(dev);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff ff91 	bl	8000942 <dwIdle>
	dwReadNetworkIdAndDeviceAddress(dev);
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff fddc 	bl	80005de <dwReadNetworkIdAndDeviceAddress>
	dwReadSystemConfigurationRegister(dev);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff fdb7 	bl	800059a <dwReadSystemConfigurationRegister>
	dwReadChannelControlRegister(dev);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff fe1a 	bl	8000666 <dwReadChannelControlRegister>
	dwReadTransmitFrameControlRegister(dev);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff fe39 	bl	80006aa <dwReadTransmitFrameControlRegister>
	dwReadSystemEventMaskRegister(dev);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff fdf2 	bl	8000622 <dwReadSystemEventMaskRegister>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <dwCommitConfiguration>:

void dwCommitConfiguration(dwDevice_t* dev) {
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b084      	sub	sp, #16
 8000a4a:	af02      	add	r7, sp, #8
 8000a4c:	6078      	str	r0, [r7, #4]
	// write all configurations back to device
	dwWriteNetworkIdAndDeviceAddress(dev);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff fdd6 	bl	8000600 <dwWriteNetworkIdAndDeviceAddress>
	dwWriteSystemConfigurationRegister(dev);
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff fdb1 	bl	80005bc <dwWriteSystemConfigurationRegister>
	dwWriteChannelControlRegister(dev);
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff fe14 	bl	8000688 <dwWriteChannelControlRegister>
	dwWriteTransmitFrameControlRegister(dev);
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff fe33 	bl	80006cc <dwWriteTransmitFrameControlRegister>
	dwWriteSystemEventMaskRegister(dev);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff fdec 	bl	8000644 <dwWriteSystemEventMaskRegister>
	// tune according to configuration
	dwTune(dev);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f000 fa61 	bl	8000f34 <dwTune>
	// uint8_t antennaDelayBytes[LEN_STAMP];
	// writeValueToBytes(antennaDelayBytes, 16384, LEN_STAMP);
	// dev->antennaDelay.setTimestamp(antennaDelayBytes);
	// dwSpiRead(dev, TX_ANTD, NO_SUB, antennaDelayBytes, LEN_TX_ANTD);
	// dwSpiRead(dev, LDE_IF, LDE_RXANTD_SUB, antennaDelayBytes, LEN_LDE_RXANTD);
	dwSpiWrite(dev, TX_ANTD, NO_SUB, dev->antennaDelay.raw, LEN_TX_ANTD);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3338      	adds	r3, #56	@ 0x38
 8000a76:	2202      	movs	r2, #2
 8000a78:	9200      	str	r2, [sp, #0]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2118      	movs	r1, #24
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f001 f98d 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_RXANTD_SUB, dev->antennaDelay.raw, LEN_LDE_RXANTD);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3338      	adds	r3, #56	@ 0x38
 8000a88:	2202      	movs	r2, #2
 8000a8a:	9200      	str	r2, [sp, #0]
 8000a8c:	f641 0204 	movw	r2, #6148	@ 0x1804
 8000a90:	212e      	movs	r1, #46	@ 0x2e
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f001 f983 	bl	8001d9e <dwSpiWrite>
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <dwSuppressFrameCheck>:
void dwWaitForResponse(dwDevice_t* dev, bool val) {
	dev->wait4resp = val;
	setBit(dev->sysctrl, LEN_SYS_CTRL, WAIT4RESP_BIT, val);
}

void dwSuppressFrameCheck(dwDevice_t* dev, bool val) {
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	70fb      	strb	r3, [r7, #3]
	dev->frameCheck = !val;
 8000aac:	78fb      	ldrb	r3, [r7, #3]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	bf14      	ite	ne
 8000ab2:	2301      	movne	r3, #1
 8000ab4:	2300      	moveq	r3, #0
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	f083 0301 	eor.w	r3, r3, #1
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <dwUseSmartPower>:

void dwUseSmartPower(dwDevice_t* dev, bool smartPower) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]
	dev->smartPower = smartPower;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	78fa      	ldrb	r2, [r7, #3]
 8000ae4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	setBit(dev->syscfg, LEN_SYS_CFG, DIS_STXP_BIT, !smartPower);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f103 0011 	add.w	r0, r3, #17
 8000aee:	78fb      	ldrb	r3, [r7, #3]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	bf14      	ite	ne
 8000af4:	2301      	movne	r3, #1
 8000af6:	2300      	moveq	r3, #0
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	f083 0301 	eor.w	r3, r3, #1
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2212      	movs	r2, #18
 8000b08:	2104      	movs	r1, #4
 8000b0a:	f001 f863 	bl	8001bd4 <setBit>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <dwSetDataRate>:
	delayBytes[1] &= 0xFE;
	dwSpiWrite(dev, DX_TIME, NO_SUB, delayBytes, LEN_DX_TIME);
}


void dwSetDataRate(dwDevice_t* dev, uint8_t rate) {
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b086      	sub	sp, #24
 8000b1a:	af02      	add	r7, sp, #8
 8000b1c:	6078      	str	r0, [r7, #4]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	70fb      	strb	r3, [r7, #3]
	rate &= 0x03;
 8000b22:	78fb      	ldrb	r3, [r7, #3]
 8000b24:	f003 0303 	and.w	r3, r3, #3
 8000b28:	70fb      	strb	r3, [r7, #3]
	dev->txfctrl[1] &= 0x83;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000b30:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	dev->txfctrl[1] |= (uint8_t)((rate << 5) & 0xFF);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000b42:	78fb      	ldrb	r3, [r7, #3]
 8000b44:	015b      	lsls	r3, r3, #5
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	// special 110kbps flag
	if(rate == TRX_RATE_110KBPS) {
 8000b52:	78fb      	ldrb	r3, [r7, #3]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d108      	bne.n	8000b6a <dwSetDataRate+0x54>
		setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, true);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f103 0011 	add.w	r0, r3, #17
 8000b5e:	2301      	movs	r3, #1
 8000b60:	2216      	movs	r2, #22
 8000b62:	2104      	movs	r1, #4
 8000b64:	f001 f836 	bl	8001bd4 <setBit>
 8000b68:	e007      	b.n	8000b7a <dwSetDataRate+0x64>
	} else {
		setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, false);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f103 0011 	add.w	r0, r3, #17
 8000b70:	2300      	movs	r3, #0
 8000b72:	2216      	movs	r2, #22
 8000b74:	2104      	movs	r1, #4
 8000b76:	f001 f82d 	bl	8001bd4 <setBit>
	}
	// SFD mode and type (non-configurable, as in Table )
	if(rate == TRX_RATE_6800KBPS) {
 8000b7a:	78fb      	ldrb	r3, [r7, #3]
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d118      	bne.n	8000bb2 <dwSetDataRate+0x9c>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, false);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f103 0019 	add.w	r0, r3, #25
 8000b86:	2300      	movs	r3, #0
 8000b88:	2211      	movs	r2, #17
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	f001 f822 	bl	8001bd4 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, false);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f103 0019 	add.w	r0, r3, #25
 8000b96:	2300      	movs	r3, #0
 8000b98:	2214      	movs	r2, #20
 8000b9a:	2104      	movs	r1, #4
 8000b9c:	f001 f81a 	bl	8001bd4 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, false);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f103 0019 	add.w	r0, r3, #25
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	2215      	movs	r2, #21
 8000baa:	2104      	movs	r1, #4
 8000bac:	f001 f812 	bl	8001bd4 <setBit>
 8000bb0:	e017      	b.n	8000be2 <dwSetDataRate+0xcc>
	} else {
		setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, true);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f103 0019 	add.w	r0, r3, #25
 8000bb8:	2301      	movs	r3, #1
 8000bba:	2211      	movs	r2, #17
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	f001 f809 	bl	8001bd4 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, true);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f103 0019 	add.w	r0, r3, #25
 8000bc8:	2301      	movs	r3, #1
 8000bca:	2214      	movs	r2, #20
 8000bcc:	2104      	movs	r1, #4
 8000bce:	f001 f801 	bl	8001bd4 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, true);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f103 0019 	add.w	r0, r3, #25
 8000bd8:	2301      	movs	r3, #1
 8000bda:	2215      	movs	r2, #21
 8000bdc:	2104      	movs	r1, #4
 8000bde:	f000 fff9 	bl	8001bd4 <setBit>

	}
	uint8_t sfdLength;
	if(rate == TRX_RATE_6800KBPS) {
 8000be2:	78fb      	ldrb	r3, [r7, #3]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d102      	bne.n	8000bee <dwSetDataRate+0xd8>
		sfdLength = 0x08;
 8000be8:	2308      	movs	r3, #8
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e007      	b.n	8000bfe <dwSetDataRate+0xe8>
	} else if(rate == TRX_RATE_850KBPS) {
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d102      	bne.n	8000bfa <dwSetDataRate+0xe4>
		sfdLength = 0x10;
 8000bf4:	2310      	movs	r3, #16
 8000bf6:	73fb      	strb	r3, [r7, #15]
 8000bf8:	e001      	b.n	8000bfe <dwSetDataRate+0xe8>
	} else {
		sfdLength = 0x40;
 8000bfa:	2340      	movs	r3, #64	@ 0x40
 8000bfc:	73fb      	strb	r3, [r7, #15]
	}
	dwSpiWrite(dev, USR_SFD, SFD_LENGTH_SUB, &sfdLength, LEN_SFD_LENGTH);
 8000bfe:	f107 030f 	add.w	r3, r7, #15
 8000c02:	2201      	movs	r2, #1
 8000c04:	9200      	str	r2, [sp, #0]
 8000c06:	2200      	movs	r2, #0
 8000c08:	2121      	movs	r1, #33	@ 0x21
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f001 f8c7 	bl	8001d9e <dwSpiWrite>
	dev->dataRate = rate;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	78fa      	ldrb	r2, [r7, #3]
 8000c14:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 8000c18:	bf00      	nop
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <dwSetPulseFrequency>:

void dwSetPulseFrequency(dwDevice_t* dev, uint8_t freq) {
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	70fb      	strb	r3, [r7, #3]
	freq &= 0x03;
 8000c2c:	78fb      	ldrb	r3, [r7, #3]
 8000c2e:	f003 0303 	and.w	r3, r3, #3
 8000c32:	70fb      	strb	r3, [r7, #3]
	dev->txfctrl[2] &= 0xFC;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c3a:	f023 0303 	bic.w	r3, r3, #3
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	dev->txfctrl[2] |= (uint8_t)(freq & 0xFF);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	dev->chanctrl[2] &= 0xF3;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7edb      	ldrb	r3, [r3, #27]
 8000c5c:	f023 030c 	bic.w	r3, r3, #12
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	76da      	strb	r2, [r3, #27]
	dev->chanctrl[2] |= (uint8_t)((freq << 2) & 0xFF);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7eda      	ldrb	r2, [r3, #27]
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4313      	orrs	r3, r2
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	76da      	strb	r2, [r3, #27]
	dev->pulseFrequency = freq;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	78fa      	ldrb	r2, [r7, #3]
 8000c7c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <dwSetPreambleLength>:

uint8_t dwGetPulseFrequency(dwDevice_t* dev) {
	return dev->pulseFrequency;
}

void dwSetPreambleLength(dwDevice_t* dev, uint8_t prealen) {
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	460b      	mov	r3, r1
 8000c94:	70fb      	strb	r3, [r7, #3]
	prealen &= 0x0F;
 8000c96:	78fb      	ldrb	r3, [r7, #3]
 8000c98:	f003 030f 	and.w	r3, r3, #15
 8000c9c:	70fb      	strb	r3, [r7, #3]
	dev->txfctrl[2] &= 0xC3;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000ca4:	f023 033c 	bic.w	r3, r3, #60	@ 0x3c
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	dev->txfctrl[2] |= (uint8_t)((prealen << 2) & 0xFF);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000cb6:	78fb      	ldrb	r3, [r7, #3]
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	if(prealen == TX_PREAMBLE_LEN_64 || prealen == TX_PREAMBLE_LEN_128) {
 8000cc6:	78fb      	ldrb	r3, [r7, #3]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d002      	beq.n	8000cd2 <dwSetPreambleLength+0x48>
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	d104      	bne.n	8000cdc <dwSetPreambleLength+0x52>
		dev->pacSize = PAC_SIZE_8;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2208      	movs	r2, #8
 8000cd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8000cda:	e016      	b.n	8000d0a <dwSetPreambleLength+0x80>
	} else if(prealen == TX_PREAMBLE_LEN_256 || prealen == TX_PREAMBLE_LEN_512) {
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	2b09      	cmp	r3, #9
 8000ce0:	d002      	beq.n	8000ce8 <dwSetPreambleLength+0x5e>
 8000ce2:	78fb      	ldrb	r3, [r7, #3]
 8000ce4:	2b0d      	cmp	r3, #13
 8000ce6:	d104      	bne.n	8000cf2 <dwSetPreambleLength+0x68>
		dev->pacSize = PAC_SIZE_16;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2210      	movs	r2, #16
 8000cec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8000cf0:	e00b      	b.n	8000d0a <dwSetPreambleLength+0x80>
	} else if(prealen == TX_PREAMBLE_LEN_1024) {
 8000cf2:	78fb      	ldrb	r3, [r7, #3]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d104      	bne.n	8000d02 <dwSetPreambleLength+0x78>
		dev->pacSize = PAC_SIZE_32;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2220      	movs	r2, #32
 8000cfc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8000d00:	e003      	b.n	8000d0a <dwSetPreambleLength+0x80>
	} else {
		dev->pacSize = PAC_SIZE_64;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2240      	movs	r2, #64	@ 0x40
 8000d06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}
	dev->preambleLength = prealen;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	78fa      	ldrb	r2, [r7, #3]
 8000d0e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <dwUseExtendedFrameLength>:

void dwUseExtendedFrameLength(dwDevice_t* dev, bool val) {
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
	dev->extendedFrameLength = (val ? FRAME_LENGTH_EXTENDED : FRAME_LENGTH_NORMAL);
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <dwUseExtendedFrameLength+0x16>
 8000d2e:	2203      	movs	r2, #3
 8000d30:	e000      	b.n	8000d34 <dwUseExtendedFrameLength+0x18>
 8000d32:	2200      	movs	r2, #0
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	dev->syscfg[2] &= 0xFC;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	7cdb      	ldrb	r3, [r3, #19]
 8000d3e:	f023 0303 	bic.w	r3, r3, #3
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	74da      	strb	r2, [r3, #19]
	dev->syscfg[2] |= dev->extendedFrameLength;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7cda      	ldrb	r2, [r3, #19]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000d52:	4313      	orrs	r3, r2
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	74da      	strb	r2, [r3, #19]
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <dwSetChannel>:

void dwReceivePermanently(dwDevice_t* dev, bool val) {
	dev->permanentReceive = val;
}

void dwSetChannel(dwDevice_t* dev, uint8_t channel) {
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
	channel &= 0xF;
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	70fb      	strb	r3, [r7, #3]
	dev->chanctrl[0] = ((channel | (channel << 4)) & 0xFF);
 8000d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d7c:	011b      	lsls	r3, r3, #4
 8000d7e:	b25a      	sxtb	r2, r3
 8000d80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	765a      	strb	r2, [r3, #25]
	dev->channel = channel;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	78fa      	ldrb	r2, [r7, #3]
 8000d92:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <dwSetPreambleCode>:

void dwSetPreambleCode(dwDevice_t* dev, uint8_t preacode) {
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	70fb      	strb	r3, [r7, #3]
	preacode &= 0x1F;
 8000dac:	78fb      	ldrb	r3, [r7, #3]
 8000dae:	f003 031f 	and.w	r3, r3, #31
 8000db2:	70fb      	strb	r3, [r7, #3]
	dev->chanctrl[2] &= 0x3F;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7edb      	ldrb	r3, [r3, #27]
 8000db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	76da      	strb	r2, [r3, #27]
	dev->chanctrl[2] |= ((preacode << 6) & 0xFF);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7edb      	ldrb	r3, [r3, #27]
 8000dc6:	b25a      	sxtb	r2, r3
 8000dc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	76da      	strb	r2, [r3, #27]
	dev->chanctrl[3] = 0x00;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	771a      	strb	r2, [r3, #28]
	dev->chanctrl[3] = ((((preacode >> 2) & 0x07) | (preacode << 3)) & 0xFF);
 8000de0:	78fb      	ldrb	r3, [r7, #3]
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	b25a      	sxtb	r2, r3
 8000dee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	771a      	strb	r2, [r3, #28]
	dev->preambleCode = preacode;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	78fa      	ldrb	r2, [r7, #3]
 8000e04:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
	...

08000e14 <dwSetDefaults>:

void dwSetDefaults(dwDevice_t* dev) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	if(dev->deviceMode == TX_MODE) {
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7b1b      	ldrb	r3, [r3, #12]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d03f      	beq.n	8000ea4 <dwSetDefaults+0x90>

	} else if(dev->deviceMode == RX_MODE) {
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	7b1b      	ldrb	r3, [r3, #12]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d03b      	beq.n	8000ea4 <dwSetDefaults+0x90>

	} else if(dev->deviceMode == IDLE_MODE) {
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7b1b      	ldrb	r3, [r3, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d137      	bne.n	8000ea4 <dwSetDefaults+0x90>
		dwUseExtendedFrameLength(dev, false);
 8000e34:	2100      	movs	r1, #0
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff70 	bl	8000d1c <dwUseExtendedFrameLength>
		dwUseSmartPower(dev, false);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff fe48 	bl	8000ad4 <dwUseSmartPower>
		dwSuppressFrameCheck(dev, false);
 8000e44:	2100      	movs	r1, #0
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff fe2a 	bl	8000aa0 <dwSuppressFrameCheck>
		//for global frame filtering
		dwSetFrameFilter(dev, false);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff fc4d 	bl	80006ee <dwSetFrameFilter>
		//for data frame (poll, poll_ack, range, range report, range failed) filtering
		dwSetFrameFilterAllowData(dev, false);
 8000e54:	2100      	movs	r1, #0
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff fc5b 	bl	8000712 <dwSetFrameFilterAllowData>
		//for reserved (blink) frame filtering
		dwSetFrameFilterAllowReserved(dev, false);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff fc69 	bl	8000736 <dwSetFrameFilterAllowReserved>
		//setFrameFilterAllowMAC(true);
		//setFrameFilterAllowBeacon(true);
		//setFrameFilterAllowAcknowledgement(true);
		dwInterruptOnSent(dev, true);
 8000e64:	2101      	movs	r1, #1
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff fcb8 	bl	80007dc <dwInterruptOnSent>
		dwInterruptOnReceived(dev, true);
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff fcc6 	bl	8000800 <dwInterruptOnReceived>
		dwInterruptOnReceiveTimeout(dev, true);
 8000e74:	2101      	movs	r1, #1
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff fd16 	bl	80008a8 <dwInterruptOnReceiveTimeout>
		dwInterruptOnReceiveFailed(dev, false);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff fcd8 	bl	8000834 <dwInterruptOnReceiveFailed>
		dwInterruptOnReceiveTimestampAvailable(dev, false);
 8000e84:	2100      	movs	r1, #0
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff fd28 	bl	80008dc <dwInterruptOnReceiveTimestampAvailable>
		dwInterruptOnAutomaticAcknowledgeTrigger(dev, false);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff fd36 	bl	8000900 <dwInterruptOnAutomaticAcknowledgeTrigger>
		dwSetReceiverAutoReenable(dev, true);
 8000e94:	2101      	movs	r1, #1
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff fc8e 	bl	80007b8 <dwSetReceiverAutoReenable>
		// default mode when powering up the chip
		// still explicitly selected for later tuning
		dwEnableMode(dev, MODE_LONGDATA_RANGE_LOWPOWER);
 8000e9c:	4903      	ldr	r1, [pc, #12]	@ (8000eac <dwSetDefaults+0x98>)
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f818 	bl	8000ed4 <dwEnableMode>
	}
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	0800b098 	.word	0x0800b098

08000eb0 <dwClearReceiveStatus>:
	uint8_t reg[LEN_SYS_STATUS] = {0};
	setBit(reg, LEN_SYS_STATUS, LDEDONE_BIT, true);
	dwSpiWrite(dev, SYS_STATUS, NO_SUB, reg, LEN_SYS_STATUS);
}

void dwClearReceiveStatus(dwDevice_t* dev) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	// clear latched RX bits (i.e. write 1 to clear)
	uint32_t regData = SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_GOOD;
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <dwClearReceiveStatus+0x20>)
 8000eba:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	210f      	movs	r1, #15
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f000 ffc5 	bl	8001e52 <dwSpiWrite32>
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	2427ff00 	.word	0x2427ff00

08000ed4 <dwEnableMode>:
	float twoPower17 = 131072.0f;

	return calculatePower(C * twoPower17, N, dev->pulseFrequency);
}

void dwEnableMode(dwDevice_t *dev, const uint8_t mode[]) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
	dwSetDataRate(dev, mode[0]);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fe16 	bl	8000b16 <dwSetDataRate>
	dwSetPulseFrequency(dev, mode[1]);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fe94 	bl	8000c20 <dwSetPulseFrequency>
	dwSetPreambleLength(dev, mode[2]);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	3302      	adds	r3, #2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	4619      	mov	r1, r3
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fec2 	bl	8000c8a <dwSetPreambleLength>
	// TODO add channel and code to mode tuples
	// TODO add channel and code settings with checks (see Table 58)
	dwSetChannel(dev, CHANNEL_5);
 8000f06:	2105      	movs	r1, #5
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff2b 	bl	8000d64 <dwSetChannel>
	if(mode[1] == TX_PULSE_FREQ_16MHZ) {
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d104      	bne.n	8000f22 <dwEnableMode+0x4e>
		dwSetPreambleCode(dev, PREAMBLE_CODE_16MHZ_4);
 8000f18:	2104      	movs	r1, #4
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ff40 	bl	8000da0 <dwSetPreambleCode>
	} else {
		dwSetPreambleCode(dev, PREAMBLE_CODE_64MHZ_10);
	}
}
 8000f20:	e003      	b.n	8000f2a <dwEnableMode+0x56>
		dwSetPreambleCode(dev, PREAMBLE_CODE_64MHZ_10);
 8000f22:	210a      	movs	r1, #10
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff3b 	bl	8000da0 <dwSetPreambleCode>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <dwTune>:

void dwTune(dwDevice_t *dev) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b098      	sub	sp, #96	@ 0x60
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	6078      	str	r0, [r7, #4]
	uint8_t tcpgdelay[LEN_TC_PGDELAY];
	uint8_t fspllcfg[LEN_FS_PLLCFG];
	uint8_t fsplltune[LEN_FS_PLLTUNE];
	uint8_t fsxtalt[LEN_FS_XTALT];
	// AGC_TUNE1
	if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d108      	bne.n	8000f58 <dwTune+0x24>
		writeValueToBytes(agctune1, 0x8870, LEN_AGC_TUNE1);
 8000f46:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	f648 0170 	movw	r1, #34928	@ 0x8870
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fe7b 	bl	8001c4c <writeValueToBytes>
 8000f56:	e00c      	b.n	8000f72 <dwTune+0x3e>
	} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d107      	bne.n	8000f72 <dwTune+0x3e>
		writeValueToBytes(agctune1, 0x889B, LEN_AGC_TUNE1);
 8000f62:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f66:	2202      	movs	r2, #2
 8000f68:	f648 019b 	movw	r1, #34971	@ 0x889b
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 fe6d 	bl	8001c4c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// AGC_TUNE2
	writeValueToBytes(agctune2, 0x2502A907L, LEN_AGC_TUNE2);
 8000f72:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f76:	2204      	movs	r2, #4
 8000f78:	49b9      	ldr	r1, [pc, #740]	@ (8001260 <dwTune+0x32c>)
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fe66 	bl	8001c4c <writeValueToBytes>
	// AGC_TUNE3
	writeValueToBytes(agctune3, 0x0035, LEN_AGC_TUNE3);
 8000f80:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f84:	2202      	movs	r2, #2
 8000f86:	2135      	movs	r1, #53	@ 0x35
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 fe5f 	bl	8001c4c <writeValueToBytes>
	// DRX_TUNE0b (already optimized according to Table 20 of user manual)
	if(dev->dataRate == TRX_RATE_110KBPS) {
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d107      	bne.n	8000fa8 <dwTune+0x74>
		writeValueToBytes(drxtune0b, 0x0016, LEN_DRX_TUNE0b);
 8000f98:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	2116      	movs	r1, #22
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fe53 	bl	8001c4c <writeValueToBytes>
 8000fa6:	e018      	b.n	8000fda <dwTune+0xa6>
	} else if(dev->dataRate == TRX_RATE_850KBPS) {
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d107      	bne.n	8000fc2 <dwTune+0x8e>
		writeValueToBytes(drxtune0b, 0x0006, LEN_DRX_TUNE0b);
 8000fb2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	2106      	movs	r1, #6
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fe46 	bl	8001c4c <writeValueToBytes>
 8000fc0:	e00b      	b.n	8000fda <dwTune+0xa6>
	} else if(dev->dataRate == TRX_RATE_6800KBPS) {
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d106      	bne.n	8000fda <dwTune+0xa6>
		writeValueToBytes(drxtune0b, 0x0001, LEN_DRX_TUNE0b);
 8000fcc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 fe39 	bl	8001c4c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// DRX_TUNE1a
	if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d107      	bne.n	8000ff4 <dwTune+0xc0>
		writeValueToBytes(drxtune1a, 0x0087, LEN_DRX_TUNE1a);
 8000fe4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000fe8:	2202      	movs	r2, #2
 8000fea:	2187      	movs	r1, #135	@ 0x87
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 fe2d 	bl	8001c4c <writeValueToBytes>
 8000ff2:	e00b      	b.n	800100c <dwTune+0xd8>
	} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d106      	bne.n	800100c <dwTune+0xd8>
		writeValueToBytes(drxtune1a, 0x008D, LEN_DRX_TUNE1a);
 8000ffe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001002:	2202      	movs	r2, #2
 8001004:	218d      	movs	r1, #141	@ 0x8d
 8001006:	4618      	mov	r0, r3
 8001008:	f000 fe20 	bl	8001c4c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// DRX_TUNE1b
	if(dev->preambleLength ==  TX_PREAMBLE_LEN_1536 || dev->preambleLength ==  TX_PREAMBLE_LEN_2048 ||
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001012:	2b06      	cmp	r3, #6
 8001014:	d009      	beq.n	800102a <dwTune+0xf6>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800101c:	2b0a      	cmp	r3, #10
 800101e:	d004      	beq.n	800102a <dwTune+0xf6>
			dev->preambleLength ==  TX_PREAMBLE_LEN_4096) {
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	if(dev->preambleLength ==  TX_PREAMBLE_LEN_1536 || dev->preambleLength ==  TX_PREAMBLE_LEN_2048 ||
 8001026:	2b03      	cmp	r3, #3
 8001028:	d10c      	bne.n	8001044 <dwTune+0x110>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001030:	2b00      	cmp	r3, #0
 8001032:	d12a      	bne.n	800108a <dwTune+0x156>
			writeValueToBytes(drxtune1b, 0x0064, LEN_DRX_TUNE1b);
 8001034:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001038:	2202      	movs	r2, #2
 800103a:	2164      	movs	r1, #100	@ 0x64
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fe05 	bl	8001c4c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001042:	e022      	b.n	800108a <dwTune+0x156>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->preambleLength != TX_PREAMBLE_LEN_64) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800104a:	2b01      	cmp	r3, #1
 800104c:	d011      	beq.n	8001072 <dwTune+0x13e>
		if(dev->dataRate == TRX_RATE_850KBPS || dev->dataRate == TRX_RATE_6800KBPS) {
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001054:	2b01      	cmp	r3, #1
 8001056:	d004      	beq.n	8001062 <dwTune+0x12e>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800105e:	2b02      	cmp	r3, #2
 8001060:	d113      	bne.n	800108a <dwTune+0x156>
			writeValueToBytes(drxtune1b, 0x0020, LEN_DRX_TUNE1b);
 8001062:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001066:	2202      	movs	r2, #2
 8001068:	2120      	movs	r1, #32
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fdee 	bl	8001c4c <writeValueToBytes>
 8001070:	e00b      	b.n	800108a <dwTune+0x156>
		} else {
			// TODO proper error/warning handling
		}
	} else {
		if(dev->dataRate == TRX_RATE_6800KBPS) {
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001078:	2b02      	cmp	r3, #2
 800107a:	d106      	bne.n	800108a <dwTune+0x156>
			writeValueToBytes(drxtune1b, 0x0010, LEN_DRX_TUNE1b);
 800107c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001080:	2202      	movs	r2, #2
 8001082:	2110      	movs	r1, #16
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fde1 	bl	8001c4c <writeValueToBytes>
		} else {
			// TODO proper error/warning handling
		}
	}
	// DRX_TUNE2
	if(dev->pacSize == PAC_SIZE_8) {
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001090:	2b08      	cmp	r3, #8
 8001092:	d119      	bne.n	80010c8 <dwTune+0x194>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800109a:	2b01      	cmp	r3, #1
 800109c:	d107      	bne.n	80010ae <dwTune+0x17a>
			writeValueToBytes(drxtune2, 0x311A002DL, LEN_DRX_TUNE2);
 800109e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010a2:	2204      	movs	r2, #4
 80010a4:	496f      	ldr	r1, [pc, #444]	@ (8001264 <dwTune+0x330>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fdd0 	bl	8001c4c <writeValueToBytes>
 80010ac:	e068      	b.n	8001180 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d163      	bne.n	8001180 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x313B006BL, LEN_DRX_TUNE2);
 80010b8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010bc:	2204      	movs	r2, #4
 80010be:	496a      	ldr	r1, [pc, #424]	@ (8001268 <dwTune+0x334>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fdc3 	bl	8001c4c <writeValueToBytes>
 80010c6:	e05b      	b.n	8001180 <dwTune+0x24c>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->pacSize == PAC_SIZE_16) {
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80010ce:	2b10      	cmp	r3, #16
 80010d0:	d119      	bne.n	8001106 <dwTune+0x1d2>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d107      	bne.n	80010ec <dwTune+0x1b8>
			writeValueToBytes(drxtune2, 0x331A0052L, LEN_DRX_TUNE2);
 80010dc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010e0:	2204      	movs	r2, #4
 80010e2:	4962      	ldr	r1, [pc, #392]	@ (800126c <dwTune+0x338>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 fdb1 	bl	8001c4c <writeValueToBytes>
 80010ea:	e049      	b.n	8001180 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d144      	bne.n	8001180 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x333B00BEL, LEN_DRX_TUNE2);
 80010f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010fa:	2204      	movs	r2, #4
 80010fc:	495c      	ldr	r1, [pc, #368]	@ (8001270 <dwTune+0x33c>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fda4 	bl	8001c4c <writeValueToBytes>
 8001104:	e03c      	b.n	8001180 <dwTune+0x24c>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->pacSize == PAC_SIZE_32) {
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800110c:	2b20      	cmp	r3, #32
 800110e:	d119      	bne.n	8001144 <dwTune+0x210>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001116:	2b01      	cmp	r3, #1
 8001118:	d107      	bne.n	800112a <dwTune+0x1f6>
			writeValueToBytes(drxtune2, 0x351A009AL, LEN_DRX_TUNE2);
 800111a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800111e:	2204      	movs	r2, #4
 8001120:	4954      	ldr	r1, [pc, #336]	@ (8001274 <dwTune+0x340>)
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fd92 	bl	8001c4c <writeValueToBytes>
 8001128:	e02a      	b.n	8001180 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001130:	2b02      	cmp	r3, #2
 8001132:	d125      	bne.n	8001180 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x353B015EL, LEN_DRX_TUNE2);
 8001134:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001138:	2204      	movs	r2, #4
 800113a:	494f      	ldr	r1, [pc, #316]	@ (8001278 <dwTune+0x344>)
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fd85 	bl	8001c4c <writeValueToBytes>
 8001142:	e01d      	b.n	8001180 <dwTune+0x24c>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->pacSize == PAC_SIZE_64) {
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800114a:	2b40      	cmp	r3, #64	@ 0x40
 800114c:	d118      	bne.n	8001180 <dwTune+0x24c>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001154:	2b01      	cmp	r3, #1
 8001156:	d107      	bne.n	8001168 <dwTune+0x234>
			writeValueToBytes(drxtune2, 0x371A011DL, LEN_DRX_TUNE2);
 8001158:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800115c:	2204      	movs	r2, #4
 800115e:	4947      	ldr	r1, [pc, #284]	@ (800127c <dwTune+0x348>)
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fd73 	bl	8001c4c <writeValueToBytes>
 8001166:	e00b      	b.n	8001180 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800116e:	2b02      	cmp	r3, #2
 8001170:	d106      	bne.n	8001180 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x373B0296L, LEN_DRX_TUNE2);
 8001172:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001176:	2204      	movs	r2, #4
 8001178:	4941      	ldr	r1, [pc, #260]	@ (8001280 <dwTune+0x34c>)
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fd66 	bl	8001c4c <writeValueToBytes>
		}
	} else {
		// TODO proper error/warning handling
	}
	// DRX_TUNE4H
	if(dev->preambleLength == TX_PREAMBLE_LEN_64) {
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001186:	2b01      	cmp	r3, #1
 8001188:	d107      	bne.n	800119a <dwTune+0x266>
		writeValueToBytes(drxtune4H, 0x0010, LEN_DRX_TUNE4H);
 800118a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800118e:	2202      	movs	r2, #2
 8001190:	2110      	movs	r1, #16
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fd5a 	bl	8001c4c <writeValueToBytes>
 8001198:	e006      	b.n	80011a8 <dwTune+0x274>
	} else {
		writeValueToBytes(drxtune4H, 0x0028, LEN_DRX_TUNE4H);
 800119a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800119e:	2202      	movs	r2, #2
 80011a0:	2128      	movs	r1, #40	@ 0x28
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 fd52 	bl	8001c4c <writeValueToBytes>
	}
	// RF_RXCTRLH
	if(dev->channel != CHANNEL_4 && dev->channel != CHANNEL_7) {
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d00c      	beq.n	80011cc <dwTune+0x298>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80011b8:	2b07      	cmp	r3, #7
 80011ba:	d007      	beq.n	80011cc <dwTune+0x298>
		writeValueToBytes(rfrxctrlh, 0xD8, LEN_RF_RXCTRLH);
 80011bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c0:	2201      	movs	r2, #1
 80011c2:	21d8      	movs	r1, #216	@ 0xd8
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fd41 	bl	8001c4c <writeValueToBytes>
 80011ca:	e006      	b.n	80011da <dwTune+0x2a6>
	} else {
		writeValueToBytes(rfrxctrlh, 0xBC, LEN_RF_RXCTRLH);
 80011cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d0:	2201      	movs	r2, #1
 80011d2:	21bc      	movs	r1, #188	@ 0xbc
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 fd39 	bl	8001c4c <writeValueToBytes>
	}
	// RX_TXCTRL
	if(dev->channel == CHANNEL_1) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d108      	bne.n	80011f6 <dwTune+0x2c2>
		writeValueToBytes(rftxctrl, 0x00005C40L, LEN_RF_TXCTRL);
 80011e4:	f107 0320 	add.w	r3, r7, #32
 80011e8:	2204      	movs	r2, #4
 80011ea:	f645 4140 	movw	r1, #23616	@ 0x5c40
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 fd2c 	bl	8001c4c <writeValueToBytes>
 80011f4:	e05a      	b.n	80012ac <dwTune+0x378>
	} else if(dev->channel == CHANNEL_2) {
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d107      	bne.n	8001210 <dwTune+0x2dc>
		writeValueToBytes(rftxctrl, 0x00045CA0L, LEN_RF_TXCTRL);
 8001200:	f107 0320 	add.w	r3, r7, #32
 8001204:	2204      	movs	r2, #4
 8001206:	491f      	ldr	r1, [pc, #124]	@ (8001284 <dwTune+0x350>)
 8001208:	4618      	mov	r0, r3
 800120a:	f000 fd1f 	bl	8001c4c <writeValueToBytes>
 800120e:	e04d      	b.n	80012ac <dwTune+0x378>
	} else if(dev->channel == CHANNEL_3) {
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001216:	2b03      	cmp	r3, #3
 8001218:	d107      	bne.n	800122a <dwTune+0x2f6>
		writeValueToBytes(rftxctrl, 0x00086CC0L, LEN_RF_TXCTRL);
 800121a:	f107 0320 	add.w	r3, r7, #32
 800121e:	2204      	movs	r2, #4
 8001220:	4919      	ldr	r1, [pc, #100]	@ (8001288 <dwTune+0x354>)
 8001222:	4618      	mov	r0, r3
 8001224:	f000 fd12 	bl	8001c4c <writeValueToBytes>
 8001228:	e040      	b.n	80012ac <dwTune+0x378>
	} else if(dev->channel == CHANNEL_4) {
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001230:	2b04      	cmp	r3, #4
 8001232:	d107      	bne.n	8001244 <dwTune+0x310>
		writeValueToBytes(rftxctrl, 0x00045C80L, LEN_RF_TXCTRL);
 8001234:	f107 0320 	add.w	r3, r7, #32
 8001238:	2204      	movs	r2, #4
 800123a:	4914      	ldr	r1, [pc, #80]	@ (800128c <dwTune+0x358>)
 800123c:	4618      	mov	r0, r3
 800123e:	f000 fd05 	bl	8001c4c <writeValueToBytes>
 8001242:	e033      	b.n	80012ac <dwTune+0x378>
	} else if(dev->channel == CHANNEL_5) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800124a:	2b05      	cmp	r3, #5
 800124c:	d122      	bne.n	8001294 <dwTune+0x360>
		writeValueToBytes(rftxctrl, 0x001E3FE0L, LEN_RF_TXCTRL);
 800124e:	f107 0320 	add.w	r3, r7, #32
 8001252:	2204      	movs	r2, #4
 8001254:	490e      	ldr	r1, [pc, #56]	@ (8001290 <dwTune+0x35c>)
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fcf8 	bl	8001c4c <writeValueToBytes>
 800125c:	e026      	b.n	80012ac <dwTune+0x378>
 800125e:	bf00      	nop
 8001260:	2502a907 	.word	0x2502a907
 8001264:	311a002d 	.word	0x311a002d
 8001268:	313b006b 	.word	0x313b006b
 800126c:	331a0052 	.word	0x331a0052
 8001270:	333b00be 	.word	0x333b00be
 8001274:	351a009a 	.word	0x351a009a
 8001278:	353b015e 	.word	0x353b015e
 800127c:	371a011d 	.word	0x371a011d
 8001280:	373b0296 	.word	0x373b0296
 8001284:	00045ca0 	.word	0x00045ca0
 8001288:	00086cc0 	.word	0x00086cc0
 800128c:	00045c80 	.word	0x00045c80
 8001290:	001e3fe0 	.word	0x001e3fe0
	} else if(dev->channel == CHANNEL_7) {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800129a:	2b07      	cmp	r3, #7
 800129c:	d106      	bne.n	80012ac <dwTune+0x378>
		writeValueToBytes(rftxctrl, 0x001E7DE0L, LEN_RF_TXCTRL);
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	2204      	movs	r2, #4
 80012a4:	49be      	ldr	r1, [pc, #760]	@ (80015a0 <dwTune+0x66c>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fcd0 	bl	8001c4c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// TC_PGDELAY
	if(dev->channel == CHANNEL_1) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d107      	bne.n	80012c6 <dwTune+0x392>
		writeValueToBytes(tcpgdelay, 0xC9, LEN_TC_PGDELAY);
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	2201      	movs	r2, #1
 80012bc:	21c9      	movs	r1, #201	@ 0xc9
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fcc4 	bl	8001c4c <writeValueToBytes>
 80012c4:	e03f      	b.n	8001346 <dwTune+0x412>
	} else if(dev->channel == CHANNEL_2) {
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d107      	bne.n	80012e0 <dwTune+0x3ac>
		writeValueToBytes(tcpgdelay, 0xC2, LEN_TC_PGDELAY);
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	2201      	movs	r2, #1
 80012d6:	21c2      	movs	r1, #194	@ 0xc2
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fcb7 	bl	8001c4c <writeValueToBytes>
 80012de:	e032      	b.n	8001346 <dwTune+0x412>
	} else if(dev->channel == CHANNEL_3) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d107      	bne.n	80012fa <dwTune+0x3c6>
		writeValueToBytes(tcpgdelay, 0xC5, LEN_TC_PGDELAY);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	2201      	movs	r2, #1
 80012f0:	21c5      	movs	r1, #197	@ 0xc5
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 fcaa 	bl	8001c4c <writeValueToBytes>
 80012f8:	e025      	b.n	8001346 <dwTune+0x412>
	} else if(dev->channel == CHANNEL_4) {
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001300:	2b04      	cmp	r3, #4
 8001302:	d107      	bne.n	8001314 <dwTune+0x3e0>
		writeValueToBytes(tcpgdelay, 0x95, LEN_TC_PGDELAY);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	2201      	movs	r2, #1
 800130a:	2195      	movs	r1, #149	@ 0x95
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fc9d 	bl	8001c4c <writeValueToBytes>
 8001312:	e018      	b.n	8001346 <dwTune+0x412>
	} else if(dev->channel == CHANNEL_5) {
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800131a:	2b05      	cmp	r3, #5
 800131c:	d107      	bne.n	800132e <dwTune+0x3fa>
		writeValueToBytes(tcpgdelay, 0xC0, LEN_TC_PGDELAY);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	2201      	movs	r2, #1
 8001324:	21c0      	movs	r1, #192	@ 0xc0
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fc90 	bl	8001c4c <writeValueToBytes>
 800132c:	e00b      	b.n	8001346 <dwTune+0x412>
	} else if(dev->channel == CHANNEL_7) {
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001334:	2b07      	cmp	r3, #7
 8001336:	d106      	bne.n	8001346 <dwTune+0x412>
		writeValueToBytes(tcpgdelay, 0x93, LEN_TC_PGDELAY);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	2201      	movs	r2, #1
 800133e:	2193      	movs	r1, #147	@ 0x93
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fc83 	bl	8001c4c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// FS_PLLCFG and FS_PLLTUNE
	if(dev->channel == CHANNEL_1) {
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800134c:	2b01      	cmp	r3, #1
 800134e:	d10e      	bne.n	800136e <dwTune+0x43a>
		writeValueToBytes(fspllcfg, 0x09000407L, LEN_FS_PLLCFG);
 8001350:	f107 0318 	add.w	r3, r7, #24
 8001354:	2204      	movs	r2, #4
 8001356:	4993      	ldr	r1, [pc, #588]	@ (80015a4 <dwTune+0x670>)
 8001358:	4618      	mov	r0, r3
 800135a:	f000 fc77 	bl	8001c4c <writeValueToBytes>
		writeValueToBytes(fsplltune, 0x1E, LEN_FS_PLLTUNE);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	2201      	movs	r2, #1
 8001364:	211e      	movs	r1, #30
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fc70 	bl	8001c4c <writeValueToBytes>
 800136c:	e044      	b.n	80013f8 <dwTune+0x4c4>
	} else if(dev->channel == CHANNEL_2 || dev->channel == CHANNEL_4) {
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001374:	2b02      	cmp	r3, #2
 8001376:	d004      	beq.n	8001382 <dwTune+0x44e>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800137e:	2b04      	cmp	r3, #4
 8001380:	d10e      	bne.n	80013a0 <dwTune+0x46c>
		writeValueToBytes(fspllcfg, 0x08400508L, LEN_FS_PLLCFG);
 8001382:	f107 0318 	add.w	r3, r7, #24
 8001386:	2204      	movs	r2, #4
 8001388:	4987      	ldr	r1, [pc, #540]	@ (80015a8 <dwTune+0x674>)
 800138a:	4618      	mov	r0, r3
 800138c:	f000 fc5e 	bl	8001c4c <writeValueToBytes>
		writeValueToBytes(fsplltune, 0x26, LEN_FS_PLLTUNE);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2201      	movs	r2, #1
 8001396:	2126      	movs	r1, #38	@ 0x26
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fc57 	bl	8001c4c <writeValueToBytes>
 800139e:	e02b      	b.n	80013f8 <dwTune+0x4c4>
	} else if(dev->channel == CHANNEL_3) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d10e      	bne.n	80013c8 <dwTune+0x494>
		writeValueToBytes(fspllcfg, 0x08401009L, LEN_FS_PLLCFG);
 80013aa:	f107 0318 	add.w	r3, r7, #24
 80013ae:	2204      	movs	r2, #4
 80013b0:	497e      	ldr	r1, [pc, #504]	@ (80015ac <dwTune+0x678>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fc4a 	bl	8001c4c <writeValueToBytes>
		writeValueToBytes(fsplltune, 0x56, LEN_FS_PLLTUNE);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2201      	movs	r2, #1
 80013be:	2156      	movs	r1, #86	@ 0x56
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fc43 	bl	8001c4c <writeValueToBytes>
 80013c6:	e017      	b.n	80013f8 <dwTune+0x4c4>
	} else if(dev->channel == CHANNEL_5 || dev->channel == CHANNEL_7) {
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80013ce:	2b05      	cmp	r3, #5
 80013d0:	d004      	beq.n	80013dc <dwTune+0x4a8>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80013d8:	2b07      	cmp	r3, #7
 80013da:	d10d      	bne.n	80013f8 <dwTune+0x4c4>
		writeValueToBytes(fspllcfg, 0x0800041DL, LEN_FS_PLLCFG);
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	2204      	movs	r2, #4
 80013e2:	4973      	ldr	r1, [pc, #460]	@ (80015b0 <dwTune+0x67c>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 fc31 	bl	8001c4c <writeValueToBytes>
		writeValueToBytes(fsplltune, 0xA6, LEN_FS_PLLTUNE);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	2201      	movs	r2, #1
 80013f0:	21a6      	movs	r1, #166	@ 0xa6
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fc2a 	bl	8001c4c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// LDE_CFG1
	writeValueToBytes(ldecfg1, 0xD, LEN_LDE_CFG1);
 80013f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013fc:	2201      	movs	r2, #1
 80013fe:	210d      	movs	r1, #13
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fc23 	bl	8001c4c <writeValueToBytes>
	// LDE_CFG2
	if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800140c:	2b01      	cmp	r3, #1
 800140e:	d108      	bne.n	8001422 <dwTune+0x4ee>
		writeValueToBytes(ldecfg2, 0x1607, LEN_LDE_CFG2);
 8001410:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001414:	2202      	movs	r2, #2
 8001416:	f241 6107 	movw	r1, #5639	@ 0x1607
 800141a:	4618      	mov	r0, r3
 800141c:	f000 fc16 	bl	8001c4c <writeValueToBytes>
 8001420:	e00c      	b.n	800143c <dwTune+0x508>
	} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001428:	2b02      	cmp	r3, #2
 800142a:	d107      	bne.n	800143c <dwTune+0x508>
		writeValueToBytes(ldecfg2, 0x0607, LEN_LDE_CFG2);
 800142c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001430:	2202      	movs	r2, #2
 8001432:	f240 6107 	movw	r1, #1543	@ 0x607
 8001436:	4618      	mov	r0, r3
 8001438:	f000 fc08 	bl	8001c4c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// LDE_REPC
	if(dev->preambleCode == PREAMBLE_CODE_16MHZ_1 || dev->preambleCode == PREAMBLE_CODE_16MHZ_2) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001442:	2b01      	cmp	r3, #1
 8001444:	d004      	beq.n	8001450 <dwTune+0x51c>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800144c:	2b02      	cmp	r3, #2
 800144e:	d116      	bne.n	800147e <dwTune+0x54a>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001456:	2b00      	cmp	r3, #0
 8001458:	d108      	bne.n	800146c <dwTune+0x538>
			writeValueToBytes(lderepc, ((0x5998 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800145a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800145e:	2202      	movs	r2, #2
 8001460:	f640 3133 	movw	r1, #2867	@ 0xb33
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fbf1 	bl	8001c4c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800146a:	e154      	b.n	8001716 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x5998, LEN_LDE_REPC);
 800146c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001470:	2202      	movs	r2, #2
 8001472:	f645 1198 	movw	r1, #22936	@ 0x5998
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fbe8 	bl	8001c4c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800147c:	e14b      	b.n	8001716 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_3 || dev->preambleCode == PREAMBLE_CODE_16MHZ_8) {
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001484:	2b03      	cmp	r3, #3
 8001486:	d004      	beq.n	8001492 <dwTune+0x55e>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800148e:	2b08      	cmp	r3, #8
 8001490:	d116      	bne.n	80014c0 <dwTune+0x58c>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001498:	2b00      	cmp	r3, #0
 800149a:	d108      	bne.n	80014ae <dwTune+0x57a>
			writeValueToBytes(lderepc, ((0x51EA >> 3) & 0xFFFF), LEN_LDE_REPC);
 800149c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014a0:	2202      	movs	r2, #2
 80014a2:	f640 213d 	movw	r1, #2621	@ 0xa3d
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 fbd0 	bl	8001c4c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80014ac:	e133      	b.n	8001716 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x51EA, LEN_LDE_REPC);
 80014ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b2:	2202      	movs	r2, #2
 80014b4:	f245 11ea 	movw	r1, #20970	@ 0x51ea
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fbc7 	bl	8001c4c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80014be:	e12a      	b.n	8001716 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_4) {
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d116      	bne.n	80014f8 <dwTune+0x5c4>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d108      	bne.n	80014e6 <dwTune+0x5b2>
			writeValueToBytes(lderepc, ((0x428E >> 3) & 0xFFFF), LEN_LDE_REPC);
 80014d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014d8:	2202      	movs	r2, #2
 80014da:	f640 0151 	movw	r1, #2129	@ 0x851
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 fbb4 	bl	8001c4c <writeValueToBytes>
 80014e4:	e117      	b.n	8001716 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x428E, LEN_LDE_REPC);
 80014e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014ea:	2202      	movs	r2, #2
 80014ec:	f244 218e 	movw	r1, #17038	@ 0x428e
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 fbab 	bl	8001c4c <writeValueToBytes>
 80014f6:	e10e      	b.n	8001716 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_5) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80014fe:	2b05      	cmp	r3, #5
 8001500:	d116      	bne.n	8001530 <dwTune+0x5fc>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001508:	2b00      	cmp	r3, #0
 800150a:	d108      	bne.n	800151e <dwTune+0x5ea>
			writeValueToBytes(lderepc, ((0x451E >> 3) & 0xFFFF), LEN_LDE_REPC);
 800150c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001510:	2202      	movs	r2, #2
 8001512:	f640 01a3 	movw	r1, #2211	@ 0x8a3
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fb98 	bl	8001c4c <writeValueToBytes>
 800151c:	e0fb      	b.n	8001716 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x451E, LEN_LDE_REPC);
 800151e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001522:	2202      	movs	r2, #2
 8001524:	f244 511e 	movw	r1, #17694	@ 0x451e
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fb8f 	bl	8001c4c <writeValueToBytes>
 800152e:	e0f2      	b.n	8001716 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_6) {
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001536:	2b06      	cmp	r3, #6
 8001538:	d116      	bne.n	8001568 <dwTune+0x634>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001540:	2b00      	cmp	r3, #0
 8001542:	d108      	bne.n	8001556 <dwTune+0x622>
			writeValueToBytes(lderepc, ((0x2E14 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001544:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001548:	2202      	movs	r2, #2
 800154a:	f240 51c2 	movw	r1, #1474	@ 0x5c2
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fb7c 	bl	8001c4c <writeValueToBytes>
 8001554:	e0df      	b.n	8001716 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x2E14, LEN_LDE_REPC);
 8001556:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800155a:	2202      	movs	r2, #2
 800155c:	f642 6114 	movw	r1, #11796	@ 0x2e14
 8001560:	4618      	mov	r0, r3
 8001562:	f000 fb73 	bl	8001c4c <writeValueToBytes>
 8001566:	e0d6      	b.n	8001716 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_7) {
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800156e:	2b07      	cmp	r3, #7
 8001570:	d120      	bne.n	80015b4 <dwTune+0x680>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001578:	2b00      	cmp	r3, #0
 800157a:	d108      	bne.n	800158e <dwTune+0x65a>
			writeValueToBytes(lderepc, ((0x8000 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800157c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001580:	2202      	movs	r2, #2
 8001582:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fb60 	bl	8001c4c <writeValueToBytes>
 800158c:	e0c3      	b.n	8001716 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x8000, LEN_LDE_REPC);
 800158e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001592:	2202      	movs	r2, #2
 8001594:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fb57 	bl	8001c4c <writeValueToBytes>
 800159e:	e0ba      	b.n	8001716 <dwTune+0x7e2>
 80015a0:	001e7de0 	.word	0x001e7de0
 80015a4:	09000407 	.word	0x09000407
 80015a8:	08400508 	.word	0x08400508
 80015ac:	08401009 	.word	0x08401009
 80015b0:	0800041d 	.word	0x0800041d
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_9) {
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80015ba:	2b09      	cmp	r3, #9
 80015bc:	d116      	bne.n	80015ec <dwTune+0x6b8>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d108      	bne.n	80015da <dwTune+0x6a6>
			writeValueToBytes(lderepc, ((0x28F4 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80015c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015cc:	2202      	movs	r2, #2
 80015ce:	f240 511e 	movw	r1, #1310	@ 0x51e
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fb3a 	bl	8001c4c <writeValueToBytes>
 80015d8:	e09d      	b.n	8001716 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x28F4, LEN_LDE_REPC);
 80015da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015de:	2202      	movs	r2, #2
 80015e0:	f642 01f4 	movw	r1, #10484	@ 0x28f4
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 fb31 	bl	8001c4c <writeValueToBytes>
 80015ea:	e094      	b.n	8001716 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_10 || dev->preambleCode == PREAMBLE_CODE_64MHZ_17) {
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80015f2:	2b0a      	cmp	r3, #10
 80015f4:	d004      	beq.n	8001600 <dwTune+0x6cc>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80015fc:	2b11      	cmp	r3, #17
 80015fe:	d116      	bne.n	800162e <dwTune+0x6fa>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001606:	2b00      	cmp	r3, #0
 8001608:	d108      	bne.n	800161c <dwTune+0x6e8>
			writeValueToBytes(lderepc, ((0x3332 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800160a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800160e:	2202      	movs	r2, #2
 8001610:	f240 6166 	movw	r1, #1638	@ 0x666
 8001614:	4618      	mov	r0, r3
 8001616:	f000 fb19 	bl	8001c4c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800161a:	e07c      	b.n	8001716 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x3332, LEN_LDE_REPC);
 800161c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001620:	2202      	movs	r2, #2
 8001622:	f243 3132 	movw	r1, #13106	@ 0x3332
 8001626:	4618      	mov	r0, r3
 8001628:	f000 fb10 	bl	8001c4c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800162c:	e073      	b.n	8001716 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_11) {
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001634:	2b0b      	cmp	r3, #11
 8001636:	d116      	bne.n	8001666 <dwTune+0x732>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800163e:	2b00      	cmp	r3, #0
 8001640:	d108      	bne.n	8001654 <dwTune+0x720>
			writeValueToBytes(lderepc, ((0x3AE0 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001642:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001646:	2202      	movs	r2, #2
 8001648:	f240 715c 	movw	r1, #1884	@ 0x75c
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fafd 	bl	8001c4c <writeValueToBytes>
 8001652:	e060      	b.n	8001716 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x3AE0, LEN_LDE_REPC);
 8001654:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001658:	2202      	movs	r2, #2
 800165a:	f643 21e0 	movw	r1, #15072	@ 0x3ae0
 800165e:	4618      	mov	r0, r3
 8001660:	f000 faf4 	bl	8001c4c <writeValueToBytes>
 8001664:	e057      	b.n	8001716 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_12) {
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800166c:	2b0c      	cmp	r3, #12
 800166e:	d116      	bne.n	800169e <dwTune+0x76a>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001676:	2b00      	cmp	r3, #0
 8001678:	d108      	bne.n	800168c <dwTune+0x758>
			writeValueToBytes(lderepc, ((0x3D70 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800167a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800167e:	2202      	movs	r2, #2
 8001680:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 8001684:	4618      	mov	r0, r3
 8001686:	f000 fae1 	bl	8001c4c <writeValueToBytes>
 800168a:	e044      	b.n	8001716 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x3D70, LEN_LDE_REPC);
 800168c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001690:	2202      	movs	r2, #2
 8001692:	f643 5170 	movw	r1, #15728	@ 0x3d70
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fad8 	bl	8001c4c <writeValueToBytes>
 800169c:	e03b      	b.n	8001716 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_18 || dev->preambleCode == PREAMBLE_CODE_64MHZ_19) {
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80016a4:	2b12      	cmp	r3, #18
 80016a6:	d004      	beq.n	80016b2 <dwTune+0x77e>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80016ae:	2b13      	cmp	r3, #19
 80016b0:	d116      	bne.n	80016e0 <dwTune+0x7ac>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d108      	bne.n	80016ce <dwTune+0x79a>
			writeValueToBytes(lderepc, ((0x35C2 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80016bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016c0:	2202      	movs	r2, #2
 80016c2:	f44f 61d7 	mov.w	r1, #1720	@ 0x6b8
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fac0 	bl	8001c4c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80016cc:	e023      	b.n	8001716 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x35C2, LEN_LDE_REPC);
 80016ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016d2:	2202      	movs	r2, #2
 80016d4:	f243 51c2 	movw	r1, #13762	@ 0x35c2
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fab7 	bl	8001c4c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80016de:	e01a      	b.n	8001716 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_20) {
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80016e6:	2b14      	cmp	r3, #20
 80016e8:	d115      	bne.n	8001716 <dwTune+0x7e2>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d108      	bne.n	8001706 <dwTune+0x7d2>
			writeValueToBytes(lderepc, ((0x47AE >> 3) & 0xFFFF), LEN_LDE_REPC);
 80016f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016f8:	2202      	movs	r2, #2
 80016fa:	f640 01f5 	movw	r1, #2293	@ 0x8f5
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 faa4 	bl	8001c4c <writeValueToBytes>
 8001704:	e007      	b.n	8001716 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x47AE, LEN_LDE_REPC);
 8001706:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800170a:	2202      	movs	r2, #2
 800170c:	f244 71ae 	movw	r1, #18350	@ 0x47ae
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fa9b 	bl	8001c4c <writeValueToBytes>
		}
	} else {
		// TODO proper error/warning handling
	}
	// TX_POWER (enabled smart transmit power control)
	if(dev->forceTxPower) {
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800171c:	2b00      	cmp	r3, #0
 800171e:	d009      	beq.n	8001734 <dwTune+0x800>
		writeValueToBytes(txpower, dev->txPower, LEN_TX_POWER);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001724:	4619      	mov	r1, r3
 8001726:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800172a:	2204      	movs	r2, #4
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fa8d 	bl	8001c4c <writeValueToBytes>
 8001732:	e12f      	b.n	8001994 <dwTune+0xa60>
	} else if(dev->channel == CHANNEL_1 || dev->channel == CHANNEL_2) {
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800173a:	2b01      	cmp	r3, #1
 800173c:	d004      	beq.n	8001748 <dwTune+0x814>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001744:	2b02      	cmp	r3, #2
 8001746:	d136      	bne.n	80017b6 <dwTune+0x882>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800174e:	2b01      	cmp	r3, #1
 8001750:	d115      	bne.n	800177e <dwTune+0x84a>
			if(dev->smartPower) {
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001758:	2b00      	cmp	r3, #0
 800175a:	d007      	beq.n	800176c <dwTune+0x838>
				writeValueToBytes(txpower, 0x15355575L, LEN_TX_POWER);
 800175c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001760:	2204      	movs	r2, #4
 8001762:	4995      	ldr	r1, [pc, #596]	@ (80019b8 <dwTune+0xa84>)
 8001764:	4618      	mov	r0, r3
 8001766:	f000 fa71 	bl	8001c4c <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 800176a:	e112      	b.n	8001992 <dwTune+0xa5e>
			} else {
				writeValueToBytes(txpower, 0x75757575L, LEN_TX_POWER);
 800176c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001770:	2204      	movs	r2, #4
 8001772:	f04f 3175 	mov.w	r1, #1970632053	@ 0x75757575
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fa68 	bl	8001c4c <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 800177c:	e109      	b.n	8001992 <dwTune+0xa5e>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001784:	2b02      	cmp	r3, #2
 8001786:	f040 8104 	bne.w	8001992 <dwTune+0xa5e>
			if(dev->smartPower) {
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001790:	2b00      	cmp	r3, #0
 8001792:	d007      	beq.n	80017a4 <dwTune+0x870>
				writeValueToBytes(txpower, 0x07274767L, LEN_TX_POWER);
 8001794:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001798:	2204      	movs	r2, #4
 800179a:	4988      	ldr	r1, [pc, #544]	@ (80019bc <dwTune+0xa88>)
 800179c:	4618      	mov	r0, r3
 800179e:	f000 fa55 	bl	8001c4c <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80017a2:	e0f6      	b.n	8001992 <dwTune+0xa5e>
			} else {
				writeValueToBytes(txpower, 0x67676767L, LEN_TX_POWER);
 80017a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017a8:	2204      	movs	r2, #4
 80017aa:	f04f 3167 	mov.w	r1, #1734829927	@ 0x67676767
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 fa4c 	bl	8001c4c <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80017b4:	e0ed      	b.n	8001992 <dwTune+0xa5e>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_3) {
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d136      	bne.n	800182e <dwTune+0x8fa>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d115      	bne.n	80017f6 <dwTune+0x8c2>
			if(dev->smartPower) {
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d007      	beq.n	80017e4 <dwTune+0x8b0>
				writeValueToBytes(txpower, 0x0F2F4F6FL, LEN_TX_POWER);
 80017d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017d8:	2204      	movs	r2, #4
 80017da:	4979      	ldr	r1, [pc, #484]	@ (80019c0 <dwTune+0xa8c>)
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 fa35 	bl	8001c4c <writeValueToBytes>
 80017e2:	e0d7      	b.n	8001994 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x6F6F6F6FL, LEN_TX_POWER);
 80017e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017e8:	2204      	movs	r2, #4
 80017ea:	f04f 316f 	mov.w	r1, #1869573999	@ 0x6f6f6f6f
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 fa2c 	bl	8001c4c <writeValueToBytes>
 80017f4:	e0ce      	b.n	8001994 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	f040 80c9 	bne.w	8001994 <dwTune+0xa60>
			if(dev->smartPower) {
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <dwTune+0x8e8>
				writeValueToBytes(txpower, 0x2B4B6B8BL, LEN_TX_POWER);
 800180c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001810:	2204      	movs	r2, #4
 8001812:	496c      	ldr	r1, [pc, #432]	@ (80019c4 <dwTune+0xa90>)
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fa19 	bl	8001c4c <writeValueToBytes>
 800181a:	e0bb      	b.n	8001994 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x8B8B8B8BL, LEN_TX_POWER);
 800181c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001820:	2204      	movs	r2, #4
 8001822:	f04f 318b 	mov.w	r1, #2341178251	@ 0x8b8b8b8b
 8001826:	4618      	mov	r0, r3
 8001828:	f000 fa10 	bl	8001c4c <writeValueToBytes>
 800182c:	e0b2      	b.n	8001994 <dwTune+0xa60>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_4) {
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001834:	2b04      	cmp	r3, #4
 8001836:	d136      	bne.n	80018a6 <dwTune+0x972>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800183e:	2b01      	cmp	r3, #1
 8001840:	d115      	bne.n	800186e <dwTune+0x93a>
			if(dev->smartPower) {
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001848:	2b00      	cmp	r3, #0
 800184a:	d007      	beq.n	800185c <dwTune+0x928>
				writeValueToBytes(txpower, 0x1F1F3F5FL, LEN_TX_POWER);
 800184c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001850:	2204      	movs	r2, #4
 8001852:	495d      	ldr	r1, [pc, #372]	@ (80019c8 <dwTune+0xa94>)
 8001854:	4618      	mov	r0, r3
 8001856:	f000 f9f9 	bl	8001c4c <writeValueToBytes>
 800185a:	e09b      	b.n	8001994 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x5F5F5F5FL, LEN_TX_POWER);
 800185c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001860:	2204      	movs	r2, #4
 8001862:	f04f 315f 	mov.w	r1, #1600085855	@ 0x5f5f5f5f
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f9f0 	bl	8001c4c <writeValueToBytes>
 800186c:	e092      	b.n	8001994 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001874:	2b02      	cmp	r3, #2
 8001876:	f040 808d 	bne.w	8001994 <dwTune+0xa60>
			if(dev->smartPower) {
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001880:	2b00      	cmp	r3, #0
 8001882:	d007      	beq.n	8001894 <dwTune+0x960>
				writeValueToBytes(txpower, 0x3A5A7A9AL, LEN_TX_POWER);
 8001884:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001888:	2204      	movs	r2, #4
 800188a:	4950      	ldr	r1, [pc, #320]	@ (80019cc <dwTune+0xa98>)
 800188c:	4618      	mov	r0, r3
 800188e:	f000 f9dd 	bl	8001c4c <writeValueToBytes>
 8001892:	e07f      	b.n	8001994 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x9A9A9A9AL, LEN_TX_POWER);
 8001894:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001898:	2204      	movs	r2, #4
 800189a:	f04f 319a 	mov.w	r1, #2593823386	@ 0x9a9a9a9a
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f9d4 	bl	8001c4c <writeValueToBytes>
 80018a4:	e076      	b.n	8001994 <dwTune+0xa60>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_5) {
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d135      	bne.n	800191c <dwTune+0x9e8>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d115      	bne.n	80018e6 <dwTune+0x9b2>
			if(dev->smartPower) {
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <dwTune+0x9a0>
				writeValueToBytes(txpower, 0x0E082848L, LEN_TX_POWER);
 80018c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018c8:	2204      	movs	r2, #4
 80018ca:	4941      	ldr	r1, [pc, #260]	@ (80019d0 <dwTune+0xa9c>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 f9bd 	bl	8001c4c <writeValueToBytes>
 80018d2:	e05f      	b.n	8001994 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x48484848L, LEN_TX_POWER);
 80018d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018d8:	2204      	movs	r2, #4
 80018da:	f04f 3148 	mov.w	r1, #1212696648	@ 0x48484848
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f9b4 	bl	8001c4c <writeValueToBytes>
 80018e4:	e056      	b.n	8001994 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d151      	bne.n	8001994 <dwTune+0xa60>
			if(dev->smartPower) {
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <dwTune+0x9d6>
				writeValueToBytes(txpower, 0x25456585L, LEN_TX_POWER);
 80018fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018fe:	2204      	movs	r2, #4
 8001900:	4934      	ldr	r1, [pc, #208]	@ (80019d4 <dwTune+0xaa0>)
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f9a2 	bl	8001c4c <writeValueToBytes>
 8001908:	e044      	b.n	8001994 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x85858585L, LEN_TX_POWER);
 800190a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800190e:	2204      	movs	r2, #4
 8001910:	f04f 3185 	mov.w	r1, #2240120197	@ 0x85858585
 8001914:	4618      	mov	r0, r3
 8001916:	f000 f999 	bl	8001c4c <writeValueToBytes>
 800191a:	e03b      	b.n	8001994 <dwTune+0xa60>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_7) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001922:	2b07      	cmp	r3, #7
 8001924:	d136      	bne.n	8001994 <dwTune+0xa60>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800192c:	2b01      	cmp	r3, #1
 800192e:	d115      	bne.n	800195c <dwTune+0xa28>
			if(dev->smartPower) {
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <dwTune+0xa16>
				writeValueToBytes(txpower, 0x32527292L, LEN_TX_POWER);
 800193a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800193e:	2204      	movs	r2, #4
 8001940:	4925      	ldr	r1, [pc, #148]	@ (80019d8 <dwTune+0xaa4>)
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f982 	bl	8001c4c <writeValueToBytes>
 8001948:	e024      	b.n	8001994 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x92929292L, LEN_TX_POWER);
 800194a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800194e:	2204      	movs	r2, #4
 8001950:	f04f 3192 	mov.w	r1, #2459079314	@ 0x92929292
 8001954:	4618      	mov	r0, r3
 8001956:	f000 f979 	bl	8001c4c <writeValueToBytes>
 800195a:	e01b      	b.n	8001994 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001962:	2b02      	cmp	r3, #2
 8001964:	d116      	bne.n	8001994 <dwTune+0xa60>
			if(dev->smartPower) {
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800196c:	2b00      	cmp	r3, #0
 800196e:	d007      	beq.n	8001980 <dwTune+0xa4c>
				writeValueToBytes(txpower, 0x5171B1D1L, LEN_TX_POWER);
 8001970:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001974:	2204      	movs	r2, #4
 8001976:	4919      	ldr	r1, [pc, #100]	@ (80019dc <dwTune+0xaa8>)
 8001978:	4618      	mov	r0, r3
 800197a:	f000 f967 	bl	8001c4c <writeValueToBytes>
 800197e:	e009      	b.n	8001994 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0xD1D1D1D1L, LEN_TX_POWER);
 8001980:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001984:	2204      	movs	r2, #4
 8001986:	f04f 31d1 	mov.w	r1, #3520188881	@ 0xd1d1d1d1
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f95e 	bl	8001c4c <writeValueToBytes>
 8001990:	e000      	b.n	8001994 <dwTune+0xa60>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001992:	bf00      	nop
	} else {
		// TODO proper error/warning handling
	}
	// Crystal calibration from OTP (if available)
	uint8_t buf_otp[4];
	readBytesOTP(dev, 0x01E, buf_otp);
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	461a      	mov	r2, r3
 800199a:	211e      	movs	r1, #30
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f975 	bl	8001c8c <readBytesOTP>
	if (buf_otp[0] == 0) {
 80019a2:	7b3b      	ldrb	r3, [r7, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d11b      	bne.n	80019e0 <dwTune+0xaac>
		// No trim value available from OTP, use midrange value of 0x10
		writeValueToBytes(fsxtalt, ((0x10 & 0x1F) | 0x60), LEN_FS_XTALT);
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	2201      	movs	r2, #1
 80019ae:	2170      	movs	r1, #112	@ 0x70
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f94b 	bl	8001c4c <writeValueToBytes>
 80019b6:	e01e      	b.n	80019f6 <dwTune+0xac2>
 80019b8:	15355575 	.word	0x15355575
 80019bc:	07274767 	.word	0x07274767
 80019c0:	0f2f4f6f 	.word	0x0f2f4f6f
 80019c4:	2b4b6b8b 	.word	0x2b4b6b8b
 80019c8:	1f1f3f5f 	.word	0x1f1f3f5f
 80019cc:	3a5a7a9a 	.word	0x3a5a7a9a
 80019d0:	0e082848 	.word	0x0e082848
 80019d4:	25456585 	.word	0x25456585
 80019d8:	32527292 	.word	0x32527292
 80019dc:	5171b1d1 	.word	0x5171b1d1
	} else {
		writeValueToBytes(fsxtalt, ((buf_otp[0] & 0x1F) | 0x60), LEN_FS_XTALT);
 80019e0:	7b3b      	ldrb	r3, [r7, #12]
 80019e2:	f003 031f 	and.w	r3, r3, #31
 80019e6:	f043 0160 	orr.w	r1, r3, #96	@ 0x60
 80019ea:	f107 0310 	add.w	r3, r7, #16
 80019ee:	2201      	movs	r2, #1
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 f92b 	bl	8001c4c <writeValueToBytes>
	}
	// write configuration back to chip
	dwSpiWrite(dev, AGC_TUNE, AGC_TUNE1_SUB, agctune1, LEN_AGC_TUNE1);
 80019f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019fa:	2202      	movs	r2, #2
 80019fc:	9200      	str	r2, [sp, #0]
 80019fe:	2204      	movs	r2, #4
 8001a00:	2123      	movs	r1, #35	@ 0x23
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f9cb 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, AGC_TUNE, AGC_TUNE2_SUB, agctune2, LEN_AGC_TUNE2);
 8001a08:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	9200      	str	r2, [sp, #0]
 8001a10:	220c      	movs	r2, #12
 8001a12:	2123      	movs	r1, #35	@ 0x23
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f9c2 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, AGC_TUNE, AGC_TUNE3_SUB, agctune3, LEN_AGC_TUNE3);
 8001a1a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a1e:	2202      	movs	r2, #2
 8001a20:	9200      	str	r2, [sp, #0]
 8001a22:	2212      	movs	r2, #18
 8001a24:	2123      	movs	r1, #35	@ 0x23
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f9b9 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE0b_SUB, drxtune0b, LEN_DRX_TUNE0b);
 8001a2c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a30:	2202      	movs	r2, #2
 8001a32:	9200      	str	r2, [sp, #0]
 8001a34:	2202      	movs	r2, #2
 8001a36:	2127      	movs	r1, #39	@ 0x27
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f9b0 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1a_SUB, drxtune1a, LEN_DRX_TUNE1a);
 8001a3e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001a42:	2202      	movs	r2, #2
 8001a44:	9200      	str	r2, [sp, #0]
 8001a46:	2204      	movs	r2, #4
 8001a48:	2127      	movs	r1, #39	@ 0x27
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f9a7 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1b_SUB, drxtune1b, LEN_DRX_TUNE1b);
 8001a50:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a54:	2202      	movs	r2, #2
 8001a56:	9200      	str	r2, [sp, #0]
 8001a58:	2206      	movs	r2, #6
 8001a5a:	2127      	movs	r1, #39	@ 0x27
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f99e 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE2_SUB, drxtune2, LEN_DRX_TUNE2);
 8001a62:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a66:	2204      	movs	r2, #4
 8001a68:	9200      	str	r2, [sp, #0]
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	2127      	movs	r1, #39	@ 0x27
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f995 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE4H_SUB, drxtune4H, LEN_DRX_TUNE4H);
 8001a74:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a78:	2202      	movs	r2, #2
 8001a7a:	9200      	str	r2, [sp, #0]
 8001a7c:	2226      	movs	r2, #38	@ 0x26
 8001a7e:	2127      	movs	r1, #39	@ 0x27
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f98c 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_CFG1_SUB, ldecfg1, LEN_LDE_CFG1);
 8001a86:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	9200      	str	r2, [sp, #0]
 8001a8e:	f640 0206 	movw	r2, #2054	@ 0x806
 8001a92:	212e      	movs	r1, #46	@ 0x2e
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f982 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_CFG2_SUB, ldecfg2, LEN_LDE_CFG2);
 8001a9a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	9200      	str	r2, [sp, #0]
 8001aa2:	f641 0206 	movw	r2, #6150	@ 0x1806
 8001aa6:	212e      	movs	r1, #46	@ 0x2e
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f978 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_REPC_SUB, lderepc, LEN_LDE_REPC);
 8001aae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	9200      	str	r2, [sp, #0]
 8001ab6:	f642 0204 	movw	r2, #10244	@ 0x2804
 8001aba:	212e      	movs	r1, #46	@ 0x2e
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f96e 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, TX_POWER, NO_SUB, txpower, LEN_TX_POWER);
 8001ac2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	9200      	str	r2, [sp, #0]
 8001aca:	2200      	movs	r2, #0
 8001acc:	211e      	movs	r1, #30
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f965 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, RF_CONF, RF_RXCTRLH_SUB, rfrxctrlh, LEN_RF_RXCTRLH);
 8001ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad8:	2201      	movs	r2, #1
 8001ada:	9200      	str	r2, [sp, #0]
 8001adc:	220b      	movs	r2, #11
 8001ade:	2128      	movs	r1, #40	@ 0x28
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f95c 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, RF_CONF, RF_TXCTRL_SUB, rftxctrl, LEN_RF_TXCTRL);
 8001ae6:	f107 0320 	add.w	r3, r7, #32
 8001aea:	2204      	movs	r2, #4
 8001aec:	9200      	str	r2, [sp, #0]
 8001aee:	220c      	movs	r2, #12
 8001af0:	2128      	movs	r1, #40	@ 0x28
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f953 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, TX_CAL, TC_PGDELAY_SUB, tcpgdelay, LEN_TC_PGDELAY);
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	2201      	movs	r2, #1
 8001afe:	9200      	str	r2, [sp, #0]
 8001b00:	220b      	movs	r2, #11
 8001b02:	212a      	movs	r1, #42	@ 0x2a
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f94a 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, FS_CTRL, FS_PLLTUNE_SUB, fsplltune, LEN_FS_PLLTUNE);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	2201      	movs	r2, #1
 8001b10:	9200      	str	r2, [sp, #0]
 8001b12:	220b      	movs	r2, #11
 8001b14:	212b      	movs	r1, #43	@ 0x2b
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f941 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, FS_CTRL, FS_PLLCFG_SUB, fspllcfg, LEN_FS_PLLCFG);
 8001b1c:	f107 0318 	add.w	r3, r7, #24
 8001b20:	2204      	movs	r2, #4
 8001b22:	9200      	str	r2, [sp, #0]
 8001b24:	2207      	movs	r2, #7
 8001b26:	212b      	movs	r1, #43	@ 0x2b
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f938 	bl	8001d9e <dwSpiWrite>
	dwSpiWrite(dev, FS_CTRL, FS_XTALT_SUB, fsxtalt, LEN_FS_XTALT);
 8001b2e:	f107 0310 	add.w	r3, r7, #16
 8001b32:	2201      	movs	r2, #1
 8001b34:	9200      	str	r2, [sp, #0]
 8001b36:	220e      	movs	r2, #14
 8001b38:	212b      	movs	r1, #43	@ 0x2b
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f92f 	bl	8001d9e <dwSpiWrite>
}
 8001b40:	bf00      	nop
 8001b42:	3758      	adds	r7, #88	@ 0x58
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <dwAttachSentHandler>:
{
	dev->forceTxPower = true;
	dev->txPower = txPower;
}

void dwAttachSentHandler(dwDevice_t *dev, dwHandler_t handler) {
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
	dev->handleSent = handler;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <dwAttachReceivedHandler>:

void dwAttachErrorHandler(dwDevice_t *dev, dwHandler_t handler) {
	dev->handleError = handler;
}

void dwAttachReceivedHandler(dwDevice_t *dev, dwHandler_t handler) {
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
	dev->handleReceived = handler;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <dwSetAntenaDelay>:

void dwAttachReceiveTimestampAvailable(dwDevice_t *dev, dwHandler_t handler) {
	dev->handleReceiveTimestampAvailable = handler;
}

void dwSetAntenaDelay(dwDevice_t *dev, dwTime_t delay) {
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	4639      	mov	r1, r7
 8001b86:	e881 000c 	stmia.w	r1, {r2, r3}
	dev->antennaDelay.full = delay.full;
 8001b8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b8e:	68f9      	ldr	r1, [r7, #12]
 8001b90:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
	...

08001ba0 <dwStrError>:

char* dwStrError(int error)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	if (error == DW_ERROR_OK) return "No error";
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <dwStrError+0x12>
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <dwStrError+0x28>)
 8001bb0:	e005      	b.n	8001bbe <dwStrError+0x1e>
	else if (error == DW_ERROR_WRONG_ID) return "Wrong chip ID";
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <dwStrError+0x1c>
 8001bb8:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <dwStrError+0x2c>)
 8001bba:	e000      	b.n	8001bbe <dwStrError+0x1e>
	else return "Uknown error";
 8001bbc:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <dwStrError+0x30>)
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	0800afb0 	.word	0x0800afb0
 8001bcc:	0800afbc 	.word	0x0800afbc
 8001bd0:	0800afcc 	.word	0x0800afcc

08001bd4 <setBit>:

static void setBit(uint8_t data[], unsigned int n, unsigned int bit, bool val) {
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	@ 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	70fb      	strb	r3, [r7, #3]
	unsigned int idx;
	unsigned int shift;

	idx = bit / 8;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	61fb      	str	r3, [r7, #28]
	if(idx >= n) {
 8001be8:	69fa      	ldr	r2, [r7, #28]
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d228      	bcs.n	8001c42 <setBit+0x6e>
		return; // TODO proper error handling: out of bounds
	}
	uint8_t* targetByte = &data[idx];
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
	shift = bit % 8;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	617b      	str	r3, [r7, #20]
	if(val) {
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <setBit+0x4e>
		*targetByte |= (1<<shift);
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	b25a      	sxtb	r2, r3
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	b25b      	sxtb	r3, r3
 8001c16:	4313      	orrs	r3, r2
 8001c18:	b25b      	sxtb	r3, r3
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	701a      	strb	r2, [r3, #0]
 8001c20:	e010      	b.n	8001c44 <setBit+0x70>
	} else {
		*targetByte &= ~(1<<shift);
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	b25a      	sxtb	r2, r3
 8001c28:	2101      	movs	r1, #1
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	b25b      	sxtb	r3, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	4013      	ands	r3, r2
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	e000      	b.n	8001c44 <setBit+0x70>
		return; // TODO proper error handling: out of bounds
 8001c42:	bf00      	nop
	}
}
 8001c44:	3724      	adds	r7, #36	@ 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <writeValueToBytes>:
	shift = bit % 8;

	return (targetByte>>shift)&0x01;
}

static void writeValueToBytes(uint8_t data[], long val, unsigned int n) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
	unsigned int i;
	for(i = 0; i < n; i++) {
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	e00c      	b.n	8001c78 <writeValueToBytes+0x2c>
		data[i] = ((val >> (i * 8)) & 0xFF);
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	fa42 f103 	asr.w	r1, r2, r3
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	b2ca      	uxtb	r2, r1
 8001c70:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < n; i++) {
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3301      	adds	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d3ee      	bcc.n	8001c5e <writeValueToBytes+0x12>
	}
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	371c      	adds	r7, #28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <readBytesOTP>:

static void readBytesOTP(dwDevice_t* dev, uint16_t address, uint8_t data[]) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	460b      	mov	r3, r1
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	817b      	strh	r3, [r7, #10]
	uint8_t addressBytes[LEN_OTP_ADDR];

	// p60 - 6.3.3 Reading a value from OTP memory
	// bytes of address
	addressBytes[0] = (address & 0xFF);
 8001c9a:	897b      	ldrh	r3, [r7, #10]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	753b      	strb	r3, [r7, #20]
	addressBytes[1] = ((address >> 8) & 0xFF);
 8001ca0:	897b      	ldrh	r3, [r7, #10]
 8001ca2:	0a1b      	lsrs	r3, r3, #8
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	757b      	strb	r3, [r7, #21]
	// set address
	dwSpiWrite(dev, OTP_IF, OTP_ADDR_SUB, addressBytes, LEN_OTP_ADDR);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	2202      	movs	r2, #2
 8001cb0:	9200      	str	r2, [sp, #0]
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	212d      	movs	r1, #45	@ 0x2d
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f871 	bl	8001d9e <dwSpiWrite>
	// switch into read mode
	dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x03); // OTPRDEN | OTPREAD
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	2206      	movs	r2, #6
 8001cc0:	212d      	movs	r1, #45	@ 0x2d
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 f8ae 	bl	8001e24 <dwSpiWrite8>
	dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x01); // OTPRDEN
 8001cc8:	2301      	movs	r3, #1
 8001cca:	2206      	movs	r2, #6
 8001ccc:	212d      	movs	r1, #45	@ 0x2d
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 f8a8 	bl	8001e24 <dwSpiWrite8>
	// read value/block - 4 bytes
	dwSpiRead(dev, OTP_IF, OTP_RDAT_SUB, data, LEN_OTP_RDAT);
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	220a      	movs	r2, #10
 8001cdc:	212d      	movs	r1, #45	@ 0x2d
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 f80a 	bl	8001cf8 <dwSpiRead>
	// end read mode
	dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x00);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	2206      	movs	r2, #6
 8001ce8:	212d      	movs	r1, #45	@ 0x2d
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 f89a 	bl	8001e24 <dwSpiWrite8>
}
 8001cf0:	bf00      	nop
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <dwSpiRead>:

#include "libdw1000Spi.h"


void dwSpiRead(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                void* data, size_t length) {
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b089      	sub	sp, #36	@ 0x24
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	460b      	mov	r3, r1
 8001d06:	72fb      	strb	r3, [r7, #11]
	uint8_t header[3];
 	size_t headerLength=1;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]

	header[0] = regid & 0x3f;
 8001d0c:	7afb      	ldrb	r3, [r7, #11]
 8001d0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	743b      	strb	r3, [r7, #16]

	if (address != 0) {
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d01c      	beq.n	8001d56 <dwSpiRead+0x5e>
		header[0] |= 0x40;
 8001d1c:	7c3b      	ldrb	r3, [r7, #16]
 8001d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	743b      	strb	r3, [r7, #16]

		header[1] = address & 0x7f;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	747b      	strb	r3, [r7, #17]
		address >>= 7;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	09db      	lsrs	r3, r3, #7
 8001d36:	607b      	str	r3, [r7, #4]
		headerLength = 2;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	617b      	str	r3, [r7, #20]

		if (address != 0) {
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d009      	beq.n	8001d56 <dwSpiRead+0x5e>
			header[1] |= 0x80;
 8001d42:	7c7b      	ldrb	r3, [r7, #17]
 8001d44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	747b      	strb	r3, [r7, #17]
			header[2] = address & 0xff;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	74bb      	strb	r3, [r7, #18]
			headerLength = 3;
 8001d52:	2303      	movs	r3, #3
 8001d54:	617b      	str	r3, [r7, #20]
		}
	}

	dev->ops->spiRead(dev, header, headerLength, data, length);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681c      	ldr	r4, [r3, #0]
 8001d5c:	f107 0110 	add.w	r1, r7, #16
 8001d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	47a0      	blx	r4
}
 8001d6c:	bf00      	nop
 8001d6e:	371c      	adds	r7, #28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd90      	pop	{r4, r7, pc}

08001d74 <dwSpiRead32>:
	uint16_t data;
	dwSpiRead(dev, regid, address, &data, sizeof(data));
	return data;
}

uint32_t dwSpiRead32(dwDevice_t *dev, uint8_t regid, uint32_t address) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	72fb      	strb	r3, [r7, #11]
	uint32_t data;
	dwSpiRead(dev, regid, address, &data, sizeof(data));
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	7af9      	ldrb	r1, [r7, #11]
 8001d88:	2204      	movs	r2, #4
 8001d8a:	9200      	str	r2, [sp, #0]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f7ff ffb2 	bl	8001cf8 <dwSpiRead>
	return data;
 8001d94:	697b      	ldr	r3, [r7, #20]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <dwSpiWrite>:

void dwSpiWrite(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                 const void* data, size_t length) {
 8001d9e:	b590      	push	{r4, r7, lr}
 8001da0:	b089      	sub	sp, #36	@ 0x24
 8001da2:	af02      	add	r7, sp, #8
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	460b      	mov	r3, r1
 8001dac:	72fb      	strb	r3, [r7, #11]
	uint8_t header[3];
	size_t headerLength=1;
 8001dae:	2301      	movs	r3, #1
 8001db0:	617b      	str	r3, [r7, #20]

	header[0] = regid & 0x3f;
 8001db2:	7afb      	ldrb	r3, [r7, #11]
 8001db4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	743b      	strb	r3, [r7, #16]
	header[0] |= 0x80;
 8001dbc:	7c3b      	ldrb	r3, [r7, #16]
 8001dbe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	743b      	strb	r3, [r7, #16]

	if (address != 0) {
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01c      	beq.n	8001e06 <dwSpiWrite+0x68>
		header[0] |= 0x40;
 8001dcc:	7c3b      	ldrb	r3, [r7, #16]
 8001dce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	743b      	strb	r3, [r7, #16]

		header[1] = address & 0x7f;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	747b      	strb	r3, [r7, #17]
		address >>= 7;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	09db      	lsrs	r3, r3, #7
 8001de6:	607b      	str	r3, [r7, #4]
		headerLength = 2;
 8001de8:	2302      	movs	r3, #2
 8001dea:	617b      	str	r3, [r7, #20]

		if (address != 0) {
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d009      	beq.n	8001e06 <dwSpiWrite+0x68>
			header[1] |= 0x80;
 8001df2:	7c7b      	ldrb	r3, [r7, #17]
 8001df4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	747b      	strb	r3, [r7, #17]
			header[2] = address & 0xff;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	74bb      	strb	r3, [r7, #18]
			headerLength = 3;
 8001e02:	2303      	movs	r3, #3
 8001e04:	617b      	str	r3, [r7, #20]
		}
	}

	dev->ops->spiWrite(dev, header, headerLength, data, length);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685c      	ldr	r4, [r3, #4]
 8001e0c:	f107 0110 	add.w	r1, r7, #16
 8001e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	47a0      	blx	r4
}
 8001e1c:	bf00      	nop
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd90      	pop	{r4, r7, pc}

08001e24 <dwSpiWrite8>:

void dwSpiWrite8(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                   uint8_t data) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af02      	add	r7, sp, #8
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	460b      	mov	r3, r1
 8001e32:	72fb      	strb	r3, [r7, #11]
 8001e34:	4613      	mov	r3, r2
 8001e36:	72bb      	strb	r3, [r7, #10]
	dwSpiWrite(dev, regid, address, &data, sizeof(data));
 8001e38:	f107 030a 	add.w	r3, r7, #10
 8001e3c:	7af9      	ldrb	r1, [r7, #11]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	9200      	str	r2, [sp, #0]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f7ff ffaa 	bl	8001d9e <dwSpiWrite>
}
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <dwSpiWrite32>:

void dwSpiWrite32(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                   uint32_t data) {
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af02      	add	r7, sp, #8
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	72fb      	strb	r3, [r7, #11]
	dwSpiWrite(dev, regid, address, &data, sizeof(data));
 8001e62:	463b      	mov	r3, r7
 8001e64:	7af9      	ldrb	r1, [r7, #11]
 8001e66:	2204      	movs	r2, #4
 8001e68:	9200      	str	r2, [sp, #0]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f7ff ff96 	bl	8001d9e <dwSpiWrite>
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <spiRead>:
char USB_TX_Buffer[255] = "\0";
#define SPI_Transmit_Timeout  100
//Timeout for transmission, in ms

void spiRead(dwDevice_t *dev, const void *header, size_t headerLength,
		void *data, size_t dataLength) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
 8001e88:	603b      	str	r3, [r7, #0]
	//Function for SPI_Read for decawave device, member of dw_ops .spiRead field
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	2140      	movs	r1, #64	@ 0x40
 8001e8e:	480d      	ldr	r0, [pc, #52]	@ (8001ec4 <spiRead+0x48>)
 8001e90:	f000 ff60 	bl	8002d54 <HAL_GPIO_WritePin>
	//Led ON

	HAL_SPI_Transmit(&hspi1, (uint8_t*) header, headerLength,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	2364      	movs	r3, #100	@ 0x64
 8001e9a:	68b9      	ldr	r1, [r7, #8]
 8001e9c:	480a      	ldr	r0, [pc, #40]	@ (8001ec8 <spiRead+0x4c>)
 8001e9e:	f003 fa3d 	bl	800531c <HAL_SPI_Transmit>
	SPI_Transmit_Timeout);

	HAL_SPI_Receive(&hspi1, (uint8_t*) data, dataLength, SPI_Transmit_Timeout);
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	2364      	movs	r3, #100	@ 0x64
 8001ea8:	6839      	ldr	r1, [r7, #0]
 8001eaa:	4807      	ldr	r0, [pc, #28]	@ (8001ec8 <spiRead+0x4c>)
 8001eac:	f003 fb7a 	bl	80055a4 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2140      	movs	r1, #64	@ 0x40
 8001eb4:	4803      	ldr	r0, [pc, #12]	@ (8001ec4 <spiRead+0x48>)
 8001eb6:	f000 ff4d 	bl	8002d54 <HAL_GPIO_WritePin>
	//Led OFF
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40010c00 	.word	0x40010c00
 8001ec8:	20000204 	.word	0x20000204

08001ecc <spiWrite>:

void spiWrite(dwDevice_t *dev, const void *header, size_t headerLength,
		const void *data, size_t dataLength) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	603b      	str	r3, [r7, #0]
	//Function for SPI_Write for decawave device, member of dw_ops .spiWrite field
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001eda:	2201      	movs	r2, #1
 8001edc:	2140      	movs	r1, #64	@ 0x40
 8001ede:	480d      	ldr	r0, [pc, #52]	@ (8001f14 <spiWrite+0x48>)
 8001ee0:	f000 ff38 	bl	8002d54 <HAL_GPIO_WritePin>
	//Led ON

	HAL_SPI_Transmit(&hspi1, (uint8_t*) header, headerLength,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	2364      	movs	r3, #100	@ 0x64
 8001eea:	68b9      	ldr	r1, [r7, #8]
 8001eec:	480a      	ldr	r0, [pc, #40]	@ (8001f18 <spiWrite+0x4c>)
 8001eee:	f003 fa15 	bl	800531c <HAL_SPI_Transmit>
	SPI_Transmit_Timeout);

	HAL_SPI_Transmit(&hspi1, (uint8_t*) data, dataLength, SPI_Transmit_Timeout);
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	2364      	movs	r3, #100	@ 0x64
 8001ef8:	6839      	ldr	r1, [r7, #0]
 8001efa:	4807      	ldr	r0, [pc, #28]	@ (8001f18 <spiWrite+0x4c>)
 8001efc:	f003 fa0e 	bl	800531c <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2140      	movs	r1, #64	@ 0x40
 8001f04:	4803      	ldr	r0, [pc, #12]	@ (8001f14 <spiWrite+0x48>)
 8001f06:	f000 ff25 	bl	8002d54 <HAL_GPIO_WritePin>
	//Led OFF
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40010c00 	.word	0x40010c00
 8001f18:	20000204 	.word	0x20000204

08001f1c <spiSetSpeed>:

void spiSetSpeed(dwDevice_t *dev, dwSpiSpeed_t speed) {
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
// Needs to restart SPI using HAL, future improvement
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <delayms>:
void delayms(dwDevice_t *dev, unsigned int delay) {
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
	HAL_Delay(delay);
 8001f3c:	6838      	ldr	r0, [r7, #0]
 8001f3e:	f000 fc53 	bl	80027e8 <HAL_Delay>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <reset>:

void reset(dwDevice_t *dev) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001f54:	2201      	movs	r2, #1
 8001f56:	2101      	movs	r1, #1
 8001f58:	4807      	ldr	r0, [pc, #28]	@ (8001f78 <reset+0x2c>)
 8001f5a:	f000 fefb 	bl	8002d54 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001f5e:	200a      	movs	r0, #10
 8001f60:	f000 fc42 	bl	80027e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2102      	movs	r1, #2
 8001f68:	4803      	ldr	r0, [pc, #12]	@ (8001f78 <reset+0x2c>)
 8001f6a:	f000 fef3 	bl	8002d54 <HAL_GPIO_WritePin>
	//Open drain output, must not be driven High externally
	//See: DW1000 datasheet, page 8
//Hardware RST pin
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40010800 	.word	0x40010800

08001f7c <TX_Callback>:

dwOps_t dw_ops = { .spiRead = spiRead, .spiWrite = spiWrite, .spiSetSpeed =
		spiSetSpeed, .delayms = delayms, .reset = reset };

//RX and TX callbacks
void TX_Callback(dwDevice_t *dev) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	sprintf((char*) USB_TX_Buffer, "TX Complete %d \n\r\0", HAL_GetTick());
 8001f84:	f000 fc26 	bl	80027d4 <HAL_GetTick>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4908      	ldr	r1, [pc, #32]	@ (8001fb0 <TX_Callback+0x34>)
 8001f8e:	4809      	ldr	r0, [pc, #36]	@ (8001fb4 <TX_Callback+0x38>)
 8001f90:	f008 fb52 	bl	800a638 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8001f94:	4807      	ldr	r0, [pc, #28]	@ (8001fb4 <TX_Callback+0x38>)
 8001f96:	f7fe f8d9 	bl	800014c <strlen>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4804      	ldr	r0, [pc, #16]	@ (8001fb4 <TX_Callback+0x38>)
 8001fa2:	f007 ff6b 	bl	8009e7c <CDC_Transmit_FS>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	0800afdc 	.word	0x0800afdc
 8001fb4:	200002a4 	.word	0x200002a4

08001fb8 <RX_Callback>:
void RX_Callback(dwDevice_t *dev) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	sprintf((char*) USB_TX_Buffer, "RX Complete %d \n\r\0", HAL_GetTick());
 8001fc0:	f000 fc08 	bl	80027d4 <HAL_GetTick>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4908      	ldr	r1, [pc, #32]	@ (8001fec <RX_Callback+0x34>)
 8001fca:	4809      	ldr	r0, [pc, #36]	@ (8001ff0 <RX_Callback+0x38>)
 8001fcc:	f008 fb34 	bl	800a638 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8001fd0:	4807      	ldr	r0, [pc, #28]	@ (8001ff0 <RX_Callback+0x38>)
 8001fd2:	f7fe f8bb 	bl	800014c <strlen>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4804      	ldr	r0, [pc, #16]	@ (8001ff0 <RX_Callback+0x38>)
 8001fde:	f007 ff4d 	bl	8009e7c <CDC_Transmit_FS>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	0800aff0 	.word	0x0800aff0
 8001ff0:	200002a4 	.word	0x200002a4

08001ff4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	@ 0x28
 8001ff8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ffa:	f000 fb93 	bl	8002724 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ffe:	f000 f8db 	bl	80021b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002002:	f000 f995 	bl	8002330 <MX_GPIO_Init>
	MX_SPI1_Init();
 8002006:	f000 f933 	bl	8002270 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 800200a:	f007 fe79 	bl	8009d00 <MX_USB_DEVICE_Init>
	MX_USART1_UART_Init();
 800200e:	f000 f965 	bl	80022dc <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	sprintf((char*) USB_TX_Buffer, "Starting test \n\r\0");
 8002012:	495d      	ldr	r1, [pc, #372]	@ (8002188 <main+0x194>)
 8002014:	485d      	ldr	r0, [pc, #372]	@ (800218c <main+0x198>)
 8002016:	f008 fb0f 	bl	800a638 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 800201a:	485c      	ldr	r0, [pc, #368]	@ (800218c <main+0x198>)
 800201c:	f7fe f896 	bl	800014c <strlen>
 8002020:	4603      	mov	r3, r0
 8002022:	b29b      	uxth	r3, r3
 8002024:	4619      	mov	r1, r3
 8002026:	4859      	ldr	r0, [pc, #356]	@ (800218c <main+0x198>)
 8002028:	f007 ff28 	bl	8009e7c <CDC_Transmit_FS>
//		HAL_Delay(5);
//		sprintf((char*) USB_TX_Buffer, "Waiting %d \n\r\0", i);
//		CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
//	}

	sprintf((char*) USB_TX_Buffer, "Test:Init for DW1000 \n\r\0");
 800202c:	4958      	ldr	r1, [pc, #352]	@ (8002190 <main+0x19c>)
 800202e:	4857      	ldr	r0, [pc, #348]	@ (800218c <main+0x198>)
 8002030:	f008 fb02 	bl	800a638 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002034:	4855      	ldr	r0, [pc, #340]	@ (800218c <main+0x198>)
 8002036:	f7fe f889 	bl	800014c <strlen>
 800203a:	4603      	mov	r3, r0
 800203c:	b29b      	uxth	r3, r3
 800203e:	4619      	mov	r1, r3
 8002040:	4852      	ldr	r0, [pc, #328]	@ (800218c <main+0x198>)
 8002042:	f007 ff1b 	bl	8009e7c <CDC_Transmit_FS>
	HAL_Delay(1000);
 8002046:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800204a:	f000 fbcd 	bl	80027e8 <HAL_Delay>
	//Initialize Decawave

	dwInit(dwm, &dw_ops);
 800204e:	4b51      	ldr	r3, [pc, #324]	@ (8002194 <main+0x1a0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4951      	ldr	r1, [pc, #324]	@ (8002198 <main+0x1a4>)
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe f887 	bl	8000168 <dwInit>

	//dwOpsInit(dwm);
	//Looks like it was used in another project in order to enable Interrupts on STM32
	//Link: https://github.com/bitcraze/lps-node-firmware/blob/6a85c68c3de8f35a218d083125346241bd2a7a13/src/dwOps.c#L40

	uint8_t result = dwConfigure(dwm); // Configure the dw1000 chip
 800205a:	4b4e      	ldr	r3, [pc, #312]	@ (8002194 <main+0x1a0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe f8dc 	bl	800021c <dwConfigure>
 8002064:	4603      	mov	r3, r0
 8002066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (result == 0) {
 800206a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800206e:	2b00      	cmp	r3, #0
 8002070:	d112      	bne.n	8002098 <main+0xa4>
		sprintf((char*) USB_TX_Buffer, "Ok \n\r\0");
 8002072:	494a      	ldr	r1, [pc, #296]	@ (800219c <main+0x1a8>)
 8002074:	4845      	ldr	r0, [pc, #276]	@ (800218c <main+0x198>)
 8002076:	f008 fadf 	bl	800a638 <siprintf>
		CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 800207a:	4844      	ldr	r0, [pc, #272]	@ (800218c <main+0x198>)
 800207c:	f7fe f866 	bl	800014c <strlen>
 8002080:	4603      	mov	r3, r0
 8002082:	b29b      	uxth	r3, r3
 8002084:	4619      	mov	r1, r3
 8002086:	4841      	ldr	r0, [pc, #260]	@ (800218c <main+0x198>)
 8002088:	f007 fef8 	bl	8009e7c <CDC_Transmit_FS>
		dwEnableAllLeds(dwm);
 800208c:	4b41      	ldr	r3, [pc, #260]	@ (8002194 <main+0x1a0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe f998 	bl	80003c6 <dwEnableAllLeds>
 8002096:	e013      	b.n	80020c0 <main+0xcc>
	} else {
		sprintf((char*) USB_TX_Buffer, "[ERROR]: %s\n\r\0", dwStrError(result));
 8002098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fd7f 	bl	8001ba0 <dwStrError>
 80020a2:	4603      	mov	r3, r0
 80020a4:	461a      	mov	r2, r3
 80020a6:	493e      	ldr	r1, [pc, #248]	@ (80021a0 <main+0x1ac>)
 80020a8:	4838      	ldr	r0, [pc, #224]	@ (800218c <main+0x198>)
 80020aa:	f008 fac5 	bl	800a638 <siprintf>
		CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 80020ae:	4837      	ldr	r0, [pc, #220]	@ (800218c <main+0x198>)
 80020b0:	f7fe f84c 	bl	800014c <strlen>
 80020b4:	4603      	mov	r3, r0
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	4619      	mov	r1, r3
 80020ba:	4834      	ldr	r0, [pc, #208]	@ (800218c <main+0x198>)
 80020bc:	f007 fede 	bl	8009e7c <CDC_Transmit_FS>
	}
	//Decawave config end

	sprintf((char*) USB_TX_Buffer, "Config End \n\r\0");
 80020c0:	4938      	ldr	r1, [pc, #224]	@ (80021a4 <main+0x1b0>)
 80020c2:	4832      	ldr	r0, [pc, #200]	@ (800218c <main+0x198>)
 80020c4:	f008 fab8 	bl	800a638 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 80020c8:	4830      	ldr	r0, [pc, #192]	@ (800218c <main+0x198>)
 80020ca:	f7fe f83f 	bl	800014c <strlen>
 80020ce:	4603      	mov	r3, r0
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	4619      	mov	r1, r3
 80020d4:	482d      	ldr	r0, [pc, #180]	@ (800218c <main+0x198>)
 80020d6:	f007 fed1 	bl	8009e7c <CDC_Transmit_FS>
	HAL_Delay(1000);
 80020da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020de:	f000 fb83 	bl	80027e8 <HAL_Delay>

	//Continue with config:
	dwTime_t delay = { .full = 0 };
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
	dwSetAntenaDelay(dwm, delay);
 80020ee:	4b29      	ldr	r3, [pc, #164]	@ (8002194 <main+0x1a0>)
 80020f0:	6819      	ldr	r1, [r3, #0]
 80020f2:	f107 0318 	add.w	r3, r7, #24
 80020f6:	cb0c      	ldmia	r3, {r2, r3}
 80020f8:	4608      	mov	r0, r1
 80020fa:	f7ff fd3f 	bl	8001b7c <dwSetAntenaDelay>

	dwAttachSentHandler(dwm, TX_Callback);
 80020fe:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <main+0x1a0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4929      	ldr	r1, [pc, #164]	@ (80021a8 <main+0x1b4>)
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fd1f 	bl	8001b48 <dwAttachSentHandler>
	dwAttachReceivedHandler(dwm, RX_Callback);
 800210a:	4b22      	ldr	r3, [pc, #136]	@ (8002194 <main+0x1a0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4927      	ldr	r1, [pc, #156]	@ (80021ac <main+0x1b8>)
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fd26 	bl	8001b62 <dwAttachReceivedHandler>

	dwNewConfiguration(dwm);
 8002116:	4b1f      	ldr	r3, [pc, #124]	@ (8002194 <main+0x1a0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fc79 	bl	8000a12 <dwNewConfiguration>
	dwSetDefaults(dwm);
 8002120:	4b1c      	ldr	r3, [pc, #112]	@ (8002194 <main+0x1a0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe fe75 	bl	8000e14 <dwSetDefaults>

	dwEnableMode(dwm, MODE_SHORTDATA_FAST_ACCURACY);
 800212a:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <main+0x1a0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4920      	ldr	r1, [pc, #128]	@ (80021b0 <main+0x1bc>)
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fecf 	bl	8000ed4 <dwEnableMode>
	dwSetChannel(dwm, CHANNEL_2);
 8002136:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <main+0x1a0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2102      	movs	r1, #2
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fe11 	bl	8000d64 <dwSetChannel>
	dwSetPreambleCode(dwm, PREAMBLE_CODE_64MHZ_9);
 8002142:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <main+0x1a0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2109      	movs	r1, #9
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fe29 	bl	8000da0 <dwSetPreambleCode>

	dwCommitConfiguration(dwm);
 800214e:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <main+0x1a0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fc77 	bl	8000a46 <dwCommitConfiguration>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	int i = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]

			char mesaj[] = "Hello UWB World! \n\r\0";
			send_Data_Over_UWB(mesaj);
			HAL_Delay(100);
		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800215c:	2201      	movs	r2, #1
 800215e:	2180      	movs	r1, #128	@ 0x80
 8002160:	4814      	ldr	r0, [pc, #80]	@ (80021b4 <main+0x1c0>)
 8002162:	f000 fdf7 	bl	8002d54 <HAL_GPIO_WritePin>
			dwNewReceive(dwm);
 8002166:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <main+0x1a0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fc0b 	bl	8000986 <dwNewReceive>
			dwSetDefaults(dwm);
 8002170:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <main+0x1a0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fe4d 	bl	8000e14 <dwSetDefaults>
			dwStartReceive(dwm);
 800217a:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <main+0x1a0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fc19 	bl	80009b6 <dwStartReceive>
		if (TRANSMITTER == 1) {
 8002184:	e7ea      	b.n	800215c <main+0x168>
 8002186:	bf00      	nop
 8002188:	0800b004 	.word	0x0800b004
 800218c:	200002a4 	.word	0x200002a4
 8002190:	0800b018 	.word	0x0800b018
 8002194:	20000000 	.word	0x20000000
 8002198:	20000004 	.word	0x20000004
 800219c:	0800b034 	.word	0x0800b034
 80021a0:	0800b03c 	.word	0x0800b03c
 80021a4:	0800b04c 	.word	0x0800b04c
 80021a8:	08001f7d 	.word	0x08001f7d
 80021ac:	08001fb9 	.word	0x08001fb9
 80021b0:	0800b09c 	.word	0x0800b09c
 80021b4:	40010c00 	.word	0x40010c00

080021b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b094      	sub	sp, #80	@ 0x50
 80021bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80021be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021c2:	2228      	movs	r2, #40	@ 0x28
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f008 fa58 	bl	800a67c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021e8:	2301      	movs	r3, #1
 80021ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021f2:	2300      	movs	r3, #0
 80021f4:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021f6:	2301      	movs	r3, #1
 80021f8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021fa:	2302      	movs	r3, #2
 80021fc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002202:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002204:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002208:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800220a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800220e:	4618      	mov	r0, r3
 8002210:	f002 fb3a 	bl	8004888 <HAL_RCC_OscConfig>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <SystemClock_Config+0x66>
		Error_Handler();
 800221a:	f000 f915 	bl	8002448 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800221e:	230f      	movs	r3, #15
 8002220:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002222:	2302      	movs	r3, #2
 8002224:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800222a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800222e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	2101      	movs	r1, #1
 800223a:	4618      	mov	r0, r3
 800223c:	f002 fda6 	bl	8004d8c <HAL_RCC_ClockConfig>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <SystemClock_Config+0x92>
		Error_Handler();
 8002246:	f000 f8ff 	bl	8002448 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800224a:	2310      	movs	r3, #16
 800224c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800224e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002252:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002254:	1d3b      	adds	r3, r7, #4
 8002256:	4618      	mov	r0, r3
 8002258:	f002 ff26 	bl	80050a8 <HAL_RCCEx_PeriphCLKConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <SystemClock_Config+0xae>
		Error_Handler();
 8002262:	f000 f8f1 	bl	8002448 <Error_Handler>
	}
}
 8002266:	bf00      	nop
 8002268:	3750      	adds	r7, #80	@ 0x50
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002274:	4b17      	ldr	r3, [pc, #92]	@ (80022d4 <MX_SPI1_Init+0x64>)
 8002276:	4a18      	ldr	r2, [pc, #96]	@ (80022d8 <MX_SPI1_Init+0x68>)
 8002278:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800227a:	4b16      	ldr	r3, [pc, #88]	@ (80022d4 <MX_SPI1_Init+0x64>)
 800227c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002280:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002282:	4b14      	ldr	r3, [pc, #80]	@ (80022d4 <MX_SPI1_Init+0x64>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002288:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <MX_SPI1_Init+0x64>)
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800228e:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <MX_SPI1_Init+0x64>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002294:	4b0f      	ldr	r3, [pc, #60]	@ (80022d4 <MX_SPI1_Init+0x64>)
 8002296:	2200      	movs	r2, #0
 8002298:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800229a:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <MX_SPI1_Init+0x64>)
 800229c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80022a0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80022a2:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <MX_SPI1_Init+0x64>)
 80022a4:	2218      	movs	r2, #24
 80022a6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022a8:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <MX_SPI1_Init+0x64>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022ae:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <MX_SPI1_Init+0x64>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b4:	4b07      	ldr	r3, [pc, #28]	@ (80022d4 <MX_SPI1_Init+0x64>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 80022ba:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <MX_SPI1_Init+0x64>)
 80022bc:	220a      	movs	r2, #10
 80022be:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80022c0:	4804      	ldr	r0, [pc, #16]	@ (80022d4 <MX_SPI1_Init+0x64>)
 80022c2:	f002 ffa7 	bl	8005214 <HAL_SPI_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_SPI1_Init+0x60>
		Error_Handler();
 80022cc:	f000 f8bc 	bl	8002448 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000204 	.word	0x20000204
 80022d8:	40013000 	.word	0x40013000

080022dc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80022e0:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <MX_USART1_UART_Init+0x4c>)
 80022e2:	4a12      	ldr	r2, [pc, #72]	@ (800232c <MX_USART1_UART_Init+0x50>)
 80022e4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80022e6:	4b10      	ldr	r3, [pc, #64]	@ (8002328 <MX_USART1_UART_Init+0x4c>)
 80022e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022ec:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <MX_USART1_UART_Init+0x4c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80022f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002328 <MX_USART1_UART_Init+0x4c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80022fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002328 <MX_USART1_UART_Init+0x4c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002300:	4b09      	ldr	r3, [pc, #36]	@ (8002328 <MX_USART1_UART_Init+0x4c>)
 8002302:	220c      	movs	r2, #12
 8002304:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002306:	4b08      	ldr	r3, [pc, #32]	@ (8002328 <MX_USART1_UART_Init+0x4c>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800230c:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <MX_USART1_UART_Init+0x4c>)
 800230e:	2200      	movs	r2, #0
 8002310:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002312:	4805      	ldr	r0, [pc, #20]	@ (8002328 <MX_USART1_UART_Init+0x4c>)
 8002314:	f003 fd13 	bl	8005d3e <HAL_UART_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800231e:	f000 f893 	bl	8002448 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000025c 	.word	0x2000025c
 800232c:	40013800 	.word	0x40013800

08002330 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002336:	f107 0310 	add.w	r3, r7, #16
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002344:	4b3c      	ldr	r3, [pc, #240]	@ (8002438 <MX_GPIO_Init+0x108>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4a3b      	ldr	r2, [pc, #236]	@ (8002438 <MX_GPIO_Init+0x108>)
 800234a:	f043 0320 	orr.w	r3, r3, #32
 800234e:	6193      	str	r3, [r2, #24]
 8002350:	4b39      	ldr	r3, [pc, #228]	@ (8002438 <MX_GPIO_Init+0x108>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800235c:	4b36      	ldr	r3, [pc, #216]	@ (8002438 <MX_GPIO_Init+0x108>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4a35      	ldr	r2, [pc, #212]	@ (8002438 <MX_GPIO_Init+0x108>)
 8002362:	f043 0304 	orr.w	r3, r3, #4
 8002366:	6193      	str	r3, [r2, #24]
 8002368:	4b33      	ldr	r3, [pc, #204]	@ (8002438 <MX_GPIO_Init+0x108>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002374:	4b30      	ldr	r3, [pc, #192]	@ (8002438 <MX_GPIO_Init+0x108>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a2f      	ldr	r2, [pc, #188]	@ (8002438 <MX_GPIO_Init+0x108>)
 800237a:	f043 0308 	orr.w	r3, r3, #8
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b2d      	ldr	r3, [pc, #180]	@ (8002438 <MX_GPIO_Init+0x108>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DW_RSTn_GPIO_Port, DW_RSTn_Pin, GPIO_PIN_RESET);
 800238c:	2200      	movs	r2, #0
 800238e:	2101      	movs	r1, #1
 8002390:	482a      	ldr	r0, [pc, #168]	@ (800243c <MX_GPIO_Init+0x10c>)
 8002392:	f000 fcdf 	bl	8002d54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_SET);
 8002396:	2201      	movs	r2, #1
 8002398:	2108      	movs	r1, #8
 800239a:	4828      	ldr	r0, [pc, #160]	@ (800243c <MX_GPIO_Init+0x10c>)
 800239c:	f000 fcda 	bl	8002d54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80023a0:	2201      	movs	r2, #1
 80023a2:	2140      	movs	r1, #64	@ 0x40
 80023a4:	4826      	ldr	r0, [pc, #152]	@ (8002440 <MX_GPIO_Init+0x110>)
 80023a6:	f000 fcd5 	bl	8002d54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2180      	movs	r1, #128	@ 0x80
 80023ae:	4824      	ldr	r0, [pc, #144]	@ (8002440 <MX_GPIO_Init+0x110>)
 80023b0:	f000 fcd0 	bl	8002d54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : DW_RSTn_Pin */
	GPIO_InitStruct.Pin = DW_RSTn_Pin;
 80023b4:	2301      	movs	r3, #1
 80023b6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80023b8:	2311      	movs	r3, #17
 80023ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2302      	movs	r3, #2
 80023c2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DW_RSTn_GPIO_Port, &GPIO_InitStruct);
 80023c4:	f107 0310 	add.w	r3, r7, #16
 80023c8:	4619      	mov	r1, r3
 80023ca:	481c      	ldr	r0, [pc, #112]	@ (800243c <MX_GPIO_Init+0x10c>)
 80023cc:	f000 fb3e 	bl	8002a4c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_EN_Pin */
	GPIO_InitStruct.Pin = USB_EN_Pin;
 80023d0:	2308      	movs	r3, #8
 80023d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d4:	2301      	movs	r3, #1
 80023d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023dc:	2302      	movs	r3, #2
 80023de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 80023e0:	f107 0310 	add.w	r3, r7, #16
 80023e4:	4619      	mov	r1, r3
 80023e6:	4815      	ldr	r0, [pc, #84]	@ (800243c <MX_GPIO_Init+0x10c>)
 80023e8:	f000 fb30 	bl	8002a4c <HAL_GPIO_Init>

	/*Configure GPIO pin : DW_IRQn_Pin */
	GPIO_InitStruct.Pin = DW_IRQn_Pin;
 80023ec:	2320      	movs	r3, #32
 80023ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023f0:	4b14      	ldr	r3, [pc, #80]	@ (8002444 <MX_GPIO_Init+0x114>)
 80023f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 80023f8:	f107 0310 	add.w	r3, r7, #16
 80023fc:	4619      	mov	r1, r3
 80023fe:	4810      	ldr	r0, [pc, #64]	@ (8002440 <MX_GPIO_Init+0x110>)
 8002400:	f000 fb24 	bl	8002a4c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD2_Pin;
 8002404:	23c0      	movs	r3, #192	@ 0xc0
 8002406:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002408:	2301      	movs	r3, #1
 800240a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2302      	movs	r3, #2
 8002412:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	4619      	mov	r1, r3
 800241a:	4809      	ldr	r0, [pc, #36]	@ (8002440 <MX_GPIO_Init+0x110>)
 800241c:	f000 fb16 	bl	8002a4c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002420:	2200      	movs	r2, #0
 8002422:	2100      	movs	r1, #0
 8002424:	2017      	movs	r0, #23
 8002426:	f000 fada 	bl	80029de <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800242a:	2017      	movs	r0, #23
 800242c:	f000 faf3 	bl	8002a16 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8002430:	bf00      	nop
 8002432:	3720      	adds	r7, #32
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	40010800 	.word	0x40010800
 8002440:	40010c00 	.word	0x40010c00
 8002444:	10110000 	.word	0x10110000

08002448 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800244c:	b672      	cpsid	i
}
 800244e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <Error_Handler+0x8>

08002454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800245a:	4b15      	ldr	r3, [pc, #84]	@ (80024b0 <HAL_MspInit+0x5c>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	4a14      	ldr	r2, [pc, #80]	@ (80024b0 <HAL_MspInit+0x5c>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6193      	str	r3, [r2, #24]
 8002466:	4b12      	ldr	r3, [pc, #72]	@ (80024b0 <HAL_MspInit+0x5c>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	4b0f      	ldr	r3, [pc, #60]	@ (80024b0 <HAL_MspInit+0x5c>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4a0e      	ldr	r2, [pc, #56]	@ (80024b0 <HAL_MspInit+0x5c>)
 8002478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800247c:	61d3      	str	r3, [r2, #28]
 800247e:	4b0c      	ldr	r3, [pc, #48]	@ (80024b0 <HAL_MspInit+0x5c>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800248a:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <HAL_MspInit+0x60>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	4a04      	ldr	r2, [pc, #16]	@ (80024b4 <HAL_MspInit+0x60>)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40010000 	.word	0x40010000

080024b8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 0310 	add.w	r3, r7, #16
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002540 <HAL_SPI_MspInit+0x88>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d12f      	bne.n	8002538 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002544 <HAL_SPI_MspInit+0x8c>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	4a19      	ldr	r2, [pc, #100]	@ (8002544 <HAL_SPI_MspInit+0x8c>)
 80024de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024e2:	6193      	str	r3, [r2, #24]
 80024e4:	4b17      	ldr	r3, [pc, #92]	@ (8002544 <HAL_SPI_MspInit+0x8c>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	4b14      	ldr	r3, [pc, #80]	@ (8002544 <HAL_SPI_MspInit+0x8c>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	4a13      	ldr	r2, [pc, #76]	@ (8002544 <HAL_SPI_MspInit+0x8c>)
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	6193      	str	r3, [r2, #24]
 80024fc:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <HAL_SPI_MspInit+0x8c>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8002508:	23b0      	movs	r3, #176	@ 0xb0
 800250a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002510:	2303      	movs	r3, #3
 8002512:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	4619      	mov	r1, r3
 800251a:	480b      	ldr	r0, [pc, #44]	@ (8002548 <HAL_SPI_MspInit+0x90>)
 800251c:	f000 fa96 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002520:	2340      	movs	r3, #64	@ 0x40
 8002522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	4619      	mov	r1, r3
 8002532:	4805      	ldr	r0, [pc, #20]	@ (8002548 <HAL_SPI_MspInit+0x90>)
 8002534:	f000 fa8a 	bl	8002a4c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002538:	bf00      	nop
 800253a:	3720      	adds	r7, #32
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40013000 	.word	0x40013000
 8002544:	40021000 	.word	0x40021000
 8002548:	40010800 	.word	0x40010800

0800254c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 0310 	add.w	r3, r7, #16
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a1c      	ldr	r2, [pc, #112]	@ (80025d8 <HAL_UART_MspInit+0x8c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d131      	bne.n	80025d0 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800256c:	4b1b      	ldr	r3, [pc, #108]	@ (80025dc <HAL_UART_MspInit+0x90>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	4a1a      	ldr	r2, [pc, #104]	@ (80025dc <HAL_UART_MspInit+0x90>)
 8002572:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002576:	6193      	str	r3, [r2, #24]
 8002578:	4b18      	ldr	r3, [pc, #96]	@ (80025dc <HAL_UART_MspInit+0x90>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002584:	4b15      	ldr	r3, [pc, #84]	@ (80025dc <HAL_UART_MspInit+0x90>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	4a14      	ldr	r2, [pc, #80]	@ (80025dc <HAL_UART_MspInit+0x90>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	6193      	str	r3, [r2, #24]
 8002590:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <HAL_UART_MspInit+0x90>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800259c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025a6:	2303      	movs	r3, #3
 80025a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025aa:	f107 0310 	add.w	r3, r7, #16
 80025ae:	4619      	mov	r1, r3
 80025b0:	480b      	ldr	r0, [pc, #44]	@ (80025e0 <HAL_UART_MspInit+0x94>)
 80025b2:	f000 fa4b 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c4:	f107 0310 	add.w	r3, r7, #16
 80025c8:	4619      	mov	r1, r3
 80025ca:	4805      	ldr	r0, [pc, #20]	@ (80025e0 <HAL_UART_MspInit+0x94>)
 80025cc:	f000 fa3e 	bl	8002a4c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80025d0:	bf00      	nop
 80025d2:	3720      	adds	r7, #32
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40013800 	.word	0x40013800
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40010800 	.word	0x40010800

080025e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <NMI_Handler+0x4>

080025ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f0:	bf00      	nop
 80025f2:	e7fd      	b.n	80025f0 <HardFault_Handler+0x4>

080025f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <MemManage_Handler+0x4>

080025fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002600:	bf00      	nop
 8002602:	e7fd      	b.n	8002600 <BusFault_Handler+0x4>

08002604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002608:	bf00      	nop
 800260a:	e7fd      	b.n	8002608 <UsageFault_Handler+0x4>

0800260c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002634:	f000 f8bc 	bl	80027b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}

0800263c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002640:	4802      	ldr	r0, [pc, #8]	@ (800264c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002642:	f000 fcdd 	bl	8003000 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200010d8 	.word	0x200010d8

08002650 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 8002654:	2020      	movs	r0, #32
 8002656:	f000 fb95 	bl	8002d84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002668:	4a14      	ldr	r2, [pc, #80]	@ (80026bc <_sbrk+0x5c>)
 800266a:	4b15      	ldr	r3, [pc, #84]	@ (80026c0 <_sbrk+0x60>)
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002674:	4b13      	ldr	r3, [pc, #76]	@ (80026c4 <_sbrk+0x64>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d102      	bne.n	8002682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800267c:	4b11      	ldr	r3, [pc, #68]	@ (80026c4 <_sbrk+0x64>)
 800267e:	4a12      	ldr	r2, [pc, #72]	@ (80026c8 <_sbrk+0x68>)
 8002680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002682:	4b10      	ldr	r3, [pc, #64]	@ (80026c4 <_sbrk+0x64>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	429a      	cmp	r2, r3
 800268e:	d207      	bcs.n	80026a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002690:	f007 fffc 	bl	800a68c <__errno>
 8002694:	4603      	mov	r3, r0
 8002696:	220c      	movs	r2, #12
 8002698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800269a:	f04f 33ff 	mov.w	r3, #4294967295
 800269e:	e009      	b.n	80026b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026a0:	4b08      	ldr	r3, [pc, #32]	@ (80026c4 <_sbrk+0x64>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026a6:	4b07      	ldr	r3, [pc, #28]	@ (80026c4 <_sbrk+0x64>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	4a05      	ldr	r2, [pc, #20]	@ (80026c4 <_sbrk+0x64>)
 80026b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026b2:	68fb      	ldr	r3, [r7, #12]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20005000 	.word	0x20005000
 80026c0:	00000400 	.word	0x00000400
 80026c4:	20000408 	.word	0x20000408
 80026c8:	20001718 	.word	0x20001718

080026cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026d8:	f7ff fff8 	bl	80026cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026dc:	480b      	ldr	r0, [pc, #44]	@ (800270c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026de:	490c      	ldr	r1, [pc, #48]	@ (8002710 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80026e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002714 <LoopFillZerobss+0x16>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026e4:	e002      	b.n	80026ec <LoopCopyDataInit>

080026e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ea:	3304      	adds	r3, #4

080026ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f0:	d3f9      	bcc.n	80026e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026f2:	4a09      	ldr	r2, [pc, #36]	@ (8002718 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80026f4:	4c09      	ldr	r4, [pc, #36]	@ (800271c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f8:	e001      	b.n	80026fe <LoopFillZerobss>

080026fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026fc:	3204      	adds	r2, #4

080026fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002700:	d3fb      	bcc.n	80026fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002702:	f007 ffc9 	bl	800a698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002706:	f7ff fc75 	bl	8001ff4 <main>
  bx lr
 800270a:	4770      	bx	lr
  ldr r0, =_sdata
 800270c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002710:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002714:	0800b110 	.word	0x0800b110
  ldr r2, =_sbss
 8002718:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800271c:	20001718 	.word	0x20001718

08002720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002720:	e7fe      	b.n	8002720 <ADC1_2_IRQHandler>
	...

08002724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002728:	4b08      	ldr	r3, [pc, #32]	@ (800274c <HAL_Init+0x28>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a07      	ldr	r2, [pc, #28]	@ (800274c <HAL_Init+0x28>)
 800272e:	f043 0310 	orr.w	r3, r3, #16
 8002732:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002734:	2003      	movs	r0, #3
 8002736:	f000 f947 	bl	80029c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800273a:	200f      	movs	r0, #15
 800273c:	f000 f808 	bl	8002750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002740:	f7ff fe88 	bl	8002454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40022000 	.word	0x40022000

08002750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002758:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <HAL_InitTick+0x54>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b12      	ldr	r3, [pc, #72]	@ (80027a8 <HAL_InitTick+0x58>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002766:	fbb3 f3f1 	udiv	r3, r3, r1
 800276a:	fbb2 f3f3 	udiv	r3, r2, r3
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f95f 	bl	8002a32 <HAL_SYSTICK_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e00e      	b.n	800279c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b0f      	cmp	r3, #15
 8002782:	d80a      	bhi.n	800279a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002784:	2200      	movs	r2, #0
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	f04f 30ff 	mov.w	r0, #4294967295
 800278c:	f000 f927 	bl	80029de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002790:	4a06      	ldr	r2, [pc, #24]	@ (80027ac <HAL_InitTick+0x5c>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e000      	b.n	800279c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000018 	.word	0x20000018
 80027a8:	20000020 	.word	0x20000020
 80027ac:	2000001c 	.word	0x2000001c

080027b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027b4:	4b05      	ldr	r3, [pc, #20]	@ (80027cc <HAL_IncTick+0x1c>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <HAL_IncTick+0x20>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	4a03      	ldr	r2, [pc, #12]	@ (80027d0 <HAL_IncTick+0x20>)
 80027c2:	6013      	str	r3, [r2, #0]
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	20000020 	.word	0x20000020
 80027d0:	2000040c 	.word	0x2000040c

080027d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return uwTick;
 80027d8:	4b02      	ldr	r3, [pc, #8]	@ (80027e4 <HAL_GetTick+0x10>)
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr
 80027e4:	2000040c 	.word	0x2000040c

080027e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f0:	f7ff fff0 	bl	80027d4 <HAL_GetTick>
 80027f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d005      	beq.n	800280e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002802:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <HAL_Delay+0x44>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800280e:	bf00      	nop
 8002810:	f7ff ffe0 	bl	80027d4 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	429a      	cmp	r2, r3
 800281e:	d8f7      	bhi.n	8002810 <HAL_Delay+0x28>
  {
  }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000020 	.word	0x20000020

08002830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002840:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800284c:	4013      	ands	r3, r2
 800284e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002858:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800285c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002862:	4a04      	ldr	r2, [pc, #16]	@ (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	60d3      	str	r3, [r2, #12]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800287c:	4b04      	ldr	r3, [pc, #16]	@ (8002890 <__NVIC_GetPriorityGrouping+0x18>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	f003 0307 	and.w	r3, r3, #7
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	db0b      	blt.n	80028be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	f003 021f 	and.w	r2, r3, #31
 80028ac:	4906      	ldr	r1, [pc, #24]	@ (80028c8 <__NVIC_EnableIRQ+0x34>)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	2001      	movs	r0, #1
 80028b6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	e000e100 	.word	0xe000e100

080028cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	db0a      	blt.n	80028f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	490c      	ldr	r1, [pc, #48]	@ (8002918 <__NVIC_SetPriority+0x4c>)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	0112      	lsls	r2, r2, #4
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	440b      	add	r3, r1
 80028f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f4:	e00a      	b.n	800290c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4908      	ldr	r1, [pc, #32]	@ (800291c <__NVIC_SetPriority+0x50>)
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	3b04      	subs	r3, #4
 8002904:	0112      	lsls	r2, r2, #4
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	440b      	add	r3, r1
 800290a:	761a      	strb	r2, [r3, #24]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000e100 	.word	0xe000e100
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	@ 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f1c3 0307 	rsb	r3, r3, #7
 800293a:	2b04      	cmp	r3, #4
 800293c:	bf28      	it	cs
 800293e:	2304      	movcs	r3, #4
 8002940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3304      	adds	r3, #4
 8002946:	2b06      	cmp	r3, #6
 8002948:	d902      	bls.n	8002950 <NVIC_EncodePriority+0x30>
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3b03      	subs	r3, #3
 800294e:	e000      	b.n	8002952 <NVIC_EncodePriority+0x32>
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	f04f 32ff 	mov.w	r2, #4294967295
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43da      	mvns	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	401a      	ands	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002968:	f04f 31ff 	mov.w	r1, #4294967295
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	43d9      	mvns	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002978:	4313      	orrs	r3, r2
         );
}
 800297a:	4618      	mov	r0, r3
 800297c:	3724      	adds	r7, #36	@ 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002994:	d301      	bcc.n	800299a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002996:	2301      	movs	r3, #1
 8002998:	e00f      	b.n	80029ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800299a:	4a0a      	ldr	r2, [pc, #40]	@ (80029c4 <SysTick_Config+0x40>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3b01      	subs	r3, #1
 80029a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029a2:	210f      	movs	r1, #15
 80029a4:	f04f 30ff 	mov.w	r0, #4294967295
 80029a8:	f7ff ff90 	bl	80028cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029ac:	4b05      	ldr	r3, [pc, #20]	@ (80029c4 <SysTick_Config+0x40>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029b2:	4b04      	ldr	r3, [pc, #16]	@ (80029c4 <SysTick_Config+0x40>)
 80029b4:	2207      	movs	r2, #7
 80029b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	e000e010 	.word	0xe000e010

080029c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff ff2d 	bl	8002830 <__NVIC_SetPriorityGrouping>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029de:	b580      	push	{r7, lr}
 80029e0:	b086      	sub	sp, #24
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	4603      	mov	r3, r0
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029f0:	f7ff ff42 	bl	8002878 <__NVIC_GetPriorityGrouping>
 80029f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	6978      	ldr	r0, [r7, #20]
 80029fc:	f7ff ff90 	bl	8002920 <NVIC_EncodePriority>
 8002a00:	4602      	mov	r2, r0
 8002a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff5f 	bl	80028cc <__NVIC_SetPriority>
}
 8002a0e:	bf00      	nop
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff35 	bl	8002894 <__NVIC_EnableIRQ>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff ffa2 	bl	8002984 <SysTick_Config>
 8002a40:	4603      	mov	r3, r0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b08b      	sub	sp, #44	@ 0x2c
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a5e:	e169      	b.n	8002d34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a60:	2201      	movs	r2, #1
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	f040 8158 	bne.w	8002d2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4a9a      	ldr	r2, [pc, #616]	@ (8002cec <HAL_GPIO_Init+0x2a0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d05e      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002a88:	4a98      	ldr	r2, [pc, #608]	@ (8002cec <HAL_GPIO_Init+0x2a0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d875      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002a8e:	4a98      	ldr	r2, [pc, #608]	@ (8002cf0 <HAL_GPIO_Init+0x2a4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d058      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002a94:	4a96      	ldr	r2, [pc, #600]	@ (8002cf0 <HAL_GPIO_Init+0x2a4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d86f      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002a9a:	4a96      	ldr	r2, [pc, #600]	@ (8002cf4 <HAL_GPIO_Init+0x2a8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d052      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002aa0:	4a94      	ldr	r2, [pc, #592]	@ (8002cf4 <HAL_GPIO_Init+0x2a8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d869      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002aa6:	4a94      	ldr	r2, [pc, #592]	@ (8002cf8 <HAL_GPIO_Init+0x2ac>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d04c      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002aac:	4a92      	ldr	r2, [pc, #584]	@ (8002cf8 <HAL_GPIO_Init+0x2ac>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d863      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002ab2:	4a92      	ldr	r2, [pc, #584]	@ (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d046      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
 8002ab8:	4a90      	ldr	r2, [pc, #576]	@ (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d85d      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002abe:	2b12      	cmp	r3, #18
 8002ac0:	d82a      	bhi.n	8002b18 <HAL_GPIO_Init+0xcc>
 8002ac2:	2b12      	cmp	r3, #18
 8002ac4:	d859      	bhi.n	8002b7a <HAL_GPIO_Init+0x12e>
 8002ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8002acc <HAL_GPIO_Init+0x80>)
 8002ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002acc:	08002b47 	.word	0x08002b47
 8002ad0:	08002b21 	.word	0x08002b21
 8002ad4:	08002b33 	.word	0x08002b33
 8002ad8:	08002b75 	.word	0x08002b75
 8002adc:	08002b7b 	.word	0x08002b7b
 8002ae0:	08002b7b 	.word	0x08002b7b
 8002ae4:	08002b7b 	.word	0x08002b7b
 8002ae8:	08002b7b 	.word	0x08002b7b
 8002aec:	08002b7b 	.word	0x08002b7b
 8002af0:	08002b7b 	.word	0x08002b7b
 8002af4:	08002b7b 	.word	0x08002b7b
 8002af8:	08002b7b 	.word	0x08002b7b
 8002afc:	08002b7b 	.word	0x08002b7b
 8002b00:	08002b7b 	.word	0x08002b7b
 8002b04:	08002b7b 	.word	0x08002b7b
 8002b08:	08002b7b 	.word	0x08002b7b
 8002b0c:	08002b7b 	.word	0x08002b7b
 8002b10:	08002b29 	.word	0x08002b29
 8002b14:	08002b3d 	.word	0x08002b3d
 8002b18:	4a79      	ldr	r2, [pc, #484]	@ (8002d00 <HAL_GPIO_Init+0x2b4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b1e:	e02c      	b.n	8002b7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	623b      	str	r3, [r7, #32]
          break;
 8002b26:	e029      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	623b      	str	r3, [r7, #32]
          break;
 8002b30:	e024      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	3308      	adds	r3, #8
 8002b38:	623b      	str	r3, [r7, #32]
          break;
 8002b3a:	e01f      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	330c      	adds	r3, #12
 8002b42:	623b      	str	r3, [r7, #32]
          break;
 8002b44:	e01a      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b4e:	2304      	movs	r3, #4
 8002b50:	623b      	str	r3, [r7, #32]
          break;
 8002b52:	e013      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b5c:	2308      	movs	r3, #8
 8002b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	611a      	str	r2, [r3, #16]
          break;
 8002b66:	e009      	b.n	8002b7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b68:	2308      	movs	r3, #8
 8002b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	615a      	str	r2, [r3, #20]
          break;
 8002b72:	e003      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b74:	2300      	movs	r3, #0
 8002b76:	623b      	str	r3, [r7, #32]
          break;
 8002b78:	e000      	b.n	8002b7c <HAL_GPIO_Init+0x130>
          break;
 8002b7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2bff      	cmp	r3, #255	@ 0xff
 8002b80:	d801      	bhi.n	8002b86 <HAL_GPIO_Init+0x13a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	e001      	b.n	8002b8a <HAL_GPIO_Init+0x13e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2bff      	cmp	r3, #255	@ 0xff
 8002b90:	d802      	bhi.n	8002b98 <HAL_GPIO_Init+0x14c>
 8002b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	e002      	b.n	8002b9e <HAL_GPIO_Init+0x152>
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	3b08      	subs	r3, #8
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	210f      	movs	r1, #15
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	401a      	ands	r2, r3
 8002bb0:	6a39      	ldr	r1, [r7, #32]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 80b1 	beq.w	8002d2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bcc:	4b4d      	ldr	r3, [pc, #308]	@ (8002d04 <HAL_GPIO_Init+0x2b8>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	4a4c      	ldr	r2, [pc, #304]	@ (8002d04 <HAL_GPIO_Init+0x2b8>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6193      	str	r3, [r2, #24]
 8002bd8:	4b4a      	ldr	r3, [pc, #296]	@ (8002d04 <HAL_GPIO_Init+0x2b8>)
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002be4:	4a48      	ldr	r2, [pc, #288]	@ (8002d08 <HAL_GPIO_Init+0x2bc>)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	089b      	lsrs	r3, r3, #2
 8002bea:	3302      	adds	r3, #2
 8002bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4013      	ands	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a40      	ldr	r2, [pc, #256]	@ (8002d0c <HAL_GPIO_Init+0x2c0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d013      	beq.n	8002c38 <HAL_GPIO_Init+0x1ec>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a3f      	ldr	r2, [pc, #252]	@ (8002d10 <HAL_GPIO_Init+0x2c4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00d      	beq.n	8002c34 <HAL_GPIO_Init+0x1e8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a3e      	ldr	r2, [pc, #248]	@ (8002d14 <HAL_GPIO_Init+0x2c8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d007      	beq.n	8002c30 <HAL_GPIO_Init+0x1e4>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a3d      	ldr	r2, [pc, #244]	@ (8002d18 <HAL_GPIO_Init+0x2cc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d101      	bne.n	8002c2c <HAL_GPIO_Init+0x1e0>
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e006      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	e004      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e002      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_GPIO_Init+0x1ee>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c3c:	f002 0203 	and.w	r2, r2, #3
 8002c40:	0092      	lsls	r2, r2, #2
 8002c42:	4093      	lsls	r3, r2
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c4a:	492f      	ldr	r1, [pc, #188]	@ (8002d08 <HAL_GPIO_Init+0x2bc>)
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	3302      	adds	r3, #2
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d006      	beq.n	8002c72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c64:	4b2d      	ldr	r3, [pc, #180]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	492c      	ldr	r1, [pc, #176]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]
 8002c70:	e006      	b.n	8002c80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c72:	4b2a      	ldr	r3, [pc, #168]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	4928      	ldr	r1, [pc, #160]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d006      	beq.n	8002c9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c8c:	4b23      	ldr	r3, [pc, #140]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	4922      	ldr	r1, [pc, #136]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60cb      	str	r3, [r1, #12]
 8002c98:	e006      	b.n	8002ca8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c9a:	4b20      	ldr	r3, [pc, #128]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	491e      	ldr	r1, [pc, #120]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d006      	beq.n	8002cc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cb4:	4b19      	ldr	r3, [pc, #100]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	4918      	ldr	r1, [pc, #96]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
 8002cc0:	e006      	b.n	8002cd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cc2:	4b16      	ldr	r3, [pc, #88]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	4914      	ldr	r1, [pc, #80]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d021      	beq.n	8002d20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	490e      	ldr	r1, [pc, #56]	@ (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]
 8002ce8:	e021      	b.n	8002d2e <HAL_GPIO_Init+0x2e2>
 8002cea:	bf00      	nop
 8002cec:	10320000 	.word	0x10320000
 8002cf0:	10310000 	.word	0x10310000
 8002cf4:	10220000 	.word	0x10220000
 8002cf8:	10210000 	.word	0x10210000
 8002cfc:	10120000 	.word	0x10120000
 8002d00:	10110000 	.word	0x10110000
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40010000 	.word	0x40010000
 8002d0c:	40010800 	.word	0x40010800
 8002d10:	40010c00 	.word	0x40010c00
 8002d14:	40011000 	.word	0x40011000
 8002d18:	40011400 	.word	0x40011400
 8002d1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d20:	4b0b      	ldr	r3, [pc, #44]	@ (8002d50 <HAL_GPIO_Init+0x304>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	4909      	ldr	r1, [pc, #36]	@ (8002d50 <HAL_GPIO_Init+0x304>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	3301      	adds	r3, #1
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f47f ae8e 	bne.w	8002a60 <HAL_GPIO_Init+0x14>
  }
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
 8002d48:	372c      	adds	r7, #44	@ 0x2c
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	40010400 	.word	0x40010400

08002d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
 8002d60:	4613      	mov	r3, r2
 8002d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d64:	787b      	ldrb	r3, [r7, #1]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d70:	e003      	b.n	8002d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	041a      	lsls	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	611a      	str	r2, [r3, #16]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d8e:	4b08      	ldr	r3, [pc, #32]	@ (8002db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d006      	beq.n	8002da8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d9a:	4a05      	ldr	r2, [pc, #20]	@ (8002db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f806 	bl	8002db4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40010400 	.word	0x40010400

08002db4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0e8      	b.n	8002fac <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f007 f978 	bl	800a0e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2203      	movs	r2, #3
 8002df8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f003 f89b 	bl	8005f42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3304      	adds	r3, #4
 8002e14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e16:	f003 f871 	bl	8005efc <USB_CoreInit>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0bf      	b.n	8002fac <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2100      	movs	r1, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f003 f89f 	bl	8005f76 <USB_SetCurrentMode>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e0b0      	b.n	8002fac <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]
 8002e4e:	e03e      	b.n	8002ece <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e50:	7bfa      	ldrb	r2, [r7, #15]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	3311      	adds	r3, #17
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e64:	7bfa      	ldrb	r2, [r7, #15]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	3310      	adds	r3, #16
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	440b      	add	r3, r1
 8002e86:	3313      	adds	r3, #19
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	3320      	adds	r3, #32
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	440b      	add	r3, r1
 8002eae:	3324      	adds	r3, #36	@ 0x24
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	440b      	add	r3, r1
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	791b      	ldrb	r3, [r3, #4]
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d3bb      	bcc.n	8002e50 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed8:	2300      	movs	r3, #0
 8002eda:	73fb      	strb	r3, [r7, #15]
 8002edc:	e044      	b.n	8002f68 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ede:	7bfa      	ldrb	r2, [r7, #15]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	440b      	add	r3, r1
 8002eec:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ef4:	7bfa      	ldrb	r2, [r7, #15]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	440b      	add	r3, r1
 8002f02:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f06:	7bfa      	ldrb	r2, [r7, #15]
 8002f08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f0a:	7bfa      	ldrb	r2, [r7, #15]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	440b      	add	r3, r1
 8002f18:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f20:	7bfa      	ldrb	r2, [r7, #15]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	440b      	add	r3, r1
 8002f2e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f36:	7bfa      	ldrb	r2, [r7, #15]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	440b      	add	r3, r1
 8002f44:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	440b      	add	r3, r1
 8002f5a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	3301      	adds	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	791b      	ldrb	r3, [r3, #4]
 8002f6c:	7bfa      	ldrb	r2, [r7, #15]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d3b5      	bcc.n	8002ede <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f7c:	f003 f807 	bl	8005f8e <USB_DevInit>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e00c      	b.n	8002fac <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f005 fa86 	bl	80084b6 <USB_DevDisconnect>

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_PCD_Start+0x16>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e016      	b.n	8002ff8 <HAL_PCD_Start+0x44>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f002 ff9d 	bl	8005f16 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002fdc:	2101      	movs	r1, #1
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f007 faf3 	bl	800a5ca <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f005 fa5a 	bl	80084a2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f005 fa5c 	bl	80084ca <USB_ReadInterrupts>
 8003012:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fb1a 	bl	8003658 <PCD_EP_ISR_Handler>

    return;
 8003024:	e119      	b.n	800325a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302c:	2b00      	cmp	r3, #0
 800302e:	d013      	beq.n	8003058 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003038:	b29a      	uxth	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003042:	b292      	uxth	r2, r2
 8003044:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f007 f8c6 	bl	800a1da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800304e:	2100      	movs	r1, #0
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f905 	bl	8003260 <HAL_PCD_SetAddress>

    return;
 8003056:	e100      	b.n	800325a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00c      	beq.n	800307c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800306a:	b29a      	uxth	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003074:	b292      	uxth	r2, r2
 8003076:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800307a:	e0ee      	b.n	800325a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00c      	beq.n	80030a0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800308e:	b29a      	uxth	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003098:	b292      	uxth	r2, r2
 800309a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800309e:	e0dc      	b.n	800325a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d027      	beq.n	80030fa <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0204 	bic.w	r2, r2, #4
 80030bc:	b292      	uxth	r2, r2
 80030be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0208 	bic.w	r2, r2, #8
 80030d4:	b292      	uxth	r2, r2
 80030d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f007 f8b6 	bl	800a24c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030f2:	b292      	uxth	r2, r2
 80030f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80030f8:	e0af      	b.n	800325a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 8083 	beq.w	800320c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003106:	2300      	movs	r3, #0
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e010      	b.n	800312e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	7ffb      	ldrb	r3, [r7, #31]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	441a      	add	r2, r3
 8003118:	7ffb      	ldrb	r3, [r7, #31]
 800311a:	8812      	ldrh	r2, [r2, #0]
 800311c:	b292      	uxth	r2, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	3320      	adds	r3, #32
 8003122:	443b      	add	r3, r7
 8003124:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003128:	7ffb      	ldrb	r3, [r7, #31]
 800312a:	3301      	adds	r3, #1
 800312c:	77fb      	strb	r3, [r7, #31]
 800312e:	7ffb      	ldrb	r3, [r7, #31]
 8003130:	2b07      	cmp	r3, #7
 8003132:	d9eb      	bls.n	800310c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800313c:	b29a      	uxth	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	b292      	uxth	r2, r2
 8003148:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003154:	b29a      	uxth	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	b292      	uxth	r2, r2
 8003160:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003164:	bf00      	nop
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800316e:	b29b      	uxth	r3, r3
 8003170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f6      	beq.n	8003166 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003180:	b29a      	uxth	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800318a:	b292      	uxth	r2, r2
 800318c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003190:	2300      	movs	r3, #0
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	e00f      	b.n	80031b6 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003196:	7ffb      	ldrb	r3, [r7, #31]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	4611      	mov	r1, r2
 800319e:	7ffa      	ldrb	r2, [r7, #31]
 80031a0:	0092      	lsls	r2, r2, #2
 80031a2:	440a      	add	r2, r1
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	3320      	adds	r3, #32
 80031a8:	443b      	add	r3, r7
 80031aa:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80031ae:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80031b0:	7ffb      	ldrb	r3, [r7, #31]
 80031b2:	3301      	adds	r3, #1
 80031b4:	77fb      	strb	r3, [r7, #31]
 80031b6:	7ffb      	ldrb	r3, [r7, #31]
 80031b8:	2b07      	cmp	r3, #7
 80031ba:	d9ec      	bls.n	8003196 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0208 	orr.w	r2, r2, #8
 80031ce:	b292      	uxth	r2, r2
 80031d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031dc:	b29a      	uxth	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031e6:	b292      	uxth	r2, r2
 80031e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0204 	orr.w	r2, r2, #4
 80031fe:	b292      	uxth	r2, r2
 8003200:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f007 f807 	bl	800a218 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800320a:	e026      	b.n	800325a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00f      	beq.n	8003236 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800321e:	b29a      	uxth	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003228:	b292      	uxth	r2, r2
 800322a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f006 ffc5 	bl	800a1be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003234:	e011      	b.n	800325a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00c      	beq.n	800325a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003248:	b29a      	uxth	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003252:	b292      	uxth	r2, r2
 8003254:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003258:	bf00      	nop
  }
}
 800325a:	3720      	adds	r7, #32
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_PCD_SetAddress+0x1a>
 8003276:	2302      	movs	r3, #2
 8003278:	e012      	b.n	80032a0 <HAL_PCD_SetAddress+0x40>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	78fa      	ldrb	r2, [r7, #3]
 800328e:	4611      	mov	r1, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f005 f8f3 	bl	800847c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	4608      	mov	r0, r1
 80032b2:	4611      	mov	r1, r2
 80032b4:	461a      	mov	r2, r3
 80032b6:	4603      	mov	r3, r0
 80032b8:	70fb      	strb	r3, [r7, #3]
 80032ba:	460b      	mov	r3, r1
 80032bc:	803b      	strh	r3, [r7, #0]
 80032be:	4613      	mov	r3, r2
 80032c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	da0e      	bge.n	80032ec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	f003 0207 	and.w	r2, r3, #7
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	3310      	adds	r3, #16
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	705a      	strb	r2, [r3, #1]
 80032ea:	e00e      	b.n	800330a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	f003 0207 	and.w	r2, r3, #7
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800330a:	78fb      	ldrb	r3, [r7, #3]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	b2da      	uxtb	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003316:	883a      	ldrh	r2, [r7, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	78ba      	ldrb	r2, [r7, #2]
 8003320:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003322:	78bb      	ldrb	r3, [r7, #2]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d102      	bne.n	800332e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_PCD_EP_Open+0x94>
 8003338:	2302      	movs	r3, #2
 800333a:	e00e      	b.n	800335a <HAL_PCD_EP_Open+0xb2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68f9      	ldr	r1, [r7, #12]
 800334a:	4618      	mov	r0, r3
 800334c:	f002 fe3c 	bl	8005fc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003358:	7afb      	ldrb	r3, [r7, #11]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	460b      	mov	r3, r1
 800336c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800336e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003372:	2b00      	cmp	r3, #0
 8003374:	da0e      	bge.n	8003394 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	f003 0207 	and.w	r2, r3, #7
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	3310      	adds	r3, #16
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	705a      	strb	r2, [r3, #1]
 8003392:	e00e      	b.n	80033b2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	f003 0207 	and.w	r2, r3, #7
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_PCD_EP_Close+0x6a>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e00e      	b.n	80033ea <HAL_PCD_EP_Close+0x88>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68f9      	ldr	r1, [r7, #12]
 80033da:	4618      	mov	r0, r3
 80033dc:	f003 f9b4 	bl	8006748 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b086      	sub	sp, #24
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	460b      	mov	r3, r1
 8003400:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003402:	7afb      	ldrb	r3, [r7, #11]
 8003404:	f003 0207 	and.w	r2, r3, #7
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4413      	add	r3, r2
 8003418:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2200      	movs	r2, #0
 800342a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2200      	movs	r2, #0
 8003430:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003432:	7afb      	ldrb	r3, [r7, #11]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	b2da      	uxtb	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6979      	ldr	r1, [r7, #20]
 8003444:	4618      	mov	r0, r3
 8003446:	f003 fb6b 	bl	8006b20 <USB_EPStartXfer>

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	f003 0207 	and.w	r2, r3, #7
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	440b      	add	r3, r1
 8003472:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003476:	681b      	ldr	r3, [r3, #0]
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b086      	sub	sp, #24
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
 800348e:	460b      	mov	r3, r1
 8003490:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003492:	7afb      	ldrb	r3, [r7, #11]
 8003494:	f003 0207 	and.w	r2, r3, #7
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	3310      	adds	r3, #16
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4413      	add	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2200      	movs	r2, #0
 80034c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2201      	movs	r2, #1
 80034cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ce:	7afb      	ldrb	r3, [r7, #11]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6979      	ldr	r1, [r7, #20]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f003 fb1d 	bl	8006b20 <USB_EPStartXfer>

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	7912      	ldrb	r2, [r2, #4]
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e04c      	b.n	80035a8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800350e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003512:	2b00      	cmp	r3, #0
 8003514:	da0e      	bge.n	8003534 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	f003 0207 	and.w	r2, r3, #7
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	3310      	adds	r3, #16
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2201      	movs	r2, #1
 8003530:	705a      	strb	r2, [r3, #1]
 8003532:	e00c      	b.n	800354e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_PCD_EP_SetStall+0x7e>
 800356a:	2302      	movs	r3, #2
 800356c:	e01c      	b.n	80035a8 <HAL_PCD_EP_SetStall+0xb8>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68f9      	ldr	r1, [r7, #12]
 800357c:	4618      	mov	r0, r3
 800357e:	f004 fe80 	bl	8008282 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	2b00      	cmp	r3, #0
 800358a:	d108      	bne.n	800359e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003596:	4619      	mov	r1, r3
 8003598:	4610      	mov	r0, r2
 800359a:	f004 ffa5 	bl	80084e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	7912      	ldrb	r2, [r2, #4]
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e040      	b.n	8003650 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	da0e      	bge.n	80035f4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	f003 0207 	and.w	r2, r3, #7
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	3310      	adds	r3, #16
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	705a      	strb	r2, [r3, #1]
 80035f2:	e00e      	b.n	8003612 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	f003 0207 	and.w	r2, r3, #7
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	b2da      	uxtb	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_PCD_EP_ClrStall+0x82>
 800362e:	2302      	movs	r3, #2
 8003630:	e00e      	b.n	8003650 <HAL_PCD_EP_ClrStall+0xa0>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68f9      	ldr	r1, [r7, #12]
 8003640:	4618      	mov	r0, r3
 8003642:	f004 fe6e 	bl	8008322 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b096      	sub	sp, #88	@ 0x58
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003660:	e3bb      	b.n	8003dda <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800366a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800366e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003672:	b2db      	uxtb	r3, r3
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800367c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003680:	2b00      	cmp	r3, #0
 8003682:	f040 8175 	bne.w	8003970 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003686:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b00      	cmp	r3, #0
 8003690:	d14e      	bne.n	8003730 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	b29b      	uxth	r3, r3
 800369a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800369e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a2:	81fb      	strh	r3, [r7, #14]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	89fb      	ldrh	r3, [r7, #14]
 80036aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3310      	adds	r3, #16
 80036ba:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	4413      	add	r3, r2
 80036d0:	3302      	adds	r3, #2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80036e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	441a      	add	r2, r3
 80036f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80036f6:	2100      	movs	r1, #0
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f006 fd46 	bl	800a18a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	7b5b      	ldrb	r3, [r3, #13]
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 8368 	beq.w	8003dda <PCD_EP_ISR_Handler+0x782>
 800370a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	f040 8363 	bne.w	8003dda <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	7b5b      	ldrb	r3, [r3, #13]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800371e:	b2da      	uxtb	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	735a      	strb	r2, [r3, #13]
 800372e:	e354      	b.n	8003dda <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003736:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003742:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003746:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800374a:	2b00      	cmp	r3, #0
 800374c:	d034      	beq.n	80037b8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003756:	b29b      	uxth	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	3306      	adds	r3, #6
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003778:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003786:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800378a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800378c:	b29b      	uxth	r3, r3
 800378e:	f004 fefc 	bl	800858a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	b29a      	uxth	r2, r3
 800379a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800379e:	4013      	ands	r3, r2
 80037a0:	823b      	strh	r3, [r7, #16]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	8a3a      	ldrh	r2, [r7, #16]
 80037a8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037ac:	b292      	uxth	r2, r2
 80037ae:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f006 fcbd 	bl	800a130 <HAL_PCD_SetupStageCallback>
 80037b6:	e310      	b.n	8003dda <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037b8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f280 830c 	bge.w	8003dda <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80037ce:	4013      	ands	r3, r2
 80037d0:	83fb      	strh	r3, [r7, #30]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	8bfa      	ldrh	r2, [r7, #30]
 80037d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037dc:	b292      	uxth	r2, r2
 80037de:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4413      	add	r3, r2
 80037f4:	3306      	adds	r3, #6
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800380a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800380c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d019      	beq.n	8003848 <PCD_EP_ISR_Handler+0x1f0>
 8003814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d015      	beq.n	8003848 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003822:	6959      	ldr	r1, [r3, #20]
 8003824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003826:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800382a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800382c:	b29b      	uxth	r3, r3
 800382e:	f004 feac 	bl	800858a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	441a      	add	r2, r3
 800383c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800383e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003840:	2100      	movs	r1, #0
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f006 fc86 	bl	800a154 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003852:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003856:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800385a:	2b00      	cmp	r3, #0
 800385c:	f040 82bd 	bne.w	8003dda <PCD_EP_ISR_Handler+0x782>
 8003860:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003864:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003868:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800386c:	f000 82b5 	beq.w	8003dda <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800387e:	b29b      	uxth	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	4413      	add	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	b29b      	uxth	r3, r3
 8003896:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800389a:	b29a      	uxth	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	801a      	strh	r2, [r3, #0]
 80038a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80038a6:	d91d      	bls.n	80038e4 <PCD_EP_ISR_Handler+0x28c>
 80038a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80038b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d102      	bne.n	80038c2 <PCD_EP_ISR_Handler+0x26a>
 80038bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038be:	3b01      	subs	r3, #1
 80038c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	029b      	lsls	r3, r3, #10
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	4313      	orrs	r3, r2
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038dc:	b29a      	uxth	r2, r3
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	801a      	strh	r2, [r3, #0]
 80038e2:	e026      	b.n	8003932 <PCD_EP_ISR_Handler+0x2da>
 80038e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10a      	bne.n	8003902 <PCD_EP_ISR_Handler+0x2aa>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	801a      	strh	r2, [r3, #0]
 8003900:	e017      	b.n	8003932 <PCD_EP_ISR_Handler+0x2da>
 8003902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	085b      	lsrs	r3, r3, #1
 8003908:	647b      	str	r3, [r7, #68]	@ 0x44
 800390a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <PCD_EP_ISR_Handler+0x2c4>
 8003916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003918:	3301      	adds	r3, #1
 800391a:	647b      	str	r3, [r7, #68]	@ 0x44
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	b29a      	uxth	r2, r3
 8003922:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003924:	b29b      	uxth	r3, r3
 8003926:	029b      	lsls	r3, r3, #10
 8003928:	b29b      	uxth	r3, r3
 800392a:	4313      	orrs	r3, r2
 800392c:	b29a      	uxth	r2, r3
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	b29b      	uxth	r3, r3
 800393a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800393e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003942:	827b      	strh	r3, [r7, #18]
 8003944:	8a7b      	ldrh	r3, [r7, #18]
 8003946:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800394a:	827b      	strh	r3, [r7, #18]
 800394c:	8a7b      	ldrh	r3, [r7, #18]
 800394e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003952:	827b      	strh	r3, [r7, #18]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	8a7b      	ldrh	r3, [r7, #18]
 800395a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800395e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800396a:	b29b      	uxth	r3, r3
 800396c:	8013      	strh	r3, [r2, #0]
 800396e:	e234      	b.n	8003dda <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	881b      	ldrh	r3, [r3, #0]
 8003980:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003984:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003988:	2b00      	cmp	r3, #0
 800398a:	f280 80fc 	bge.w	8003b86 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	b29a      	uxth	r2, r3
 80039a0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80039a4:	4013      	ands	r3, r2
 80039a6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80039bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80039c0:	b292      	uxth	r2, r2
 80039c2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80039c4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	4413      	add	r3, r2
 80039d8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80039da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039dc:	7b1b      	ldrb	r3, [r3, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d125      	bne.n	8003a2e <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	461a      	mov	r2, r3
 80039ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4413      	add	r3, r2
 80039f6:	3306      	adds	r3, #6
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a0a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003a0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 8092 	beq.w	8003b3c <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a1e:	6959      	ldr	r1, [r3, #20]
 8003a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a22:	88da      	ldrh	r2, [r3, #6]
 8003a24:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a28:	f004 fdaf 	bl	800858a <USB_ReadPMA>
 8003a2c:	e086      	b.n	8003b3c <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a30:	78db      	ldrb	r3, [r3, #3]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d10a      	bne.n	8003a4c <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003a36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f9d9 	bl	8003df6 <HAL_PCD_EP_DB_Receive>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003a4a:	e077      	b.n	8003b3c <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	461a      	mov	r2, r3
 8003a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a66:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	441a      	add	r2, r3
 8003a78:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003a7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d024      	beq.n	8003af4 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	3302      	adds	r3, #2
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ad2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003ad6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d02e      	beq.n	8003b3c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ae4:	6959      	ldr	r1, [r3, #20]
 8003ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ae8:	891a      	ldrh	r2, [r3, #8]
 8003aea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003aee:	f004 fd4c 	bl	800858a <USB_ReadPMA>
 8003af2:	e023      	b.n	8003b3c <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4413      	add	r3, r2
 8003b08:	3306      	adds	r3, #6
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b1c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003b20:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d009      	beq.n	8003b3c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b2e:	6959      	ldr	r1, [r3, #20]
 8003b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b32:	895a      	ldrh	r2, [r3, #10]
 8003b34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b38:	f004 fd27 	bl	800858a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b44:	441a      	add	r2, r3
 8003b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b48:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b52:	441a      	add	r2, r3
 8003b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b56:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <PCD_EP_ISR_Handler+0x514>
 8003b60:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d206      	bcs.n	8003b7a <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	4619      	mov	r1, r3
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f006 faee 	bl	800a154 <HAL_PCD_DataOutStageCallback>
 8003b78:	e005      	b.n	8003b86 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b80:	4618      	mov	r0, r3
 8003b82:	f002 ffcd 	bl	8006b20 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003b86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 8123 	beq.w	8003dda <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003b94:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	3310      	adds	r3, #16
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	441a      	add	r2, r3
 8003bd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be6:	78db      	ldrb	r3, [r3, #3]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	f040 80a2 	bne.w	8003d32 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf6:	7b1b      	ldrb	r3, [r3, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 8093 	beq.w	8003d24 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bfe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d046      	beq.n	8003c98 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c0c:	785b      	ldrb	r3, [r3, #1]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d126      	bne.n	8003c60 <PCD_EP_ISR_Handler+0x608>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c26:	4413      	add	r3, r2
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	011a      	lsls	r2, r3, #4
 8003c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c32:	4413      	add	r3, r2
 8003c34:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c38:	623b      	str	r3, [r7, #32]
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	801a      	strh	r2, [r3, #0]
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	801a      	strh	r2, [r3, #0]
 8003c5e:	e061      	b.n	8003d24 <PCD_EP_ISR_Handler+0x6cc>
 8003c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c62:	785b      	ldrb	r3, [r3, #1]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d15d      	bne.n	8003d24 <PCD_EP_ISR_Handler+0x6cc>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7c:	4413      	add	r3, r2
 8003c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	011a      	lsls	r2, r3, #4
 8003c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c88:	4413      	add	r3, r2
 8003c8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c92:	2200      	movs	r2, #0
 8003c94:	801a      	strh	r2, [r3, #0]
 8003c96:	e045      	b.n	8003d24 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca0:	785b      	ldrb	r3, [r3, #1]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d126      	bne.n	8003cf4 <PCD_EP_ISR_Handler+0x69c>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cba:	4413      	add	r3, r2
 8003cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	011a      	lsls	r2, r3, #4
 8003cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ccc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cdc:	801a      	strh	r2, [r3, #0]
 8003cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf0:	801a      	strh	r2, [r3, #0]
 8003cf2:	e017      	b.n	8003d24 <PCD_EP_ISR_Handler+0x6cc>
 8003cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf6:	785b      	ldrb	r3, [r3, #1]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d113      	bne.n	8003d24 <PCD_EP_ISR_Handler+0x6cc>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d0a:	4413      	add	r3, r2
 8003d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	011a      	lsls	r2, r3, #4
 8003d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d16:	4413      	add	r3, r2
 8003d18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d20:	2200      	movs	r2, #0
 8003d22:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f006 fa2d 	bl	800a18a <HAL_PCD_DataInStageCallback>
 8003d30:	e053      	b.n	8003dda <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003d32:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d146      	bne.n	8003dcc <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4413      	add	r3, r2
 8003d52:	3302      	adds	r3, #2
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d66:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d907      	bls.n	8003d86 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003d7e:	1ad2      	subs	r2, r2, r3
 8003d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d82:	619a      	str	r2, [r3, #24]
 8003d84:	e002      	b.n	8003d8c <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d88:	2200      	movs	r2, #0
 8003d8a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d106      	bne.n	8003da2 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f006 f9f5 	bl	800a18a <HAL_PCD_DataInStageCallback>
 8003da0:	e01b      	b.n	8003dda <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da4:	695a      	ldr	r2, [r3, #20]
 8003da6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003daa:	441a      	add	r2, r3
 8003dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dae:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003db8:	441a      	add	r2, r3
 8003dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dbc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f002 feab 	bl	8006b20 <USB_EPStartXfer>
 8003dca:	e006      	b.n	8003dda <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003dcc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f91b 	bl	8004010 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	b21b      	sxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f6ff ac3b 	blt.w	8003662 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3758      	adds	r7, #88	@ 0x58
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b088      	sub	sp, #32
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	4613      	mov	r3, r2
 8003e02:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e04:	88fb      	ldrh	r3, [r7, #6]
 8003e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d07e      	beq.n	8003f0c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	461a      	mov	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4413      	add	r3, r2
 8003e22:	3302      	adds	r3, #2
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e36:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	699a      	ldr	r2, [r3, #24]
 8003e3c:	8b7b      	ldrh	r3, [r7, #26]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d306      	bcc.n	8003e50 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	8b7b      	ldrh	r3, [r7, #26]
 8003e48:	1ad2      	subs	r2, r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	619a      	str	r2, [r3, #24]
 8003e4e:	e002      	b.n	8003e56 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2200      	movs	r2, #0
 8003e54:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d123      	bne.n	8003ea6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e78:	833b      	strh	r3, [r7, #24]
 8003e7a:	8b3b      	ldrh	r3, [r7, #24]
 8003e7c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003e80:	833b      	strh	r3, [r7, #24]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	441a      	add	r2, r3
 8003e90:	8b3b      	ldrh	r3, [r7, #24]
 8003e92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01f      	beq.n	8003ef0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eca:	82fb      	strh	r3, [r7, #22]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	441a      	add	r2, r3
 8003eda:	8afb      	ldrh	r3, [r7, #22]
 8003edc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ee8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ef0:	8b7b      	ldrh	r3, [r7, #26]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 8087 	beq.w	8004006 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6959      	ldr	r1, [r3, #20]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	891a      	ldrh	r2, [r3, #8]
 8003f04:	8b7b      	ldrh	r3, [r7, #26]
 8003f06:	f004 fb40 	bl	800858a <USB_ReadPMA>
 8003f0a:	e07c      	b.n	8004006 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4413      	add	r3, r2
 8003f20:	3306      	adds	r3, #6
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f34:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	8b7b      	ldrh	r3, [r7, #26]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d306      	bcc.n	8003f4e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	699a      	ldr	r2, [r3, #24]
 8003f44:	8b7b      	ldrh	r3, [r7, #26]
 8003f46:	1ad2      	subs	r2, r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	619a      	str	r2, [r3, #24]
 8003f4c:	e002      	b.n	8003f54 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2200      	movs	r2, #0
 8003f52:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d123      	bne.n	8003fa4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f76:	83fb      	strh	r3, [r7, #30]
 8003f78:	8bfb      	ldrh	r3, [r7, #30]
 8003f7a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f7e:	83fb      	strh	r3, [r7, #30]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	441a      	add	r2, r3
 8003f8e:	8bfb      	ldrh	r3, [r7, #30]
 8003f90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003fa4:	88fb      	ldrh	r3, [r7, #6]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d11f      	bne.n	8003fee <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fc8:	83bb      	strh	r3, [r7, #28]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	441a      	add	r2, r3
 8003fd8:	8bbb      	ldrh	r3, [r7, #28]
 8003fda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fe6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003fee:	8b7b      	ldrh	r3, [r7, #26]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	6959      	ldr	r1, [r3, #20]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	895a      	ldrh	r2, [r3, #10]
 8004000:	8b7b      	ldrh	r3, [r7, #26]
 8004002:	f004 fac2 	bl	800858a <USB_ReadPMA>
    }
  }

  return count;
 8004006:	8b7b      	ldrh	r3, [r7, #26]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3720      	adds	r7, #32
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b0a4      	sub	sp, #144	@ 0x90
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	4613      	mov	r3, r2
 800401c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 81dd 	beq.w	80043e4 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004032:	b29b      	uxth	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	3302      	adds	r3, #2
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004052:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800405e:	429a      	cmp	r2, r3
 8004060:	d907      	bls.n	8004072 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800406a:	1ad2      	subs	r2, r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	619a      	str	r2, [r3, #24]
 8004070:	e002      	b.n	8004078 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2200      	movs	r2, #0
 8004076:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	2b00      	cmp	r3, #0
 800407e:	f040 80b9 	bne.w	80041f4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	785b      	ldrb	r3, [r3, #1]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d126      	bne.n	80040d8 <HAL_PCD_EP_DB_Transmit+0xc8>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004098:	b29b      	uxth	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800409e:	4413      	add	r3, r2
 80040a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	011a      	lsls	r2, r3, #4
 80040a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040aa:	4413      	add	r3, r2
 80040ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040bc:	b29a      	uxth	r2, r3
 80040be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c0:	801a      	strh	r2, [r3, #0]
 80040c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d4:	801a      	strh	r2, [r3, #0]
 80040d6:	e01a      	b.n	800410e <HAL_PCD_EP_DB_Transmit+0xfe>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d116      	bne.n	800410e <HAL_PCD_EP_DB_Transmit+0xfe>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f4:	4413      	add	r3, r2
 80040f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	011a      	lsls	r2, r3, #4
 80040fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004100:	4413      	add	r3, r2
 8004102:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004106:	633b      	str	r3, [r7, #48]	@ 0x30
 8004108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410a:	2200      	movs	r2, #0
 800410c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	627b      	str	r3, [r7, #36]	@ 0x24
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	785b      	ldrb	r3, [r3, #1]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d126      	bne.n	800416a <HAL_PCD_EP_DB_Transmit+0x15a>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800412a:	b29b      	uxth	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	4413      	add	r3, r2
 8004132:	61fb      	str	r3, [r7, #28]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	011a      	lsls	r2, r3, #4
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	4413      	add	r3, r2
 800413e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004142:	61bb      	str	r3, [r7, #24]
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29b      	uxth	r3, r3
 800414a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800414e:	b29a      	uxth	r2, r3
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	801a      	strh	r2, [r3, #0]
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	b29b      	uxth	r3, r3
 800415a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800415e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004162:	b29a      	uxth	r2, r3
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	801a      	strh	r2, [r3, #0]
 8004168:	e017      	b.n	800419a <HAL_PCD_EP_DB_Transmit+0x18a>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	785b      	ldrb	r3, [r3, #1]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d113      	bne.n	800419a <HAL_PCD_EP_DB_Transmit+0x18a>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800417a:	b29b      	uxth	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004180:	4413      	add	r3, r2
 8004182:	627b      	str	r3, [r7, #36]	@ 0x24
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	011a      	lsls	r2, r3, #4
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	4413      	add	r3, r2
 800418e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004192:	623b      	str	r3, [r7, #32]
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	2200      	movs	r2, #0
 8004198:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	4619      	mov	r1, r3
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f005 fff2 	bl	800a18a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 82fc 	beq.w	80047aa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041cc:	82fb      	strh	r3, [r7, #22]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	441a      	add	r2, r3
 80041dc:	8afb      	ldrh	r3, [r7, #22]
 80041de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	8013      	strh	r3, [r2, #0]
 80041f2:	e2da      	b.n	80047aa <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d021      	beq.n	8004242 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004218:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	441a      	add	r2, r3
 800422a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800422e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004232:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004236:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800423a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800423e:	b29b      	uxth	r3, r3
 8004240:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004248:	2b01      	cmp	r3, #1
 800424a:	f040 82ae 	bne.w	80047aa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004256:	441a      	add	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004264:	441a      	add	r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	6a1a      	ldr	r2, [r3, #32]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	429a      	cmp	r2, r3
 8004274:	d30b      	bcc.n	800428e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	6a1a      	ldr	r2, [r3, #32]
 8004282:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004286:	1ad2      	subs	r2, r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	621a      	str	r2, [r3, #32]
 800428c:	e017      	b.n	80042be <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d108      	bne.n	80042a8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004296:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800429a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80042a6:	e00a      	b.n	80042be <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2200      	movs	r2, #0
 80042bc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	785b      	ldrb	r3, [r3, #1]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d165      	bne.n	8004392 <HAL_PCD_EP_DB_Transmit+0x382>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042da:	4413      	add	r3, r2
 80042dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	011a      	lsls	r2, r3, #4
 80042e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042e6:	4413      	add	r3, r2
 80042e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042fc:	801a      	strh	r2, [r3, #0]
 80042fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004302:	2b3e      	cmp	r3, #62	@ 0x3e
 8004304:	d91d      	bls.n	8004342 <HAL_PCD_EP_DB_Transmit+0x332>
 8004306:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800430e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	2b00      	cmp	r3, #0
 8004318:	d102      	bne.n	8004320 <HAL_PCD_EP_DB_Transmit+0x310>
 800431a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800431c:	3b01      	subs	r3, #1
 800431e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	b29a      	uxth	r2, r3
 8004326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004328:	b29b      	uxth	r3, r3
 800432a:	029b      	lsls	r3, r3, #10
 800432c:	b29b      	uxth	r3, r3
 800432e:	4313      	orrs	r3, r2
 8004330:	b29b      	uxth	r3, r3
 8004332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800433a:	b29a      	uxth	r2, r3
 800433c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800433e:	801a      	strh	r2, [r3, #0]
 8004340:	e044      	b.n	80043cc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004342:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10a      	bne.n	8004360 <HAL_PCD_EP_DB_Transmit+0x350>
 800434a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b29b      	uxth	r3, r3
 8004350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004358:	b29a      	uxth	r2, r3
 800435a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435c:	801a      	strh	r2, [r3, #0]
 800435e:	e035      	b.n	80043cc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004360:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004364:	085b      	lsrs	r3, r3, #1
 8004366:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004368:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <HAL_PCD_EP_DB_Transmit+0x36a>
 8004374:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004376:	3301      	adds	r3, #1
 8004378:	64bb      	str	r3, [r7, #72]	@ 0x48
 800437a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	b29a      	uxth	r2, r3
 8004380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004382:	b29b      	uxth	r3, r3
 8004384:	029b      	lsls	r3, r3, #10
 8004386:	b29b      	uxth	r3, r3
 8004388:	4313      	orrs	r3, r2
 800438a:	b29a      	uxth	r2, r3
 800438c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	e01c      	b.n	80043cc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	785b      	ldrb	r3, [r3, #1]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d118      	bne.n	80043cc <HAL_PCD_EP_DB_Transmit+0x3bc>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	647b      	str	r3, [r7, #68]	@ 0x44
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ae:	4413      	add	r3, r2
 80043b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	011a      	lsls	r2, r3, #4
 80043b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ba:	4413      	add	r3, r2
 80043bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80043c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80043c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043ca:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	6959      	ldr	r1, [r3, #20]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	891a      	ldrh	r2, [r3, #8]
 80043d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043dc:	b29b      	uxth	r3, r3
 80043de:	f004 f88e 	bl	80084fe <USB_WritePMA>
 80043e2:	e1e2      	b.n	80047aa <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4413      	add	r3, r2
 80043f8:	3306      	adds	r3, #6
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	6812      	ldr	r2, [r2, #0]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800440c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	699a      	ldr	r2, [r3, #24]
 8004414:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004418:	429a      	cmp	r2, r3
 800441a:	d307      	bcc.n	800442c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	699a      	ldr	r2, [r3, #24]
 8004420:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004424:	1ad2      	subs	r2, r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	619a      	str	r2, [r3, #24]
 800442a:	e002      	b.n	8004432 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2200      	movs	r2, #0
 8004430:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	f040 80c0 	bne.w	80045bc <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	785b      	ldrb	r3, [r3, #1]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d126      	bne.n	8004492 <HAL_PCD_EP_DB_Transmit+0x482>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004452:	b29b      	uxth	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004458:	4413      	add	r3, r2
 800445a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	011a      	lsls	r2, r3, #4
 8004462:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004464:	4413      	add	r3, r2
 8004466:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800446a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800446c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b29b      	uxth	r3, r3
 8004472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004476:	b29a      	uxth	r2, r3
 8004478:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800447a:	801a      	strh	r2, [r3, #0]
 800447c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	b29b      	uxth	r3, r3
 8004482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800448a:	b29a      	uxth	r2, r3
 800448c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	e01a      	b.n	80044c8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	785b      	ldrb	r3, [r3, #1]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d116      	bne.n	80044c8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	667b      	str	r3, [r7, #100]	@ 0x64
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044ae:	4413      	add	r3, r2
 80044b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	011a      	lsls	r2, r3, #4
 80044b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044ba:	4413      	add	r3, r2
 80044bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80044c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80044c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044c4:	2200      	movs	r2, #0
 80044c6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	785b      	ldrb	r3, [r3, #1]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d12b      	bne.n	800452e <HAL_PCD_EP_DB_Transmit+0x51e>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ea:	4413      	add	r3, r2
 80044ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	011a      	lsls	r2, r3, #4
 80044f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044f6:	4413      	add	r3, r2
 80044f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80044fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004500:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800450c:	b29a      	uxth	r2, r3
 800450e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004512:	801a      	strh	r2, [r3, #0]
 8004514:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b29b      	uxth	r3, r3
 800451c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004524:	b29a      	uxth	r2, r3
 8004526:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800452a:	801a      	strh	r2, [r3, #0]
 800452c:	e017      	b.n	800455e <HAL_PCD_EP_DB_Transmit+0x54e>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	785b      	ldrb	r3, [r3, #1]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d113      	bne.n	800455e <HAL_PCD_EP_DB_Transmit+0x54e>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800453e:	b29b      	uxth	r3, r3
 8004540:	461a      	mov	r2, r3
 8004542:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004544:	4413      	add	r3, r2
 8004546:	677b      	str	r3, [r7, #116]	@ 0x74
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	011a      	lsls	r2, r3, #4
 800454e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004550:	4413      	add	r3, r2
 8004552:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004556:	673b      	str	r3, [r7, #112]	@ 0x70
 8004558:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800455a:	2200      	movs	r2, #0
 800455c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	4619      	mov	r1, r3
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f005 fe10 	bl	800a18a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800456a:	88fb      	ldrh	r3, [r7, #6]
 800456c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004570:	2b00      	cmp	r3, #0
 8004572:	f040 811a 	bne.w	80047aa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	b29b      	uxth	r3, r3
 8004588:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800458c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004590:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	441a      	add	r2, r3
 80045a2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80045a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	8013      	strh	r3, [r2, #0]
 80045ba:	e0f6      	b.n	80047aa <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80045bc:	88fb      	ldrh	r3, [r7, #6]
 80045be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d121      	bne.n	800460a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	441a      	add	r2, r3
 80045f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80045f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004606:	b29b      	uxth	r3, r3
 8004608:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004610:	2b01      	cmp	r3, #1
 8004612:	f040 80ca 	bne.w	80047aa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	695a      	ldr	r2, [r3, #20]
 800461a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800461e:	441a      	add	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800462c:	441a      	add	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	6a1a      	ldr	r2, [r3, #32]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	429a      	cmp	r2, r3
 800463c:	d30b      	bcc.n	8004656 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	6a1a      	ldr	r2, [r3, #32]
 800464a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800464e:	1ad2      	subs	r2, r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	621a      	str	r2, [r3, #32]
 8004654:	e017      	b.n	8004686 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d108      	bne.n	8004670 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800465e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004662:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800466e:	e00a      	b.n	8004686 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2200      	movs	r2, #0
 800467c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	657b      	str	r3, [r7, #84]	@ 0x54
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	785b      	ldrb	r3, [r3, #1]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d165      	bne.n	8004760 <HAL_PCD_EP_DB_Transmit+0x750>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046a8:	4413      	add	r3, r2
 80046aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	011a      	lsls	r2, r3, #4
 80046b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046b4:	4413      	add	r3, r2
 80046b6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046ca:	801a      	strh	r2, [r3, #0]
 80046cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80046d2:	d91d      	bls.n	8004710 <HAL_PCD_EP_DB_Transmit+0x700>
 80046d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d102      	bne.n	80046ee <HAL_PCD_EP_DB_Transmit+0x6de>
 80046e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046ea:	3b01      	subs	r3, #1
 80046ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	029b      	lsls	r3, r3, #10
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	4313      	orrs	r3, r2
 80046fe:	b29b      	uxth	r3, r3
 8004700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004708:	b29a      	uxth	r2, r3
 800470a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800470c:	801a      	strh	r2, [r3, #0]
 800470e:	e041      	b.n	8004794 <HAL_PCD_EP_DB_Transmit+0x784>
 8004710:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10a      	bne.n	800472e <HAL_PCD_EP_DB_Transmit+0x71e>
 8004718:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004726:	b29a      	uxth	r2, r3
 8004728:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800472a:	801a      	strh	r2, [r3, #0]
 800472c:	e032      	b.n	8004794 <HAL_PCD_EP_DB_Transmit+0x784>
 800472e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004732:	085b      	lsrs	r3, r3, #1
 8004734:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <HAL_PCD_EP_DB_Transmit+0x738>
 8004742:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004744:	3301      	adds	r3, #1
 8004746:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004748:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	b29a      	uxth	r2, r3
 800474e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004750:	b29b      	uxth	r3, r3
 8004752:	029b      	lsls	r3, r3, #10
 8004754:	b29b      	uxth	r3, r3
 8004756:	4313      	orrs	r3, r2
 8004758:	b29a      	uxth	r2, r3
 800475a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800475c:	801a      	strh	r2, [r3, #0]
 800475e:	e019      	b.n	8004794 <HAL_PCD_EP_DB_Transmit+0x784>
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	785b      	ldrb	r3, [r3, #1]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d115      	bne.n	8004794 <HAL_PCD_EP_DB_Transmit+0x784>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004770:	b29b      	uxth	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004776:	4413      	add	r3, r2
 8004778:	657b      	str	r3, [r7, #84]	@ 0x54
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	011a      	lsls	r2, r3, #4
 8004780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004782:	4413      	add	r3, r2
 8004784:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004788:	653b      	str	r3, [r7, #80]	@ 0x50
 800478a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800478e:	b29a      	uxth	r2, r3
 8004790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004792:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	6959      	ldr	r1, [r3, #20]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	895a      	ldrh	r2, [r3, #10]
 80047a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f003 feaa 	bl	80084fe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047c4:	82bb      	strh	r3, [r7, #20]
 80047c6:	8abb      	ldrh	r3, [r7, #20]
 80047c8:	f083 0310 	eor.w	r3, r3, #16
 80047cc:	82bb      	strh	r3, [r7, #20]
 80047ce:	8abb      	ldrh	r3, [r7, #20]
 80047d0:	f083 0320 	eor.w	r3, r3, #32
 80047d4:	82bb      	strh	r3, [r7, #20]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	441a      	add	r2, r3
 80047e4:	8abb      	ldrh	r3, [r7, #20]
 80047e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3790      	adds	r7, #144	@ 0x90
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	607b      	str	r3, [r7, #4]
 800480e:	460b      	mov	r3, r1
 8004810:	817b      	strh	r3, [r7, #10]
 8004812:	4613      	mov	r3, r2
 8004814:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004816:	897b      	ldrh	r3, [r7, #10]
 8004818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00b      	beq.n	800483a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004822:	897b      	ldrh	r3, [r7, #10]
 8004824:	f003 0207 	and.w	r2, r3, #7
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	3310      	adds	r3, #16
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	e009      	b.n	800484e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800483a:	897a      	ldrh	r2, [r7, #10]
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800484e:	893b      	ldrh	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d107      	bne.n	8004864 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2200      	movs	r2, #0
 8004858:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	b29a      	uxth	r2, r3
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	80da      	strh	r2, [r3, #6]
 8004862:	e00b      	b.n	800487c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2201      	movs	r2, #1
 8004868:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	b29a      	uxth	r2, r3
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	b29a      	uxth	r2, r3
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr

08004888 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e272      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 8087 	beq.w	80049b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048a8:	4b92      	ldr	r3, [pc, #584]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 030c 	and.w	r3, r3, #12
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d00c      	beq.n	80048ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048b4:	4b8f      	ldr	r3, [pc, #572]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 030c 	and.w	r3, r3, #12
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d112      	bne.n	80048e6 <HAL_RCC_OscConfig+0x5e>
 80048c0:	4b8c      	ldr	r3, [pc, #560]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048cc:	d10b      	bne.n	80048e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ce:	4b89      	ldr	r3, [pc, #548]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d06c      	beq.n	80049b4 <HAL_RCC_OscConfig+0x12c>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d168      	bne.n	80049b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e24c      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ee:	d106      	bne.n	80048fe <HAL_RCC_OscConfig+0x76>
 80048f0:	4b80      	ldr	r3, [pc, #512]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a7f      	ldr	r2, [pc, #508]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80048f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	e02e      	b.n	800495c <HAL_RCC_OscConfig+0xd4>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10c      	bne.n	8004920 <HAL_RCC_OscConfig+0x98>
 8004906:	4b7b      	ldr	r3, [pc, #492]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a7a      	ldr	r2, [pc, #488]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 800490c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	4b78      	ldr	r3, [pc, #480]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a77      	ldr	r2, [pc, #476]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004918:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e01d      	b.n	800495c <HAL_RCC_OscConfig+0xd4>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004928:	d10c      	bne.n	8004944 <HAL_RCC_OscConfig+0xbc>
 800492a:	4b72      	ldr	r3, [pc, #456]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a71      	ldr	r2, [pc, #452]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004930:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	4b6f      	ldr	r3, [pc, #444]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a6e      	ldr	r2, [pc, #440]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 800493c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	e00b      	b.n	800495c <HAL_RCC_OscConfig+0xd4>
 8004944:	4b6b      	ldr	r3, [pc, #428]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a6a      	ldr	r2, [pc, #424]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 800494a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	4b68      	ldr	r3, [pc, #416]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a67      	ldr	r2, [pc, #412]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004956:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800495a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d013      	beq.n	800498c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004964:	f7fd ff36 	bl	80027d4 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800496c:	f7fd ff32 	bl	80027d4 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b64      	cmp	r3, #100	@ 0x64
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e200      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	4b5d      	ldr	r3, [pc, #372]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f0      	beq.n	800496c <HAL_RCC_OscConfig+0xe4>
 800498a:	e014      	b.n	80049b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498c:	f7fd ff22 	bl	80027d4 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004994:	f7fd ff1e 	bl	80027d4 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b64      	cmp	r3, #100	@ 0x64
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e1ec      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a6:	4b53      	ldr	r3, [pc, #332]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x10c>
 80049b2:	e000      	b.n	80049b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d063      	beq.n	8004a8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049c2:	4b4c      	ldr	r3, [pc, #304]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80049ce:	4b49      	ldr	r3, [pc, #292]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f003 030c 	and.w	r3, r3, #12
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d11c      	bne.n	8004a14 <HAL_RCC_OscConfig+0x18c>
 80049da:	4b46      	ldr	r3, [pc, #280]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d116      	bne.n	8004a14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e6:	4b43      	ldr	r3, [pc, #268]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d005      	beq.n	80049fe <HAL_RCC_OscConfig+0x176>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d001      	beq.n	80049fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e1c0      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049fe:	4b3d      	ldr	r3, [pc, #244]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	4939      	ldr	r1, [pc, #228]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a12:	e03a      	b.n	8004a8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d020      	beq.n	8004a5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a1c:	4b36      	ldr	r3, [pc, #216]	@ (8004af8 <HAL_RCC_OscConfig+0x270>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a22:	f7fd fed7 	bl	80027d4 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a2a:	f7fd fed3 	bl	80027d4 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e1a1      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f0      	beq.n	8004a2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a48:	4b2a      	ldr	r3, [pc, #168]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	4927      	ldr	r1, [pc, #156]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]
 8004a5c:	e015      	b.n	8004a8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a5e:	4b26      	ldr	r3, [pc, #152]	@ (8004af8 <HAL_RCC_OscConfig+0x270>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a64:	f7fd feb6 	bl	80027d4 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a6c:	f7fd feb2 	bl	80027d4 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e180      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d03a      	beq.n	8004b0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d019      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a9e:	4b17      	ldr	r3, [pc, #92]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa4:	f7fd fe96 	bl	80027d4 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aac:	f7fd fe92 	bl	80027d4 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e160      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004abe:	4b0d      	ldr	r3, [pc, #52]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004aca:	2001      	movs	r0, #1
 8004acc:	f000 face 	bl	800506c <RCC_Delay>
 8004ad0:	e01c      	b.n	8004b0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad8:	f7fd fe7c 	bl	80027d4 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ade:	e00f      	b.n	8004b00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae0:	f7fd fe78 	bl	80027d4 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d908      	bls.n	8004b00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e146      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
 8004af2:	bf00      	nop
 8004af4:	40021000 	.word	0x40021000
 8004af8:	42420000 	.word	0x42420000
 8004afc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b00:	4b92      	ldr	r3, [pc, #584]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e9      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80a6 	beq.w	8004c66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1e:	4b8b      	ldr	r3, [pc, #556]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10d      	bne.n	8004b46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	4b88      	ldr	r3, [pc, #544]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	4a87      	ldr	r2, [pc, #540]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b34:	61d3      	str	r3, [r2, #28]
 8004b36:	4b85      	ldr	r3, [pc, #532]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b3e:	60bb      	str	r3, [r7, #8]
 8004b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b42:	2301      	movs	r3, #1
 8004b44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b46:	4b82      	ldr	r3, [pc, #520]	@ (8004d50 <HAL_RCC_OscConfig+0x4c8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d118      	bne.n	8004b84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b52:	4b7f      	ldr	r3, [pc, #508]	@ (8004d50 <HAL_RCC_OscConfig+0x4c8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a7e      	ldr	r2, [pc, #504]	@ (8004d50 <HAL_RCC_OscConfig+0x4c8>)
 8004b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b5e:	f7fd fe39 	bl	80027d4 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b66:	f7fd fe35 	bl	80027d4 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b64      	cmp	r3, #100	@ 0x64
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e103      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b78:	4b75      	ldr	r3, [pc, #468]	@ (8004d50 <HAL_RCC_OscConfig+0x4c8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d106      	bne.n	8004b9a <HAL_RCC_OscConfig+0x312>
 8004b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	4a6e      	ldr	r2, [pc, #440]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	6213      	str	r3, [r2, #32]
 8004b98:	e02d      	b.n	8004bf6 <HAL_RCC_OscConfig+0x36e>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x334>
 8004ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	4a69      	ldr	r2, [pc, #420]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	6213      	str	r3, [r2, #32]
 8004bae:	4b67      	ldr	r3, [pc, #412]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	4a66      	ldr	r2, [pc, #408]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004bb4:	f023 0304 	bic.w	r3, r3, #4
 8004bb8:	6213      	str	r3, [r2, #32]
 8004bba:	e01c      	b.n	8004bf6 <HAL_RCC_OscConfig+0x36e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	2b05      	cmp	r3, #5
 8004bc2:	d10c      	bne.n	8004bde <HAL_RCC_OscConfig+0x356>
 8004bc4:	4b61      	ldr	r3, [pc, #388]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	4a60      	ldr	r2, [pc, #384]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004bca:	f043 0304 	orr.w	r3, r3, #4
 8004bce:	6213      	str	r3, [r2, #32]
 8004bd0:	4b5e      	ldr	r3, [pc, #376]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	4a5d      	ldr	r2, [pc, #372]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004bd6:	f043 0301 	orr.w	r3, r3, #1
 8004bda:	6213      	str	r3, [r2, #32]
 8004bdc:	e00b      	b.n	8004bf6 <HAL_RCC_OscConfig+0x36e>
 8004bde:	4b5b      	ldr	r3, [pc, #364]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	4a5a      	ldr	r2, [pc, #360]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004be4:	f023 0301 	bic.w	r3, r3, #1
 8004be8:	6213      	str	r3, [r2, #32]
 8004bea:	4b58      	ldr	r3, [pc, #352]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	4a57      	ldr	r2, [pc, #348]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004bf0:	f023 0304 	bic.w	r3, r3, #4
 8004bf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d015      	beq.n	8004c2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bfe:	f7fd fde9 	bl	80027d4 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c04:	e00a      	b.n	8004c1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c06:	f7fd fde5 	bl	80027d4 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e0b1      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0ee      	beq.n	8004c06 <HAL_RCC_OscConfig+0x37e>
 8004c28:	e014      	b.n	8004c54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c2a:	f7fd fdd3 	bl	80027d4 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c30:	e00a      	b.n	8004c48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c32:	f7fd fdcf 	bl	80027d4 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e09b      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c48:	4b40      	ldr	r3, [pc, #256]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1ee      	bne.n	8004c32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c54:	7dfb      	ldrb	r3, [r7, #23]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d105      	bne.n	8004c66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c5a:	4b3c      	ldr	r3, [pc, #240]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	4a3b      	ldr	r2, [pc, #236]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004c60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 8087 	beq.w	8004d7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c70:	4b36      	ldr	r3, [pc, #216]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f003 030c 	and.w	r3, r3, #12
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d061      	beq.n	8004d40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d146      	bne.n	8004d12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c84:	4b33      	ldr	r3, [pc, #204]	@ (8004d54 <HAL_RCC_OscConfig+0x4cc>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8a:	f7fd fda3 	bl	80027d4 <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c92:	f7fd fd9f 	bl	80027d4 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e06d      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ca4:	4b29      	ldr	r3, [pc, #164]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f0      	bne.n	8004c92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb8:	d108      	bne.n	8004ccc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004cba:	4b24      	ldr	r3, [pc, #144]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	4921      	ldr	r1, [pc, #132]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a19      	ldr	r1, [r3, #32]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	491b      	ldr	r1, [pc, #108]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d54 <HAL_RCC_OscConfig+0x4cc>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cea:	f7fd fd73 	bl	80027d4 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf2:	f7fd fd6f 	bl	80027d4 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e03d      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d04:	4b11      	ldr	r3, [pc, #68]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0f0      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x46a>
 8004d10:	e035      	b.n	8004d7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d12:	4b10      	ldr	r3, [pc, #64]	@ (8004d54 <HAL_RCC_OscConfig+0x4cc>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d18:	f7fd fd5c 	bl	80027d4 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d20:	f7fd fd58 	bl	80027d4 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e026      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d32:	4b06      	ldr	r3, [pc, #24]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x498>
 8004d3e:	e01e      	b.n	8004d7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d107      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e019      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40007000 	.word	0x40007000
 8004d54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d58:	4b0b      	ldr	r3, [pc, #44]	@ (8004d88 <HAL_RCC_OscConfig+0x500>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d106      	bne.n	8004d7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d001      	beq.n	8004d7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40021000 	.word	0x40021000

08004d8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e0d0      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004da0:	4b6a      	ldr	r3, [pc, #424]	@ (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d910      	bls.n	8004dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dae:	4b67      	ldr	r3, [pc, #412]	@ (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 0207 	bic.w	r2, r3, #7
 8004db6:	4965      	ldr	r1, [pc, #404]	@ (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dbe:	4b63      	ldr	r3, [pc, #396]	@ (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d001      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e0b8      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d020      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004de8:	4b59      	ldr	r3, [pc, #356]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	4a58      	ldr	r2, [pc, #352]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004dee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004df2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e00:	4b53      	ldr	r3, [pc, #332]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	4a52      	ldr	r2, [pc, #328]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e06:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004e0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e0c:	4b50      	ldr	r3, [pc, #320]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	494d      	ldr	r1, [pc, #308]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d040      	beq.n	8004eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d107      	bne.n	8004e42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e32:	4b47      	ldr	r3, [pc, #284]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d115      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e07f      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d107      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e4a:	4b41      	ldr	r3, [pc, #260]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e073      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e06b      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e6a:	4b39      	ldr	r3, [pc, #228]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f023 0203 	bic.w	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4936      	ldr	r1, [pc, #216]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e7c:	f7fd fcaa 	bl	80027d4 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e84:	f7fd fca6 	bl	80027d4 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e053      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 020c 	and.w	r2, r3, #12
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d1eb      	bne.n	8004e84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eac:	4b27      	ldr	r3, [pc, #156]	@ (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d210      	bcs.n	8004edc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b24      	ldr	r3, [pc, #144]	@ (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f023 0207 	bic.w	r2, r3, #7
 8004ec2:	4922      	ldr	r1, [pc, #136]	@ (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eca:	4b20      	ldr	r3, [pc, #128]	@ (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d001      	beq.n	8004edc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e032      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee8:	4b19      	ldr	r3, [pc, #100]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4916      	ldr	r1, [pc, #88]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d009      	beq.n	8004f1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f06:	4b12      	ldr	r3, [pc, #72]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	490e      	ldr	r1, [pc, #56]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f1a:	f000 f821 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	4b0b      	ldr	r3, [pc, #44]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	091b      	lsrs	r3, r3, #4
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	490a      	ldr	r1, [pc, #40]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004f2c:	5ccb      	ldrb	r3, [r1, r3]
 8004f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f32:	4a09      	ldr	r2, [pc, #36]	@ (8004f58 <HAL_RCC_ClockConfig+0x1cc>)
 8004f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f36:	4b09      	ldr	r3, [pc, #36]	@ (8004f5c <HAL_RCC_ClockConfig+0x1d0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fd fc08 	bl	8002750 <HAL_InitTick>

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40022000 	.word	0x40022000
 8004f50:	40021000 	.word	0x40021000
 8004f54:	0800b0a0 	.word	0x0800b0a0
 8004f58:	20000018 	.word	0x20000018
 8004f5c:	2000001c 	.word	0x2000001c

08004f60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60bb      	str	r3, [r7, #8]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	2300      	movs	r3, #0
 8004f74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d002      	beq.n	8004f90 <HAL_RCC_GetSysClockFreq+0x30>
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d003      	beq.n	8004f96 <HAL_RCC_GetSysClockFreq+0x36>
 8004f8e:	e027      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f90:	4b19      	ldr	r3, [pc, #100]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f92:	613b      	str	r3, [r7, #16]
      break;
 8004f94:	e027      	b.n	8004fe6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	0c9b      	lsrs	r3, r3, #18
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	4a17      	ldr	r2, [pc, #92]	@ (8004ffc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fa0:	5cd3      	ldrb	r3, [r2, r3]
 8004fa2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d010      	beq.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fae:	4b11      	ldr	r3, [pc, #68]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	0c5b      	lsrs	r3, r3, #17
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	4a11      	ldr	r2, [pc, #68]	@ (8005000 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004fba:	5cd3      	ldrb	r3, [r2, r3]
 8004fbc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fc2:	fb03 f202 	mul.w	r2, r3, r2
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	e004      	b.n	8004fda <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a0c      	ldr	r2, [pc, #48]	@ (8005004 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004fd4:	fb02 f303 	mul.w	r3, r2, r3
 8004fd8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	613b      	str	r3, [r7, #16]
      break;
 8004fde:	e002      	b.n	8004fe6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fe0:	4b05      	ldr	r3, [pc, #20]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fe2:	613b      	str	r3, [r7, #16]
      break;
 8004fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fe6:	693b      	ldr	r3, [r7, #16]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bc80      	pop	{r7}
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	007a1200 	.word	0x007a1200
 8004ffc:	0800b0b8 	.word	0x0800b0b8
 8005000:	0800b0c8 	.word	0x0800b0c8
 8005004:	003d0900 	.word	0x003d0900

08005008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800500c:	4b02      	ldr	r3, [pc, #8]	@ (8005018 <HAL_RCC_GetHCLKFreq+0x10>)
 800500e:	681b      	ldr	r3, [r3, #0]
}
 8005010:	4618      	mov	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr
 8005018:	20000018 	.word	0x20000018

0800501c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005020:	f7ff fff2 	bl	8005008 <HAL_RCC_GetHCLKFreq>
 8005024:	4602      	mov	r2, r0
 8005026:	4b05      	ldr	r3, [pc, #20]	@ (800503c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	0a1b      	lsrs	r3, r3, #8
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	4903      	ldr	r1, [pc, #12]	@ (8005040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005032:	5ccb      	ldrb	r3, [r1, r3]
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005038:	4618      	mov	r0, r3
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40021000 	.word	0x40021000
 8005040:	0800b0b0 	.word	0x0800b0b0

08005044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005048:	f7ff ffde 	bl	8005008 <HAL_RCC_GetHCLKFreq>
 800504c:	4602      	mov	r2, r0
 800504e:	4b05      	ldr	r3, [pc, #20]	@ (8005064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	0adb      	lsrs	r3, r3, #11
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	4903      	ldr	r1, [pc, #12]	@ (8005068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800505a:	5ccb      	ldrb	r3, [r1, r3]
 800505c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005060:	4618      	mov	r0, r3
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40021000 	.word	0x40021000
 8005068:	0800b0b0 	.word	0x0800b0b0

0800506c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005074:	4b0a      	ldr	r3, [pc, #40]	@ (80050a0 <RCC_Delay+0x34>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a0a      	ldr	r2, [pc, #40]	@ (80050a4 <RCC_Delay+0x38>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	0a5b      	lsrs	r3, r3, #9
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	fb02 f303 	mul.w	r3, r2, r3
 8005086:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005088:	bf00      	nop
  }
  while (Delay --);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1e5a      	subs	r2, r3, #1
 800508e:	60fa      	str	r2, [r7, #12]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f9      	bne.n	8005088 <RCC_Delay+0x1c>
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr
 80050a0:	20000018 	.word	0x20000018
 80050a4:	10624dd3 	.word	0x10624dd3

080050a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d07d      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80050c4:	2300      	movs	r3, #0
 80050c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050c8:	4b4f      	ldr	r3, [pc, #316]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10d      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d4:	4b4c      	ldr	r3, [pc, #304]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	4a4b      	ldr	r2, [pc, #300]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050de:	61d3      	str	r3, [r2, #28]
 80050e0:	4b49      	ldr	r3, [pc, #292]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e8:	60bb      	str	r3, [r7, #8]
 80050ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ec:	2301      	movs	r3, #1
 80050ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f0:	4b46      	ldr	r3, [pc, #280]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d118      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050fc:	4b43      	ldr	r3, [pc, #268]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a42      	ldr	r2, [pc, #264]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005106:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005108:	f7fd fb64 	bl	80027d4 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800510e:	e008      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005110:	f7fd fb60 	bl	80027d4 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b64      	cmp	r3, #100	@ 0x64
 800511c:	d901      	bls.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e06d      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005122:	4b3a      	ldr	r3, [pc, #232]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800512e:	4b36      	ldr	r3, [pc, #216]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005136:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d02e      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	429a      	cmp	r2, r3
 800514a:	d027      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800514c:	4b2e      	ldr	r3, [pc, #184]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005154:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005156:	4b2e      	ldr	r3, [pc, #184]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005158:	2201      	movs	r2, #1
 800515a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800515c:	4b2c      	ldr	r3, [pc, #176]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005162:	4a29      	ldr	r2, [pc, #164]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d014      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005172:	f7fd fb2f 	bl	80027d4 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005178:	e00a      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517a:	f7fd fb2b 	bl	80027d4 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005188:	4293      	cmp	r3, r2
 800518a:	d901      	bls.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e036      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005190:	4b1d      	ldr	r3, [pc, #116]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0ee      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800519c:	4b1a      	ldr	r3, [pc, #104]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	4917      	ldr	r1, [pc, #92]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051ae:	7dfb      	ldrb	r3, [r7, #23]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d105      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b4:	4b14      	ldr	r3, [pc, #80]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	4a13      	ldr	r2, [pc, #76]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	490b      	ldr	r1, [pc, #44]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051ea:	4b07      	ldr	r3, [pc, #28]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	4904      	ldr	r1, [pc, #16]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40021000 	.word	0x40021000
 800520c:	40007000 	.word	0x40007000
 8005210:	42420440 	.word	0x42420440

08005214 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e076      	b.n	8005314 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522a:	2b00      	cmp	r3, #0
 800522c:	d108      	bne.n	8005240 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005236:	d009      	beq.n	800524c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	61da      	str	r2, [r3, #28]
 800523e:	e005      	b.n	800524c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d106      	bne.n	800526c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fd f926 	bl	80024b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005282:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052bc:	431a      	orrs	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052d0:	ea42 0103 	orr.w	r1, r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	0c1a      	lsrs	r2, r3, #16
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f002 0204 	and.w	r2, r2, #4
 80052f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69da      	ldr	r2, [r3, #28]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005302:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b088      	sub	sp, #32
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	4613      	mov	r3, r2
 800532a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800532c:	f7fd fa52 	bl	80027d4 <HAL_GetTick>
 8005330:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005332:	88fb      	ldrh	r3, [r7, #6]
 8005334:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b01      	cmp	r3, #1
 8005340:	d001      	beq.n	8005346 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005342:	2302      	movs	r3, #2
 8005344:	e12a      	b.n	800559c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <HAL_SPI_Transmit+0x36>
 800534c:	88fb      	ldrh	r3, [r7, #6]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e122      	b.n	800559c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_SPI_Transmit+0x48>
 8005360:	2302      	movs	r3, #2
 8005362:	e11b      	b.n	800559c <HAL_SPI_Transmit+0x280>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2203      	movs	r2, #3
 8005370:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	88fa      	ldrh	r2, [r7, #6]
 8005384:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	88fa      	ldrh	r2, [r7, #6]
 800538a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053b2:	d10f      	bne.n	80053d4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053de:	2b40      	cmp	r3, #64	@ 0x40
 80053e0:	d007      	beq.n	80053f2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053fa:	d152      	bne.n	80054a2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_SPI_Transmit+0xee>
 8005404:	8b7b      	ldrh	r3, [r7, #26]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d145      	bne.n	8005496 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540e:	881a      	ldrh	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541a:	1c9a      	adds	r2, r3, #2
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005424:	b29b      	uxth	r3, r3
 8005426:	3b01      	subs	r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800542e:	e032      	b.n	8005496 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b02      	cmp	r3, #2
 800543c:	d112      	bne.n	8005464 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005442:	881a      	ldrh	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544e:	1c9a      	adds	r2, r3, #2
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005462:	e018      	b.n	8005496 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005464:	f7fd f9b6 	bl	80027d4 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d803      	bhi.n	800547c <HAL_SPI_Transmit+0x160>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547a:	d102      	bne.n	8005482 <HAL_SPI_Transmit+0x166>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e082      	b.n	800559c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800549a:	b29b      	uxth	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1c7      	bne.n	8005430 <HAL_SPI_Transmit+0x114>
 80054a0:	e053      	b.n	800554a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <HAL_SPI_Transmit+0x194>
 80054aa:	8b7b      	ldrh	r3, [r7, #26]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d147      	bne.n	8005540 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	330c      	adds	r3, #12
 80054ba:	7812      	ldrb	r2, [r2, #0]
 80054bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054d6:	e033      	b.n	8005540 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d113      	bne.n	800550e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	330c      	adds	r3, #12
 80054f0:	7812      	ldrb	r2, [r2, #0]
 80054f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800550c:	e018      	b.n	8005540 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800550e:	f7fd f961 	bl	80027d4 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d803      	bhi.n	8005526 <HAL_SPI_Transmit+0x20a>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005524:	d102      	bne.n	800552c <HAL_SPI_Transmit+0x210>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d109      	bne.n	8005540 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e02d      	b.n	800559c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1c6      	bne.n	80054d8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800554a:	69fa      	ldr	r2, [r7, #28]
 800554c:	6839      	ldr	r1, [r7, #0]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 fbc4 	bl	8005cdc <SPI_EndRxTxTransaction>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2220      	movs	r2, #32
 800555e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10a      	bne.n	800557e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800559a:	2300      	movs	r3, #0
  }
}
 800559c:	4618      	mov	r0, r3
 800559e:	3720      	adds	r7, #32
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b088      	sub	sp, #32
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	603b      	str	r3, [r7, #0]
 80055b0:	4613      	mov	r3, r2
 80055b2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d001      	beq.n	80055c4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80055c0:	2302      	movs	r3, #2
 80055c2:	e104      	b.n	80057ce <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055cc:	d112      	bne.n	80055f4 <HAL_SPI_Receive+0x50>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10e      	bne.n	80055f4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2204      	movs	r2, #4
 80055da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80055de:	88fa      	ldrh	r2, [r7, #6]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 f8f3 	bl	80057d6 <HAL_SPI_TransmitReceive>
 80055f0:	4603      	mov	r3, r0
 80055f2:	e0ec      	b.n	80057ce <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055f4:	f7fd f8ee 	bl	80027d4 <HAL_GetTick>
 80055f8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <HAL_SPI_Receive+0x62>
 8005600:	88fb      	ldrh	r3, [r7, #6]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e0e1      	b.n	80057ce <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_SPI_Receive+0x74>
 8005614:	2302      	movs	r3, #2
 8005616:	e0da      	b.n	80057ce <HAL_SPI_Receive+0x22a>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2204      	movs	r2, #4
 8005624:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	88fa      	ldrh	r2, [r7, #6]
 8005638:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	88fa      	ldrh	r2, [r7, #6]
 800563e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005666:	d10f      	bne.n	8005688 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005676:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005686:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005692:	2b40      	cmp	r3, #64	@ 0x40
 8005694:	d007      	beq.n	80056a6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d170      	bne.n	8005790 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80056ae:	e035      	b.n	800571c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d115      	bne.n	80056ea <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f103 020c 	add.w	r2, r3, #12
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ca:	7812      	ldrb	r2, [r2, #0]
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056e8:	e018      	b.n	800571c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ea:	f7fd f873 	bl	80027d4 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d803      	bhi.n	8005702 <HAL_SPI_Receive+0x15e>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d102      	bne.n	8005708 <HAL_SPI_Receive+0x164>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d109      	bne.n	800571c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e058      	b.n	80057ce <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1c4      	bne.n	80056b0 <HAL_SPI_Receive+0x10c>
 8005726:	e038      	b.n	800579a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b01      	cmp	r3, #1
 8005734:	d113      	bne.n	800575e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005740:	b292      	uxth	r2, r2
 8005742:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005748:	1c9a      	adds	r2, r3, #2
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005752:	b29b      	uxth	r3, r3
 8005754:	3b01      	subs	r3, #1
 8005756:	b29a      	uxth	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800575c:	e018      	b.n	8005790 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800575e:	f7fd f839 	bl	80027d4 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d803      	bhi.n	8005776 <HAL_SPI_Receive+0x1d2>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005774:	d102      	bne.n	800577c <HAL_SPI_Receive+0x1d8>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d109      	bne.n	8005790 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e01e      	b.n	80057ce <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1c6      	bne.n	8005728 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	6839      	ldr	r1, [r7, #0]
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 fa4a 	bl	8005c38 <SPI_EndRxTransaction>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2220      	movs	r2, #32
 80057ae:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e000      	b.n	80057ce <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80057cc:	2300      	movs	r3, #0
  }
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b08a      	sub	sp, #40	@ 0x28
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057e4:	2301      	movs	r3, #1
 80057e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057e8:	f7fc fff4 	bl	80027d4 <HAL_GetTick>
 80057ec:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057f4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80057fc:	887b      	ldrh	r3, [r7, #2]
 80057fe:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005800:	7ffb      	ldrb	r3, [r7, #31]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d00c      	beq.n	8005820 <HAL_SPI_TransmitReceive+0x4a>
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800580c:	d106      	bne.n	800581c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d102      	bne.n	800581c <HAL_SPI_TransmitReceive+0x46>
 8005816:	7ffb      	ldrb	r3, [r7, #31]
 8005818:	2b04      	cmp	r3, #4
 800581a:	d001      	beq.n	8005820 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800581c:	2302      	movs	r3, #2
 800581e:	e17f      	b.n	8005b20 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <HAL_SPI_TransmitReceive+0x5c>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_SPI_TransmitReceive+0x5c>
 800582c:	887b      	ldrh	r3, [r7, #2]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e174      	b.n	8005b20 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_SPI_TransmitReceive+0x6e>
 8005840:	2302      	movs	r3, #2
 8005842:	e16d      	b.n	8005b20 <HAL_SPI_TransmitReceive+0x34a>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b04      	cmp	r3, #4
 8005856:	d003      	beq.n	8005860 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2205      	movs	r2, #5
 800585c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	887a      	ldrh	r2, [r7, #2]
 8005870:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	887a      	ldrh	r2, [r7, #2]
 8005876:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	887a      	ldrh	r2, [r7, #2]
 8005882:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	887a      	ldrh	r2, [r7, #2]
 8005888:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a0:	2b40      	cmp	r3, #64	@ 0x40
 80058a2:	d007      	beq.n	80058b4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058bc:	d17e      	bne.n	80059bc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <HAL_SPI_TransmitReceive+0xf6>
 80058c6:	8afb      	ldrh	r3, [r7, #22]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d16c      	bne.n	80059a6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d0:	881a      	ldrh	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058dc:	1c9a      	adds	r2, r3, #2
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058f0:	e059      	b.n	80059a6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d11b      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x162>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d016      	beq.n	8005938 <HAL_SPI_TransmitReceive+0x162>
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	2b01      	cmp	r3, #1
 800590e:	d113      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005914:	881a      	ldrh	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005920:	1c9a      	adds	r2, r3, #2
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b01      	cmp	r3, #1
 8005944:	d119      	bne.n	800597a <HAL_SPI_TransmitReceive+0x1a4>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d014      	beq.n	800597a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595a:	b292      	uxth	r2, r2
 800595c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005962:	1c9a      	adds	r2, r3, #2
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005976:	2301      	movs	r3, #1
 8005978:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800597a:	f7fc ff2b 	bl	80027d4 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005986:	429a      	cmp	r2, r3
 8005988:	d80d      	bhi.n	80059a6 <HAL_SPI_TransmitReceive+0x1d0>
 800598a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005990:	d009      	beq.n	80059a6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e0bc      	b.n	8005b20 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1a0      	bne.n	80058f2 <HAL_SPI_TransmitReceive+0x11c>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d19b      	bne.n	80058f2 <HAL_SPI_TransmitReceive+0x11c>
 80059ba:	e082      	b.n	8005ac2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <HAL_SPI_TransmitReceive+0x1f4>
 80059c4:	8afb      	ldrh	r3, [r7, #22]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d171      	bne.n	8005aae <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	330c      	adds	r3, #12
 80059d4:	7812      	ldrb	r2, [r2, #0]
 80059d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059f0:	e05d      	b.n	8005aae <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d11c      	bne.n	8005a3a <HAL_SPI_TransmitReceive+0x264>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d017      	beq.n	8005a3a <HAL_SPI_TransmitReceive+0x264>
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d114      	bne.n	8005a3a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	7812      	ldrb	r2, [r2, #0]
 8005a1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d119      	bne.n	8005a7c <HAL_SPI_TransmitReceive+0x2a6>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d014      	beq.n	8005a7c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a7c:	f7fc feaa 	bl	80027d4 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d803      	bhi.n	8005a94 <HAL_SPI_TransmitReceive+0x2be>
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a92:	d102      	bne.n	8005a9a <HAL_SPI_TransmitReceive+0x2c4>
 8005a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d109      	bne.n	8005aae <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e038      	b.n	8005b20 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d19c      	bne.n	80059f2 <HAL_SPI_TransmitReceive+0x21c>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d197      	bne.n	80059f2 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ac2:	6a3a      	ldr	r2, [r7, #32]
 8005ac4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 f908 	bl	8005cdc <SPI_EndRxTxTransaction>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d008      	beq.n	8005ae4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e01d      	b.n	8005b20 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10a      	bne.n	8005b02 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aec:	2300      	movs	r3, #0
 8005aee:	613b      	str	r3, [r7, #16]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	613b      	str	r3, [r7, #16]
 8005b00:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
  }
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3728      	adds	r7, #40	@ 0x28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	4613      	mov	r3, r2
 8005b36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b38:	f7fc fe4c 	bl	80027d4 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b40:	1a9b      	subs	r3, r3, r2
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	4413      	add	r3, r2
 8005b46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b48:	f7fc fe44 	bl	80027d4 <HAL_GetTick>
 8005b4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b4e:	4b39      	ldr	r3, [pc, #228]	@ (8005c34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	015b      	lsls	r3, r3, #5
 8005b54:	0d1b      	lsrs	r3, r3, #20
 8005b56:	69fa      	ldr	r2, [r7, #28]
 8005b58:	fb02 f303 	mul.w	r3, r2, r3
 8005b5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b5e:	e054      	b.n	8005c0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b66:	d050      	beq.n	8005c0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b68:	f7fc fe34 	bl	80027d4 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	69fa      	ldr	r2, [r7, #28]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d902      	bls.n	8005b7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d13d      	bne.n	8005bfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b96:	d111      	bne.n	8005bbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ba0:	d004      	beq.n	8005bac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005baa:	d107      	bne.n	8005bbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bc4:	d10f      	bne.n	8005be6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005be4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e017      	b.n	8005c2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	4013      	ands	r3, r2
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	bf0c      	ite	eq
 8005c1a:	2301      	moveq	r3, #1
 8005c1c:	2300      	movne	r3, #0
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	461a      	mov	r2, r3
 8005c22:	79fb      	ldrb	r3, [r7, #7]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d19b      	bne.n	8005b60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3720      	adds	r7, #32
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20000018 	.word	0x20000018

08005c38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c4c:	d111      	bne.n	8005c72 <SPI_EndRxTransaction+0x3a>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c56:	d004      	beq.n	8005c62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c60:	d107      	bne.n	8005c72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c70:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c7a:	d117      	bne.n	8005cac <SPI_EndRxTransaction+0x74>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c84:	d112      	bne.n	8005cac <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2101      	movs	r1, #1
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f7ff ff49 	bl	8005b28 <SPI_WaitFlagStateUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01a      	beq.n	8005cd2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca0:	f043 0220 	orr.w	r2, r3, #32
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e013      	b.n	8005cd4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2180      	movs	r1, #128	@ 0x80
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f7ff ff36 	bl	8005b28 <SPI_WaitFlagStateUntilTimeout>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d007      	beq.n	8005cd2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc6:	f043 0220 	orr.w	r2, r3, #32
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e000      	b.n	8005cd4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	2102      	movs	r1, #2
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f7ff ff18 	bl	8005b28 <SPI_WaitFlagStateUntilTimeout>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d007      	beq.n	8005d0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d02:	f043 0220 	orr.w	r2, r3, #32
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e013      	b.n	8005d36 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2200      	movs	r2, #0
 8005d16:	2180      	movs	r1, #128	@ 0x80
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f7ff ff05 	bl	8005b28 <SPI_WaitFlagStateUntilTimeout>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d007      	beq.n	8005d34 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d28:	f043 0220 	orr.w	r2, r3, #32
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e000      	b.n	8005d36 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b082      	sub	sp, #8
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e042      	b.n	8005dd6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d106      	bne.n	8005d6a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7fc fbf1 	bl	800254c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2224      	movs	r2, #36	@ 0x24
 8005d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68da      	ldr	r2, [r3, #12]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f82c 	bl	8005de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695a      	ldr	r2, [r3, #20]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005da6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005db6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68da      	ldr	r2, [r3, #12]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005e1a:	f023 030c 	bic.w	r3, r3, #12
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	430b      	orrs	r3, r1
 8005e26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a2c      	ldr	r2, [pc, #176]	@ (8005ef4 <UART_SetConfig+0x114>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d103      	bne.n	8005e50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e48:	f7ff f8fc 	bl	8005044 <HAL_RCC_GetPCLK2Freq>
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	e002      	b.n	8005e56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e50:	f7ff f8e4 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 8005e54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009a      	lsls	r2, r3, #2
 8005e60:	441a      	add	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6c:	4a22      	ldr	r2, [pc, #136]	@ (8005ef8 <UART_SetConfig+0x118>)
 8005e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	0119      	lsls	r1, r3, #4
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009a      	lsls	r2, r3, #2
 8005e80:	441a      	add	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ef8 <UART_SetConfig+0x118>)
 8005e8e:	fba3 0302 	umull	r0, r3, r3, r2
 8005e92:	095b      	lsrs	r3, r3, #5
 8005e94:	2064      	movs	r0, #100	@ 0x64
 8005e96:	fb00 f303 	mul.w	r3, r0, r3
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	3332      	adds	r3, #50	@ 0x32
 8005ea0:	4a15      	ldr	r2, [pc, #84]	@ (8005ef8 <UART_SetConfig+0x118>)
 8005ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005eac:	4419      	add	r1, r3
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009a      	lsls	r2, r3, #2
 8005eb8:	441a      	add	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ef8 <UART_SetConfig+0x118>)
 8005ec6:	fba3 0302 	umull	r0, r3, r3, r2
 8005eca:	095b      	lsrs	r3, r3, #5
 8005ecc:	2064      	movs	r0, #100	@ 0x64
 8005ece:	fb00 f303 	mul.w	r3, r0, r3
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	011b      	lsls	r3, r3, #4
 8005ed6:	3332      	adds	r3, #50	@ 0x32
 8005ed8:	4a07      	ldr	r2, [pc, #28]	@ (8005ef8 <UART_SetConfig+0x118>)
 8005eda:	fba2 2303 	umull	r2, r3, r2, r3
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	f003 020f 	and.w	r2, r3, #15
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	440a      	add	r2, r1
 8005eea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005eec:	bf00      	nop
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	40013800 	.word	0x40013800
 8005ef8:	51eb851f 	.word	0x51eb851f

08005efc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	4638      	mov	r0, r7
 8005f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bc80      	pop	{r7}
 8005f14:	4770      	bx	lr

08005f16 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b085      	sub	sp, #20
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f26:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005f2a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bc80      	pop	{r7}
 8005f40:	4770      	bx	lr

08005f42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b085      	sub	sp, #20
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f4a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005f4e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	4013      	ands	r3, r2
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr

08005f76 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bc80      	pop	{r7}
 8005f8c:	4770      	bx	lr

08005f8e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b085      	sub	sp, #20
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	4638      	mov	r0, r7
 8005f98:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bc80      	pop	{r7}
 8005fc6:	4770      	bx	lr

08005fc8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b09d      	sub	sp, #116	@ 0x74
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fee:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	78db      	ldrb	r3, [r3, #3]
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d81f      	bhi.n	800603a <USB_ActivateEndpoint+0x72>
 8005ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8006000 <USB_ActivateEndpoint+0x38>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	08006011 	.word	0x08006011
 8006004:	0800602d 	.word	0x0800602d
 8006008:	08006043 	.word	0x08006043
 800600c:	0800601f 	.word	0x0800601f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006010:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006014:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006018:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800601c:	e012      	b.n	8006044 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800601e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006022:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006026:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800602a:	e00b      	b.n	8006044 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800602c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006030:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006034:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006038:	e004      	b.n	8006044 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006040:	e000      	b.n	8006044 <USB_ActivateEndpoint+0x7c>
      break;
 8006042:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	441a      	add	r2, r3
 800604e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006052:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006056:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800605a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800605e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006062:	b29b      	uxth	r3, r3
 8006064:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006078:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800607c:	b29b      	uxth	r3, r3
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	7812      	ldrb	r2, [r2, #0]
 8006082:	4313      	orrs	r3, r2
 8006084:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	441a      	add	r2, r3
 8006092:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006096:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800609a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800609e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	7b1b      	ldrb	r3, [r3, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f040 8178 	bne.w	80063a4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8084 	beq.w	80061c6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	461a      	mov	r2, r3
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	4413      	add	r3, r2
 80060d0:	61bb      	str	r3, [r7, #24]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	011a      	lsls	r2, r3, #4
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	88db      	ldrh	r3, [r3, #6]
 80060e6:	085b      	lsrs	r3, r3, #1
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	827b      	strh	r3, [r7, #18]
 8006100:	8a7b      	ldrh	r3, [r7, #18]
 8006102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006106:	2b00      	cmp	r3, #0
 8006108:	d01b      	beq.n	8006142 <USB_ActivateEndpoint+0x17a>
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	b29b      	uxth	r3, r3
 8006118:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800611c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006120:	823b      	strh	r3, [r7, #16]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	441a      	add	r2, r3
 800612c:	8a3b      	ldrh	r3, [r7, #16]
 800612e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006132:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006136:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800613a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800613e:	b29b      	uxth	r3, r3
 8006140:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	78db      	ldrb	r3, [r3, #3]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d020      	beq.n	800618c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800615c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006160:	81bb      	strh	r3, [r7, #12]
 8006162:	89bb      	ldrh	r3, [r7, #12]
 8006164:	f083 0320 	eor.w	r3, r3, #32
 8006168:	81bb      	strh	r3, [r7, #12]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	441a      	add	r2, r3
 8006174:	89bb      	ldrh	r3, [r7, #12]
 8006176:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800617a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800617e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006186:	b29b      	uxth	r3, r3
 8006188:	8013      	strh	r3, [r2, #0]
 800618a:	e2d5      	b.n	8006738 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	b29b      	uxth	r3, r3
 800619a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800619e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061a2:	81fb      	strh	r3, [r7, #14]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	441a      	add	r2, r3
 80061ae:	89fb      	ldrh	r3, [r7, #14]
 80061b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	8013      	strh	r3, [r2, #0]
 80061c4:	e2b8      	b.n	8006738 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d6:	4413      	add	r3, r2
 80061d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	011a      	lsls	r2, r3, #4
 80061e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80061e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	88db      	ldrh	r3, [r3, #6]
 80061ee:	085b      	lsrs	r3, r3, #1
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006204:	b29b      	uxth	r3, r3
 8006206:	461a      	mov	r2, r3
 8006208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620a:	4413      	add	r3, r2
 800620c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	011a      	lsls	r2, r3, #4
 8006214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006216:	4413      	add	r3, r2
 8006218:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800621c:	627b      	str	r3, [r7, #36]	@ 0x24
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b29b      	uxth	r3, r3
 8006224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006228:	b29a      	uxth	r2, r3
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	801a      	strh	r2, [r3, #0]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b3e      	cmp	r3, #62	@ 0x3e
 8006234:	d91d      	bls.n	8006272 <USB_ActivateEndpoint+0x2aa>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f003 031f 	and.w	r3, r3, #31
 8006246:	2b00      	cmp	r3, #0
 8006248:	d102      	bne.n	8006250 <USB_ActivateEndpoint+0x288>
 800624a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800624c:	3b01      	subs	r3, #1
 800624e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	b29a      	uxth	r2, r3
 8006256:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006258:	b29b      	uxth	r3, r3
 800625a:	029b      	lsls	r3, r3, #10
 800625c:	b29b      	uxth	r3, r3
 800625e:	4313      	orrs	r3, r2
 8006260:	b29b      	uxth	r3, r3
 8006262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800626a:	b29a      	uxth	r2, r3
 800626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626e:	801a      	strh	r2, [r3, #0]
 8006270:	e026      	b.n	80062c0 <USB_ActivateEndpoint+0x2f8>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10a      	bne.n	8006290 <USB_ActivateEndpoint+0x2c8>
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	b29b      	uxth	r3, r3
 8006280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006288:	b29a      	uxth	r2, r3
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	801a      	strh	r2, [r3, #0]
 800628e:	e017      	b.n	80062c0 <USB_ActivateEndpoint+0x2f8>
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	085b      	lsrs	r3, r3, #1
 8006296:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <USB_ActivateEndpoint+0x2e2>
 80062a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062a6:	3301      	adds	r3, #1
 80062a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	029b      	lsls	r3, r3, #10
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	4313      	orrs	r3, r2
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80062ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80062d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d01b      	beq.n	8006310 <USB_ActivateEndpoint+0x348>
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ee:	843b      	strh	r3, [r7, #32]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	441a      	add	r2, r3
 80062fa:	8c3b      	ldrh	r3, [r7, #32]
 80062fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006300:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006304:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800630c:	b29b      	uxth	r3, r3
 800630e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d124      	bne.n	8006362 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	b29b      	uxth	r3, r3
 8006326:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800632a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800632e:	83bb      	strh	r3, [r7, #28]
 8006330:	8bbb      	ldrh	r3, [r7, #28]
 8006332:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006336:	83bb      	strh	r3, [r7, #28]
 8006338:	8bbb      	ldrh	r3, [r7, #28]
 800633a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800633e:	83bb      	strh	r3, [r7, #28]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	441a      	add	r2, r3
 800634a:	8bbb      	ldrh	r3, [r7, #28]
 800634c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800635c:	b29b      	uxth	r3, r3
 800635e:	8013      	strh	r3, [r2, #0]
 8006360:	e1ea      	b.n	8006738 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	b29b      	uxth	r3, r3
 8006370:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006378:	83fb      	strh	r3, [r7, #30]
 800637a:	8bfb      	ldrh	r3, [r7, #30]
 800637c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006380:	83fb      	strh	r3, [r7, #30]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	441a      	add	r2, r3
 800638c:	8bfb      	ldrh	r3, [r7, #30]
 800638e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006392:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800639a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800639e:	b29b      	uxth	r3, r3
 80063a0:	8013      	strh	r3, [r2, #0]
 80063a2:	e1c9      	b.n	8006738 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	78db      	ldrb	r3, [r3, #3]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d11e      	bne.n	80063ea <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063c2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	441a      	add	r2, r3
 80063d0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80063d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063dc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80063e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	8013      	strh	r3, [r2, #0]
 80063e8:	e01d      	b.n	8006426 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80063fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006400:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	441a      	add	r2, r3
 800640e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006412:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006416:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800641a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800641e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006422:	b29b      	uxth	r3, r3
 8006424:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006430:	b29b      	uxth	r3, r3
 8006432:	461a      	mov	r2, r3
 8006434:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006436:	4413      	add	r3, r2
 8006438:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	011a      	lsls	r2, r3, #4
 8006440:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006442:	4413      	add	r3, r2
 8006444:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006448:	65bb      	str	r3, [r7, #88]	@ 0x58
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	891b      	ldrh	r3, [r3, #8]
 800644e:	085b      	lsrs	r3, r3, #1
 8006450:	b29b      	uxth	r3, r3
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006458:	801a      	strh	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	657b      	str	r3, [r7, #84]	@ 0x54
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006464:	b29b      	uxth	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800646a:	4413      	add	r3, r2
 800646c:	657b      	str	r3, [r7, #84]	@ 0x54
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	011a      	lsls	r2, r3, #4
 8006474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006476:	4413      	add	r3, r2
 8006478:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800647c:	653b      	str	r3, [r7, #80]	@ 0x50
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	895b      	ldrh	r3, [r3, #10]
 8006482:	085b      	lsrs	r3, r3, #1
 8006484:	b29b      	uxth	r3, r3
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	b29a      	uxth	r2, r3
 800648a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800648c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	785b      	ldrb	r3, [r3, #1]
 8006492:	2b00      	cmp	r3, #0
 8006494:	f040 8093 	bne.w	80065be <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80064a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80064ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01b      	beq.n	80064ec <USB_ActivateEndpoint+0x524>
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	441a      	add	r2, r3
 80064d6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80064d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80064fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80064fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01b      	beq.n	800653c <USB_ActivateEndpoint+0x574>
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800651a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	441a      	add	r2, r3
 8006526:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006528:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800652c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006530:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006534:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006538:	b29b      	uxth	r3, r3
 800653a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800654e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006552:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006554:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006556:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800655a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800655c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800655e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006562:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	441a      	add	r2, r3
 800656e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006570:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006574:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800657c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006580:	b29b      	uxth	r3, r3
 8006582:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	b29b      	uxth	r3, r3
 8006592:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006596:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800659a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	441a      	add	r2, r3
 80065a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80065a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	8013      	strh	r3, [r2, #0]
 80065bc:	e0bc      	b.n	8006738 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80065ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80065d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d01d      	beq.n	8006616 <USB_ActivateEndpoint+0x64e>
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065f0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	441a      	add	r2, r3
 80065fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006602:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006606:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800660a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800660e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006612:	b29b      	uxth	r3, r3
 8006614:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006626:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800662a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800662e:	2b00      	cmp	r3, #0
 8006630:	d01d      	beq.n	800666e <USB_ActivateEndpoint+0x6a6>
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	b29b      	uxth	r3, r3
 8006640:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006648:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	441a      	add	r2, r3
 8006656:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800665a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800665e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006666:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800666a:	b29b      	uxth	r3, r3
 800666c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	78db      	ldrb	r3, [r3, #3]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d024      	beq.n	80066c0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	b29b      	uxth	r3, r3
 8006684:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006688:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800668c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006690:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006694:	f083 0320 	eor.w	r3, r3, #32
 8006698:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	441a      	add	r2, r3
 80066a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80066aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	8013      	strh	r3, [r2, #0]
 80066be:	e01d      	b.n	80066fc <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	441a      	add	r2, r3
 80066e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80066e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	b29b      	uxth	r3, r3
 800670a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800670e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006712:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006724:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006728:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800672c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006734:	b29b      	uxth	r3, r3
 8006736:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006738:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800673c:	4618      	mov	r0, r3
 800673e:	3774      	adds	r7, #116	@ 0x74
 8006740:	46bd      	mov	sp, r7
 8006742:	bc80      	pop	{r7}
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop

08006748 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006748:	b480      	push	{r7}
 800674a:	b08d      	sub	sp, #52	@ 0x34
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	7b1b      	ldrb	r3, [r3, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	f040 808e 	bne.w	8006878 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	785b      	ldrb	r3, [r3, #1]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d044      	beq.n	80067ee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	81bb      	strh	r3, [r7, #12]
 8006772:	89bb      	ldrh	r3, [r7, #12]
 8006774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006778:	2b00      	cmp	r3, #0
 800677a:	d01b      	beq.n	80067b4 <USB_DeactivateEndpoint+0x6c>
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	b29b      	uxth	r3, r3
 800678a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800678e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006792:	817b      	strh	r3, [r7, #10]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	441a      	add	r2, r3
 800679e:	897b      	ldrh	r3, [r7, #10]
 80067a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ca:	813b      	strh	r3, [r7, #8]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	441a      	add	r2, r3
 80067d6:	893b      	ldrh	r3, [r7, #8]
 80067d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	8013      	strh	r3, [r2, #0]
 80067ec:	e192      	b.n	8006b14 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	827b      	strh	r3, [r7, #18]
 80067fc:	8a7b      	ldrh	r3, [r7, #18]
 80067fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d01b      	beq.n	800683e <USB_DeactivateEndpoint+0xf6>
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29b      	uxth	r3, r3
 8006814:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800681c:	823b      	strh	r3, [r7, #16]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	441a      	add	r2, r3
 8006828:	8a3b      	ldrh	r3, [r7, #16]
 800682a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800682e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006832:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800683a:	b29b      	uxth	r3, r3
 800683c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29b      	uxth	r3, r3
 800684c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006854:	81fb      	strh	r3, [r7, #14]
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	441a      	add	r2, r3
 8006860:	89fb      	ldrh	r3, [r7, #14]
 8006862:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006866:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800686a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800686e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006872:	b29b      	uxth	r3, r3
 8006874:	8013      	strh	r3, [r2, #0]
 8006876:	e14d      	b.n	8006b14 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	785b      	ldrb	r3, [r3, #1]
 800687c:	2b00      	cmp	r3, #0
 800687e:	f040 80a5 	bne.w	80069cc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	843b      	strh	r3, [r7, #32]
 8006890:	8c3b      	ldrh	r3, [r7, #32]
 8006892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d01b      	beq.n	80068d2 <USB_DeactivateEndpoint+0x18a>
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068b0:	83fb      	strh	r3, [r7, #30]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	441a      	add	r2, r3
 80068bc:	8bfb      	ldrh	r3, [r7, #30]
 80068be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	83bb      	strh	r3, [r7, #28]
 80068e0:	8bbb      	ldrh	r3, [r7, #28]
 80068e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d01b      	beq.n	8006922 <USB_DeactivateEndpoint+0x1da>
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006900:	837b      	strh	r3, [r7, #26]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	441a      	add	r2, r3
 800690c:	8b7b      	ldrh	r3, [r7, #26]
 800690e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006912:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800691a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800691e:	b29b      	uxth	r3, r3
 8006920:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	b29b      	uxth	r3, r3
 8006930:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006938:	833b      	strh	r3, [r7, #24]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	441a      	add	r2, r3
 8006944:	8b3b      	ldrh	r3, [r7, #24]
 8006946:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800694a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800694e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006952:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006956:	b29b      	uxth	r3, r3
 8006958:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	b29b      	uxth	r3, r3
 8006968:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800696c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006970:	82fb      	strh	r3, [r7, #22]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	441a      	add	r2, r3
 800697c:	8afb      	ldrh	r3, [r7, #22]
 800697e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006982:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800698a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800698e:	b29b      	uxth	r3, r3
 8006990:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069a8:	82bb      	strh	r3, [r7, #20]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	441a      	add	r2, r3
 80069b4:	8abb      	ldrh	r3, [r7, #20]
 80069b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	8013      	strh	r3, [r2, #0]
 80069ca:	e0a3      	b.n	8006b14 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80069da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80069dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01b      	beq.n	8006a1c <USB_DeactivateEndpoint+0x2d4>
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069fa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	441a      	add	r2, r3
 8006a06:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006a2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01b      	beq.n	8006a6c <USB_DeactivateEndpoint+0x324>
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a4a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	441a      	add	r2, r3
 8006a56:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006a58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a82:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	441a      	add	r2, r3
 8006a8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ab6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aba:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	441a      	add	r2, r3
 8006ac6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006acc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006af2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	441a      	add	r2, r3
 8006afe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3734      	adds	r7, #52	@ 0x34
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bc80      	pop	{r7}
 8006b1e:	4770      	bx	lr

08006b20 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b0c2      	sub	sp, #264	@ 0x108
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b2e:	6018      	str	r0, [r3, #0]
 8006b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b38:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	785b      	ldrb	r3, [r3, #1]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	f040 86b7 	bne.w	80078ba <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	699a      	ldr	r2, [r3, #24]
 8006b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d908      	bls.n	8006b7a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006b78:	e007      	b.n	8006b8a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006b7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	7b1b      	ldrb	r3, [r3, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d13a      	bne.n	8006c10 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6959      	ldr	r1, [r3, #20]
 8006ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006baa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	88da      	ldrh	r2, [r3, #6]
 8006bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006bbc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006bc0:	6800      	ldr	r0, [r0, #0]
 8006bc2:	f001 fc9c 	bl	80084fe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	613b      	str	r3, [r7, #16]
 8006bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	461a      	mov	r2, r3
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	4413      	add	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]
 8006bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	011a      	lsls	r2, r3, #4
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c00:	60fb      	str	r3, [r7, #12]
 8006c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	801a      	strh	r2, [r3, #0]
 8006c0c:	f000 be1f 	b.w	800784e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	78db      	ldrb	r3, [r3, #3]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	f040 8462 	bne.w	80074e6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6a1a      	ldr	r2, [r3, #32]
 8006c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	f240 83df 	bls.w	80073fe <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c66:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	441a      	add	r2, r3
 8006c84:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006c88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c90:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006c94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6a1a      	ldr	r2, [r3, #32]
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cac:	1ad2      	subs	r2, r2, r3
 8006cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 81c7 	beq.w	8007070 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	785b      	ldrb	r3, [r3, #1]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d177      	bne.n	8006dee <USB_EPStartXfer+0x2ce>
 8006cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1e:	4413      	add	r3, r2
 8006d20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	011a      	lsls	r2, r3, #4
 8006d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d32:	4413      	add	r3, r2
 8006d34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	801a      	strh	r2, [r3, #0]
 8006d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d50:	d921      	bls.n	8006d96 <USB_EPStartXfer+0x276>
 8006d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d56:	095b      	lsrs	r3, r3, #5
 8006d58:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d60:	f003 031f 	and.w	r3, r3, #31
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d104      	bne.n	8006d72 <USB_EPStartXfer+0x252>
 8006d68:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	029b      	lsls	r3, r3, #10
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	4313      	orrs	r3, r2
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d92:	801a      	strh	r2, [r3, #0]
 8006d94:	e050      	b.n	8006e38 <USB_EPStartXfer+0x318>
 8006d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10a      	bne.n	8006db4 <USB_EPStartXfer+0x294>
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db0:	801a      	strh	r2, [r3, #0]
 8006db2:	e041      	b.n	8006e38 <USB_EPStartXfer+0x318>
 8006db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db8:	085b      	lsrs	r3, r3, #1
 8006dba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d004      	beq.n	8006dd4 <USB_EPStartXfer+0x2b4>
 8006dca:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006dce:	3301      	adds	r3, #1
 8006dd0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	029b      	lsls	r3, r3, #10
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	4313      	orrs	r3, r2
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dea:	801a      	strh	r2, [r3, #0]
 8006dec:	e024      	b.n	8006e38 <USB_EPStartXfer+0x318>
 8006dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	785b      	ldrb	r3, [r3, #1]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d11c      	bne.n	8006e38 <USB_EPStartXfer+0x318>
 8006dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	461a      	mov	r2, r3
 8006e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e12:	4413      	add	r3, r2
 8006e14:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	011a      	lsls	r2, r3, #4
 8006e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e26:	4413      	add	r3, r2
 8006e28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	895b      	ldrh	r3, [r3, #10]
 8006e44:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6959      	ldr	r1, [r3, #20]
 8006e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e5e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e62:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e66:	6800      	ldr	r0, [r0, #0]
 8006e68:	f001 fb49 	bl	80084fe <USB_WritePMA>
            ep->xfer_buff += len;
 8006e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695a      	ldr	r2, [r3, #20]
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7c:	441a      	add	r2, r3
 8006e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6a1a      	ldr	r2, [r3, #32]
 8006e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d90f      	bls.n	8006ec6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6a1a      	ldr	r2, [r3, #32]
 8006eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb6:	1ad2      	subs	r2, r2, r3
 8006eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	621a      	str	r2, [r3, #32]
 8006ec4:	e00e      	b.n	8006ee4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	785b      	ldrb	r3, [r3, #1]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d177      	bne.n	8006fe4 <USB_EPStartXfer+0x4c4>
 8006ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	61bb      	str	r3, [r7, #24]
 8006f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	4413      	add	r3, r2
 8006f16:	61bb      	str	r3, [r7, #24]
 8006f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	011a      	lsls	r2, r3, #4
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	801a      	strh	r2, [r3, #0]
 8006f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f44:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f46:	d921      	bls.n	8006f8c <USB_EPStartXfer+0x46c>
 8006f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f4c:	095b      	lsrs	r3, r3, #5
 8006f4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f56:	f003 031f 	and.w	r3, r3, #31
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d104      	bne.n	8006f68 <USB_EPStartXfer+0x448>
 8006f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f62:	3b01      	subs	r3, #1
 8006f64:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	029b      	lsls	r3, r3, #10
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	801a      	strh	r2, [r3, #0]
 8006f8a:	e056      	b.n	800703a <USB_EPStartXfer+0x51a>
 8006f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <USB_EPStartXfer+0x48a>
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	801a      	strh	r2, [r3, #0]
 8006fa8:	e047      	b.n	800703a <USB_EPStartXfer+0x51a>
 8006faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fae:	085b      	lsrs	r3, r3, #1
 8006fb0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d004      	beq.n	8006fca <USB_EPStartXfer+0x4aa>
 8006fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	029b      	lsls	r3, r3, #10
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	801a      	strh	r2, [r3, #0]
 8006fe2:	e02a      	b.n	800703a <USB_EPStartXfer+0x51a>
 8006fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	785b      	ldrb	r3, [r3, #1]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d122      	bne.n	800703a <USB_EPStartXfer+0x51a>
 8006ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	623b      	str	r3, [r7, #32]
 8007000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007004:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800700e:	b29b      	uxth	r3, r3
 8007010:	461a      	mov	r2, r3
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	4413      	add	r3, r2
 8007016:	623b      	str	r3, [r7, #32]
 8007018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	011a      	lsls	r2, r3, #4
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	4413      	add	r3, r2
 800702a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800702e:	61fb      	str	r3, [r7, #28]
 8007030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007034:	b29a      	uxth	r2, r3
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800703a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800703e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	891b      	ldrh	r3, [r3, #8]
 8007046:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800704a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800704e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6959      	ldr	r1, [r3, #20]
 8007056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705a:	b29b      	uxth	r3, r3
 800705c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007060:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007064:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007068:	6800      	ldr	r0, [r0, #0]
 800706a:	f001 fa48 	bl	80084fe <USB_WritePMA>
 800706e:	e3ee      	b.n	800784e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	785b      	ldrb	r3, [r3, #1]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d177      	bne.n	8007170 <USB_EPStartXfer+0x650>
 8007080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007084:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800708c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007090:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800709a:	b29b      	uxth	r3, r3
 800709c:	461a      	mov	r2, r3
 800709e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070a0:	4413      	add	r3, r2
 80070a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	011a      	lsls	r2, r3, #4
 80070b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070b4:	4413      	add	r3, r2
 80070b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80070ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80070bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070ca:	801a      	strh	r2, [r3, #0]
 80070cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80070d2:	d921      	bls.n	8007118 <USB_EPStartXfer+0x5f8>
 80070d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d8:	095b      	lsrs	r3, r3, #5
 80070da:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80070de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e2:	f003 031f 	and.w	r3, r3, #31
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d104      	bne.n	80070f4 <USB_EPStartXfer+0x5d4>
 80070ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80070ee:	3b01      	subs	r3, #1
 80070f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80070f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80070fe:	b29b      	uxth	r3, r3
 8007100:	029b      	lsls	r3, r3, #10
 8007102:	b29b      	uxth	r3, r3
 8007104:	4313      	orrs	r3, r2
 8007106:	b29b      	uxth	r3, r3
 8007108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800710c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007110:	b29a      	uxth	r2, r3
 8007112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007114:	801a      	strh	r2, [r3, #0]
 8007116:	e056      	b.n	80071c6 <USB_EPStartXfer+0x6a6>
 8007118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10a      	bne.n	8007136 <USB_EPStartXfer+0x616>
 8007120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	b29b      	uxth	r3, r3
 8007126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800712a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800712e:	b29a      	uxth	r2, r3
 8007130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007132:	801a      	strh	r2, [r3, #0]
 8007134:	e047      	b.n	80071c6 <USB_EPStartXfer+0x6a6>
 8007136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713a:	085b      	lsrs	r3, r3, #1
 800713c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	d004      	beq.n	8007156 <USB_EPStartXfer+0x636>
 800714c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007150:	3301      	adds	r3, #1
 8007152:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29a      	uxth	r2, r3
 800715c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007160:	b29b      	uxth	r3, r3
 8007162:	029b      	lsls	r3, r3, #10
 8007164:	b29b      	uxth	r3, r3
 8007166:	4313      	orrs	r3, r2
 8007168:	b29a      	uxth	r2, r3
 800716a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800716c:	801a      	strh	r2, [r3, #0]
 800716e:	e02a      	b.n	80071c6 <USB_EPStartXfer+0x6a6>
 8007170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007174:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	785b      	ldrb	r3, [r3, #1]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d122      	bne.n	80071c6 <USB_EPStartXfer+0x6a6>
 8007180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007184:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	653b      	str	r3, [r7, #80]	@ 0x50
 800718c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007190:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800719a:	b29b      	uxth	r3, r3
 800719c:	461a      	mov	r2, r3
 800719e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071a0:	4413      	add	r3, r2
 80071a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80071a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	011a      	lsls	r2, r3, #4
 80071b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071b4:	4413      	add	r3, r2
 80071b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80071ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80071c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	891b      	ldrh	r3, [r3, #8]
 80071d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6959      	ldr	r1, [r3, #20]
 80071e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80071ec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80071f0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80071f4:	6800      	ldr	r0, [r0, #0]
 80071f6:	f001 f982 	bl	80084fe <USB_WritePMA>
            ep->xfer_buff += len;
 80071fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	695a      	ldr	r2, [r3, #20]
 8007206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720a:	441a      	add	r2, r3
 800720c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800721c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6a1a      	ldr	r2, [r3, #32]
 8007224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	429a      	cmp	r2, r3
 8007232:	d90f      	bls.n	8007254 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6a1a      	ldr	r2, [r3, #32]
 8007240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007244:	1ad2      	subs	r2, r2, r3
 8007246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	621a      	str	r2, [r3, #32]
 8007252:	e00e      	b.n	8007272 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2200      	movs	r2, #0
 8007270:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007276:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	643b      	str	r3, [r7, #64]	@ 0x40
 800727e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	785b      	ldrb	r3, [r3, #1]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d177      	bne.n	800737e <USB_EPStartXfer+0x85e>
 800728e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007292:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	63bb      	str	r3, [r7, #56]	@ 0x38
 800729a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	461a      	mov	r2, r3
 80072ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ae:	4413      	add	r3, r2
 80072b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	011a      	lsls	r2, r3, #4
 80072c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c2:	4413      	add	r3, r2
 80072c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d8:	801a      	strh	r2, [r3, #0]
 80072da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072de:	2b3e      	cmp	r3, #62	@ 0x3e
 80072e0:	d921      	bls.n	8007326 <USB_EPStartXfer+0x806>
 80072e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e6:	095b      	lsrs	r3, r3, #5
 80072e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80072ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f0:	f003 031f 	and.w	r3, r3, #31
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d104      	bne.n	8007302 <USB_EPStartXfer+0x7e2>
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072fc:	3b01      	subs	r3, #1
 80072fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	b29a      	uxth	r2, r3
 8007308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800730c:	b29b      	uxth	r3, r3
 800730e:	029b      	lsls	r3, r3, #10
 8007310:	b29b      	uxth	r3, r3
 8007312:	4313      	orrs	r3, r2
 8007314:	b29b      	uxth	r3, r3
 8007316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800731a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800731e:	b29a      	uxth	r2, r3
 8007320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007322:	801a      	strh	r2, [r3, #0]
 8007324:	e050      	b.n	80073c8 <USB_EPStartXfer+0x8a8>
 8007326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10a      	bne.n	8007344 <USB_EPStartXfer+0x824>
 800732e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	b29b      	uxth	r3, r3
 8007334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800733c:	b29a      	uxth	r2, r3
 800733e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007340:	801a      	strh	r2, [r3, #0]
 8007342:	e041      	b.n	80073c8 <USB_EPStartXfer+0x8a8>
 8007344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007348:	085b      	lsrs	r3, r3, #1
 800734a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800734e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b00      	cmp	r3, #0
 8007358:	d004      	beq.n	8007364 <USB_EPStartXfer+0x844>
 800735a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800735e:	3301      	adds	r3, #1
 8007360:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29a      	uxth	r2, r3
 800736a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800736e:	b29b      	uxth	r3, r3
 8007370:	029b      	lsls	r3, r3, #10
 8007372:	b29b      	uxth	r3, r3
 8007374:	4313      	orrs	r3, r2
 8007376:	b29a      	uxth	r2, r3
 8007378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800737a:	801a      	strh	r2, [r3, #0]
 800737c:	e024      	b.n	80073c8 <USB_EPStartXfer+0x8a8>
 800737e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	785b      	ldrb	r3, [r3, #1]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d11c      	bne.n	80073c8 <USB_EPStartXfer+0x8a8>
 800738e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007392:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800739c:	b29b      	uxth	r3, r3
 800739e:	461a      	mov	r2, r3
 80073a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073a2:	4413      	add	r3, r2
 80073a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80073a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	011a      	lsls	r2, r3, #4
 80073b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073b6:	4413      	add	r3, r2
 80073b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80073c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	895b      	ldrh	r3, [r3, #10]
 80073d4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6959      	ldr	r1, [r3, #20]
 80073e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80073ee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80073f2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80073f6:	6800      	ldr	r0, [r0, #0]
 80073f8:	f001 f881 	bl	80084fe <USB_WritePMA>
 80073fc:	e227      	b.n	800784e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80073fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007402:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800740e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007412:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007434:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	441a      	add	r2, r3
 8007452:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007456:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800745a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800745e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007466:	b29b      	uxth	r3, r3
 8007468:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800746a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800746e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007484:	b29b      	uxth	r3, r3
 8007486:	461a      	mov	r2, r3
 8007488:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800748a:	4413      	add	r3, r2
 800748c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800748e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	011a      	lsls	r2, r3, #4
 800749c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800749e:	4413      	add	r3, r2
 80074a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80074a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80074b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	891b      	ldrh	r3, [r3, #8]
 80074bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6959      	ldr	r1, [r3, #20]
 80074cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074d6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074da:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074de:	6800      	ldr	r0, [r0, #0]
 80074e0:	f001 f80d 	bl	80084fe <USB_WritePMA>
 80074e4:	e1b3      	b.n	800784e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80074e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6a1a      	ldr	r2, [r3, #32]
 80074f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f6:	1ad2      	subs	r2, r2, r3
 80074f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007508:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 80c6 	beq.w	80076b8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800752c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007530:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	673b      	str	r3, [r7, #112]	@ 0x70
 8007538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	785b      	ldrb	r3, [r3, #1]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d177      	bne.n	8007638 <USB_EPStartXfer+0xb18>
 8007548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007558:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007562:	b29b      	uxth	r3, r3
 8007564:	461a      	mov	r2, r3
 8007566:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007568:	4413      	add	r3, r2
 800756a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800756c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	011a      	lsls	r2, r3, #4
 800757a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800757c:	4413      	add	r3, r2
 800757e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007582:	667b      	str	r3, [r7, #100]	@ 0x64
 8007584:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	b29b      	uxth	r3, r3
 800758a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800758e:	b29a      	uxth	r2, r3
 8007590:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007592:	801a      	strh	r2, [r3, #0]
 8007594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007598:	2b3e      	cmp	r3, #62	@ 0x3e
 800759a:	d921      	bls.n	80075e0 <USB_EPStartXfer+0xac0>
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a0:	095b      	lsrs	r3, r3, #5
 80075a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80075a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075aa:	f003 031f 	and.w	r3, r3, #31
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d104      	bne.n	80075bc <USB_EPStartXfer+0xa9c>
 80075b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80075b6:	3b01      	subs	r3, #1
 80075b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80075bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075be:	881b      	ldrh	r3, [r3, #0]
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	029b      	lsls	r3, r3, #10
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	4313      	orrs	r3, r2
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d8:	b29a      	uxth	r2, r3
 80075da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075dc:	801a      	strh	r2, [r3, #0]
 80075de:	e050      	b.n	8007682 <USB_EPStartXfer+0xb62>
 80075e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10a      	bne.n	80075fe <USB_EPStartXfer+0xade>
 80075e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075fa:	801a      	strh	r2, [r3, #0]
 80075fc:	e041      	b.n	8007682 <USB_EPStartXfer+0xb62>
 80075fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007602:	085b      	lsrs	r3, r3, #1
 8007604:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	d004      	beq.n	800761e <USB_EPStartXfer+0xafe>
 8007614:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007618:	3301      	adds	r3, #1
 800761a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800761e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	b29a      	uxth	r2, r3
 8007624:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007628:	b29b      	uxth	r3, r3
 800762a:	029b      	lsls	r3, r3, #10
 800762c:	b29b      	uxth	r3, r3
 800762e:	4313      	orrs	r3, r2
 8007630:	b29a      	uxth	r2, r3
 8007632:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007634:	801a      	strh	r2, [r3, #0]
 8007636:	e024      	b.n	8007682 <USB_EPStartXfer+0xb62>
 8007638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800763c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	785b      	ldrb	r3, [r3, #1]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d11c      	bne.n	8007682 <USB_EPStartXfer+0xb62>
 8007648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007656:	b29b      	uxth	r3, r3
 8007658:	461a      	mov	r2, r3
 800765a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800765c:	4413      	add	r3, r2
 800765e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	011a      	lsls	r2, r3, #4
 800766e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007670:	4413      	add	r3, r2
 8007672:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007676:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767c:	b29a      	uxth	r2, r3
 800767e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007680:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	895b      	ldrh	r3, [r3, #10]
 800768e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6959      	ldr	r1, [r3, #20]
 800769e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076a8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80076ac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80076b0:	6800      	ldr	r0, [r0, #0]
 80076b2:	f000 ff24 	bl	80084fe <USB_WritePMA>
 80076b6:	e0ca      	b.n	800784e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80076b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	785b      	ldrb	r3, [r3, #1]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d177      	bne.n	80077b8 <USB_EPStartXfer+0xc98>
 80076c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80076d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80076e8:	4413      	add	r3, r2
 80076ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80076ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	011a      	lsls	r2, r3, #4
 80076fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80076fc:	4413      	add	r3, r2
 80076fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007702:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007704:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	b29b      	uxth	r3, r3
 800770a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800770e:	b29a      	uxth	r2, r3
 8007710:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007712:	801a      	strh	r2, [r3, #0]
 8007714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007718:	2b3e      	cmp	r3, #62	@ 0x3e
 800771a:	d921      	bls.n	8007760 <USB_EPStartXfer+0xc40>
 800771c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007720:	095b      	lsrs	r3, r3, #5
 8007722:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800772a:	f003 031f 	and.w	r3, r3, #31
 800772e:	2b00      	cmp	r3, #0
 8007730:	d104      	bne.n	800773c <USB_EPStartXfer+0xc1c>
 8007732:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007736:	3b01      	subs	r3, #1
 8007738:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800773c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	b29a      	uxth	r2, r3
 8007742:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007746:	b29b      	uxth	r3, r3
 8007748:	029b      	lsls	r3, r3, #10
 800774a:	b29b      	uxth	r3, r3
 800774c:	4313      	orrs	r3, r2
 800774e:	b29b      	uxth	r3, r3
 8007750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007758:	b29a      	uxth	r2, r3
 800775a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800775c:	801a      	strh	r2, [r3, #0]
 800775e:	e05c      	b.n	800781a <USB_EPStartXfer+0xcfa>
 8007760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10a      	bne.n	800777e <USB_EPStartXfer+0xc5e>
 8007768:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	b29b      	uxth	r3, r3
 800776e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007776:	b29a      	uxth	r2, r3
 8007778:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800777a:	801a      	strh	r2, [r3, #0]
 800777c:	e04d      	b.n	800781a <USB_EPStartXfer+0xcfa>
 800777e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007782:	085b      	lsrs	r3, r3, #1
 8007784:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b00      	cmp	r3, #0
 8007792:	d004      	beq.n	800779e <USB_EPStartXfer+0xc7e>
 8007794:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007798:	3301      	adds	r3, #1
 800779a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800779e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	029b      	lsls	r3, r3, #10
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	4313      	orrs	r3, r2
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077b4:	801a      	strh	r2, [r3, #0]
 80077b6:	e030      	b.n	800781a <USB_EPStartXfer+0xcfa>
 80077b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d128      	bne.n	800781a <USB_EPStartXfer+0xcfa>
 80077c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	461a      	mov	r2, r3
 80077e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077ec:	4413      	add	r3, r2
 80077ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	011a      	lsls	r2, r3, #4
 8007800:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007804:	4413      	add	r3, r2
 8007806:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800780a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800780e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007812:	b29a      	uxth	r2, r3
 8007814:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007818:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800781a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	891b      	ldrh	r3, [r3, #8]
 8007826:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800782a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6959      	ldr	r1, [r3, #20]
 8007836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800783a:	b29b      	uxth	r3, r3
 800783c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007840:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007844:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007848:	6800      	ldr	r0, [r0, #0]
 800784a:	f000 fe58 	bl	80084fe <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800784e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007852:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800785c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007870:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007874:	817b      	strh	r3, [r7, #10]
 8007876:	897b      	ldrh	r3, [r7, #10]
 8007878:	f083 0310 	eor.w	r3, r3, #16
 800787c:	817b      	strh	r3, [r7, #10]
 800787e:	897b      	ldrh	r3, [r7, #10]
 8007880:	f083 0320 	eor.w	r3, r3, #32
 8007884:	817b      	strh	r3, [r7, #10]
 8007886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800788a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	441a      	add	r2, r3
 80078a0:	897b      	ldrh	r3, [r7, #10]
 80078a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	8013      	strh	r3, [r2, #0]
 80078b6:	f000 bcde 	b.w	8008276 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80078ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	7b1b      	ldrb	r3, [r3, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f040 80bb 	bne.w	8007a42 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80078cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	699a      	ldr	r2, [r3, #24]
 80078d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d917      	bls.n	8007918 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80078e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80078f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	699a      	ldr	r2, [r3, #24]
 8007904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007908:	1ad2      	subs	r2, r2, r3
 800790a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	619a      	str	r2, [r3, #24]
 8007916:	e00e      	b.n	8007936 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2200      	movs	r2, #0
 8007934:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007948:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007952:	b29b      	uxth	r3, r3
 8007954:	461a      	mov	r2, r3
 8007956:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800795a:	4413      	add	r3, r2
 800795c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	011a      	lsls	r2, r3, #4
 800796e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007972:	4413      	add	r3, r2
 8007974:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007978:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800797c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	b29b      	uxth	r3, r3
 8007984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007988:	b29a      	uxth	r2, r3
 800798a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800798e:	801a      	strh	r2, [r3, #0]
 8007990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007994:	2b3e      	cmp	r3, #62	@ 0x3e
 8007996:	d924      	bls.n	80079e2 <USB_EPStartXfer+0xec2>
 8007998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800799c:	095b      	lsrs	r3, r3, #5
 800799e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80079a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a6:	f003 031f 	and.w	r3, r3, #31
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d104      	bne.n	80079b8 <USB_EPStartXfer+0xe98>
 80079ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80079b2:	3b01      	subs	r3, #1
 80079b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80079b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	b29a      	uxth	r2, r3
 80079c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	029b      	lsls	r3, r3, #10
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	4313      	orrs	r3, r2
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079dc:	801a      	strh	r2, [r3, #0]
 80079de:	f000 bc10 	b.w	8008202 <USB_EPStartXfer+0x16e2>
 80079e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10c      	bne.n	8007a04 <USB_EPStartXfer+0xee4>
 80079ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a00:	801a      	strh	r2, [r3, #0]
 8007a02:	e3fe      	b.n	8008202 <USB_EPStartXfer+0x16e2>
 8007a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a08:	085b      	lsrs	r3, r3, #1
 8007a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d004      	beq.n	8007a24 <USB_EPStartXfer+0xf04>
 8007a1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007a1e:	3301      	adds	r3, #1
 8007a20:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	029b      	lsls	r3, r3, #10
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	4313      	orrs	r3, r2
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a3e:	801a      	strh	r2, [r3, #0]
 8007a40:	e3df      	b.n	8008202 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	78db      	ldrb	r3, [r3, #3]
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	f040 8218 	bne.w	8007e84 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	785b      	ldrb	r3, [r3, #1]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f040 809d 	bne.w	8007ba0 <USB_EPStartXfer+0x1080>
 8007a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	461a      	mov	r2, r3
 8007a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	011a      	lsls	r2, r3, #4
 8007a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007aac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007abe:	801a      	strh	r2, [r3, #0]
 8007ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ace:	d92b      	bls.n	8007b28 <USB_EPStartXfer+0x1008>
 8007ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	095b      	lsrs	r3, r3, #5
 8007ade:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f003 031f 	and.w	r3, r3, #31
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d104      	bne.n	8007b00 <USB_EPStartXfer+0xfe0>
 8007af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007afa:	3b01      	subs	r3, #1
 8007afc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	029b      	lsls	r3, r3, #10
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	4313      	orrs	r3, r2
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b24:	801a      	strh	r2, [r3, #0]
 8007b26:	e070      	b.n	8007c0a <USB_EPStartXfer+0x10ea>
 8007b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10c      	bne.n	8007b52 <USB_EPStartXfer+0x1032>
 8007b38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b4e:	801a      	strh	r2, [r3, #0]
 8007b50:	e05b      	b.n	8007c0a <USB_EPStartXfer+0x10ea>
 8007b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	085b      	lsrs	r3, r3, #1
 8007b60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	f003 0301 	and.w	r3, r3, #1
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d004      	beq.n	8007b82 <USB_EPStartXfer+0x1062>
 8007b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	029b      	lsls	r3, r3, #10
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	4313      	orrs	r3, r2
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b9c:	801a      	strh	r2, [r3, #0]
 8007b9e:	e034      	b.n	8007c0a <USB_EPStartXfer+0x10ea>
 8007ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d12c      	bne.n	8007c0a <USB_EPStartXfer+0x10ea>
 8007bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	011a      	lsls	r2, r3, #4
 8007be8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007bec:	4413      	add	r3, r2
 8007bee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007c08:	801a      	strh	r2, [r3, #0]
 8007c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	785b      	ldrb	r3, [r3, #1]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f040 809d 	bne.w	8007d64 <USB_EPStartXfer+0x1244>
 8007c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	461a      	mov	r2, r3
 8007c4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c4e:	4413      	add	r3, r2
 8007c50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	011a      	lsls	r2, r3, #4
 8007c62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c66:	4413      	add	r3, r2
 8007c68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c82:	801a      	strh	r2, [r3, #0]
 8007c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c92:	d92b      	bls.n	8007cec <USB_EPStartXfer+0x11cc>
 8007c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	095b      	lsrs	r3, r3, #5
 8007ca2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 031f 	and.w	r3, r3, #31
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d104      	bne.n	8007cc4 <USB_EPStartXfer+0x11a4>
 8007cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007cc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	029b      	lsls	r3, r3, #10
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ce8:	801a      	strh	r2, [r3, #0]
 8007cea:	e069      	b.n	8007dc0 <USB_EPStartXfer+0x12a0>
 8007cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10c      	bne.n	8007d16 <USB_EPStartXfer+0x11f6>
 8007cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d00:	881b      	ldrh	r3, [r3, #0]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d12:	801a      	strh	r2, [r3, #0]
 8007d14:	e054      	b.n	8007dc0 <USB_EPStartXfer+0x12a0>
 8007d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	085b      	lsrs	r3, r3, #1
 8007d24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <USB_EPStartXfer+0x1226>
 8007d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d40:	3301      	adds	r3, #1
 8007d42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d46:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	029b      	lsls	r3, r3, #10
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d60:	801a      	strh	r2, [r3, #0]
 8007d62:	e02d      	b.n	8007dc0 <USB_EPStartXfer+0x12a0>
 8007d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	785b      	ldrb	r3, [r3, #1]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d125      	bne.n	8007dc0 <USB_EPStartXfer+0x12a0>
 8007d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	461a      	mov	r2, r3
 8007d86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	011a      	lsls	r2, r3, #4
 8007d9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007da2:	4413      	add	r3, r2
 8007da4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007da8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007dbe:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 8218 	beq.w	8008202 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007df2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d005      	beq.n	8007e0a <USB_EPStartXfer+0x12ea>
 8007dfe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10d      	bne.n	8007e26 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e0a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f040 81f5 	bne.w	8008202 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e18:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f040 81ee 	bne.w	8008202 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e4c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	441a      	add	r2, r3
 8007e6a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007e6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	8013      	strh	r3, [r2, #0]
 8007e82:	e1be      	b.n	8008202 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	78db      	ldrb	r3, [r3, #3]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	f040 81b4 	bne.w	80081fe <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	699a      	ldr	r2, [r3, #24]
 8007ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d917      	bls.n	8007ee2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699a      	ldr	r2, [r3, #24]
 8007ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ed2:	1ad2      	subs	r2, r2, r3
 8007ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	619a      	str	r2, [r3, #24]
 8007ee0:	e00e      	b.n	8007f00 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2200      	movs	r2, #0
 8007efe:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	785b      	ldrb	r3, [r3, #1]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f040 8085 	bne.w	800801c <USB_EPStartXfer+0x14fc>
 8007f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	461a      	mov	r2, r3
 8007f32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f36:	4413      	add	r3, r2
 8007f38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	011a      	lsls	r2, r3, #4
 8007f4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f4e:	4413      	add	r3, r2
 8007f50:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007f54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f6a:	801a      	strh	r2, [r3, #0]
 8007f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f70:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f72:	d923      	bls.n	8007fbc <USB_EPStartXfer+0x149c>
 8007f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f78:	095b      	lsrs	r3, r3, #5
 8007f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f82:	f003 031f 	and.w	r3, r3, #31
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d104      	bne.n	8007f94 <USB_EPStartXfer+0x1474>
 8007f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007f94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	029b      	lsls	r3, r3, #10
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007fb8:	801a      	strh	r2, [r3, #0]
 8007fba:	e060      	b.n	800807e <USB_EPStartXfer+0x155e>
 8007fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10c      	bne.n	8007fde <USB_EPStartXfer+0x14be>
 8007fc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007fc8:	881b      	ldrh	r3, [r3, #0]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007fda:	801a      	strh	r2, [r3, #0]
 8007fdc:	e04f      	b.n	800807e <USB_EPStartXfer+0x155e>
 8007fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe2:	085b      	lsrs	r3, r3, #1
 8007fe4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d004      	beq.n	8007ffe <USB_EPStartXfer+0x14de>
 8007ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007ffe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	b29a      	uxth	r2, r3
 8008006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800800a:	b29b      	uxth	r3, r3
 800800c:	029b      	lsls	r3, r3, #10
 800800e:	b29b      	uxth	r3, r3
 8008010:	4313      	orrs	r3, r2
 8008012:	b29a      	uxth	r2, r3
 8008014:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008018:	801a      	strh	r2, [r3, #0]
 800801a:	e030      	b.n	800807e <USB_EPStartXfer+0x155e>
 800801c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	785b      	ldrb	r3, [r3, #1]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d128      	bne.n	800807e <USB_EPStartXfer+0x155e>
 800802c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008030:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800803a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800803e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008048:	b29b      	uxth	r3, r3
 800804a:	461a      	mov	r2, r3
 800804c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008050:	4413      	add	r3, r2
 8008052:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800805a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	011a      	lsls	r2, r3, #4
 8008064:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008068:	4413      	add	r3, r2
 800806a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800806e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008076:	b29a      	uxth	r2, r3
 8008078:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800807c:	801a      	strh	r2, [r3, #0]
 800807e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008082:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800808c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	785b      	ldrb	r3, [r3, #1]
 8008098:	2b00      	cmp	r3, #0
 800809a:	f040 8085 	bne.w	80081a8 <USB_EPStartXfer+0x1688>
 800809e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80080ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	461a      	mov	r2, r3
 80080be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80080c2:	4413      	add	r3, r2
 80080c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80080c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	011a      	lsls	r2, r3, #4
 80080d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80080da:	4413      	add	r3, r2
 80080dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80080e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80080f6:	801a      	strh	r2, [r3, #0]
 80080f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80080fe:	d923      	bls.n	8008148 <USB_EPStartXfer+0x1628>
 8008100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008104:	095b      	lsrs	r3, r3, #5
 8008106:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800810a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800810e:	f003 031f 	and.w	r3, r3, #31
 8008112:	2b00      	cmp	r3, #0
 8008114:	d104      	bne.n	8008120 <USB_EPStartXfer+0x1600>
 8008116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800811a:	3b01      	subs	r3, #1
 800811c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008120:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	b29a      	uxth	r2, r3
 8008128:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800812c:	b29b      	uxth	r3, r3
 800812e:	029b      	lsls	r3, r3, #10
 8008130:	b29b      	uxth	r3, r3
 8008132:	4313      	orrs	r3, r2
 8008134:	b29b      	uxth	r3, r3
 8008136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800813a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800813e:	b29a      	uxth	r2, r3
 8008140:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008144:	801a      	strh	r2, [r3, #0]
 8008146:	e05c      	b.n	8008202 <USB_EPStartXfer+0x16e2>
 8008148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10c      	bne.n	800816a <USB_EPStartXfer+0x164a>
 8008150:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	b29b      	uxth	r3, r3
 8008158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800815c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008160:	b29a      	uxth	r2, r3
 8008162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008166:	801a      	strh	r2, [r3, #0]
 8008168:	e04b      	b.n	8008202 <USB_EPStartXfer+0x16e2>
 800816a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800816e:	085b      	lsrs	r3, r3, #1
 8008170:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d004      	beq.n	800818a <USB_EPStartXfer+0x166a>
 8008180:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008184:	3301      	adds	r3, #1
 8008186:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800818a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	b29a      	uxth	r2, r3
 8008192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008196:	b29b      	uxth	r3, r3
 8008198:	029b      	lsls	r3, r3, #10
 800819a:	b29b      	uxth	r3, r3
 800819c:	4313      	orrs	r3, r2
 800819e:	b29a      	uxth	r2, r3
 80081a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081a4:	801a      	strh	r2, [r3, #0]
 80081a6:	e02c      	b.n	8008202 <USB_EPStartXfer+0x16e2>
 80081a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	785b      	ldrb	r3, [r3, #1]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d124      	bne.n	8008202 <USB_EPStartXfer+0x16e2>
 80081b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	461a      	mov	r2, r3
 80081ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80081ce:	4413      	add	r3, r2
 80081d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80081d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	011a      	lsls	r2, r3, #4
 80081e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80081e6:	4413      	add	r3, r2
 80081e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80081ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80081f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80081fa:	801a      	strh	r2, [r3, #0]
 80081fc:	e001      	b.n	8008202 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e03a      	b.n	8008278 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008206:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	b29b      	uxth	r3, r3
 8008220:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008228:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800822c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008230:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008234:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008238:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800823c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008240:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008248:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	441a      	add	r2, r3
 800825e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008262:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008266:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800826a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800826e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008272:	b29b      	uxth	r3, r3
 8008274:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008282:	b480      	push	{r7}
 8008284:	b085      	sub	sp, #20
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	785b      	ldrb	r3, [r3, #1]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d020      	beq.n	80082d6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	881b      	ldrh	r3, [r3, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082aa:	81bb      	strh	r3, [r7, #12]
 80082ac:	89bb      	ldrh	r3, [r7, #12]
 80082ae:	f083 0310 	eor.w	r3, r3, #16
 80082b2:	81bb      	strh	r3, [r7, #12]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	441a      	add	r2, r3
 80082be:	89bb      	ldrh	r3, [r7, #12]
 80082c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	8013      	strh	r3, [r2, #0]
 80082d4:	e01f      	b.n	8008316 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	881b      	ldrh	r3, [r3, #0]
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ec:	81fb      	strh	r3, [r7, #14]
 80082ee:	89fb      	ldrh	r3, [r7, #14]
 80082f0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80082f4:	81fb      	strh	r3, [r7, #14]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	441a      	add	r2, r3
 8008300:	89fb      	ldrh	r3, [r7, #14]
 8008302:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008306:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800830a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800830e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008312:	b29b      	uxth	r3, r3
 8008314:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	bc80      	pop	{r7}
 8008320:	4770      	bx	lr

08008322 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008322:	b480      	push	{r7}
 8008324:	b087      	sub	sp, #28
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	7b1b      	ldrb	r3, [r3, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	f040 809d 	bne.w	8008470 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	785b      	ldrb	r3, [r3, #1]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d04c      	beq.n	80083d8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	823b      	strh	r3, [r7, #16]
 800834c:	8a3b      	ldrh	r3, [r7, #16]
 800834e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008352:	2b00      	cmp	r3, #0
 8008354:	d01b      	beq.n	800838e <USB_EPClearStall+0x6c>
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	b29b      	uxth	r3, r3
 8008364:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800836c:	81fb      	strh	r3, [r7, #14]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	441a      	add	r2, r3
 8008378:	89fb      	ldrh	r3, [r7, #14]
 800837a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800837e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008382:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008386:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800838a:	b29b      	uxth	r3, r3
 800838c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	78db      	ldrb	r3, [r3, #3]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d06c      	beq.n	8008470 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083ac:	81bb      	strh	r3, [r7, #12]
 80083ae:	89bb      	ldrh	r3, [r7, #12]
 80083b0:	f083 0320 	eor.w	r3, r3, #32
 80083b4:	81bb      	strh	r3, [r7, #12]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	441a      	add	r2, r3
 80083c0:	89bb      	ldrh	r3, [r7, #12]
 80083c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	8013      	strh	r3, [r2, #0]
 80083d6:	e04b      	b.n	8008470 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	82fb      	strh	r3, [r7, #22]
 80083e6:	8afb      	ldrh	r3, [r7, #22]
 80083e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d01b      	beq.n	8008428 <USB_EPClearStall+0x106>
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4413      	add	r3, r2
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008406:	82bb      	strh	r3, [r7, #20]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	441a      	add	r2, r3
 8008412:	8abb      	ldrh	r3, [r7, #20]
 8008414:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008418:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800841c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008420:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008424:	b29b      	uxth	r3, r3
 8008426:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	881b      	ldrh	r3, [r3, #0]
 8008434:	b29b      	uxth	r3, r3
 8008436:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800843a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800843e:	827b      	strh	r3, [r7, #18]
 8008440:	8a7b      	ldrh	r3, [r7, #18]
 8008442:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008446:	827b      	strh	r3, [r7, #18]
 8008448:	8a7b      	ldrh	r3, [r7, #18]
 800844a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800844e:	827b      	strh	r3, [r7, #18]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	441a      	add	r2, r3
 800845a:	8a7b      	ldrh	r3, [r7, #18]
 800845c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008460:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008464:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800846c:	b29b      	uxth	r3, r3
 800846e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	371c      	adds	r7, #28
 8008476:	46bd      	mov	sp, r7
 8008478:	bc80      	pop	{r7}
 800847a:	4770      	bx	lr

0800847c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008488:	78fb      	ldrb	r3, [r7, #3]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d103      	bne.n	8008496 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2280      	movs	r2, #128	@ 0x80
 8008492:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	bc80      	pop	{r7}
 80084a0:	4770      	bx	lr

080084a2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bc80      	pop	{r7}
 80084b4:	4770      	bx	lr

080084b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b083      	sub	sp, #12
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bc80      	pop	{r7}
 80084c8:	4770      	bx	lr

080084ca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b085      	sub	sp, #20
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80084d8:	b29b      	uxth	r3, r3
 80084da:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80084dc:	68fb      	ldr	r3, [r7, #12]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bc80      	pop	{r7}
 80084e6:	4770      	bx	lr

080084e8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bc80      	pop	{r7}
 80084fc:	4770      	bx	lr

080084fe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80084fe:	b480      	push	{r7}
 8008500:	b08b      	sub	sp, #44	@ 0x2c
 8008502:	af00      	add	r7, sp, #0
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	60b9      	str	r1, [r7, #8]
 8008508:	4611      	mov	r1, r2
 800850a:	461a      	mov	r2, r3
 800850c:	460b      	mov	r3, r1
 800850e:	80fb      	strh	r3, [r7, #6]
 8008510:	4613      	mov	r3, r2
 8008512:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008514:	88bb      	ldrh	r3, [r7, #4]
 8008516:	3301      	adds	r3, #1
 8008518:	085b      	lsrs	r3, r3, #1
 800851a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008524:	88fb      	ldrh	r3, [r7, #6]
 8008526:	005a      	lsls	r2, r3, #1
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008530:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	627b      	str	r3, [r7, #36]	@ 0x24
 8008536:	e01f      	b.n	8008578 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	3301      	adds	r3, #1
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	b21b      	sxth	r3, r3
 8008546:	021b      	lsls	r3, r3, #8
 8008548:	b21a      	sxth	r2, r3
 800854a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800854e:	4313      	orrs	r3, r2
 8008550:	b21b      	sxth	r3, r3
 8008552:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	8a7a      	ldrh	r2, [r7, #18]
 8008558:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	3302      	adds	r3, #2
 800855e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008560:	6a3b      	ldr	r3, [r7, #32]
 8008562:	3302      	adds	r3, #2
 8008564:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	3301      	adds	r3, #1
 800856a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	3301      	adds	r3, #1
 8008570:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008574:	3b01      	subs	r3, #1
 8008576:	627b      	str	r3, [r7, #36]	@ 0x24
 8008578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1dc      	bne.n	8008538 <USB_WritePMA+0x3a>
  }
}
 800857e:	bf00      	nop
 8008580:	bf00      	nop
 8008582:	372c      	adds	r7, #44	@ 0x2c
 8008584:	46bd      	mov	sp, r7
 8008586:	bc80      	pop	{r7}
 8008588:	4770      	bx	lr

0800858a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800858a:	b480      	push	{r7}
 800858c:	b08b      	sub	sp, #44	@ 0x2c
 800858e:	af00      	add	r7, sp, #0
 8008590:	60f8      	str	r0, [r7, #12]
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	4611      	mov	r1, r2
 8008596:	461a      	mov	r2, r3
 8008598:	460b      	mov	r3, r1
 800859a:	80fb      	strh	r3, [r7, #6]
 800859c:	4613      	mov	r3, r2
 800859e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80085a0:	88bb      	ldrh	r3, [r7, #4]
 80085a2:	085b      	lsrs	r3, r3, #1
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085b0:	88fb      	ldrh	r3, [r7, #6]
 80085b2:	005a      	lsls	r2, r3, #1
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085bc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80085c2:	e01b      	b.n	80085fc <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	3302      	adds	r3, #2
 80085d0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	3301      	adds	r3, #1
 80085de:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	0a1b      	lsrs	r3, r3, #8
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	3301      	adds	r3, #1
 80085ee:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80085f0:	6a3b      	ldr	r3, [r7, #32]
 80085f2:	3302      	adds	r3, #2
 80085f4:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80085f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f8:	3b01      	subs	r3, #1
 80085fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80085fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1e0      	bne.n	80085c4 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008602:	88bb      	ldrh	r3, [r7, #4]
 8008604:	f003 0301 	and.w	r3, r3, #1
 8008608:	b29b      	uxth	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d007      	beq.n	800861e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	b29b      	uxth	r3, r3
 8008614:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	b2da      	uxtb	r2, r3
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	701a      	strb	r2, [r3, #0]
  }
}
 800861e:	bf00      	nop
 8008620:	372c      	adds	r7, #44	@ 0x2c
 8008622:	46bd      	mov	sp, r7
 8008624:	bc80      	pop	{r7}
 8008626:	4770      	bx	lr

08008628 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	7c1b      	ldrb	r3, [r3, #16]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d115      	bne.n	800866c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008640:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008644:	2202      	movs	r2, #2
 8008646:	2181      	movs	r1, #129	@ 0x81
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f001 fe82 	bl	800a352 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008654:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008658:	2202      	movs	r2, #2
 800865a:	2101      	movs	r1, #1
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 fe78 	bl	800a352 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800866a:	e012      	b.n	8008692 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800866c:	2340      	movs	r3, #64	@ 0x40
 800866e:	2202      	movs	r2, #2
 8008670:	2181      	movs	r1, #129	@ 0x81
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f001 fe6d 	bl	800a352 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800867e:	2340      	movs	r3, #64	@ 0x40
 8008680:	2202      	movs	r2, #2
 8008682:	2101      	movs	r1, #1
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f001 fe64 	bl	800a352 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008692:	2308      	movs	r3, #8
 8008694:	2203      	movs	r2, #3
 8008696:	2182      	movs	r1, #130	@ 0x82
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f001 fe5a 	bl	800a352 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2201      	movs	r2, #1
 80086a2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80086a4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80086a8:	f001 ff7a 	bl	800a5a0 <USBD_static_malloc>
 80086ac:	4602      	mov	r2, r0
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d102      	bne.n	80086c4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80086be:	2301      	movs	r3, #1
 80086c0:	73fb      	strb	r3, [r7, #15]
 80086c2:	e026      	b.n	8008712 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086ca:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	2200      	movs	r2, #0
 80086da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	7c1b      	ldrb	r3, [r3, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d109      	bne.n	8008702 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80086f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086f8:	2101      	movs	r1, #1
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f001 ff19 	bl	800a532 <USBD_LL_PrepareReceive>
 8008700:	e007      	b.n	8008712 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008708:	2340      	movs	r3, #64	@ 0x40
 800870a:	2101      	movs	r1, #1
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f001 ff10 	bl	800a532 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008712:	7bfb      	ldrb	r3, [r7, #15]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	460b      	mov	r3, r1
 8008726:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008728:	2300      	movs	r3, #0
 800872a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800872c:	2181      	movs	r1, #129	@ 0x81
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f001 fe35 	bl	800a39e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800873a:	2101      	movs	r1, #1
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f001 fe2e 	bl	800a39e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800874a:	2182      	movs	r1, #130	@ 0x82
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f001 fe26 	bl	800a39e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00e      	beq.n	8008780 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008772:	4618      	mov	r0, r3
 8008774:	f001 ff20 	bl	800a5b8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008780:	7bfb      	ldrb	r3, [r7, #15]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b086      	sub	sp, #24
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800879a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80087a0:	2300      	movs	r3, #0
 80087a2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d039      	beq.n	8008828 <USBD_CDC_Setup+0x9e>
 80087b4:	2b20      	cmp	r3, #32
 80087b6:	d17f      	bne.n	80088b8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	88db      	ldrh	r3, [r3, #6]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d029      	beq.n	8008814 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	b25b      	sxtb	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	da11      	bge.n	80087ee <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80087d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	88d2      	ldrh	r2, [r2, #6]
 80087dc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80087de:	6939      	ldr	r1, [r7, #16]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	88db      	ldrh	r3, [r3, #6]
 80087e4:	461a      	mov	r2, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f001 fa06 	bl	8009bf8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80087ec:	e06b      	b.n	80088c6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	785a      	ldrb	r2, [r3, #1]
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	88db      	ldrh	r3, [r3, #6]
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008804:	6939      	ldr	r1, [r7, #16]
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	88db      	ldrh	r3, [r3, #6]
 800880a:	461a      	mov	r2, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f001 fa21 	bl	8009c54 <USBD_CtlPrepareRx>
      break;
 8008812:	e058      	b.n	80088c6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	7850      	ldrb	r0, [r2, #1]
 8008820:	2200      	movs	r2, #0
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	4798      	blx	r3
      break;
 8008826:	e04e      	b.n	80088c6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	785b      	ldrb	r3, [r3, #1]
 800882c:	2b0b      	cmp	r3, #11
 800882e:	d02e      	beq.n	800888e <USBD_CDC_Setup+0x104>
 8008830:	2b0b      	cmp	r3, #11
 8008832:	dc38      	bgt.n	80088a6 <USBD_CDC_Setup+0x11c>
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <USBD_CDC_Setup+0xb4>
 8008838:	2b0a      	cmp	r3, #10
 800883a:	d014      	beq.n	8008866 <USBD_CDC_Setup+0xdc>
 800883c:	e033      	b.n	80088a6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008844:	2b03      	cmp	r3, #3
 8008846:	d107      	bne.n	8008858 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008848:	f107 030c 	add.w	r3, r7, #12
 800884c:	2202      	movs	r2, #2
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f001 f9d1 	bl	8009bf8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008856:	e02e      	b.n	80088b6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 f962 	bl	8009b24 <USBD_CtlError>
            ret = USBD_FAIL;
 8008860:	2302      	movs	r3, #2
 8008862:	75fb      	strb	r3, [r7, #23]
          break;
 8008864:	e027      	b.n	80088b6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800886c:	2b03      	cmp	r3, #3
 800886e:	d107      	bne.n	8008880 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008870:	f107 030f 	add.w	r3, r7, #15
 8008874:	2201      	movs	r2, #1
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f001 f9bd 	bl	8009bf8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800887e:	e01a      	b.n	80088b6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f001 f94e 	bl	8009b24 <USBD_CtlError>
            ret = USBD_FAIL;
 8008888:	2302      	movs	r3, #2
 800888a:	75fb      	strb	r3, [r7, #23]
          break;
 800888c:	e013      	b.n	80088b6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008894:	2b03      	cmp	r3, #3
 8008896:	d00d      	beq.n	80088b4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f001 f942 	bl	8009b24 <USBD_CtlError>
            ret = USBD_FAIL;
 80088a0:	2302      	movs	r3, #2
 80088a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80088a4:	e006      	b.n	80088b4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f001 f93b 	bl	8009b24 <USBD_CtlError>
          ret = USBD_FAIL;
 80088ae:	2302      	movs	r3, #2
 80088b0:	75fb      	strb	r3, [r7, #23]
          break;
 80088b2:	e000      	b.n	80088b6 <USBD_CDC_Setup+0x12c>
          break;
 80088b4:	bf00      	nop
      }
      break;
 80088b6:	e006      	b.n	80088c6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f001 f932 	bl	8009b24 <USBD_CtlError>
      ret = USBD_FAIL;
 80088c0:	2302      	movs	r3, #2
 80088c2:	75fb      	strb	r3, [r7, #23]
      break;
 80088c4:	bf00      	nop
  }

  return ret;
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	460b      	mov	r3, r1
 80088da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088e2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80088ea:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d03a      	beq.n	800896c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80088f6:	78fa      	ldrb	r2, [r7, #3]
 80088f8:	6879      	ldr	r1, [r7, #4]
 80088fa:	4613      	mov	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	440b      	add	r3, r1
 8008904:	331c      	adds	r3, #28
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d029      	beq.n	8008960 <USBD_CDC_DataIn+0x90>
 800890c:	78fa      	ldrb	r2, [r7, #3]
 800890e:	6879      	ldr	r1, [r7, #4]
 8008910:	4613      	mov	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	440b      	add	r3, r1
 800891a:	331c      	adds	r3, #28
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	78f9      	ldrb	r1, [r7, #3]
 8008920:	68b8      	ldr	r0, [r7, #8]
 8008922:	460b      	mov	r3, r1
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	440b      	add	r3, r1
 8008928:	00db      	lsls	r3, r3, #3
 800892a:	4403      	add	r3, r0
 800892c:	3320      	adds	r3, #32
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	fbb2 f1f3 	udiv	r1, r2, r3
 8008934:	fb01 f303 	mul.w	r3, r1, r3
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d110      	bne.n	8008960 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	4613      	mov	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	440b      	add	r3, r1
 800894c:	331c      	adds	r3, #28
 800894e:	2200      	movs	r2, #0
 8008950:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008952:	78f9      	ldrb	r1, [r7, #3]
 8008954:	2300      	movs	r3, #0
 8008956:	2200      	movs	r2, #0
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f001 fdc7 	bl	800a4ec <USBD_LL_Transmit>
 800895e:	e003      	b.n	8008968 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	e000      	b.n	800896e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800896c:	2302      	movs	r3, #2
  }
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	460b      	mov	r3, r1
 8008980:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008988:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800898a:	78fb      	ldrb	r3, [r7, #3]
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f001 fdf2 	bl	800a578 <USBD_LL_GetRxDataSize>
 8008994:	4602      	mov	r2, r0
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00d      	beq.n	80089c2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80089ba:	4611      	mov	r1, r2
 80089bc:	4798      	blx	r3

    return USBD_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	e000      	b.n	80089c4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80089c2:	2302      	movs	r3, #2
  }
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089da:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d014      	beq.n	8008a10 <USBD_CDC_EP0_RxReady+0x44>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80089ec:	2bff      	cmp	r3, #255	@ 0xff
 80089ee:	d00f      	beq.n	8008a10 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80089fe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a06:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	22ff      	movs	r2, #255	@ 0xff
 8008a0c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
	...

08008a1c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2243      	movs	r2, #67	@ 0x43
 8008a28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008a2a:	4b03      	ldr	r3, [pc, #12]	@ (8008a38 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bc80      	pop	{r7}
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	200000ac 	.word	0x200000ac

08008a3c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2243      	movs	r2, #67	@ 0x43
 8008a48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008a4a:	4b03      	ldr	r3, [pc, #12]	@ (8008a58 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bc80      	pop	{r7}
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	20000068 	.word	0x20000068

08008a5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2243      	movs	r2, #67	@ 0x43
 8008a68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008a6a:	4b03      	ldr	r3, [pc, #12]	@ (8008a78 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bc80      	pop	{r7}
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	200000f0 	.word	0x200000f0

08008a7c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	220a      	movs	r2, #10
 8008a88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008a8a:	4b03      	ldr	r3, [pc, #12]	@ (8008a98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bc80      	pop	{r7}
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	20000024 	.word	0x20000024

08008a9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008aa6:	2302      	movs	r3, #2
 8008aa8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d005      	beq.n	8008abc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3714      	adds	r7, #20
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bc80      	pop	{r7}
 8008ac6:	4770      	bx	lr

08008ac8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b087      	sub	sp, #28
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008adc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008ae6:	88fa      	ldrh	r2, [r7, #6]
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	371c      	adds	r7, #28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bc80      	pop	{r7}
 8008af8:	4770      	bx	lr

08008afa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b085      	sub	sp, #20
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b0a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bc80      	pop	{r7}
 8008b1e:	4770      	bx	lr

08008b20 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d01c      	beq.n	8008b74 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d115      	bne.n	8008b70 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	2181      	movs	r1, #129	@ 0x81
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f001 fcc0 	bl	800a4ec <USBD_LL_Transmit>

      return USBD_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	e002      	b.n	8008b76 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e000      	b.n	8008b76 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008b74:	2302      	movs	r3, #2
  }
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b8c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d017      	beq.n	8008bc8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	7c1b      	ldrb	r3, [r3, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d109      	bne.n	8008bb4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ba6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008baa:	2101      	movs	r1, #1
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f001 fcc0 	bl	800a532 <USBD_LL_PrepareReceive>
 8008bb2:	e007      	b.n	8008bc4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008bba:	2340      	movs	r3, #64	@ 0x40
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f001 fcb7 	bl	800a532 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	e000      	b.n	8008bca <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008bc8:	2302      	movs	r3, #2
  }
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b084      	sub	sp, #16
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	60f8      	str	r0, [r7, #12]
 8008bda:	60b9      	str	r1, [r7, #8]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008be6:	2302      	movs	r3, #2
 8008be8:	e01a      	b.n	8008c20 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	79fa      	ldrb	r2, [r7, #7]
 8008c16:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f001 fb25 	bl	800a268 <USBD_LL_Init>

  return USBD_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d006      	beq.n	8008c4a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73fb      	strb	r3, [r7, #15]
 8008c48:	e001      	b.n	8008c4e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bc80      	pop	{r7}
 8008c58:	4770      	bx	lr

08008c5a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b082      	sub	sp, #8
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f001 fb5a 	bl	800a31c <USBD_LL_Start>

  return USBD_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bc80      	pop	{r7}
 8008c84:	4770      	bx	lr

08008c86 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b084      	sub	sp, #16
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	460b      	mov	r3, r1
 8008c90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008c92:	2302      	movs	r3, #2
 8008c94:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00c      	beq.n	8008cba <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	78fa      	ldrb	r2, [r7, #3]
 8008caa:	4611      	mov	r1, r2
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	4798      	blx	r3
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	78fa      	ldrb	r2, [r7, #3]
 8008cda:	4611      	mov	r1, r2
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	4798      	blx	r3

  return USBD_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b082      	sub	sp, #8
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 fed8 	bl	8009ab2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008d10:	461a      	mov	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008d1e:	f003 031f 	and.w	r3, r3, #31
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d016      	beq.n	8008d54 <USBD_LL_SetupStage+0x6a>
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d81c      	bhi.n	8008d64 <USBD_LL_SetupStage+0x7a>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <USBD_LL_SetupStage+0x4a>
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d008      	beq.n	8008d44 <USBD_LL_SetupStage+0x5a>
 8008d32:	e017      	b.n	8008d64 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f9cb 	bl	80090d8 <USBD_StdDevReq>
      break;
 8008d42:	e01a      	b.n	8008d7a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fa2d 	bl	80091ac <USBD_StdItfReq>
      break;
 8008d52:	e012      	b.n	8008d7a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fa6d 	bl	800923c <USBD_StdEPReq>
      break;
 8008d62:	e00a      	b.n	8008d7a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008d6a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f001 fb32 	bl	800a3dc <USBD_LL_StallEP>
      break;
 8008d78:	bf00      	nop
  }

  return USBD_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	607a      	str	r2, [r7, #4]
 8008d90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008d92:	7afb      	ldrb	r3, [r7, #11]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d14b      	bne.n	8008e30 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008d9e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	d134      	bne.n	8008e14 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	68da      	ldr	r2, [r3, #12]
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d919      	bls.n	8008dea <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	68da      	ldr	r2, [r3, #12]
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	1ad2      	subs	r2, r2, r3
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d203      	bcs.n	8008dd8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	e002      	b.n	8008dde <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	461a      	mov	r2, r3
 8008de0:	6879      	ldr	r1, [r7, #4]
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f000 ff54 	bl	8009c90 <USBD_CtlContinueRx>
 8008de8:	e038      	b.n	8008e5c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00a      	beq.n	8008e0c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008dfc:	2b03      	cmp	r3, #3
 8008dfe:	d105      	bne.n	8008e0c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 ff51 	bl	8009cb4 <USBD_CtlSendStatus>
 8008e12:	e023      	b.n	8008e5c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e1a:	2b05      	cmp	r3, #5
 8008e1c:	d11e      	bne.n	8008e5c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008e26:	2100      	movs	r1, #0
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f001 fad7 	bl	800a3dc <USBD_LL_StallEP>
 8008e2e:	e015      	b.n	8008e5c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00d      	beq.n	8008e58 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d108      	bne.n	8008e58 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	7afa      	ldrb	r2, [r7, #11]
 8008e50:	4611      	mov	r1, r2
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	4798      	blx	r3
 8008e56:	e001      	b.n	8008e5c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e58:	2302      	movs	r3, #2
 8008e5a:	e000      	b.n	8008e5e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b086      	sub	sp, #24
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	60f8      	str	r0, [r7, #12]
 8008e6e:	460b      	mov	r3, r1
 8008e70:	607a      	str	r2, [r7, #4]
 8008e72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008e74:	7afb      	ldrb	r3, [r7, #11]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d17f      	bne.n	8008f7a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	3314      	adds	r3, #20
 8008e7e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d15c      	bne.n	8008f44 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	68da      	ldr	r2, [r3, #12]
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d915      	bls.n	8008ec2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	68da      	ldr	r2, [r3, #12]
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	1ad2      	subs	r2, r2, r3
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	461a      	mov	r2, r3
 8008eac:	6879      	ldr	r1, [r7, #4]
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f000 febe 	bl	8009c30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	2100      	movs	r1, #0
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f001 fb39 	bl	800a532 <USBD_LL_PrepareReceive>
 8008ec0:	e04e      	b.n	8008f60 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	6912      	ldr	r2, [r2, #16]
 8008eca:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ece:	fb01 f202 	mul.w	r2, r1, r2
 8008ed2:	1a9b      	subs	r3, r3, r2
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d11c      	bne.n	8008f12 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	689a      	ldr	r2, [r3, #8]
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d316      	bcc.n	8008f12 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	689a      	ldr	r2, [r3, #8]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d20f      	bcs.n	8008f12 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f000 fe9a 	bl	8009c30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f04:	2300      	movs	r3, #0
 8008f06:	2200      	movs	r2, #0
 8008f08:	2100      	movs	r1, #0
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f001 fb11 	bl	800a532 <USBD_LL_PrepareReceive>
 8008f10:	e026      	b.n	8008f60 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00a      	beq.n	8008f34 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f24:	2b03      	cmp	r3, #3
 8008f26:	d105      	bne.n	8008f34 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008f34:	2180      	movs	r1, #128	@ 0x80
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f001 fa50 	bl	800a3dc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f000 fecc 	bl	8009cda <USBD_CtlReceiveStatus>
 8008f42:	e00d      	b.n	8008f60 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f4a:	2b04      	cmp	r3, #4
 8008f4c:	d004      	beq.n	8008f58 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d103      	bne.n	8008f60 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008f58:	2180      	movs	r1, #128	@ 0x80
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f001 fa3e 	bl	800a3dc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d11d      	bne.n	8008fa6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f7ff fe81 	bl	8008c72 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008f78:	e015      	b.n	8008fa6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f80:	695b      	ldr	r3, [r3, #20]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00d      	beq.n	8008fa2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008f8c:	2b03      	cmp	r3, #3
 8008f8e:	d108      	bne.n	8008fa2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	7afa      	ldrb	r2, [r7, #11]
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	4798      	blx	r3
 8008fa0:	e001      	b.n	8008fa6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	e000      	b.n	8008fa8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3718      	adds	r7, #24
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fb8:	2340      	movs	r3, #64	@ 0x40
 8008fba:	2200      	movs	r2, #0
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f001 f9c7 	bl	800a352 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2240      	movs	r2, #64	@ 0x40
 8008fd0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fd4:	2340      	movs	r3, #64	@ 0x40
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2180      	movs	r1, #128	@ 0x80
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f001 f9b9 	bl	800a352 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2240      	movs	r2, #64	@ 0x40
 8008fea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009010:	2b00      	cmp	r3, #0
 8009012:	d009      	beq.n	8009028 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	6852      	ldr	r2, [r2, #4]
 8009020:	b2d2      	uxtb	r2, r2
 8009022:	4611      	mov	r1, r2
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	4798      	blx	r3
  }

  return USBD_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009032:	b480      	push	{r7}
 8009034:	b083      	sub	sp, #12
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	460b      	mov	r3, r1
 800903c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	78fa      	ldrb	r2, [r7, #3]
 8009042:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	bc80      	pop	{r7}
 800904e:	4770      	bx	lr

08009050 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2204      	movs	r2, #4
 8009068:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	bc80      	pop	{r7}
 8009076:	4770      	bx	lr

08009078 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009086:	2b04      	cmp	r3, #4
 8009088:	d105      	bne.n	8009096 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	bc80      	pop	{r7}
 80090a0:	4770      	bx	lr

080090a2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b082      	sub	sp, #8
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090b0:	2b03      	cmp	r3, #3
 80090b2:	d10b      	bne.n	80090cc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ba:	69db      	ldr	r3, [r3, #28]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d005      	beq.n	80090cc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090c6:	69db      	ldr	r3, [r3, #28]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
	...

080090d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80090ee:	2b40      	cmp	r3, #64	@ 0x40
 80090f0:	d005      	beq.n	80090fe <USBD_StdDevReq+0x26>
 80090f2:	2b40      	cmp	r3, #64	@ 0x40
 80090f4:	d84f      	bhi.n	8009196 <USBD_StdDevReq+0xbe>
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d009      	beq.n	800910e <USBD_StdDevReq+0x36>
 80090fa:	2b20      	cmp	r3, #32
 80090fc:	d14b      	bne.n	8009196 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	4798      	blx	r3
      break;
 800910c:	e048      	b.n	80091a0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	785b      	ldrb	r3, [r3, #1]
 8009112:	2b09      	cmp	r3, #9
 8009114:	d839      	bhi.n	800918a <USBD_StdDevReq+0xb2>
 8009116:	a201      	add	r2, pc, #4	@ (adr r2, 800911c <USBD_StdDevReq+0x44>)
 8009118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911c:	0800916d 	.word	0x0800916d
 8009120:	08009181 	.word	0x08009181
 8009124:	0800918b 	.word	0x0800918b
 8009128:	08009177 	.word	0x08009177
 800912c:	0800918b 	.word	0x0800918b
 8009130:	0800914f 	.word	0x0800914f
 8009134:	08009145 	.word	0x08009145
 8009138:	0800918b 	.word	0x0800918b
 800913c:	08009163 	.word	0x08009163
 8009140:	08009159 	.word	0x08009159
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f9dc 	bl	8009504 <USBD_GetDescriptor>
          break;
 800914c:	e022      	b.n	8009194 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fb3f 	bl	80097d4 <USBD_SetAddress>
          break;
 8009156:	e01d      	b.n	8009194 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fb7e 	bl	800985c <USBD_SetConfig>
          break;
 8009160:	e018      	b.n	8009194 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fc07 	bl	8009978 <USBD_GetConfig>
          break;
 800916a:	e013      	b.n	8009194 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fc37 	bl	80099e2 <USBD_GetStatus>
          break;
 8009174:	e00e      	b.n	8009194 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fc65 	bl	8009a48 <USBD_SetFeature>
          break;
 800917e:	e009      	b.n	8009194 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fc74 	bl	8009a70 <USBD_ClrFeature>
          break;
 8009188:	e004      	b.n	8009194 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fcc9 	bl	8009b24 <USBD_CtlError>
          break;
 8009192:	bf00      	nop
      }
      break;
 8009194:	e004      	b.n	80091a0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fcc3 	bl	8009b24 <USBD_CtlError>
      break;
 800919e:	bf00      	nop
  }

  return ret;
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop

080091ac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091c2:	2b40      	cmp	r3, #64	@ 0x40
 80091c4:	d005      	beq.n	80091d2 <USBD_StdItfReq+0x26>
 80091c6:	2b40      	cmp	r3, #64	@ 0x40
 80091c8:	d82e      	bhi.n	8009228 <USBD_StdItfReq+0x7c>
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <USBD_StdItfReq+0x26>
 80091ce:	2b20      	cmp	r3, #32
 80091d0:	d12a      	bne.n	8009228 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091d8:	3b01      	subs	r3, #1
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d81d      	bhi.n	800921a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	889b      	ldrh	r3, [r3, #4]
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d813      	bhi.n	8009210 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	6839      	ldr	r1, [r7, #0]
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	4798      	blx	r3
 80091f6:	4603      	mov	r3, r0
 80091f8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	88db      	ldrh	r3, [r3, #6]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d110      	bne.n	8009224 <USBD_StdItfReq+0x78>
 8009202:	7bfb      	ldrb	r3, [r7, #15]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10d      	bne.n	8009224 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 fd53 	bl	8009cb4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800920e:	e009      	b.n	8009224 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fc86 	bl	8009b24 <USBD_CtlError>
          break;
 8009218:	e004      	b.n	8009224 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fc81 	bl	8009b24 <USBD_CtlError>
          break;
 8009222:	e000      	b.n	8009226 <USBD_StdItfReq+0x7a>
          break;
 8009224:	bf00      	nop
      }
      break;
 8009226:	e004      	b.n	8009232 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fc7a 	bl	8009b24 <USBD_CtlError>
      break;
 8009230:	bf00      	nop
  }

  return USBD_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	889b      	ldrh	r3, [r3, #4]
 800924e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009258:	2b40      	cmp	r3, #64	@ 0x40
 800925a:	d007      	beq.n	800926c <USBD_StdEPReq+0x30>
 800925c:	2b40      	cmp	r3, #64	@ 0x40
 800925e:	f200 8146 	bhi.w	80094ee <USBD_StdEPReq+0x2b2>
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00a      	beq.n	800927c <USBD_StdEPReq+0x40>
 8009266:	2b20      	cmp	r3, #32
 8009268:	f040 8141 	bne.w	80094ee <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	4798      	blx	r3
      break;
 800927a:	e13d      	b.n	80094f8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009284:	2b20      	cmp	r3, #32
 8009286:	d10a      	bne.n	800929e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	6839      	ldr	r1, [r7, #0]
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	4798      	blx	r3
 8009296:	4603      	mov	r3, r0
 8009298:	73fb      	strb	r3, [r7, #15]

        return ret;
 800929a:	7bfb      	ldrb	r3, [r7, #15]
 800929c:	e12d      	b.n	80094fa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	785b      	ldrb	r3, [r3, #1]
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d007      	beq.n	80092b6 <USBD_StdEPReq+0x7a>
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	f300 811b 	bgt.w	80094e2 <USBD_StdEPReq+0x2a6>
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d072      	beq.n	8009396 <USBD_StdEPReq+0x15a>
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d03a      	beq.n	800932a <USBD_StdEPReq+0xee>
 80092b4:	e115      	b.n	80094e2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d002      	beq.n	80092c6 <USBD_StdEPReq+0x8a>
 80092c0:	2b03      	cmp	r3, #3
 80092c2:	d015      	beq.n	80092f0 <USBD_StdEPReq+0xb4>
 80092c4:	e02b      	b.n	800931e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092c6:	7bbb      	ldrb	r3, [r7, #14]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00c      	beq.n	80092e6 <USBD_StdEPReq+0xaa>
 80092cc:	7bbb      	ldrb	r3, [r7, #14]
 80092ce:	2b80      	cmp	r3, #128	@ 0x80
 80092d0:	d009      	beq.n	80092e6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80092d2:	7bbb      	ldrb	r3, [r7, #14]
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f001 f880 	bl	800a3dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80092dc:	2180      	movs	r1, #128	@ 0x80
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f001 f87c 	bl	800a3dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092e4:	e020      	b.n	8009328 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fc1b 	bl	8009b24 <USBD_CtlError>
              break;
 80092ee:	e01b      	b.n	8009328 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	885b      	ldrh	r3, [r3, #2]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10e      	bne.n	8009316 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80092f8:	7bbb      	ldrb	r3, [r7, #14]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00b      	beq.n	8009316 <USBD_StdEPReq+0xda>
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	2b80      	cmp	r3, #128	@ 0x80
 8009302:	d008      	beq.n	8009316 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	88db      	ldrh	r3, [r3, #6]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d104      	bne.n	8009316 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800930c:	7bbb      	ldrb	r3, [r7, #14]
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f001 f863 	bl	800a3dc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fccc 	bl	8009cb4 <USBD_CtlSendStatus>

              break;
 800931c:	e004      	b.n	8009328 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fbff 	bl	8009b24 <USBD_CtlError>
              break;
 8009326:	bf00      	nop
          }
          break;
 8009328:	e0e0      	b.n	80094ec <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009330:	2b02      	cmp	r3, #2
 8009332:	d002      	beq.n	800933a <USBD_StdEPReq+0xfe>
 8009334:	2b03      	cmp	r3, #3
 8009336:	d015      	beq.n	8009364 <USBD_StdEPReq+0x128>
 8009338:	e026      	b.n	8009388 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800933a:	7bbb      	ldrb	r3, [r7, #14]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00c      	beq.n	800935a <USBD_StdEPReq+0x11e>
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	2b80      	cmp	r3, #128	@ 0x80
 8009344:	d009      	beq.n	800935a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009346:	7bbb      	ldrb	r3, [r7, #14]
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f001 f846 	bl	800a3dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009350:	2180      	movs	r1, #128	@ 0x80
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 f842 	bl	800a3dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009358:	e01c      	b.n	8009394 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fbe1 	bl	8009b24 <USBD_CtlError>
              break;
 8009362:	e017      	b.n	8009394 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	885b      	ldrh	r3, [r3, #2]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d112      	bne.n	8009392 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009372:	2b00      	cmp	r3, #0
 8009374:	d004      	beq.n	8009380 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009376:	7bbb      	ldrb	r3, [r7, #14]
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f001 f84d 	bl	800a41a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fc97 	bl	8009cb4 <USBD_CtlSendStatus>
              }
              break;
 8009386:	e004      	b.n	8009392 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fbca 	bl	8009b24 <USBD_CtlError>
              break;
 8009390:	e000      	b.n	8009394 <USBD_StdEPReq+0x158>
              break;
 8009392:	bf00      	nop
          }
          break;
 8009394:	e0aa      	b.n	80094ec <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800939c:	2b02      	cmp	r3, #2
 800939e:	d002      	beq.n	80093a6 <USBD_StdEPReq+0x16a>
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d032      	beq.n	800940a <USBD_StdEPReq+0x1ce>
 80093a4:	e097      	b.n	80094d6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093a6:	7bbb      	ldrb	r3, [r7, #14]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d007      	beq.n	80093bc <USBD_StdEPReq+0x180>
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
 80093ae:	2b80      	cmp	r3, #128	@ 0x80
 80093b0:	d004      	beq.n	80093bc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fbb5 	bl	8009b24 <USBD_CtlError>
                break;
 80093ba:	e091      	b.n	80094e0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	da0b      	bge.n	80093dc <USBD_StdEPReq+0x1a0>
 80093c4:	7bbb      	ldrb	r3, [r7, #14]
 80093c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093ca:	4613      	mov	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	3310      	adds	r3, #16
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	4413      	add	r3, r2
 80093d8:	3304      	adds	r3, #4
 80093da:	e00b      	b.n	80093f4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093e2:	4613      	mov	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	4413      	add	r3, r2
 80093f2:	3304      	adds	r3, #4
 80093f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	2200      	movs	r2, #0
 80093fa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2202      	movs	r2, #2
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fbf8 	bl	8009bf8 <USBD_CtlSendData>
              break;
 8009408:	e06a      	b.n	80094e0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800940a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800940e:	2b00      	cmp	r3, #0
 8009410:	da11      	bge.n	8009436 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009412:	7bbb      	ldrb	r3, [r7, #14]
 8009414:	f003 020f 	and.w	r2, r3, #15
 8009418:	6879      	ldr	r1, [r7, #4]
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	440b      	add	r3, r1
 8009424:	3318      	adds	r3, #24
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d117      	bne.n	800945c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fb78 	bl	8009b24 <USBD_CtlError>
                  break;
 8009434:	e054      	b.n	80094e0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009436:	7bbb      	ldrb	r3, [r7, #14]
 8009438:	f003 020f 	and.w	r2, r3, #15
 800943c:	6879      	ldr	r1, [r7, #4]
 800943e:	4613      	mov	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	440b      	add	r3, r1
 8009448:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d104      	bne.n	800945c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fb65 	bl	8009b24 <USBD_CtlError>
                  break;
 800945a:	e041      	b.n	80094e0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800945c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009460:	2b00      	cmp	r3, #0
 8009462:	da0b      	bge.n	800947c <USBD_StdEPReq+0x240>
 8009464:	7bbb      	ldrb	r3, [r7, #14]
 8009466:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800946a:	4613      	mov	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	4413      	add	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	3310      	adds	r3, #16
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	4413      	add	r3, r2
 8009478:	3304      	adds	r3, #4
 800947a:	e00b      	b.n	8009494 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800947c:	7bbb      	ldrb	r3, [r7, #14]
 800947e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009482:	4613      	mov	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4413      	add	r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	4413      	add	r3, r2
 8009492:	3304      	adds	r3, #4
 8009494:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009496:	7bbb      	ldrb	r3, [r7, #14]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d002      	beq.n	80094a2 <USBD_StdEPReq+0x266>
 800949c:	7bbb      	ldrb	r3, [r7, #14]
 800949e:	2b80      	cmp	r3, #128	@ 0x80
 80094a0:	d103      	bne.n	80094aa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	2200      	movs	r2, #0
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	e00e      	b.n	80094c8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80094aa:	7bbb      	ldrb	r3, [r7, #14]
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 ffd2 	bl	800a458 <USBD_LL_IsStallEP>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d003      	beq.n	80094c2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2201      	movs	r2, #1
 80094be:	601a      	str	r2, [r3, #0]
 80094c0:	e002      	b.n	80094c8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2200      	movs	r2, #0
 80094c6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2202      	movs	r2, #2
 80094cc:	4619      	mov	r1, r3
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fb92 	bl	8009bf8 <USBD_CtlSendData>
              break;
 80094d4:	e004      	b.n	80094e0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fb23 	bl	8009b24 <USBD_CtlError>
              break;
 80094de:	bf00      	nop
          }
          break;
 80094e0:	e004      	b.n	80094ec <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fb1d 	bl	8009b24 <USBD_CtlError>
          break;
 80094ea:	bf00      	nop
      }
      break;
 80094ec:	e004      	b.n	80094f8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fb17 	bl	8009b24 <USBD_CtlError>
      break;
 80094f6:	bf00      	nop
  }

  return ret;
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
	...

08009504 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800950e:	2300      	movs	r3, #0
 8009510:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009516:	2300      	movs	r3, #0
 8009518:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	885b      	ldrh	r3, [r3, #2]
 800951e:	0a1b      	lsrs	r3, r3, #8
 8009520:	b29b      	uxth	r3, r3
 8009522:	3b01      	subs	r3, #1
 8009524:	2b06      	cmp	r3, #6
 8009526:	f200 8128 	bhi.w	800977a <USBD_GetDescriptor+0x276>
 800952a:	a201      	add	r2, pc, #4	@ (adr r2, 8009530 <USBD_GetDescriptor+0x2c>)
 800952c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009530:	0800954d 	.word	0x0800954d
 8009534:	08009565 	.word	0x08009565
 8009538:	080095a5 	.word	0x080095a5
 800953c:	0800977b 	.word	0x0800977b
 8009540:	0800977b 	.word	0x0800977b
 8009544:	0800971b 	.word	0x0800971b
 8009548:	08009747 	.word	0x08009747
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	7c12      	ldrb	r2, [r2, #16]
 8009558:	f107 0108 	add.w	r1, r7, #8
 800955c:	4610      	mov	r0, r2
 800955e:	4798      	blx	r3
 8009560:	60f8      	str	r0, [r7, #12]
      break;
 8009562:	e112      	b.n	800978a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	7c1b      	ldrb	r3, [r3, #16]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10d      	bne.n	8009588 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009574:	f107 0208 	add.w	r2, r7, #8
 8009578:	4610      	mov	r0, r2
 800957a:	4798      	blx	r3
 800957c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	3301      	adds	r3, #1
 8009582:	2202      	movs	r2, #2
 8009584:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009586:	e100      	b.n	800978a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800958e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009590:	f107 0208 	add.w	r2, r7, #8
 8009594:	4610      	mov	r0, r2
 8009596:	4798      	blx	r3
 8009598:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3301      	adds	r3, #1
 800959e:	2202      	movs	r2, #2
 80095a0:	701a      	strb	r2, [r3, #0]
      break;
 80095a2:	e0f2      	b.n	800978a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	885b      	ldrh	r3, [r3, #2]
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b05      	cmp	r3, #5
 80095ac:	f200 80ac 	bhi.w	8009708 <USBD_GetDescriptor+0x204>
 80095b0:	a201      	add	r2, pc, #4	@ (adr r2, 80095b8 <USBD_GetDescriptor+0xb4>)
 80095b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b6:	bf00      	nop
 80095b8:	080095d1 	.word	0x080095d1
 80095bc:	08009605 	.word	0x08009605
 80095c0:	08009639 	.word	0x08009639
 80095c4:	0800966d 	.word	0x0800966d
 80095c8:	080096a1 	.word	0x080096a1
 80095cc:	080096d5 	.word	0x080096d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00b      	beq.n	80095f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	7c12      	ldrb	r2, [r2, #16]
 80095e8:	f107 0108 	add.w	r1, r7, #8
 80095ec:	4610      	mov	r0, r2
 80095ee:	4798      	blx	r3
 80095f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095f2:	e091      	b.n	8009718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095f4:	6839      	ldr	r1, [r7, #0]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fa94 	bl	8009b24 <USBD_CtlError>
            err++;
 80095fc:	7afb      	ldrb	r3, [r7, #11]
 80095fe:	3301      	adds	r3, #1
 8009600:	72fb      	strb	r3, [r7, #11]
          break;
 8009602:	e089      	b.n	8009718 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00b      	beq.n	8009628 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	7c12      	ldrb	r2, [r2, #16]
 800961c:	f107 0108 	add.w	r1, r7, #8
 8009620:	4610      	mov	r0, r2
 8009622:	4798      	blx	r3
 8009624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009626:	e077      	b.n	8009718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fa7a 	bl	8009b24 <USBD_CtlError>
            err++;
 8009630:	7afb      	ldrb	r3, [r7, #11]
 8009632:	3301      	adds	r3, #1
 8009634:	72fb      	strb	r3, [r7, #11]
          break;
 8009636:	e06f      	b.n	8009718 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00b      	beq.n	800965c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	7c12      	ldrb	r2, [r2, #16]
 8009650:	f107 0108 	add.w	r1, r7, #8
 8009654:	4610      	mov	r0, r2
 8009656:	4798      	blx	r3
 8009658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800965a:	e05d      	b.n	8009718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800965c:	6839      	ldr	r1, [r7, #0]
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fa60 	bl	8009b24 <USBD_CtlError>
            err++;
 8009664:	7afb      	ldrb	r3, [r7, #11]
 8009666:	3301      	adds	r3, #1
 8009668:	72fb      	strb	r3, [r7, #11]
          break;
 800966a:	e055      	b.n	8009718 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00b      	beq.n	8009690 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	7c12      	ldrb	r2, [r2, #16]
 8009684:	f107 0108 	add.w	r1, r7, #8
 8009688:	4610      	mov	r0, r2
 800968a:	4798      	blx	r3
 800968c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800968e:	e043      	b.n	8009718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009690:	6839      	ldr	r1, [r7, #0]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 fa46 	bl	8009b24 <USBD_CtlError>
            err++;
 8009698:	7afb      	ldrb	r3, [r7, #11]
 800969a:	3301      	adds	r3, #1
 800969c:	72fb      	strb	r3, [r7, #11]
          break;
 800969e:	e03b      	b.n	8009718 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096a6:	695b      	ldr	r3, [r3, #20]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00b      	beq.n	80096c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096b2:	695b      	ldr	r3, [r3, #20]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	7c12      	ldrb	r2, [r2, #16]
 80096b8:	f107 0108 	add.w	r1, r7, #8
 80096bc:	4610      	mov	r0, r2
 80096be:	4798      	blx	r3
 80096c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096c2:	e029      	b.n	8009718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fa2c 	bl	8009b24 <USBD_CtlError>
            err++;
 80096cc:	7afb      	ldrb	r3, [r7, #11]
 80096ce:	3301      	adds	r3, #1
 80096d0:	72fb      	strb	r3, [r7, #11]
          break;
 80096d2:	e021      	b.n	8009718 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00b      	beq.n	80096f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	7c12      	ldrb	r2, [r2, #16]
 80096ec:	f107 0108 	add.w	r1, r7, #8
 80096f0:	4610      	mov	r0, r2
 80096f2:	4798      	blx	r3
 80096f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096f6:	e00f      	b.n	8009718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fa12 	bl	8009b24 <USBD_CtlError>
            err++;
 8009700:	7afb      	ldrb	r3, [r7, #11]
 8009702:	3301      	adds	r3, #1
 8009704:	72fb      	strb	r3, [r7, #11]
          break;
 8009706:	e007      	b.n	8009718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fa0a 	bl	8009b24 <USBD_CtlError>
          err++;
 8009710:	7afb      	ldrb	r3, [r7, #11]
 8009712:	3301      	adds	r3, #1
 8009714:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009716:	e038      	b.n	800978a <USBD_GetDescriptor+0x286>
 8009718:	e037      	b.n	800978a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	7c1b      	ldrb	r3, [r3, #16]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d109      	bne.n	8009736 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800972a:	f107 0208 	add.w	r2, r7, #8
 800972e:	4610      	mov	r0, r2
 8009730:	4798      	blx	r3
 8009732:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009734:	e029      	b.n	800978a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f9f3 	bl	8009b24 <USBD_CtlError>
        err++;
 800973e:	7afb      	ldrb	r3, [r7, #11]
 8009740:	3301      	adds	r3, #1
 8009742:	72fb      	strb	r3, [r7, #11]
      break;
 8009744:	e021      	b.n	800978a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	7c1b      	ldrb	r3, [r3, #16]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10d      	bne.n	800976a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009756:	f107 0208 	add.w	r2, r7, #8
 800975a:	4610      	mov	r0, r2
 800975c:	4798      	blx	r3
 800975e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	3301      	adds	r3, #1
 8009764:	2207      	movs	r2, #7
 8009766:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009768:	e00f      	b.n	800978a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800976a:	6839      	ldr	r1, [r7, #0]
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 f9d9 	bl	8009b24 <USBD_CtlError>
        err++;
 8009772:	7afb      	ldrb	r3, [r7, #11]
 8009774:	3301      	adds	r3, #1
 8009776:	72fb      	strb	r3, [r7, #11]
      break;
 8009778:	e007      	b.n	800978a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f9d1 	bl	8009b24 <USBD_CtlError>
      err++;
 8009782:	7afb      	ldrb	r3, [r7, #11]
 8009784:	3301      	adds	r3, #1
 8009786:	72fb      	strb	r3, [r7, #11]
      break;
 8009788:	bf00      	nop
  }

  if (err != 0U)
 800978a:	7afb      	ldrb	r3, [r7, #11]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d11c      	bne.n	80097ca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009790:	893b      	ldrh	r3, [r7, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d011      	beq.n	80097ba <USBD_GetDescriptor+0x2b6>
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	88db      	ldrh	r3, [r3, #6]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00d      	beq.n	80097ba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	88da      	ldrh	r2, [r3, #6]
 80097a2:	893b      	ldrh	r3, [r7, #8]
 80097a4:	4293      	cmp	r3, r2
 80097a6:	bf28      	it	cs
 80097a8:	4613      	movcs	r3, r2
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097ae:	893b      	ldrh	r3, [r7, #8]
 80097b0:	461a      	mov	r2, r3
 80097b2:	68f9      	ldr	r1, [r7, #12]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fa1f 	bl	8009bf8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	88db      	ldrh	r3, [r3, #6]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d104      	bne.n	80097cc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fa76 	bl	8009cb4 <USBD_CtlSendStatus>
 80097c8:	e000      	b.n	80097cc <USBD_GetDescriptor+0x2c8>
    return;
 80097ca:	bf00      	nop
    }
  }
}
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop

080097d4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	889b      	ldrh	r3, [r3, #4]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d130      	bne.n	8009848 <USBD_SetAddress+0x74>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	88db      	ldrh	r3, [r3, #6]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d12c      	bne.n	8009848 <USBD_SetAddress+0x74>
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	885b      	ldrh	r3, [r3, #2]
 80097f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80097f4:	d828      	bhi.n	8009848 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	885b      	ldrh	r3, [r3, #2]
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009800:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009808:	2b03      	cmp	r3, #3
 800980a:	d104      	bne.n	8009816 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f988 	bl	8009b24 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009814:	e01d      	b.n	8009852 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	7bfa      	ldrb	r2, [r7, #15]
 800981a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800981e:	7bfb      	ldrb	r3, [r7, #15]
 8009820:	4619      	mov	r1, r3
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fe43 	bl	800a4ae <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fa43 	bl	8009cb4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800982e:	7bfb      	ldrb	r3, [r7, #15]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d004      	beq.n	800983e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2202      	movs	r2, #2
 8009838:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800983c:	e009      	b.n	8009852 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009846:	e004      	b.n	8009852 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f96a 	bl	8009b24 <USBD_CtlError>
  }
}
 8009850:	bf00      	nop
 8009852:	bf00      	nop
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
	...

0800985c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	885b      	ldrh	r3, [r3, #2]
 800986a:	b2da      	uxtb	r2, r3
 800986c:	4b41      	ldr	r3, [pc, #260]	@ (8009974 <USBD_SetConfig+0x118>)
 800986e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009870:	4b40      	ldr	r3, [pc, #256]	@ (8009974 <USBD_SetConfig+0x118>)
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d904      	bls.n	8009882 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f952 	bl	8009b24 <USBD_CtlError>
 8009880:	e075      	b.n	800996e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009888:	2b02      	cmp	r3, #2
 800988a:	d002      	beq.n	8009892 <USBD_SetConfig+0x36>
 800988c:	2b03      	cmp	r3, #3
 800988e:	d023      	beq.n	80098d8 <USBD_SetConfig+0x7c>
 8009890:	e062      	b.n	8009958 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009892:	4b38      	ldr	r3, [pc, #224]	@ (8009974 <USBD_SetConfig+0x118>)
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d01a      	beq.n	80098d0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800989a:	4b36      	ldr	r3, [pc, #216]	@ (8009974 <USBD_SetConfig+0x118>)
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	461a      	mov	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2203      	movs	r2, #3
 80098a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80098ac:	4b31      	ldr	r3, [pc, #196]	@ (8009974 <USBD_SetConfig+0x118>)
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	4619      	mov	r1, r3
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f7ff f9e7 	bl	8008c86 <USBD_SetClassConfig>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d104      	bne.n	80098c8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f92f 	bl	8009b24 <USBD_CtlError>
            return;
 80098c6:	e052      	b.n	800996e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f9f3 	bl	8009cb4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80098ce:	e04e      	b.n	800996e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f9ef 	bl	8009cb4 <USBD_CtlSendStatus>
        break;
 80098d6:	e04a      	b.n	800996e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80098d8:	4b26      	ldr	r3, [pc, #152]	@ (8009974 <USBD_SetConfig+0x118>)
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d112      	bne.n	8009906 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2202      	movs	r2, #2
 80098e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80098e8:	4b22      	ldr	r3, [pc, #136]	@ (8009974 <USBD_SetConfig+0x118>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	461a      	mov	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80098f2:	4b20      	ldr	r3, [pc, #128]	@ (8009974 <USBD_SetConfig+0x118>)
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7ff f9e3 	bl	8008cc4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f9d8 	bl	8009cb4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009904:	e033      	b.n	800996e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009906:	4b1b      	ldr	r3, [pc, #108]	@ (8009974 <USBD_SetConfig+0x118>)
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	461a      	mov	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	429a      	cmp	r2, r3
 8009912:	d01d      	beq.n	8009950 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	b2db      	uxtb	r3, r3
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f7ff f9d1 	bl	8008cc4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009922:	4b14      	ldr	r3, [pc, #80]	@ (8009974 <USBD_SetConfig+0x118>)
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	461a      	mov	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800992c:	4b11      	ldr	r3, [pc, #68]	@ (8009974 <USBD_SetConfig+0x118>)
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	4619      	mov	r1, r3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7ff f9a7 	bl	8008c86 <USBD_SetClassConfig>
 8009938:	4603      	mov	r3, r0
 800993a:	2b02      	cmp	r3, #2
 800993c:	d104      	bne.n	8009948 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 f8ef 	bl	8009b24 <USBD_CtlError>
            return;
 8009946:	e012      	b.n	800996e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 f9b3 	bl	8009cb4 <USBD_CtlSendStatus>
        break;
 800994e:	e00e      	b.n	800996e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f9af 	bl	8009cb4 <USBD_CtlSendStatus>
        break;
 8009956:	e00a      	b.n	800996e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f8e2 	bl	8009b24 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009960:	4b04      	ldr	r3, [pc, #16]	@ (8009974 <USBD_SetConfig+0x118>)
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7ff f9ac 	bl	8008cc4 <USBD_ClrClassConfig>
        break;
 800996c:	bf00      	nop
    }
  }
}
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	20000410 	.word	0x20000410

08009978 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	88db      	ldrh	r3, [r3, #6]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d004      	beq.n	8009994 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f8c9 	bl	8009b24 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009992:	e022      	b.n	80099da <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800999a:	2b02      	cmp	r3, #2
 800999c:	dc02      	bgt.n	80099a4 <USBD_GetConfig+0x2c>
 800999e:	2b00      	cmp	r3, #0
 80099a0:	dc03      	bgt.n	80099aa <USBD_GetConfig+0x32>
 80099a2:	e015      	b.n	80099d0 <USBD_GetConfig+0x58>
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d00b      	beq.n	80099c0 <USBD_GetConfig+0x48>
 80099a8:	e012      	b.n	80099d0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	3308      	adds	r3, #8
 80099b4:	2201      	movs	r2, #1
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f91d 	bl	8009bf8 <USBD_CtlSendData>
        break;
 80099be:	e00c      	b.n	80099da <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3304      	adds	r3, #4
 80099c4:	2201      	movs	r2, #1
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f915 	bl	8009bf8 <USBD_CtlSendData>
        break;
 80099ce:	e004      	b.n	80099da <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f8a6 	bl	8009b24 <USBD_CtlError>
        break;
 80099d8:	bf00      	nop
}
 80099da:	bf00      	nop
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b082      	sub	sp, #8
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099f2:	3b01      	subs	r3, #1
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d81e      	bhi.n	8009a36 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	88db      	ldrh	r3, [r3, #6]
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d004      	beq.n	8009a0a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009a00:	6839      	ldr	r1, [r7, #0]
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f88e 	bl	8009b24 <USBD_CtlError>
        break;
 8009a08:	e01a      	b.n	8009a40 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d005      	beq.n	8009a26 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	f043 0202 	orr.w	r2, r3, #2
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	330c      	adds	r3, #12
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f8e2 	bl	8009bf8 <USBD_CtlSendData>
      break;
 8009a34:	e004      	b.n	8009a40 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009a36:	6839      	ldr	r1, [r7, #0]
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f873 	bl	8009b24 <USBD_CtlError>
      break;
 8009a3e:	bf00      	nop
  }
}
 8009a40:	bf00      	nop
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	885b      	ldrh	r3, [r3, #2]
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d106      	bne.n	8009a68 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f926 	bl	8009cb4 <USBD_CtlSendStatus>
  }
}
 8009a68:	bf00      	nop
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a80:	3b01      	subs	r3, #1
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	d80b      	bhi.n	8009a9e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	885b      	ldrh	r3, [r3, #2]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d10c      	bne.n	8009aa8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f90c 	bl	8009cb4 <USBD_CtlSendStatus>
      }
      break;
 8009a9c:	e004      	b.n	8009aa8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f83f 	bl	8009b24 <USBD_CtlError>
      break;
 8009aa6:	e000      	b.n	8009aaa <USBD_ClrFeature+0x3a>
      break;
 8009aa8:	bf00      	nop
  }
}
 8009aaa:	bf00      	nop
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b083      	sub	sp, #12
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781a      	ldrb	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	785a      	ldrb	r2, [r3, #1]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	3302      	adds	r3, #2
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	3303      	adds	r3, #3
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	021b      	lsls	r3, r3, #8
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	4413      	add	r3, r2
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	3304      	adds	r3, #4
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	461a      	mov	r2, r3
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	3305      	adds	r3, #5
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	021b      	lsls	r3, r3, #8
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	4413      	add	r3, r2
 8009afa:	b29a      	uxth	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	3306      	adds	r3, #6
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	461a      	mov	r2, r3
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	3307      	adds	r3, #7
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	021b      	lsls	r3, r3, #8
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	4413      	add	r3, r2
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	80da      	strh	r2, [r3, #6]

}
 8009b1a:	bf00      	nop
 8009b1c:	370c      	adds	r7, #12
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bc80      	pop	{r7}
 8009b22:	4770      	bx	lr

08009b24 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009b2e:	2180      	movs	r1, #128	@ 0x80
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fc53 	bl	800a3dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009b36:	2100      	movs	r1, #0
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fc4f 	bl	800a3dc <USBD_LL_StallEP>
}
 8009b3e:	bf00      	nop
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b086      	sub	sp, #24
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	60f8      	str	r0, [r7, #12]
 8009b4e:	60b9      	str	r1, [r7, #8]
 8009b50:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d032      	beq.n	8009bc2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f000 f834 	bl	8009bca <USBD_GetLen>
 8009b62:	4603      	mov	r3, r0
 8009b64:	3301      	adds	r3, #1
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	005b      	lsls	r3, r3, #1
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009b70:	7dfb      	ldrb	r3, [r7, #23]
 8009b72:	1c5a      	adds	r2, r3, #1
 8009b74:	75fa      	strb	r2, [r7, #23]
 8009b76:	461a      	mov	r2, r3
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	7812      	ldrb	r2, [r2, #0]
 8009b80:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009b82:	7dfb      	ldrb	r3, [r7, #23]
 8009b84:	1c5a      	adds	r2, r3, #1
 8009b86:	75fa      	strb	r2, [r7, #23]
 8009b88:	461a      	mov	r2, r3
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	2203      	movs	r2, #3
 8009b90:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009b92:	e012      	b.n	8009bba <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	1c5a      	adds	r2, r3, #1
 8009b98:	60fa      	str	r2, [r7, #12]
 8009b9a:	7dfa      	ldrb	r2, [r7, #23]
 8009b9c:	1c51      	adds	r1, r2, #1
 8009b9e:	75f9      	strb	r1, [r7, #23]
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	440a      	add	r2, r1
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009baa:	7dfb      	ldrb	r3, [r7, #23]
 8009bac:	1c5a      	adds	r2, r3, #1
 8009bae:	75fa      	strb	r2, [r7, #23]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1e8      	bne.n	8009b94 <USBD_GetString+0x4e>
    }
  }
}
 8009bc2:	bf00      	nop
 8009bc4:	3718      	adds	r7, #24
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009bca:	b480      	push	{r7}
 8009bcc:	b085      	sub	sp, #20
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009bd6:	e005      	b.n	8009be4 <USBD_GetLen+0x1a>
  {
    len++;
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	3301      	adds	r3, #1
 8009be2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1f5      	bne.n	8009bd8 <USBD_GetLen+0xe>
  }

  return len;
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3714      	adds	r7, #20
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bc80      	pop	{r7}
 8009bf6:	4770      	bx	lr

08009bf8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	4613      	mov	r3, r2
 8009c04:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2202      	movs	r2, #2
 8009c0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009c0e:	88fa      	ldrh	r2, [r7, #6]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009c14:	88fa      	ldrh	r2, [r7, #6]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c1a:	88fb      	ldrh	r3, [r7, #6]
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	2100      	movs	r1, #0
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f000 fc63 	bl	800a4ec <USBD_LL_Transmit>

  return USBD_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c3e:	88fb      	ldrh	r3, [r7, #6]
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	2100      	movs	r1, #0
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f000 fc51 	bl	800a4ec <USBD_LL_Transmit>

  return USBD_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2203      	movs	r2, #3
 8009c66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009c6a:	88fa      	ldrh	r2, [r7, #6]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009c72:	88fa      	ldrh	r2, [r7, #6]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c7a:	88fb      	ldrh	r3, [r7, #6]
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	2100      	movs	r1, #0
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f000 fc56 	bl	800a532 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c9e:	88fb      	ldrh	r3, [r7, #6]
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 fc44 	bl	800a532 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2204      	movs	r2, #4
 8009cc0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	2100      	movs	r1, #0
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fc0e 	bl	800a4ec <USBD_LL_Transmit>

  return USBD_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b082      	sub	sp, #8
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2205      	movs	r2, #5
 8009ce6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cea:	2300      	movs	r3, #0
 8009cec:	2200      	movs	r2, #0
 8009cee:	2100      	movs	r1, #0
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fc1e 	bl	800a532 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009d04:	2200      	movs	r2, #0
 8009d06:	4912      	ldr	r1, [pc, #72]	@ (8009d50 <MX_USB_DEVICE_Init+0x50>)
 8009d08:	4812      	ldr	r0, [pc, #72]	@ (8009d54 <MX_USB_DEVICE_Init+0x54>)
 8009d0a:	f7fe ff62 	bl	8008bd2 <USBD_Init>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d14:	f7f8 fb98 	bl	8002448 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d18:	490f      	ldr	r1, [pc, #60]	@ (8009d58 <MX_USB_DEVICE_Init+0x58>)
 8009d1a:	480e      	ldr	r0, [pc, #56]	@ (8009d54 <MX_USB_DEVICE_Init+0x54>)
 8009d1c:	f7fe ff84 	bl	8008c28 <USBD_RegisterClass>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d001      	beq.n	8009d2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d26:	f7f8 fb8f 	bl	8002448 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d2a:	490c      	ldr	r1, [pc, #48]	@ (8009d5c <MX_USB_DEVICE_Init+0x5c>)
 8009d2c:	4809      	ldr	r0, [pc, #36]	@ (8009d54 <MX_USB_DEVICE_Init+0x54>)
 8009d2e:	f7fe feb5 	bl	8008a9c <USBD_CDC_RegisterInterface>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d001      	beq.n	8009d3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009d38:	f7f8 fb86 	bl	8002448 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d3c:	4805      	ldr	r0, [pc, #20]	@ (8009d54 <MX_USB_DEVICE_Init+0x54>)
 8009d3e:	f7fe ff8c 	bl	8008c5a <USBD_Start>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d001      	beq.n	8009d4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009d48:	f7f8 fb7e 	bl	8002448 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d4c:	bf00      	nop
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	20000144 	.word	0x20000144
 8009d54:	20000414 	.word	0x20000414
 8009d58:	20000030 	.word	0x20000030
 8009d5c:	20000134 	.word	0x20000134

08009d60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009d64:	2200      	movs	r2, #0
 8009d66:	4905      	ldr	r1, [pc, #20]	@ (8009d7c <CDC_Init_FS+0x1c>)
 8009d68:	4805      	ldr	r0, [pc, #20]	@ (8009d80 <CDC_Init_FS+0x20>)
 8009d6a:	f7fe fead 	bl	8008ac8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009d6e:	4905      	ldr	r1, [pc, #20]	@ (8009d84 <CDC_Init_FS+0x24>)
 8009d70:	4803      	ldr	r0, [pc, #12]	@ (8009d80 <CDC_Init_FS+0x20>)
 8009d72:	f7fe fec2 	bl	8008afa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009d76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	20000ad8 	.word	0x20000ad8
 8009d80:	20000414 	.word	0x20000414
 8009d84:	200006d8 	.word	0x200006d8

08009d88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009d8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bc80      	pop	{r7}
 8009d94:	4770      	bx	lr
	...

08009d98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	4603      	mov	r3, r0
 8009da0:	6039      	str	r1, [r7, #0]
 8009da2:	71fb      	strb	r3, [r7, #7]
 8009da4:	4613      	mov	r3, r2
 8009da6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009da8:	79fb      	ldrb	r3, [r7, #7]
 8009daa:	2b23      	cmp	r3, #35	@ 0x23
 8009dac:	d84a      	bhi.n	8009e44 <CDC_Control_FS+0xac>
 8009dae:	a201      	add	r2, pc, #4	@ (adr r2, 8009db4 <CDC_Control_FS+0x1c>)
 8009db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db4:	08009e45 	.word	0x08009e45
 8009db8:	08009e45 	.word	0x08009e45
 8009dbc:	08009e45 	.word	0x08009e45
 8009dc0:	08009e45 	.word	0x08009e45
 8009dc4:	08009e45 	.word	0x08009e45
 8009dc8:	08009e45 	.word	0x08009e45
 8009dcc:	08009e45 	.word	0x08009e45
 8009dd0:	08009e45 	.word	0x08009e45
 8009dd4:	08009e45 	.word	0x08009e45
 8009dd8:	08009e45 	.word	0x08009e45
 8009ddc:	08009e45 	.word	0x08009e45
 8009de0:	08009e45 	.word	0x08009e45
 8009de4:	08009e45 	.word	0x08009e45
 8009de8:	08009e45 	.word	0x08009e45
 8009dec:	08009e45 	.word	0x08009e45
 8009df0:	08009e45 	.word	0x08009e45
 8009df4:	08009e45 	.word	0x08009e45
 8009df8:	08009e45 	.word	0x08009e45
 8009dfc:	08009e45 	.word	0x08009e45
 8009e00:	08009e45 	.word	0x08009e45
 8009e04:	08009e45 	.word	0x08009e45
 8009e08:	08009e45 	.word	0x08009e45
 8009e0c:	08009e45 	.word	0x08009e45
 8009e10:	08009e45 	.word	0x08009e45
 8009e14:	08009e45 	.word	0x08009e45
 8009e18:	08009e45 	.word	0x08009e45
 8009e1c:	08009e45 	.word	0x08009e45
 8009e20:	08009e45 	.word	0x08009e45
 8009e24:	08009e45 	.word	0x08009e45
 8009e28:	08009e45 	.word	0x08009e45
 8009e2c:	08009e45 	.word	0x08009e45
 8009e30:	08009e45 	.word	0x08009e45
 8009e34:	08009e45 	.word	0x08009e45
 8009e38:	08009e45 	.word	0x08009e45
 8009e3c:	08009e45 	.word	0x08009e45
 8009e40:	08009e45 	.word	0x08009e45
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009e44:	bf00      	nop
  }

  return (USBD_OK);
 8009e46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bc80      	pop	{r7}
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop

08009e54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009e5e:	6879      	ldr	r1, [r7, #4]
 8009e60:	4805      	ldr	r0, [pc, #20]	@ (8009e78 <CDC_Receive_FS+0x24>)
 8009e62:	f7fe fe4a 	bl	8008afa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009e66:	4804      	ldr	r0, [pc, #16]	@ (8009e78 <CDC_Receive_FS+0x24>)
 8009e68:	f7fe fe89 	bl	8008b7e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009e6c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	20000414 	.word	0x20000414

08009e7c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	460b      	mov	r3, r1
 8009e86:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8009ec4 <CDC_Transmit_FS+0x48>)
 8009e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e92:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d001      	beq.n	8009ea2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e00b      	b.n	8009eba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009ea2:	887b      	ldrh	r3, [r7, #2]
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	6879      	ldr	r1, [r7, #4]
 8009ea8:	4806      	ldr	r0, [pc, #24]	@ (8009ec4 <CDC_Transmit_FS+0x48>)
 8009eaa:	f7fe fe0d 	bl	8008ac8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009eae:	4805      	ldr	r0, [pc, #20]	@ (8009ec4 <CDC_Transmit_FS+0x48>)
 8009eb0:	f7fe fe36 	bl	8008b20 <USBD_CDC_TransmitPacket>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	20000414 	.word	0x20000414

08009ec8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	4603      	mov	r3, r0
 8009ed0:	6039      	str	r1, [r7, #0]
 8009ed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	2212      	movs	r2, #18
 8009ed8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009eda:	4b03      	ldr	r3, [pc, #12]	@ (8009ee8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bc80      	pop	{r7}
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	20000160 	.word	0x20000160

08009eec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	6039      	str	r1, [r7, #0]
 8009ef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	2204      	movs	r2, #4
 8009efc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009efe:	4b03      	ldr	r3, [pc, #12]	@ (8009f0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bc80      	pop	{r7}
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	20000174 	.word	0x20000174

08009f10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	4603      	mov	r3, r0
 8009f18:	6039      	str	r1, [r7, #0]
 8009f1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f1c:	79fb      	ldrb	r3, [r7, #7]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d105      	bne.n	8009f2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f22:	683a      	ldr	r2, [r7, #0]
 8009f24:	4907      	ldr	r1, [pc, #28]	@ (8009f44 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f26:	4808      	ldr	r0, [pc, #32]	@ (8009f48 <USBD_FS_ProductStrDescriptor+0x38>)
 8009f28:	f7ff fe0d 	bl	8009b46 <USBD_GetString>
 8009f2c:	e004      	b.n	8009f38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f2e:	683a      	ldr	r2, [r7, #0]
 8009f30:	4904      	ldr	r1, [pc, #16]	@ (8009f44 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f32:	4805      	ldr	r0, [pc, #20]	@ (8009f48 <USBD_FS_ProductStrDescriptor+0x38>)
 8009f34:	f7ff fe07 	bl	8009b46 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f38:	4b02      	ldr	r3, [pc, #8]	@ (8009f44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	20000ed8 	.word	0x20000ed8
 8009f48:	0800b05c 	.word	0x0800b05c

08009f4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	4603      	mov	r3, r0
 8009f54:	6039      	str	r1, [r7, #0]
 8009f56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f58:	683a      	ldr	r2, [r7, #0]
 8009f5a:	4904      	ldr	r1, [pc, #16]	@ (8009f6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009f5c:	4804      	ldr	r0, [pc, #16]	@ (8009f70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009f5e:	f7ff fdf2 	bl	8009b46 <USBD_GetString>
  return USBD_StrDesc;
 8009f62:	4b02      	ldr	r3, [pc, #8]	@ (8009f6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	20000ed8 	.word	0x20000ed8
 8009f70:	0800b074 	.word	0x0800b074

08009f74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	6039      	str	r1, [r7, #0]
 8009f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	221a      	movs	r2, #26
 8009f84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009f86:	f000 f843 	bl	800a010 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009f8a:	4b02      	ldr	r3, [pc, #8]	@ (8009f94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	20000178 	.word	0x20000178

08009f98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	6039      	str	r1, [r7, #0]
 8009fa2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009fa4:	79fb      	ldrb	r3, [r7, #7]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d105      	bne.n	8009fb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	4907      	ldr	r1, [pc, #28]	@ (8009fcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009fae:	4808      	ldr	r0, [pc, #32]	@ (8009fd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009fb0:	f7ff fdc9 	bl	8009b46 <USBD_GetString>
 8009fb4:	e004      	b.n	8009fc0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	4904      	ldr	r1, [pc, #16]	@ (8009fcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009fba:	4805      	ldr	r0, [pc, #20]	@ (8009fd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009fbc:	f7ff fdc3 	bl	8009b46 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fc0:	4b02      	ldr	r3, [pc, #8]	@ (8009fcc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	20000ed8 	.word	0x20000ed8
 8009fd0:	0800b07c 	.word	0x0800b07c

08009fd4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	6039      	str	r1, [r7, #0]
 8009fde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fe0:	79fb      	ldrb	r3, [r7, #7]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d105      	bne.n	8009ff2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009fe6:	683a      	ldr	r2, [r7, #0]
 8009fe8:	4907      	ldr	r1, [pc, #28]	@ (800a008 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009fea:	4808      	ldr	r0, [pc, #32]	@ (800a00c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009fec:	f7ff fdab 	bl	8009b46 <USBD_GetString>
 8009ff0:	e004      	b.n	8009ffc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	4904      	ldr	r1, [pc, #16]	@ (800a008 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ff6:	4805      	ldr	r0, [pc, #20]	@ (800a00c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ff8:	f7ff fda5 	bl	8009b46 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ffc:	4b02      	ldr	r3, [pc, #8]	@ (800a008 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	20000ed8 	.word	0x20000ed8
 800a00c:	0800b088 	.word	0x0800b088

0800a010 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a016:	4b0f      	ldr	r3, [pc, #60]	@ (800a054 <Get_SerialNum+0x44>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a01c:	4b0e      	ldr	r3, [pc, #56]	@ (800a058 <Get_SerialNum+0x48>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a022:	4b0e      	ldr	r3, [pc, #56]	@ (800a05c <Get_SerialNum+0x4c>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4413      	add	r3, r2
 800a02e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d009      	beq.n	800a04a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a036:	2208      	movs	r2, #8
 800a038:	4909      	ldr	r1, [pc, #36]	@ (800a060 <Get_SerialNum+0x50>)
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f000 f814 	bl	800a068 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a040:	2204      	movs	r2, #4
 800a042:	4908      	ldr	r1, [pc, #32]	@ (800a064 <Get_SerialNum+0x54>)
 800a044:	68b8      	ldr	r0, [r7, #8]
 800a046:	f000 f80f 	bl	800a068 <IntToUnicode>
  }
}
 800a04a:	bf00      	nop
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	1ffff7e8 	.word	0x1ffff7e8
 800a058:	1ffff7ec 	.word	0x1ffff7ec
 800a05c:	1ffff7f0 	.word	0x1ffff7f0
 800a060:	2000017a 	.word	0x2000017a
 800a064:	2000018a 	.word	0x2000018a

0800a068 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a068:	b480      	push	{r7}
 800a06a:	b087      	sub	sp, #28
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	4613      	mov	r3, r2
 800a074:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a076:	2300      	movs	r3, #0
 800a078:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a07a:	2300      	movs	r3, #0
 800a07c:	75fb      	strb	r3, [r7, #23]
 800a07e:	e027      	b.n	800a0d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	0f1b      	lsrs	r3, r3, #28
 800a084:	2b09      	cmp	r3, #9
 800a086:	d80b      	bhi.n	800a0a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	0f1b      	lsrs	r3, r3, #28
 800a08c:	b2da      	uxtb	r2, r3
 800a08e:	7dfb      	ldrb	r3, [r7, #23]
 800a090:	005b      	lsls	r3, r3, #1
 800a092:	4619      	mov	r1, r3
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	440b      	add	r3, r1
 800a098:	3230      	adds	r2, #48	@ 0x30
 800a09a:	b2d2      	uxtb	r2, r2
 800a09c:	701a      	strb	r2, [r3, #0]
 800a09e:	e00a      	b.n	800a0b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	0f1b      	lsrs	r3, r3, #28
 800a0a4:	b2da      	uxtb	r2, r3
 800a0a6:	7dfb      	ldrb	r3, [r7, #23]
 800a0a8:	005b      	lsls	r3, r3, #1
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	440b      	add	r3, r1
 800a0b0:	3237      	adds	r2, #55	@ 0x37
 800a0b2:	b2d2      	uxtb	r2, r2
 800a0b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	011b      	lsls	r3, r3, #4
 800a0ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a0bc:	7dfb      	ldrb	r3, [r7, #23]
 800a0be:	005b      	lsls	r3, r3, #1
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a0ca:	7dfb      	ldrb	r3, [r7, #23]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	75fb      	strb	r3, [r7, #23]
 800a0d0:	7dfa      	ldrb	r2, [r7, #23]
 800a0d2:	79fb      	ldrb	r3, [r7, #7]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d3d3      	bcc.n	800a080 <IntToUnicode+0x18>
  }
}
 800a0d8:	bf00      	nop
 800a0da:	bf00      	nop
 800a0dc:	371c      	adds	r7, #28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bc80      	pop	{r7}
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a0d      	ldr	r2, [pc, #52]	@ (800a128 <HAL_PCD_MspInit+0x44>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d113      	bne.n	800a11e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a0f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a12c <HAL_PCD_MspInit+0x48>)
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	4a0c      	ldr	r2, [pc, #48]	@ (800a12c <HAL_PCD_MspInit+0x48>)
 800a0fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a100:	61d3      	str	r3, [r2, #28]
 800a102:	4b0a      	ldr	r3, [pc, #40]	@ (800a12c <HAL_PCD_MspInit+0x48>)
 800a104:	69db      	ldr	r3, [r3, #28]
 800a106:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a10a:	60fb      	str	r3, [r7, #12]
 800a10c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a10e:	2200      	movs	r2, #0
 800a110:	2100      	movs	r1, #0
 800a112:	2014      	movs	r0, #20
 800a114:	f7f8 fc63 	bl	80029de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a118:	2014      	movs	r0, #20
 800a11a:	f7f8 fc7c 	bl	8002a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a11e:	bf00      	nop
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	40005c00 	.word	0x40005c00
 800a12c:	40021000 	.word	0x40021000

0800a130 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a144:	4619      	mov	r1, r3
 800a146:	4610      	mov	r0, r2
 800a148:	f7fe fdcf 	bl	8008cea <USBD_LL_SetupStage>
}
 800a14c:	bf00      	nop
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	460b      	mov	r3, r1
 800a15e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a166:	78fa      	ldrb	r2, [r7, #3]
 800a168:	6879      	ldr	r1, [r7, #4]
 800a16a:	4613      	mov	r3, r2
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	00db      	lsls	r3, r3, #3
 800a172:	440b      	add	r3, r1
 800a174:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	78fb      	ldrb	r3, [r7, #3]
 800a17c:	4619      	mov	r1, r3
 800a17e:	f7fe fe01 	bl	8008d84 <USBD_LL_DataOutStage>
}
 800a182:	bf00      	nop
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b082      	sub	sp, #8
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
 800a192:	460b      	mov	r3, r1
 800a194:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a19c:	78fa      	ldrb	r2, [r7, #3]
 800a19e:	6879      	ldr	r1, [r7, #4]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	4413      	add	r3, r2
 800a1a6:	00db      	lsls	r3, r3, #3
 800a1a8:	440b      	add	r3, r1
 800a1aa:	3324      	adds	r3, #36	@ 0x24
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	78fb      	ldrb	r3, [r7, #3]
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	f7fe fe58 	bl	8008e66 <USBD_LL_DataInStage>
}
 800a1b6:	bf00      	nop
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b082      	sub	sp, #8
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7fe ff68 	bl	80090a2 <USBD_LL_SOF>
}
 800a1d2:	bf00      	nop
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b084      	sub	sp, #16
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	799b      	ldrb	r3, [r3, #6]
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d001      	beq.n	800a1f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a1ee:	f7f8 f92b 	bl	8002448 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1f8:	7bfa      	ldrb	r2, [r7, #15]
 800a1fa:	4611      	mov	r1, r2
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7fe ff18 	bl	8009032 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a208:	4618      	mov	r0, r3
 800a20a:	f7fe fed1 	bl	8008fb0 <USBD_LL_Reset>
}
 800a20e:	bf00      	nop
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
	...

0800a218 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a226:	4618      	mov	r0, r3
 800a228:	f7fe ff12 	bl	8009050 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	7a9b      	ldrb	r3, [r3, #10]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d005      	beq.n	800a240 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a234:	4b04      	ldr	r3, [pc, #16]	@ (800a248 <HAL_PCD_SuspendCallback+0x30>)
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	4a03      	ldr	r2, [pc, #12]	@ (800a248 <HAL_PCD_SuspendCallback+0x30>)
 800a23a:	f043 0306 	orr.w	r3, r3, #6
 800a23e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a240:	bf00      	nop
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	e000ed00 	.word	0xe000ed00

0800a24c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fe ff0c 	bl	8009078 <USBD_LL_Resume>
}
 800a260:	bf00      	nop
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a270:	4a28      	ldr	r2, [pc, #160]	@ (800a314 <USBD_LL_Init+0xac>)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a26      	ldr	r2, [pc, #152]	@ (800a314 <USBD_LL_Init+0xac>)
 800a27c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a280:	4b24      	ldr	r3, [pc, #144]	@ (800a314 <USBD_LL_Init+0xac>)
 800a282:	4a25      	ldr	r2, [pc, #148]	@ (800a318 <USBD_LL_Init+0xb0>)
 800a284:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a286:	4b23      	ldr	r3, [pc, #140]	@ (800a314 <USBD_LL_Init+0xac>)
 800a288:	2208      	movs	r2, #8
 800a28a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a28c:	4b21      	ldr	r3, [pc, #132]	@ (800a314 <USBD_LL_Init+0xac>)
 800a28e:	2202      	movs	r2, #2
 800a290:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a292:	4b20      	ldr	r3, [pc, #128]	@ (800a314 <USBD_LL_Init+0xac>)
 800a294:	2200      	movs	r2, #0
 800a296:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a298:	4b1e      	ldr	r3, [pc, #120]	@ (800a314 <USBD_LL_Init+0xac>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a29e:	4b1d      	ldr	r3, [pc, #116]	@ (800a314 <USBD_LL_Init+0xac>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a2a4:	481b      	ldr	r0, [pc, #108]	@ (800a314 <USBD_LL_Init+0xac>)
 800a2a6:	f7f8 fd8f 	bl	8002dc8 <HAL_PCD_Init>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d001      	beq.n	800a2b4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a2b0:	f7f8 f8ca 	bl	8002448 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a2ba:	2318      	movs	r3, #24
 800a2bc:	2200      	movs	r2, #0
 800a2be:	2100      	movs	r1, #0
 800a2c0:	f7fa faa0 	bl	8004804 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a2ca:	2358      	movs	r3, #88	@ 0x58
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2180      	movs	r1, #128	@ 0x80
 800a2d0:	f7fa fa98 	bl	8004804 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a2da:	23c0      	movs	r3, #192	@ 0xc0
 800a2dc:	2200      	movs	r2, #0
 800a2de:	2181      	movs	r1, #129	@ 0x81
 800a2e0:	f7fa fa90 	bl	8004804 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a2ea:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	f7fa fa87 	bl	8004804 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a2fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a300:	2200      	movs	r2, #0
 800a302:	2182      	movs	r1, #130	@ 0x82
 800a304:	f7fa fa7e 	bl	8004804 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	200010d8 	.word	0x200010d8
 800a318:	40005c00 	.word	0x40005c00

0800a31c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a332:	4618      	mov	r0, r3
 800a334:	f7f8 fe3e 	bl	8002fb4 <HAL_PCD_Start>
 800a338:	4603      	mov	r3, r0
 800a33a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 f94e 	bl	800a5e0 <USBD_Get_USB_Status>
 800a344:	4603      	mov	r3, r0
 800a346:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a348:	7bbb      	ldrb	r3, [r7, #14]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b084      	sub	sp, #16
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	4608      	mov	r0, r1
 800a35c:	4611      	mov	r1, r2
 800a35e:	461a      	mov	r2, r3
 800a360:	4603      	mov	r3, r0
 800a362:	70fb      	strb	r3, [r7, #3]
 800a364:	460b      	mov	r3, r1
 800a366:	70bb      	strb	r3, [r7, #2]
 800a368:	4613      	mov	r3, r2
 800a36a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a37a:	78bb      	ldrb	r3, [r7, #2]
 800a37c:	883a      	ldrh	r2, [r7, #0]
 800a37e:	78f9      	ldrb	r1, [r7, #3]
 800a380:	f7f8 ff92 	bl	80032a8 <HAL_PCD_EP_Open>
 800a384:	4603      	mov	r3, r0
 800a386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a388:	7bfb      	ldrb	r3, [r7, #15]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 f928 	bl	800a5e0 <USBD_Get_USB_Status>
 800a390:	4603      	mov	r3, r0
 800a392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a394:	7bbb      	ldrb	r3, [r7, #14]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b084      	sub	sp, #16
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a3b8:	78fa      	ldrb	r2, [r7, #3]
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7f8 ffd0 	bl	8003362 <HAL_PCD_EP_Close>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3c6:	7bfb      	ldrb	r3, [r7, #15]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f000 f909 	bl	800a5e0 <USBD_Get_USB_Status>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a3f6:	78fa      	ldrb	r2, [r7, #3]
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7f9 f878 	bl	80034f0 <HAL_PCD_EP_SetStall>
 800a400:	4603      	mov	r3, r0
 800a402:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a404:	7bfb      	ldrb	r3, [r7, #15]
 800a406:	4618      	mov	r0, r3
 800a408:	f000 f8ea 	bl	800a5e0 <USBD_Get_USB_Status>
 800a40c:	4603      	mov	r3, r0
 800a40e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a410:	7bbb      	ldrb	r3, [r7, #14]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	460b      	mov	r3, r1
 800a424:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a434:	78fa      	ldrb	r2, [r7, #3]
 800a436:	4611      	mov	r1, r2
 800a438:	4618      	mov	r0, r3
 800a43a:	f7f9 f8b9 	bl	80035b0 <HAL_PCD_EP_ClrStall>
 800a43e:	4603      	mov	r3, r0
 800a440:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a442:	7bfb      	ldrb	r3, [r7, #15]
 800a444:	4618      	mov	r0, r3
 800a446:	f000 f8cb 	bl	800a5e0 <USBD_Get_USB_Status>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a44e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	460b      	mov	r3, r1
 800a462:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a46a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a46c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a470:	2b00      	cmp	r3, #0
 800a472:	da0b      	bge.n	800a48c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a474:	78fb      	ldrb	r3, [r7, #3]
 800a476:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a47a:	68f9      	ldr	r1, [r7, #12]
 800a47c:	4613      	mov	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	00db      	lsls	r3, r3, #3
 800a484:	440b      	add	r3, r1
 800a486:	3312      	adds	r3, #18
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	e00b      	b.n	800a4a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a48c:	78fb      	ldrb	r3, [r7, #3]
 800a48e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a492:	68f9      	ldr	r1, [r7, #12]
 800a494:	4613      	mov	r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	4413      	add	r3, r2
 800a49a:	00db      	lsls	r3, r3, #3
 800a49c:	440b      	add	r3, r1
 800a49e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a4a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3714      	adds	r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bc80      	pop	{r7}
 800a4ac:	4770      	bx	lr

0800a4ae <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b084      	sub	sp, #16
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a4c8:	78fa      	ldrb	r2, [r7, #3]
 800a4ca:	4611      	mov	r1, r2
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7f8 fec7 	bl	8003260 <HAL_PCD_SetAddress>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4d6:	7bfb      	ldrb	r3, [r7, #15]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 f881 	bl	800a5e0 <USBD_Get_USB_Status>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	607a      	str	r2, [r7, #4]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	72fb      	strb	r3, [r7, #11]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a500:	2300      	movs	r3, #0
 800a502:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a504:	2300      	movs	r3, #0
 800a506:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a50e:	893b      	ldrh	r3, [r7, #8]
 800a510:	7af9      	ldrb	r1, [r7, #11]
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	f7f8 ffb5 	bl	8003482 <HAL_PCD_EP_Transmit>
 800a518:	4603      	mov	r3, r0
 800a51a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a51c:	7dfb      	ldrb	r3, [r7, #23]
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 f85e 	bl	800a5e0 <USBD_Get_USB_Status>
 800a524:	4603      	mov	r3, r0
 800a526:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a528:	7dbb      	ldrb	r3, [r7, #22]
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3718      	adds	r7, #24
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b086      	sub	sp, #24
 800a536:	af00      	add	r7, sp, #0
 800a538:	60f8      	str	r0, [r7, #12]
 800a53a:	607a      	str	r2, [r7, #4]
 800a53c:	461a      	mov	r2, r3
 800a53e:	460b      	mov	r3, r1
 800a540:	72fb      	strb	r3, [r7, #11]
 800a542:	4613      	mov	r3, r2
 800a544:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a554:	893b      	ldrh	r3, [r7, #8]
 800a556:	7af9      	ldrb	r1, [r7, #11]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	f7f8 ff4a 	bl	80033f2 <HAL_PCD_EP_Receive>
 800a55e:	4603      	mov	r3, r0
 800a560:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a562:	7dfb      	ldrb	r3, [r7, #23]
 800a564:	4618      	mov	r0, r3
 800a566:	f000 f83b 	bl	800a5e0 <USBD_Get_USB_Status>
 800a56a:	4603      	mov	r3, r0
 800a56c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a56e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3718      	adds	r7, #24
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	460b      	mov	r3, r1
 800a582:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a58a:	78fa      	ldrb	r2, [r7, #3]
 800a58c:	4611      	mov	r1, r2
 800a58e:	4618      	mov	r0, r3
 800a590:	f7f8 ff60 	bl	8003454 <HAL_PCD_EP_GetRxCount>
 800a594:	4603      	mov	r3, r0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
	...

0800a5a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a5a8:	4b02      	ldr	r3, [pc, #8]	@ (800a5b4 <USBD_static_malloc+0x14>)
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	370c      	adds	r7, #12
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bc80      	pop	{r7}
 800a5b2:	4770      	bx	lr
 800a5b4:	200013b0 	.word	0x200013b0

0800a5b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]

}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bc80      	pop	{r7}
 800a5c8:	4770      	bx	lr

0800a5ca <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b083      	sub	sp, #12
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a5d6:	bf00      	nop
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bc80      	pop	{r7}
 800a5de:	4770      	bx	lr

0800a5e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a5ee:	79fb      	ldrb	r3, [r7, #7]
 800a5f0:	2b03      	cmp	r3, #3
 800a5f2:	d817      	bhi.n	800a624 <USBD_Get_USB_Status+0x44>
 800a5f4:	a201      	add	r2, pc, #4	@ (adr r2, 800a5fc <USBD_Get_USB_Status+0x1c>)
 800a5f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5fa:	bf00      	nop
 800a5fc:	0800a60d 	.word	0x0800a60d
 800a600:	0800a613 	.word	0x0800a613
 800a604:	0800a619 	.word	0x0800a619
 800a608:	0800a61f 	.word	0x0800a61f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a60c:	2300      	movs	r3, #0
 800a60e:	73fb      	strb	r3, [r7, #15]
    break;
 800a610:	e00b      	b.n	800a62a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a612:	2302      	movs	r3, #2
 800a614:	73fb      	strb	r3, [r7, #15]
    break;
 800a616:	e008      	b.n	800a62a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a618:	2301      	movs	r3, #1
 800a61a:	73fb      	strb	r3, [r7, #15]
    break;
 800a61c:	e005      	b.n	800a62a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a61e:	2302      	movs	r3, #2
 800a620:	73fb      	strb	r3, [r7, #15]
    break;
 800a622:	e002      	b.n	800a62a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a624:	2302      	movs	r3, #2
 800a626:	73fb      	strb	r3, [r7, #15]
    break;
 800a628:	bf00      	nop
  }
  return usb_status;
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	bc80      	pop	{r7}
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop

0800a638 <siprintf>:
 800a638:	b40e      	push	{r1, r2, r3}
 800a63a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a63e:	b510      	push	{r4, lr}
 800a640:	2400      	movs	r4, #0
 800a642:	b09d      	sub	sp, #116	@ 0x74
 800a644:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a646:	9002      	str	r0, [sp, #8]
 800a648:	9006      	str	r0, [sp, #24]
 800a64a:	9107      	str	r1, [sp, #28]
 800a64c:	9104      	str	r1, [sp, #16]
 800a64e:	4809      	ldr	r0, [pc, #36]	@ (800a674 <siprintf+0x3c>)
 800a650:	4909      	ldr	r1, [pc, #36]	@ (800a678 <siprintf+0x40>)
 800a652:	f853 2b04 	ldr.w	r2, [r3], #4
 800a656:	9105      	str	r1, [sp, #20]
 800a658:	6800      	ldr	r0, [r0, #0]
 800a65a:	a902      	add	r1, sp, #8
 800a65c:	9301      	str	r3, [sp, #4]
 800a65e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a660:	f000 f992 	bl	800a988 <_svfiprintf_r>
 800a664:	9b02      	ldr	r3, [sp, #8]
 800a666:	701c      	strb	r4, [r3, #0]
 800a668:	b01d      	add	sp, #116	@ 0x74
 800a66a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a66e:	b003      	add	sp, #12
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	20000194 	.word	0x20000194
 800a678:	ffff0208 	.word	0xffff0208

0800a67c <memset>:
 800a67c:	4603      	mov	r3, r0
 800a67e:	4402      	add	r2, r0
 800a680:	4293      	cmp	r3, r2
 800a682:	d100      	bne.n	800a686 <memset+0xa>
 800a684:	4770      	bx	lr
 800a686:	f803 1b01 	strb.w	r1, [r3], #1
 800a68a:	e7f9      	b.n	800a680 <memset+0x4>

0800a68c <__errno>:
 800a68c:	4b01      	ldr	r3, [pc, #4]	@ (800a694 <__errno+0x8>)
 800a68e:	6818      	ldr	r0, [r3, #0]
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	20000194 	.word	0x20000194

0800a698 <__libc_init_array>:
 800a698:	b570      	push	{r4, r5, r6, lr}
 800a69a:	2600      	movs	r6, #0
 800a69c:	4d0c      	ldr	r5, [pc, #48]	@ (800a6d0 <__libc_init_array+0x38>)
 800a69e:	4c0d      	ldr	r4, [pc, #52]	@ (800a6d4 <__libc_init_array+0x3c>)
 800a6a0:	1b64      	subs	r4, r4, r5
 800a6a2:	10a4      	asrs	r4, r4, #2
 800a6a4:	42a6      	cmp	r6, r4
 800a6a6:	d109      	bne.n	800a6bc <__libc_init_array+0x24>
 800a6a8:	f000 fc76 	bl	800af98 <_init>
 800a6ac:	2600      	movs	r6, #0
 800a6ae:	4d0a      	ldr	r5, [pc, #40]	@ (800a6d8 <__libc_init_array+0x40>)
 800a6b0:	4c0a      	ldr	r4, [pc, #40]	@ (800a6dc <__libc_init_array+0x44>)
 800a6b2:	1b64      	subs	r4, r4, r5
 800a6b4:	10a4      	asrs	r4, r4, #2
 800a6b6:	42a6      	cmp	r6, r4
 800a6b8:	d105      	bne.n	800a6c6 <__libc_init_array+0x2e>
 800a6ba:	bd70      	pop	{r4, r5, r6, pc}
 800a6bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6c0:	4798      	blx	r3
 800a6c2:	3601      	adds	r6, #1
 800a6c4:	e7ee      	b.n	800a6a4 <__libc_init_array+0xc>
 800a6c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ca:	4798      	blx	r3
 800a6cc:	3601      	adds	r6, #1
 800a6ce:	e7f2      	b.n	800a6b6 <__libc_init_array+0x1e>
 800a6d0:	0800b108 	.word	0x0800b108
 800a6d4:	0800b108 	.word	0x0800b108
 800a6d8:	0800b108 	.word	0x0800b108
 800a6dc:	0800b10c 	.word	0x0800b10c

0800a6e0 <__retarget_lock_acquire_recursive>:
 800a6e0:	4770      	bx	lr

0800a6e2 <__retarget_lock_release_recursive>:
 800a6e2:	4770      	bx	lr

0800a6e4 <_free_r>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	4605      	mov	r5, r0
 800a6e8:	2900      	cmp	r1, #0
 800a6ea:	d040      	beq.n	800a76e <_free_r+0x8a>
 800a6ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6f0:	1f0c      	subs	r4, r1, #4
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	bfb8      	it	lt
 800a6f6:	18e4      	addlt	r4, r4, r3
 800a6f8:	f000 f8de 	bl	800a8b8 <__malloc_lock>
 800a6fc:	4a1c      	ldr	r2, [pc, #112]	@ (800a770 <_free_r+0x8c>)
 800a6fe:	6813      	ldr	r3, [r2, #0]
 800a700:	b933      	cbnz	r3, 800a710 <_free_r+0x2c>
 800a702:	6063      	str	r3, [r4, #4]
 800a704:	6014      	str	r4, [r2, #0]
 800a706:	4628      	mov	r0, r5
 800a708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a70c:	f000 b8da 	b.w	800a8c4 <__malloc_unlock>
 800a710:	42a3      	cmp	r3, r4
 800a712:	d908      	bls.n	800a726 <_free_r+0x42>
 800a714:	6820      	ldr	r0, [r4, #0]
 800a716:	1821      	adds	r1, r4, r0
 800a718:	428b      	cmp	r3, r1
 800a71a:	bf01      	itttt	eq
 800a71c:	6819      	ldreq	r1, [r3, #0]
 800a71e:	685b      	ldreq	r3, [r3, #4]
 800a720:	1809      	addeq	r1, r1, r0
 800a722:	6021      	streq	r1, [r4, #0]
 800a724:	e7ed      	b.n	800a702 <_free_r+0x1e>
 800a726:	461a      	mov	r2, r3
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	b10b      	cbz	r3, 800a730 <_free_r+0x4c>
 800a72c:	42a3      	cmp	r3, r4
 800a72e:	d9fa      	bls.n	800a726 <_free_r+0x42>
 800a730:	6811      	ldr	r1, [r2, #0]
 800a732:	1850      	adds	r0, r2, r1
 800a734:	42a0      	cmp	r0, r4
 800a736:	d10b      	bne.n	800a750 <_free_r+0x6c>
 800a738:	6820      	ldr	r0, [r4, #0]
 800a73a:	4401      	add	r1, r0
 800a73c:	1850      	adds	r0, r2, r1
 800a73e:	4283      	cmp	r3, r0
 800a740:	6011      	str	r1, [r2, #0]
 800a742:	d1e0      	bne.n	800a706 <_free_r+0x22>
 800a744:	6818      	ldr	r0, [r3, #0]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	4408      	add	r0, r1
 800a74a:	6010      	str	r0, [r2, #0]
 800a74c:	6053      	str	r3, [r2, #4]
 800a74e:	e7da      	b.n	800a706 <_free_r+0x22>
 800a750:	d902      	bls.n	800a758 <_free_r+0x74>
 800a752:	230c      	movs	r3, #12
 800a754:	602b      	str	r3, [r5, #0]
 800a756:	e7d6      	b.n	800a706 <_free_r+0x22>
 800a758:	6820      	ldr	r0, [r4, #0]
 800a75a:	1821      	adds	r1, r4, r0
 800a75c:	428b      	cmp	r3, r1
 800a75e:	bf01      	itttt	eq
 800a760:	6819      	ldreq	r1, [r3, #0]
 800a762:	685b      	ldreq	r3, [r3, #4]
 800a764:	1809      	addeq	r1, r1, r0
 800a766:	6021      	streq	r1, [r4, #0]
 800a768:	6063      	str	r3, [r4, #4]
 800a76a:	6054      	str	r4, [r2, #4]
 800a76c:	e7cb      	b.n	800a706 <_free_r+0x22>
 800a76e:	bd38      	pop	{r3, r4, r5, pc}
 800a770:	20001714 	.word	0x20001714

0800a774 <sbrk_aligned>:
 800a774:	b570      	push	{r4, r5, r6, lr}
 800a776:	4e0f      	ldr	r6, [pc, #60]	@ (800a7b4 <sbrk_aligned+0x40>)
 800a778:	460c      	mov	r4, r1
 800a77a:	6831      	ldr	r1, [r6, #0]
 800a77c:	4605      	mov	r5, r0
 800a77e:	b911      	cbnz	r1, 800a786 <sbrk_aligned+0x12>
 800a780:	f000 fba8 	bl	800aed4 <_sbrk_r>
 800a784:	6030      	str	r0, [r6, #0]
 800a786:	4621      	mov	r1, r4
 800a788:	4628      	mov	r0, r5
 800a78a:	f000 fba3 	bl	800aed4 <_sbrk_r>
 800a78e:	1c43      	adds	r3, r0, #1
 800a790:	d103      	bne.n	800a79a <sbrk_aligned+0x26>
 800a792:	f04f 34ff 	mov.w	r4, #4294967295
 800a796:	4620      	mov	r0, r4
 800a798:	bd70      	pop	{r4, r5, r6, pc}
 800a79a:	1cc4      	adds	r4, r0, #3
 800a79c:	f024 0403 	bic.w	r4, r4, #3
 800a7a0:	42a0      	cmp	r0, r4
 800a7a2:	d0f8      	beq.n	800a796 <sbrk_aligned+0x22>
 800a7a4:	1a21      	subs	r1, r4, r0
 800a7a6:	4628      	mov	r0, r5
 800a7a8:	f000 fb94 	bl	800aed4 <_sbrk_r>
 800a7ac:	3001      	adds	r0, #1
 800a7ae:	d1f2      	bne.n	800a796 <sbrk_aligned+0x22>
 800a7b0:	e7ef      	b.n	800a792 <sbrk_aligned+0x1e>
 800a7b2:	bf00      	nop
 800a7b4:	20001710 	.word	0x20001710

0800a7b8 <_malloc_r>:
 800a7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7bc:	1ccd      	adds	r5, r1, #3
 800a7be:	f025 0503 	bic.w	r5, r5, #3
 800a7c2:	3508      	adds	r5, #8
 800a7c4:	2d0c      	cmp	r5, #12
 800a7c6:	bf38      	it	cc
 800a7c8:	250c      	movcc	r5, #12
 800a7ca:	2d00      	cmp	r5, #0
 800a7cc:	4606      	mov	r6, r0
 800a7ce:	db01      	blt.n	800a7d4 <_malloc_r+0x1c>
 800a7d0:	42a9      	cmp	r1, r5
 800a7d2:	d904      	bls.n	800a7de <_malloc_r+0x26>
 800a7d4:	230c      	movs	r3, #12
 800a7d6:	6033      	str	r3, [r6, #0]
 800a7d8:	2000      	movs	r0, #0
 800a7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8b4 <_malloc_r+0xfc>
 800a7e2:	f000 f869 	bl	800a8b8 <__malloc_lock>
 800a7e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a7ea:	461c      	mov	r4, r3
 800a7ec:	bb44      	cbnz	r4, 800a840 <_malloc_r+0x88>
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f7ff ffbf 	bl	800a774 <sbrk_aligned>
 800a7f6:	1c43      	adds	r3, r0, #1
 800a7f8:	4604      	mov	r4, r0
 800a7fa:	d158      	bne.n	800a8ae <_malloc_r+0xf6>
 800a7fc:	f8d8 4000 	ldr.w	r4, [r8]
 800a800:	4627      	mov	r7, r4
 800a802:	2f00      	cmp	r7, #0
 800a804:	d143      	bne.n	800a88e <_malloc_r+0xd6>
 800a806:	2c00      	cmp	r4, #0
 800a808:	d04b      	beq.n	800a8a2 <_malloc_r+0xea>
 800a80a:	6823      	ldr	r3, [r4, #0]
 800a80c:	4639      	mov	r1, r7
 800a80e:	4630      	mov	r0, r6
 800a810:	eb04 0903 	add.w	r9, r4, r3
 800a814:	f000 fb5e 	bl	800aed4 <_sbrk_r>
 800a818:	4581      	cmp	r9, r0
 800a81a:	d142      	bne.n	800a8a2 <_malloc_r+0xea>
 800a81c:	6821      	ldr	r1, [r4, #0]
 800a81e:	4630      	mov	r0, r6
 800a820:	1a6d      	subs	r5, r5, r1
 800a822:	4629      	mov	r1, r5
 800a824:	f7ff ffa6 	bl	800a774 <sbrk_aligned>
 800a828:	3001      	adds	r0, #1
 800a82a:	d03a      	beq.n	800a8a2 <_malloc_r+0xea>
 800a82c:	6823      	ldr	r3, [r4, #0]
 800a82e:	442b      	add	r3, r5
 800a830:	6023      	str	r3, [r4, #0]
 800a832:	f8d8 3000 	ldr.w	r3, [r8]
 800a836:	685a      	ldr	r2, [r3, #4]
 800a838:	bb62      	cbnz	r2, 800a894 <_malloc_r+0xdc>
 800a83a:	f8c8 7000 	str.w	r7, [r8]
 800a83e:	e00f      	b.n	800a860 <_malloc_r+0xa8>
 800a840:	6822      	ldr	r2, [r4, #0]
 800a842:	1b52      	subs	r2, r2, r5
 800a844:	d420      	bmi.n	800a888 <_malloc_r+0xd0>
 800a846:	2a0b      	cmp	r2, #11
 800a848:	d917      	bls.n	800a87a <_malloc_r+0xc2>
 800a84a:	1961      	adds	r1, r4, r5
 800a84c:	42a3      	cmp	r3, r4
 800a84e:	6025      	str	r5, [r4, #0]
 800a850:	bf18      	it	ne
 800a852:	6059      	strne	r1, [r3, #4]
 800a854:	6863      	ldr	r3, [r4, #4]
 800a856:	bf08      	it	eq
 800a858:	f8c8 1000 	streq.w	r1, [r8]
 800a85c:	5162      	str	r2, [r4, r5]
 800a85e:	604b      	str	r3, [r1, #4]
 800a860:	4630      	mov	r0, r6
 800a862:	f000 f82f 	bl	800a8c4 <__malloc_unlock>
 800a866:	f104 000b 	add.w	r0, r4, #11
 800a86a:	1d23      	adds	r3, r4, #4
 800a86c:	f020 0007 	bic.w	r0, r0, #7
 800a870:	1ac2      	subs	r2, r0, r3
 800a872:	bf1c      	itt	ne
 800a874:	1a1b      	subne	r3, r3, r0
 800a876:	50a3      	strne	r3, [r4, r2]
 800a878:	e7af      	b.n	800a7da <_malloc_r+0x22>
 800a87a:	6862      	ldr	r2, [r4, #4]
 800a87c:	42a3      	cmp	r3, r4
 800a87e:	bf0c      	ite	eq
 800a880:	f8c8 2000 	streq.w	r2, [r8]
 800a884:	605a      	strne	r2, [r3, #4]
 800a886:	e7eb      	b.n	800a860 <_malloc_r+0xa8>
 800a888:	4623      	mov	r3, r4
 800a88a:	6864      	ldr	r4, [r4, #4]
 800a88c:	e7ae      	b.n	800a7ec <_malloc_r+0x34>
 800a88e:	463c      	mov	r4, r7
 800a890:	687f      	ldr	r7, [r7, #4]
 800a892:	e7b6      	b.n	800a802 <_malloc_r+0x4a>
 800a894:	461a      	mov	r2, r3
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	42a3      	cmp	r3, r4
 800a89a:	d1fb      	bne.n	800a894 <_malloc_r+0xdc>
 800a89c:	2300      	movs	r3, #0
 800a89e:	6053      	str	r3, [r2, #4]
 800a8a0:	e7de      	b.n	800a860 <_malloc_r+0xa8>
 800a8a2:	230c      	movs	r3, #12
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	6033      	str	r3, [r6, #0]
 800a8a8:	f000 f80c 	bl	800a8c4 <__malloc_unlock>
 800a8ac:	e794      	b.n	800a7d8 <_malloc_r+0x20>
 800a8ae:	6005      	str	r5, [r0, #0]
 800a8b0:	e7d6      	b.n	800a860 <_malloc_r+0xa8>
 800a8b2:	bf00      	nop
 800a8b4:	20001714 	.word	0x20001714

0800a8b8 <__malloc_lock>:
 800a8b8:	4801      	ldr	r0, [pc, #4]	@ (800a8c0 <__malloc_lock+0x8>)
 800a8ba:	f7ff bf11 	b.w	800a6e0 <__retarget_lock_acquire_recursive>
 800a8be:	bf00      	nop
 800a8c0:	2000170c 	.word	0x2000170c

0800a8c4 <__malloc_unlock>:
 800a8c4:	4801      	ldr	r0, [pc, #4]	@ (800a8cc <__malloc_unlock+0x8>)
 800a8c6:	f7ff bf0c 	b.w	800a6e2 <__retarget_lock_release_recursive>
 800a8ca:	bf00      	nop
 800a8cc:	2000170c 	.word	0x2000170c

0800a8d0 <__ssputs_r>:
 800a8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d4:	461f      	mov	r7, r3
 800a8d6:	688e      	ldr	r6, [r1, #8]
 800a8d8:	4682      	mov	sl, r0
 800a8da:	42be      	cmp	r6, r7
 800a8dc:	460c      	mov	r4, r1
 800a8de:	4690      	mov	r8, r2
 800a8e0:	680b      	ldr	r3, [r1, #0]
 800a8e2:	d82d      	bhi.n	800a940 <__ssputs_r+0x70>
 800a8e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a8ec:	d026      	beq.n	800a93c <__ssputs_r+0x6c>
 800a8ee:	6965      	ldr	r5, [r4, #20]
 800a8f0:	6909      	ldr	r1, [r1, #16]
 800a8f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8f6:	eba3 0901 	sub.w	r9, r3, r1
 800a8fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8fe:	1c7b      	adds	r3, r7, #1
 800a900:	444b      	add	r3, r9
 800a902:	106d      	asrs	r5, r5, #1
 800a904:	429d      	cmp	r5, r3
 800a906:	bf38      	it	cc
 800a908:	461d      	movcc	r5, r3
 800a90a:	0553      	lsls	r3, r2, #21
 800a90c:	d527      	bpl.n	800a95e <__ssputs_r+0x8e>
 800a90e:	4629      	mov	r1, r5
 800a910:	f7ff ff52 	bl	800a7b8 <_malloc_r>
 800a914:	4606      	mov	r6, r0
 800a916:	b360      	cbz	r0, 800a972 <__ssputs_r+0xa2>
 800a918:	464a      	mov	r2, r9
 800a91a:	6921      	ldr	r1, [r4, #16]
 800a91c:	f000 faf8 	bl	800af10 <memcpy>
 800a920:	89a3      	ldrh	r3, [r4, #12]
 800a922:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a92a:	81a3      	strh	r3, [r4, #12]
 800a92c:	6126      	str	r6, [r4, #16]
 800a92e:	444e      	add	r6, r9
 800a930:	6026      	str	r6, [r4, #0]
 800a932:	463e      	mov	r6, r7
 800a934:	6165      	str	r5, [r4, #20]
 800a936:	eba5 0509 	sub.w	r5, r5, r9
 800a93a:	60a5      	str	r5, [r4, #8]
 800a93c:	42be      	cmp	r6, r7
 800a93e:	d900      	bls.n	800a942 <__ssputs_r+0x72>
 800a940:	463e      	mov	r6, r7
 800a942:	4632      	mov	r2, r6
 800a944:	4641      	mov	r1, r8
 800a946:	6820      	ldr	r0, [r4, #0]
 800a948:	f000 faaa 	bl	800aea0 <memmove>
 800a94c:	2000      	movs	r0, #0
 800a94e:	68a3      	ldr	r3, [r4, #8]
 800a950:	1b9b      	subs	r3, r3, r6
 800a952:	60a3      	str	r3, [r4, #8]
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	4433      	add	r3, r6
 800a958:	6023      	str	r3, [r4, #0]
 800a95a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a95e:	462a      	mov	r2, r5
 800a960:	f000 fae4 	bl	800af2c <_realloc_r>
 800a964:	4606      	mov	r6, r0
 800a966:	2800      	cmp	r0, #0
 800a968:	d1e0      	bne.n	800a92c <__ssputs_r+0x5c>
 800a96a:	4650      	mov	r0, sl
 800a96c:	6921      	ldr	r1, [r4, #16]
 800a96e:	f7ff feb9 	bl	800a6e4 <_free_r>
 800a972:	230c      	movs	r3, #12
 800a974:	f8ca 3000 	str.w	r3, [sl]
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	f04f 30ff 	mov.w	r0, #4294967295
 800a97e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a982:	81a3      	strh	r3, [r4, #12]
 800a984:	e7e9      	b.n	800a95a <__ssputs_r+0x8a>
	...

0800a988 <_svfiprintf_r>:
 800a988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98c:	4698      	mov	r8, r3
 800a98e:	898b      	ldrh	r3, [r1, #12]
 800a990:	4607      	mov	r7, r0
 800a992:	061b      	lsls	r3, r3, #24
 800a994:	460d      	mov	r5, r1
 800a996:	4614      	mov	r4, r2
 800a998:	b09d      	sub	sp, #116	@ 0x74
 800a99a:	d510      	bpl.n	800a9be <_svfiprintf_r+0x36>
 800a99c:	690b      	ldr	r3, [r1, #16]
 800a99e:	b973      	cbnz	r3, 800a9be <_svfiprintf_r+0x36>
 800a9a0:	2140      	movs	r1, #64	@ 0x40
 800a9a2:	f7ff ff09 	bl	800a7b8 <_malloc_r>
 800a9a6:	6028      	str	r0, [r5, #0]
 800a9a8:	6128      	str	r0, [r5, #16]
 800a9aa:	b930      	cbnz	r0, 800a9ba <_svfiprintf_r+0x32>
 800a9ac:	230c      	movs	r3, #12
 800a9ae:	603b      	str	r3, [r7, #0]
 800a9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b4:	b01d      	add	sp, #116	@ 0x74
 800a9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ba:	2340      	movs	r3, #64	@ 0x40
 800a9bc:	616b      	str	r3, [r5, #20]
 800a9be:	2300      	movs	r3, #0
 800a9c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9c2:	2320      	movs	r3, #32
 800a9c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9c8:	2330      	movs	r3, #48	@ 0x30
 800a9ca:	f04f 0901 	mov.w	r9, #1
 800a9ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9d2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ab6c <_svfiprintf_r+0x1e4>
 800a9d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9da:	4623      	mov	r3, r4
 800a9dc:	469a      	mov	sl, r3
 800a9de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9e2:	b10a      	cbz	r2, 800a9e8 <_svfiprintf_r+0x60>
 800a9e4:	2a25      	cmp	r2, #37	@ 0x25
 800a9e6:	d1f9      	bne.n	800a9dc <_svfiprintf_r+0x54>
 800a9e8:	ebba 0b04 	subs.w	fp, sl, r4
 800a9ec:	d00b      	beq.n	800aa06 <_svfiprintf_r+0x7e>
 800a9ee:	465b      	mov	r3, fp
 800a9f0:	4622      	mov	r2, r4
 800a9f2:	4629      	mov	r1, r5
 800a9f4:	4638      	mov	r0, r7
 800a9f6:	f7ff ff6b 	bl	800a8d0 <__ssputs_r>
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	f000 80a7 	beq.w	800ab4e <_svfiprintf_r+0x1c6>
 800aa00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa02:	445a      	add	r2, fp
 800aa04:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa06:	f89a 3000 	ldrb.w	r3, [sl]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f000 809f 	beq.w	800ab4e <_svfiprintf_r+0x1c6>
 800aa10:	2300      	movs	r3, #0
 800aa12:	f04f 32ff 	mov.w	r2, #4294967295
 800aa16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa1a:	f10a 0a01 	add.w	sl, sl, #1
 800aa1e:	9304      	str	r3, [sp, #16]
 800aa20:	9307      	str	r3, [sp, #28]
 800aa22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa26:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa28:	4654      	mov	r4, sl
 800aa2a:	2205      	movs	r2, #5
 800aa2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa30:	484e      	ldr	r0, [pc, #312]	@ (800ab6c <_svfiprintf_r+0x1e4>)
 800aa32:	f000 fa5f 	bl	800aef4 <memchr>
 800aa36:	9a04      	ldr	r2, [sp, #16]
 800aa38:	b9d8      	cbnz	r0, 800aa72 <_svfiprintf_r+0xea>
 800aa3a:	06d0      	lsls	r0, r2, #27
 800aa3c:	bf44      	itt	mi
 800aa3e:	2320      	movmi	r3, #32
 800aa40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa44:	0711      	lsls	r1, r2, #28
 800aa46:	bf44      	itt	mi
 800aa48:	232b      	movmi	r3, #43	@ 0x2b
 800aa4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa4e:	f89a 3000 	ldrb.w	r3, [sl]
 800aa52:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa54:	d015      	beq.n	800aa82 <_svfiprintf_r+0xfa>
 800aa56:	4654      	mov	r4, sl
 800aa58:	2000      	movs	r0, #0
 800aa5a:	f04f 0c0a 	mov.w	ip, #10
 800aa5e:	9a07      	ldr	r2, [sp, #28]
 800aa60:	4621      	mov	r1, r4
 800aa62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa66:	3b30      	subs	r3, #48	@ 0x30
 800aa68:	2b09      	cmp	r3, #9
 800aa6a:	d94b      	bls.n	800ab04 <_svfiprintf_r+0x17c>
 800aa6c:	b1b0      	cbz	r0, 800aa9c <_svfiprintf_r+0x114>
 800aa6e:	9207      	str	r2, [sp, #28]
 800aa70:	e014      	b.n	800aa9c <_svfiprintf_r+0x114>
 800aa72:	eba0 0308 	sub.w	r3, r0, r8
 800aa76:	fa09 f303 	lsl.w	r3, r9, r3
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	46a2      	mov	sl, r4
 800aa7e:	9304      	str	r3, [sp, #16]
 800aa80:	e7d2      	b.n	800aa28 <_svfiprintf_r+0xa0>
 800aa82:	9b03      	ldr	r3, [sp, #12]
 800aa84:	1d19      	adds	r1, r3, #4
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	9103      	str	r1, [sp, #12]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	bfbb      	ittet	lt
 800aa8e:	425b      	neglt	r3, r3
 800aa90:	f042 0202 	orrlt.w	r2, r2, #2
 800aa94:	9307      	strge	r3, [sp, #28]
 800aa96:	9307      	strlt	r3, [sp, #28]
 800aa98:	bfb8      	it	lt
 800aa9a:	9204      	strlt	r2, [sp, #16]
 800aa9c:	7823      	ldrb	r3, [r4, #0]
 800aa9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800aaa0:	d10a      	bne.n	800aab8 <_svfiprintf_r+0x130>
 800aaa2:	7863      	ldrb	r3, [r4, #1]
 800aaa4:	2b2a      	cmp	r3, #42	@ 0x2a
 800aaa6:	d132      	bne.n	800ab0e <_svfiprintf_r+0x186>
 800aaa8:	9b03      	ldr	r3, [sp, #12]
 800aaaa:	3402      	adds	r4, #2
 800aaac:	1d1a      	adds	r2, r3, #4
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	9203      	str	r2, [sp, #12]
 800aab2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aab6:	9305      	str	r3, [sp, #20]
 800aab8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ab70 <_svfiprintf_r+0x1e8>
 800aabc:	2203      	movs	r2, #3
 800aabe:	4650      	mov	r0, sl
 800aac0:	7821      	ldrb	r1, [r4, #0]
 800aac2:	f000 fa17 	bl	800aef4 <memchr>
 800aac6:	b138      	cbz	r0, 800aad8 <_svfiprintf_r+0x150>
 800aac8:	2240      	movs	r2, #64	@ 0x40
 800aaca:	9b04      	ldr	r3, [sp, #16]
 800aacc:	eba0 000a 	sub.w	r0, r0, sl
 800aad0:	4082      	lsls	r2, r0
 800aad2:	4313      	orrs	r3, r2
 800aad4:	3401      	adds	r4, #1
 800aad6:	9304      	str	r3, [sp, #16]
 800aad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aadc:	2206      	movs	r2, #6
 800aade:	4825      	ldr	r0, [pc, #148]	@ (800ab74 <_svfiprintf_r+0x1ec>)
 800aae0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aae4:	f000 fa06 	bl	800aef4 <memchr>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d036      	beq.n	800ab5a <_svfiprintf_r+0x1d2>
 800aaec:	4b22      	ldr	r3, [pc, #136]	@ (800ab78 <_svfiprintf_r+0x1f0>)
 800aaee:	bb1b      	cbnz	r3, 800ab38 <_svfiprintf_r+0x1b0>
 800aaf0:	9b03      	ldr	r3, [sp, #12]
 800aaf2:	3307      	adds	r3, #7
 800aaf4:	f023 0307 	bic.w	r3, r3, #7
 800aaf8:	3308      	adds	r3, #8
 800aafa:	9303      	str	r3, [sp, #12]
 800aafc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aafe:	4433      	add	r3, r6
 800ab00:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab02:	e76a      	b.n	800a9da <_svfiprintf_r+0x52>
 800ab04:	460c      	mov	r4, r1
 800ab06:	2001      	movs	r0, #1
 800ab08:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab0c:	e7a8      	b.n	800aa60 <_svfiprintf_r+0xd8>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	f04f 0c0a 	mov.w	ip, #10
 800ab14:	4619      	mov	r1, r3
 800ab16:	3401      	adds	r4, #1
 800ab18:	9305      	str	r3, [sp, #20]
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab20:	3a30      	subs	r2, #48	@ 0x30
 800ab22:	2a09      	cmp	r2, #9
 800ab24:	d903      	bls.n	800ab2e <_svfiprintf_r+0x1a6>
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d0c6      	beq.n	800aab8 <_svfiprintf_r+0x130>
 800ab2a:	9105      	str	r1, [sp, #20]
 800ab2c:	e7c4      	b.n	800aab8 <_svfiprintf_r+0x130>
 800ab2e:	4604      	mov	r4, r0
 800ab30:	2301      	movs	r3, #1
 800ab32:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab36:	e7f0      	b.n	800ab1a <_svfiprintf_r+0x192>
 800ab38:	ab03      	add	r3, sp, #12
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	462a      	mov	r2, r5
 800ab3e:	4638      	mov	r0, r7
 800ab40:	4b0e      	ldr	r3, [pc, #56]	@ (800ab7c <_svfiprintf_r+0x1f4>)
 800ab42:	a904      	add	r1, sp, #16
 800ab44:	f3af 8000 	nop.w
 800ab48:	1c42      	adds	r2, r0, #1
 800ab4a:	4606      	mov	r6, r0
 800ab4c:	d1d6      	bne.n	800aafc <_svfiprintf_r+0x174>
 800ab4e:	89ab      	ldrh	r3, [r5, #12]
 800ab50:	065b      	lsls	r3, r3, #25
 800ab52:	f53f af2d 	bmi.w	800a9b0 <_svfiprintf_r+0x28>
 800ab56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab58:	e72c      	b.n	800a9b4 <_svfiprintf_r+0x2c>
 800ab5a:	ab03      	add	r3, sp, #12
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	462a      	mov	r2, r5
 800ab60:	4638      	mov	r0, r7
 800ab62:	4b06      	ldr	r3, [pc, #24]	@ (800ab7c <_svfiprintf_r+0x1f4>)
 800ab64:	a904      	add	r1, sp, #16
 800ab66:	f000 f87d 	bl	800ac64 <_printf_i>
 800ab6a:	e7ed      	b.n	800ab48 <_svfiprintf_r+0x1c0>
 800ab6c:	0800b0ca 	.word	0x0800b0ca
 800ab70:	0800b0d0 	.word	0x0800b0d0
 800ab74:	0800b0d4 	.word	0x0800b0d4
 800ab78:	00000000 	.word	0x00000000
 800ab7c:	0800a8d1 	.word	0x0800a8d1

0800ab80 <_printf_common>:
 800ab80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab84:	4616      	mov	r6, r2
 800ab86:	4698      	mov	r8, r3
 800ab88:	688a      	ldr	r2, [r1, #8]
 800ab8a:	690b      	ldr	r3, [r1, #16]
 800ab8c:	4607      	mov	r7, r0
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	bfb8      	it	lt
 800ab92:	4613      	movlt	r3, r2
 800ab94:	6033      	str	r3, [r6, #0]
 800ab96:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aba0:	b10a      	cbz	r2, 800aba6 <_printf_common+0x26>
 800aba2:	3301      	adds	r3, #1
 800aba4:	6033      	str	r3, [r6, #0]
 800aba6:	6823      	ldr	r3, [r4, #0]
 800aba8:	0699      	lsls	r1, r3, #26
 800abaa:	bf42      	ittt	mi
 800abac:	6833      	ldrmi	r3, [r6, #0]
 800abae:	3302      	addmi	r3, #2
 800abb0:	6033      	strmi	r3, [r6, #0]
 800abb2:	6825      	ldr	r5, [r4, #0]
 800abb4:	f015 0506 	ands.w	r5, r5, #6
 800abb8:	d106      	bne.n	800abc8 <_printf_common+0x48>
 800abba:	f104 0a19 	add.w	sl, r4, #25
 800abbe:	68e3      	ldr	r3, [r4, #12]
 800abc0:	6832      	ldr	r2, [r6, #0]
 800abc2:	1a9b      	subs	r3, r3, r2
 800abc4:	42ab      	cmp	r3, r5
 800abc6:	dc2b      	bgt.n	800ac20 <_printf_common+0xa0>
 800abc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abcc:	6822      	ldr	r2, [r4, #0]
 800abce:	3b00      	subs	r3, #0
 800abd0:	bf18      	it	ne
 800abd2:	2301      	movne	r3, #1
 800abd4:	0692      	lsls	r2, r2, #26
 800abd6:	d430      	bmi.n	800ac3a <_printf_common+0xba>
 800abd8:	4641      	mov	r1, r8
 800abda:	4638      	mov	r0, r7
 800abdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800abe0:	47c8      	blx	r9
 800abe2:	3001      	adds	r0, #1
 800abe4:	d023      	beq.n	800ac2e <_printf_common+0xae>
 800abe6:	6823      	ldr	r3, [r4, #0]
 800abe8:	6922      	ldr	r2, [r4, #16]
 800abea:	f003 0306 	and.w	r3, r3, #6
 800abee:	2b04      	cmp	r3, #4
 800abf0:	bf14      	ite	ne
 800abf2:	2500      	movne	r5, #0
 800abf4:	6833      	ldreq	r3, [r6, #0]
 800abf6:	f04f 0600 	mov.w	r6, #0
 800abfa:	bf08      	it	eq
 800abfc:	68e5      	ldreq	r5, [r4, #12]
 800abfe:	f104 041a 	add.w	r4, r4, #26
 800ac02:	bf08      	it	eq
 800ac04:	1aed      	subeq	r5, r5, r3
 800ac06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ac0a:	bf08      	it	eq
 800ac0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac10:	4293      	cmp	r3, r2
 800ac12:	bfc4      	itt	gt
 800ac14:	1a9b      	subgt	r3, r3, r2
 800ac16:	18ed      	addgt	r5, r5, r3
 800ac18:	42b5      	cmp	r5, r6
 800ac1a:	d11a      	bne.n	800ac52 <_printf_common+0xd2>
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	e008      	b.n	800ac32 <_printf_common+0xb2>
 800ac20:	2301      	movs	r3, #1
 800ac22:	4652      	mov	r2, sl
 800ac24:	4641      	mov	r1, r8
 800ac26:	4638      	mov	r0, r7
 800ac28:	47c8      	blx	r9
 800ac2a:	3001      	adds	r0, #1
 800ac2c:	d103      	bne.n	800ac36 <_printf_common+0xb6>
 800ac2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac36:	3501      	adds	r5, #1
 800ac38:	e7c1      	b.n	800abbe <_printf_common+0x3e>
 800ac3a:	2030      	movs	r0, #48	@ 0x30
 800ac3c:	18e1      	adds	r1, r4, r3
 800ac3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac42:	1c5a      	adds	r2, r3, #1
 800ac44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac48:	4422      	add	r2, r4
 800ac4a:	3302      	adds	r3, #2
 800ac4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac50:	e7c2      	b.n	800abd8 <_printf_common+0x58>
 800ac52:	2301      	movs	r3, #1
 800ac54:	4622      	mov	r2, r4
 800ac56:	4641      	mov	r1, r8
 800ac58:	4638      	mov	r0, r7
 800ac5a:	47c8      	blx	r9
 800ac5c:	3001      	adds	r0, #1
 800ac5e:	d0e6      	beq.n	800ac2e <_printf_common+0xae>
 800ac60:	3601      	adds	r6, #1
 800ac62:	e7d9      	b.n	800ac18 <_printf_common+0x98>

0800ac64 <_printf_i>:
 800ac64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac68:	7e0f      	ldrb	r7, [r1, #24]
 800ac6a:	4691      	mov	r9, r2
 800ac6c:	2f78      	cmp	r7, #120	@ 0x78
 800ac6e:	4680      	mov	r8, r0
 800ac70:	460c      	mov	r4, r1
 800ac72:	469a      	mov	sl, r3
 800ac74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac7a:	d807      	bhi.n	800ac8c <_printf_i+0x28>
 800ac7c:	2f62      	cmp	r7, #98	@ 0x62
 800ac7e:	d80a      	bhi.n	800ac96 <_printf_i+0x32>
 800ac80:	2f00      	cmp	r7, #0
 800ac82:	f000 80d1 	beq.w	800ae28 <_printf_i+0x1c4>
 800ac86:	2f58      	cmp	r7, #88	@ 0x58
 800ac88:	f000 80b8 	beq.w	800adfc <_printf_i+0x198>
 800ac8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac94:	e03a      	b.n	800ad0c <_printf_i+0xa8>
 800ac96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac9a:	2b15      	cmp	r3, #21
 800ac9c:	d8f6      	bhi.n	800ac8c <_printf_i+0x28>
 800ac9e:	a101      	add	r1, pc, #4	@ (adr r1, 800aca4 <_printf_i+0x40>)
 800aca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aca4:	0800acfd 	.word	0x0800acfd
 800aca8:	0800ad11 	.word	0x0800ad11
 800acac:	0800ac8d 	.word	0x0800ac8d
 800acb0:	0800ac8d 	.word	0x0800ac8d
 800acb4:	0800ac8d 	.word	0x0800ac8d
 800acb8:	0800ac8d 	.word	0x0800ac8d
 800acbc:	0800ad11 	.word	0x0800ad11
 800acc0:	0800ac8d 	.word	0x0800ac8d
 800acc4:	0800ac8d 	.word	0x0800ac8d
 800acc8:	0800ac8d 	.word	0x0800ac8d
 800accc:	0800ac8d 	.word	0x0800ac8d
 800acd0:	0800ae0f 	.word	0x0800ae0f
 800acd4:	0800ad3b 	.word	0x0800ad3b
 800acd8:	0800adc9 	.word	0x0800adc9
 800acdc:	0800ac8d 	.word	0x0800ac8d
 800ace0:	0800ac8d 	.word	0x0800ac8d
 800ace4:	0800ae31 	.word	0x0800ae31
 800ace8:	0800ac8d 	.word	0x0800ac8d
 800acec:	0800ad3b 	.word	0x0800ad3b
 800acf0:	0800ac8d 	.word	0x0800ac8d
 800acf4:	0800ac8d 	.word	0x0800ac8d
 800acf8:	0800add1 	.word	0x0800add1
 800acfc:	6833      	ldr	r3, [r6, #0]
 800acfe:	1d1a      	adds	r2, r3, #4
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	6032      	str	r2, [r6, #0]
 800ad04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e09c      	b.n	800ae4a <_printf_i+0x1e6>
 800ad10:	6833      	ldr	r3, [r6, #0]
 800ad12:	6820      	ldr	r0, [r4, #0]
 800ad14:	1d19      	adds	r1, r3, #4
 800ad16:	6031      	str	r1, [r6, #0]
 800ad18:	0606      	lsls	r6, r0, #24
 800ad1a:	d501      	bpl.n	800ad20 <_printf_i+0xbc>
 800ad1c:	681d      	ldr	r5, [r3, #0]
 800ad1e:	e003      	b.n	800ad28 <_printf_i+0xc4>
 800ad20:	0645      	lsls	r5, r0, #25
 800ad22:	d5fb      	bpl.n	800ad1c <_printf_i+0xb8>
 800ad24:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad28:	2d00      	cmp	r5, #0
 800ad2a:	da03      	bge.n	800ad34 <_printf_i+0xd0>
 800ad2c:	232d      	movs	r3, #45	@ 0x2d
 800ad2e:	426d      	negs	r5, r5
 800ad30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad34:	230a      	movs	r3, #10
 800ad36:	4858      	ldr	r0, [pc, #352]	@ (800ae98 <_printf_i+0x234>)
 800ad38:	e011      	b.n	800ad5e <_printf_i+0xfa>
 800ad3a:	6821      	ldr	r1, [r4, #0]
 800ad3c:	6833      	ldr	r3, [r6, #0]
 800ad3e:	0608      	lsls	r0, r1, #24
 800ad40:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad44:	d402      	bmi.n	800ad4c <_printf_i+0xe8>
 800ad46:	0649      	lsls	r1, r1, #25
 800ad48:	bf48      	it	mi
 800ad4a:	b2ad      	uxthmi	r5, r5
 800ad4c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad4e:	6033      	str	r3, [r6, #0]
 800ad50:	bf14      	ite	ne
 800ad52:	230a      	movne	r3, #10
 800ad54:	2308      	moveq	r3, #8
 800ad56:	4850      	ldr	r0, [pc, #320]	@ (800ae98 <_printf_i+0x234>)
 800ad58:	2100      	movs	r1, #0
 800ad5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad5e:	6866      	ldr	r6, [r4, #4]
 800ad60:	2e00      	cmp	r6, #0
 800ad62:	60a6      	str	r6, [r4, #8]
 800ad64:	db05      	blt.n	800ad72 <_printf_i+0x10e>
 800ad66:	6821      	ldr	r1, [r4, #0]
 800ad68:	432e      	orrs	r6, r5
 800ad6a:	f021 0104 	bic.w	r1, r1, #4
 800ad6e:	6021      	str	r1, [r4, #0]
 800ad70:	d04b      	beq.n	800ae0a <_printf_i+0x1a6>
 800ad72:	4616      	mov	r6, r2
 800ad74:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad78:	fb03 5711 	mls	r7, r3, r1, r5
 800ad7c:	5dc7      	ldrb	r7, [r0, r7]
 800ad7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad82:	462f      	mov	r7, r5
 800ad84:	42bb      	cmp	r3, r7
 800ad86:	460d      	mov	r5, r1
 800ad88:	d9f4      	bls.n	800ad74 <_printf_i+0x110>
 800ad8a:	2b08      	cmp	r3, #8
 800ad8c:	d10b      	bne.n	800ada6 <_printf_i+0x142>
 800ad8e:	6823      	ldr	r3, [r4, #0]
 800ad90:	07df      	lsls	r7, r3, #31
 800ad92:	d508      	bpl.n	800ada6 <_printf_i+0x142>
 800ad94:	6923      	ldr	r3, [r4, #16]
 800ad96:	6861      	ldr	r1, [r4, #4]
 800ad98:	4299      	cmp	r1, r3
 800ad9a:	bfde      	ittt	le
 800ad9c:	2330      	movle	r3, #48	@ 0x30
 800ad9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ada2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ada6:	1b92      	subs	r2, r2, r6
 800ada8:	6122      	str	r2, [r4, #16]
 800adaa:	464b      	mov	r3, r9
 800adac:	4621      	mov	r1, r4
 800adae:	4640      	mov	r0, r8
 800adb0:	f8cd a000 	str.w	sl, [sp]
 800adb4:	aa03      	add	r2, sp, #12
 800adb6:	f7ff fee3 	bl	800ab80 <_printf_common>
 800adba:	3001      	adds	r0, #1
 800adbc:	d14a      	bne.n	800ae54 <_printf_i+0x1f0>
 800adbe:	f04f 30ff 	mov.w	r0, #4294967295
 800adc2:	b004      	add	sp, #16
 800adc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adc8:	6823      	ldr	r3, [r4, #0]
 800adca:	f043 0320 	orr.w	r3, r3, #32
 800adce:	6023      	str	r3, [r4, #0]
 800add0:	2778      	movs	r7, #120	@ 0x78
 800add2:	4832      	ldr	r0, [pc, #200]	@ (800ae9c <_printf_i+0x238>)
 800add4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800add8:	6823      	ldr	r3, [r4, #0]
 800adda:	6831      	ldr	r1, [r6, #0]
 800addc:	061f      	lsls	r7, r3, #24
 800adde:	f851 5b04 	ldr.w	r5, [r1], #4
 800ade2:	d402      	bmi.n	800adea <_printf_i+0x186>
 800ade4:	065f      	lsls	r7, r3, #25
 800ade6:	bf48      	it	mi
 800ade8:	b2ad      	uxthmi	r5, r5
 800adea:	6031      	str	r1, [r6, #0]
 800adec:	07d9      	lsls	r1, r3, #31
 800adee:	bf44      	itt	mi
 800adf0:	f043 0320 	orrmi.w	r3, r3, #32
 800adf4:	6023      	strmi	r3, [r4, #0]
 800adf6:	b11d      	cbz	r5, 800ae00 <_printf_i+0x19c>
 800adf8:	2310      	movs	r3, #16
 800adfa:	e7ad      	b.n	800ad58 <_printf_i+0xf4>
 800adfc:	4826      	ldr	r0, [pc, #152]	@ (800ae98 <_printf_i+0x234>)
 800adfe:	e7e9      	b.n	800add4 <_printf_i+0x170>
 800ae00:	6823      	ldr	r3, [r4, #0]
 800ae02:	f023 0320 	bic.w	r3, r3, #32
 800ae06:	6023      	str	r3, [r4, #0]
 800ae08:	e7f6      	b.n	800adf8 <_printf_i+0x194>
 800ae0a:	4616      	mov	r6, r2
 800ae0c:	e7bd      	b.n	800ad8a <_printf_i+0x126>
 800ae0e:	6833      	ldr	r3, [r6, #0]
 800ae10:	6825      	ldr	r5, [r4, #0]
 800ae12:	1d18      	adds	r0, r3, #4
 800ae14:	6961      	ldr	r1, [r4, #20]
 800ae16:	6030      	str	r0, [r6, #0]
 800ae18:	062e      	lsls	r6, r5, #24
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	d501      	bpl.n	800ae22 <_printf_i+0x1be>
 800ae1e:	6019      	str	r1, [r3, #0]
 800ae20:	e002      	b.n	800ae28 <_printf_i+0x1c4>
 800ae22:	0668      	lsls	r0, r5, #25
 800ae24:	d5fb      	bpl.n	800ae1e <_printf_i+0x1ba>
 800ae26:	8019      	strh	r1, [r3, #0]
 800ae28:	2300      	movs	r3, #0
 800ae2a:	4616      	mov	r6, r2
 800ae2c:	6123      	str	r3, [r4, #16]
 800ae2e:	e7bc      	b.n	800adaa <_printf_i+0x146>
 800ae30:	6833      	ldr	r3, [r6, #0]
 800ae32:	2100      	movs	r1, #0
 800ae34:	1d1a      	adds	r2, r3, #4
 800ae36:	6032      	str	r2, [r6, #0]
 800ae38:	681e      	ldr	r6, [r3, #0]
 800ae3a:	6862      	ldr	r2, [r4, #4]
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	f000 f859 	bl	800aef4 <memchr>
 800ae42:	b108      	cbz	r0, 800ae48 <_printf_i+0x1e4>
 800ae44:	1b80      	subs	r0, r0, r6
 800ae46:	6060      	str	r0, [r4, #4]
 800ae48:	6863      	ldr	r3, [r4, #4]
 800ae4a:	6123      	str	r3, [r4, #16]
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae52:	e7aa      	b.n	800adaa <_printf_i+0x146>
 800ae54:	4632      	mov	r2, r6
 800ae56:	4649      	mov	r1, r9
 800ae58:	4640      	mov	r0, r8
 800ae5a:	6923      	ldr	r3, [r4, #16]
 800ae5c:	47d0      	blx	sl
 800ae5e:	3001      	adds	r0, #1
 800ae60:	d0ad      	beq.n	800adbe <_printf_i+0x15a>
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	079b      	lsls	r3, r3, #30
 800ae66:	d413      	bmi.n	800ae90 <_printf_i+0x22c>
 800ae68:	68e0      	ldr	r0, [r4, #12]
 800ae6a:	9b03      	ldr	r3, [sp, #12]
 800ae6c:	4298      	cmp	r0, r3
 800ae6e:	bfb8      	it	lt
 800ae70:	4618      	movlt	r0, r3
 800ae72:	e7a6      	b.n	800adc2 <_printf_i+0x15e>
 800ae74:	2301      	movs	r3, #1
 800ae76:	4632      	mov	r2, r6
 800ae78:	4649      	mov	r1, r9
 800ae7a:	4640      	mov	r0, r8
 800ae7c:	47d0      	blx	sl
 800ae7e:	3001      	adds	r0, #1
 800ae80:	d09d      	beq.n	800adbe <_printf_i+0x15a>
 800ae82:	3501      	adds	r5, #1
 800ae84:	68e3      	ldr	r3, [r4, #12]
 800ae86:	9903      	ldr	r1, [sp, #12]
 800ae88:	1a5b      	subs	r3, r3, r1
 800ae8a:	42ab      	cmp	r3, r5
 800ae8c:	dcf2      	bgt.n	800ae74 <_printf_i+0x210>
 800ae8e:	e7eb      	b.n	800ae68 <_printf_i+0x204>
 800ae90:	2500      	movs	r5, #0
 800ae92:	f104 0619 	add.w	r6, r4, #25
 800ae96:	e7f5      	b.n	800ae84 <_printf_i+0x220>
 800ae98:	0800b0db 	.word	0x0800b0db
 800ae9c:	0800b0ec 	.word	0x0800b0ec

0800aea0 <memmove>:
 800aea0:	4288      	cmp	r0, r1
 800aea2:	b510      	push	{r4, lr}
 800aea4:	eb01 0402 	add.w	r4, r1, r2
 800aea8:	d902      	bls.n	800aeb0 <memmove+0x10>
 800aeaa:	4284      	cmp	r4, r0
 800aeac:	4623      	mov	r3, r4
 800aeae:	d807      	bhi.n	800aec0 <memmove+0x20>
 800aeb0:	1e43      	subs	r3, r0, #1
 800aeb2:	42a1      	cmp	r1, r4
 800aeb4:	d008      	beq.n	800aec8 <memmove+0x28>
 800aeb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aebe:	e7f8      	b.n	800aeb2 <memmove+0x12>
 800aec0:	4601      	mov	r1, r0
 800aec2:	4402      	add	r2, r0
 800aec4:	428a      	cmp	r2, r1
 800aec6:	d100      	bne.n	800aeca <memmove+0x2a>
 800aec8:	bd10      	pop	{r4, pc}
 800aeca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aece:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aed2:	e7f7      	b.n	800aec4 <memmove+0x24>

0800aed4 <_sbrk_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	2300      	movs	r3, #0
 800aed8:	4d05      	ldr	r5, [pc, #20]	@ (800aef0 <_sbrk_r+0x1c>)
 800aeda:	4604      	mov	r4, r0
 800aedc:	4608      	mov	r0, r1
 800aede:	602b      	str	r3, [r5, #0]
 800aee0:	f7f7 fbbe 	bl	8002660 <_sbrk>
 800aee4:	1c43      	adds	r3, r0, #1
 800aee6:	d102      	bne.n	800aeee <_sbrk_r+0x1a>
 800aee8:	682b      	ldr	r3, [r5, #0]
 800aeea:	b103      	cbz	r3, 800aeee <_sbrk_r+0x1a>
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	bd38      	pop	{r3, r4, r5, pc}
 800aef0:	20001708 	.word	0x20001708

0800aef4 <memchr>:
 800aef4:	4603      	mov	r3, r0
 800aef6:	b510      	push	{r4, lr}
 800aef8:	b2c9      	uxtb	r1, r1
 800aefa:	4402      	add	r2, r0
 800aefc:	4293      	cmp	r3, r2
 800aefe:	4618      	mov	r0, r3
 800af00:	d101      	bne.n	800af06 <memchr+0x12>
 800af02:	2000      	movs	r0, #0
 800af04:	e003      	b.n	800af0e <memchr+0x1a>
 800af06:	7804      	ldrb	r4, [r0, #0]
 800af08:	3301      	adds	r3, #1
 800af0a:	428c      	cmp	r4, r1
 800af0c:	d1f6      	bne.n	800aefc <memchr+0x8>
 800af0e:	bd10      	pop	{r4, pc}

0800af10 <memcpy>:
 800af10:	440a      	add	r2, r1
 800af12:	4291      	cmp	r1, r2
 800af14:	f100 33ff 	add.w	r3, r0, #4294967295
 800af18:	d100      	bne.n	800af1c <memcpy+0xc>
 800af1a:	4770      	bx	lr
 800af1c:	b510      	push	{r4, lr}
 800af1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af22:	4291      	cmp	r1, r2
 800af24:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af28:	d1f9      	bne.n	800af1e <memcpy+0xe>
 800af2a:	bd10      	pop	{r4, pc}

0800af2c <_realloc_r>:
 800af2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af30:	4607      	mov	r7, r0
 800af32:	4614      	mov	r4, r2
 800af34:	460d      	mov	r5, r1
 800af36:	b921      	cbnz	r1, 800af42 <_realloc_r+0x16>
 800af38:	4611      	mov	r1, r2
 800af3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af3e:	f7ff bc3b 	b.w	800a7b8 <_malloc_r>
 800af42:	b92a      	cbnz	r2, 800af50 <_realloc_r+0x24>
 800af44:	f7ff fbce 	bl	800a6e4 <_free_r>
 800af48:	4625      	mov	r5, r4
 800af4a:	4628      	mov	r0, r5
 800af4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af50:	f000 f81a 	bl	800af88 <_malloc_usable_size_r>
 800af54:	4284      	cmp	r4, r0
 800af56:	4606      	mov	r6, r0
 800af58:	d802      	bhi.n	800af60 <_realloc_r+0x34>
 800af5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af5e:	d8f4      	bhi.n	800af4a <_realloc_r+0x1e>
 800af60:	4621      	mov	r1, r4
 800af62:	4638      	mov	r0, r7
 800af64:	f7ff fc28 	bl	800a7b8 <_malloc_r>
 800af68:	4680      	mov	r8, r0
 800af6a:	b908      	cbnz	r0, 800af70 <_realloc_r+0x44>
 800af6c:	4645      	mov	r5, r8
 800af6e:	e7ec      	b.n	800af4a <_realloc_r+0x1e>
 800af70:	42b4      	cmp	r4, r6
 800af72:	4622      	mov	r2, r4
 800af74:	4629      	mov	r1, r5
 800af76:	bf28      	it	cs
 800af78:	4632      	movcs	r2, r6
 800af7a:	f7ff ffc9 	bl	800af10 <memcpy>
 800af7e:	4629      	mov	r1, r5
 800af80:	4638      	mov	r0, r7
 800af82:	f7ff fbaf 	bl	800a6e4 <_free_r>
 800af86:	e7f1      	b.n	800af6c <_realloc_r+0x40>

0800af88 <_malloc_usable_size_r>:
 800af88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af8c:	1f18      	subs	r0, r3, #4
 800af8e:	2b00      	cmp	r3, #0
 800af90:	bfbc      	itt	lt
 800af92:	580b      	ldrlt	r3, [r1, r0]
 800af94:	18c0      	addlt	r0, r0, r3
 800af96:	4770      	bx	lr

0800af98 <_init>:
 800af98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9a:	bf00      	nop
 800af9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af9e:	bc08      	pop	{r3}
 800afa0:	469e      	mov	lr, r3
 800afa2:	4770      	bx	lr

0800afa4 <_fini>:
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	bf00      	nop
 800afa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afaa:	bc08      	pop	{r3}
 800afac:	469e      	mov	lr, r3
 800afae:	4770      	bx	lr
