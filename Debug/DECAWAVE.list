
DECAWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b55c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800b668  0800b668  0000c668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7f0  0800b7f0  0000d1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b7f0  0800b7f0  0000c7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7f8  0800b7f8  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7f8  0800b7f8  0000c7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7fc  0800b7fc  0000c7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800b800  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000152c  200001e8  0800b9e4  0000d1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001714  0800b9e4  0000d714  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014bc7  00000000  00000000  0000d20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000394f  00000000  00000000  00021dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00025728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e24  00000000  00000000  000269f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae26  00000000  00000000  00027814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ff2  00000000  00000000  0004263a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b788  00000000  00000000  0005862c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3db4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051fc  00000000  00000000  000e3df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e8ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e8 	.word	0x200001e8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b650 	.word	0x0800b650

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ec 	.word	0x200001ec
 8000148:	0800b650 	.word	0x0800b650

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <dummy>:
static void writeValueToBytes(uint8_t data[], long val, unsigned int n);
static bool getBit(uint8_t data[], unsigned int n, unsigned int bit);

static void readBytesOTP(dwDevice_t* dev, uint16_t address, uint8_t data[]);

static void dummy(){
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
	;
}
 8000160:	bf00      	nop
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr

08000168 <dwInit>:

void dwInit(dwDevice_t* dev, dwOps_t* ops)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
 800016e:	6078      	str	r0, [r7, #4]
 8000170:	6039      	str	r1, [r7, #0]
	dev->ops = ops;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	683a      	ldr	r2, [r7, #0]
 8000176:	601a      	str	r2, [r3, #0]
	dev->userdata = NULL;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2200      	movs	r2, #0
 800017c:	605a      	str	r2, [r3, #4]

	/* Device default state */
	dev->extendedFrameLength = FRAME_LENGTH_NORMAL;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2200      	movs	r2, #0
 8000182:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	dev->pacSize = PAC_SIZE_8;
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	2208      	movs	r2, #8
 800018a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	dev->pulseFrequency = TX_PULSE_FREQ_16MHZ;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	2201      	movs	r2, #1
 8000192:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	dev->dataRate = TRX_RATE_6800KBPS;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2202      	movs	r2, #2
 800019a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	dev->preambleLength = TX_PREAMBLE_LEN_128;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2205      	movs	r2, #5
 80001a2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	dev->preambleCode = PREAMBLE_CODE_16MHZ_4;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2204      	movs	r2, #4
 80001aa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	dev->channel = CHANNEL_5;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2205      	movs	r2, #5
 80001b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	dev->smartPower = false;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	dev->frameCheck = true;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2201      	movs	r2, #1
 80001c2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	dev->permanentReceive = false;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2200      	movs	r2, #0
 80001ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	dev->deviceMode = IDLE_MODE;
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2200      	movs	r2, #0
 80001d2:	731a      	strb	r2, [r3, #12]

	dev->forceTxPower = false;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2200      	movs	r2, #0
 80001d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

	writeValueToBytes(dev->antennaDelay.raw, 16384, LEN_STAMP);
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	3338      	adds	r3, #56	@ 0x38
 80001e0:	2205      	movs	r2, #5
 80001e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 ff48 	bl	800207c <writeValueToBytes>

	// Dummy callback handlers
	dev->handleSent = dummy;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000218 <dwInit+0xb0>)
 80001f0:	641a      	str	r2, [r3, #64]	@ 0x40
	dev->handleError = dummy;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	4a08      	ldr	r2, [pc, #32]	@ (8000218 <dwInit+0xb0>)
 80001f6:	645a      	str	r2, [r3, #68]	@ 0x44
	dev->handleReceived = dummy;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	4a07      	ldr	r2, [pc, #28]	@ (8000218 <dwInit+0xb0>)
 80001fc:	649a      	str	r2, [r3, #72]	@ 0x48
	dev->handleReceiveTimeout = dummy;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4a05      	ldr	r2, [pc, #20]	@ (8000218 <dwInit+0xb0>)
 8000202:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->handleReceiveFailed = dummy;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a04      	ldr	r2, [pc, #16]	@ (8000218 <dwInit+0xb0>)
 8000208:	651a      	str	r2, [r3, #80]	@ 0x50
	dev->handleReceiveTimestampAvailable = dummy;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a02      	ldr	r2, [pc, #8]	@ (8000218 <dwInit+0xb0>)
 800020e:	655a      	str	r2, [r3, #84]	@ 0x54

}
 8000210:	bf00      	nop
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	0800015d 	.word	0x0800015d

0800021c <dwConfigure>:
{
	return dev->userdata;
}

int dwConfigure(dwDevice_t* dev)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af02      	add	r7, sp, #8
 8000222:	6078      	str	r0, [r7, #4]
	dwEnableClock(dev, dwClockAuto);
 8000224:	2100      	movs	r1, #0
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f000 f916 	bl	8000458 <dwEnableClock>
	delayms(5);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	2105      	movs	r1, #5
 8000234:	6878      	ldr	r0, [r7, #4]
 8000236:	4798      	blx	r3

	// Reset the chip
	if (dev->ops->reset) {
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	691b      	ldr	r3, [r3, #16]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d005      	beq.n	800024e <dwConfigure+0x32>
		dev->ops->reset(dev);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	691b      	ldr	r3, [r3, #16]
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	4798      	blx	r3
 800024c:	e002      	b.n	8000254 <dwConfigure+0x38>
	} else {
		dwSoftReset(dev);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 f966 	bl	8000520 <dwSoftReset>
	}

	if (dwGetDeviceId(dev) != 0xdeca0130) {
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 f8a8 	bl	80003aa <dwGetDeviceId>
 800025a:	4603      	mov	r3, r0
 800025c:	4a27      	ldr	r2, [pc, #156]	@ (80002fc <dwConfigure+0xe0>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d001      	beq.n	8000266 <dwConfigure+0x4a>
		return DW_ERROR_WRONG_ID;
 8000262:	2301      	movs	r3, #1
 8000264:	e045      	b.n	80002f2 <dwConfigure+0xd6>
	}

	// Set default address
	memset(dev->networkAndAddress, 0xff, LEN_PANADR);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	330d      	adds	r3, #13
 800026a:	2204      	movs	r2, #4
 800026c:	21ff      	movs	r1, #255	@ 0xff
 800026e:	4618      	mov	r0, r3
 8000270:	f00a fd60 	bl	800ad34 <memset>
	dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	330d      	adds	r3, #13
 8000278:	2204      	movs	r2, #4
 800027a:	9200      	str	r2, [sp, #0]
 800027c:	2200      	movs	r2, #0
 800027e:	2103      	movs	r1, #3
 8000280:	6878      	ldr	r0, [r7, #4]
 8000282:	f001 ffa4 	bl	80021ce <dwSpiWrite>

	// default configuration
	memset(dev->syscfg, 0, LEN_SYS_CFG);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	3311      	adds	r3, #17
 800028a:	2204      	movs	r2, #4
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f00a fd50 	bl	800ad34 <memset>
	dwSetDoubleBuffering(dev, false);
 8000294:	2100      	movs	r1, #0
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f000 fa9d 	bl	80007d6 <dwSetDoubleBuffering>
	dwSetInterruptPolarity(dev, true);
 800029c:	2101      	movs	r1, #1
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f000 fab6 	bl	8000810 <dwSetInterruptPolarity>
	dwWriteSystemConfigurationRegister(dev);
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f000 f9b6 	bl	8000616 <dwWriteSystemConfigurationRegister>
	// default interrupt mask, i.e. no interrupts
	dwClearInterrupts(dev);
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f000 fb78 	bl	80009a0 <dwClearInterrupts>
	dwWriteSystemEventMaskRegister(dev);
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f000 fa05 	bl	80006c0 <dwWriteSystemEventMaskRegister>
	// load LDE micro-code
	dwEnableClock(dev, dwClockXti);
 80002b6:	2101      	movs	r1, #1
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f000 f8cd 	bl	8000458 <dwEnableClock>
	delayms(5);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	2105      	movs	r1, #5
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	4798      	blx	r3
	dwManageLDE(dev);
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f000 f818 	bl	8000300 <dwManageLDE>
	delayms(5);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	68db      	ldr	r3, [r3, #12]
 80002d6:	2105      	movs	r1, #5
 80002d8:	6878      	ldr	r0, [r7, #4]
 80002da:	4798      	blx	r3
	dwEnableClock(dev, dwClockPll);
 80002dc:	2102      	movs	r1, #2
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f000 f8ba 	bl	8000458 <dwEnableClock>
	delayms(5);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	2105      	movs	r1, #5
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	4798      	blx	r3
	//
	// delayms(1);

	// Initialize for default configuration (as per datasheet)

	return DW_ERROR_OK;
 80002f0:	2300      	movs	r3, #0
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	deca0130 	.word	0xdeca0130

08000300 <dwManageLDE>:

void dwManageLDE(dwDevice_t* dev) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af02      	add	r7, sp, #8
 8000306:	6078      	str	r0, [r7, #4]
	// }
	// tell the chip to load the LDE microcode
	// TODO remove clock-related code (PMSC_CTRL) as handled separately
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	uint8_t otpctrl[LEN_OTP_CTRL];
	memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 8000308:	f107 030c 	add.w	r3, r7, #12
 800030c:	2204      	movs	r2, #4
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f00a fd0f 	bl	800ad34 <memset>
	memset(otpctrl, 0, LEN_OTP_CTRL);
 8000316:	f107 0308 	add.w	r3, r7, #8
 800031a:	2202      	movs	r2, #2
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f00a fd08 	bl	800ad34 <memset>
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000324:	f107 030c 	add.w	r3, r7, #12
 8000328:	2204      	movs	r2, #4
 800032a:	9200      	str	r2, [sp, #0]
 800032c:	2200      	movs	r2, #0
 800032e:	2136      	movs	r1, #54	@ 0x36
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f001 fef9 	bl	8002128 <dwSpiRead>
	dwSpiRead(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	2202      	movs	r2, #2
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	2206      	movs	r2, #6
 8000340:	212d      	movs	r1, #45	@ 0x2d
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f001 fef0 	bl	8002128 <dwSpiRead>
	pmscctrl0[0] = 0x01;
 8000348:	2301      	movs	r3, #1
 800034a:	733b      	strb	r3, [r7, #12]
	pmscctrl0[1] = 0x03;
 800034c:	2303      	movs	r3, #3
 800034e:	737b      	strb	r3, [r7, #13]
	otpctrl[0] = 0x00;
 8000350:	2300      	movs	r3, #0
 8000352:	723b      	strb	r3, [r7, #8]
	otpctrl[1] = 0x80;
 8000354:	2380      	movs	r3, #128	@ 0x80
 8000356:	727b      	strb	r3, [r7, #9]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	2204      	movs	r2, #4
 800035e:	9200      	str	r2, [sp, #0]
 8000360:	2200      	movs	r2, #0
 8000362:	2136      	movs	r1, #54	@ 0x36
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f001 ff32 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, OTP_IF, OTP_CTRL_SUB, otpctrl, LEN_OTP_CTRL);
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	2202      	movs	r2, #2
 8000370:	9200      	str	r2, [sp, #0]
 8000372:	2206      	movs	r2, #6
 8000374:	212d      	movs	r1, #45	@ 0x2d
 8000376:	6878      	ldr	r0, [r7, #4]
 8000378:	f001 ff29 	bl	80021ce <dwSpiWrite>
	delayms(5);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	68db      	ldr	r3, [r3, #12]
 8000382:	2105      	movs	r1, #5
 8000384:	6878      	ldr	r0, [r7, #4]
 8000386:	4798      	blx	r3
	pmscctrl0[0] = 0x00;
 8000388:	2300      	movs	r3, #0
 800038a:	733b      	strb	r3, [r7, #12]
	pmscctrl0[1] = 0x02;
 800038c:	2302      	movs	r3, #2
 800038e:	737b      	strb	r3, [r7, #13]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000390:	f107 030c 	add.w	r3, r7, #12
 8000394:	2204      	movs	r2, #4
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	2200      	movs	r2, #0
 800039a:	2136      	movs	r1, #54	@ 0x36
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f001 ff16 	bl	80021ce <dwSpiWrite>
}
 80003a2:	bf00      	nop
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <dwGetDeviceId>:


uint32_t dwGetDeviceId(dwDevice_t* dev)
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
	return dwSpiRead32(dev, DEV_ID, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2100      	movs	r1, #0
 80003b6:	6878      	ldr	r0, [r7, #4]
 80003b8:	f001 fef4 	bl	80021a4 <dwSpiRead32>
 80003bc:	4603      	mov	r3, r0
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <dwEnableAllLeds>:

void dwEnableAllLeds(dwDevice_t* dev)
{
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b084      	sub	sp, #16
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
	uint32_t reg;

	// Set all 4 GPIO in LED mode
	reg = dwSpiRead32(dev, GPIO_CTRL, GPIO_MODE_SUB);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2126      	movs	r1, #38	@ 0x26
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f001 fee6 	bl	80021a4 <dwSpiRead32>
 80003d8:	60f8      	str	r0, [r7, #12]
	reg &= ~0x00003FC0ul;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80003e0:	60fb      	str	r3, [r7, #12]
	reg |= 0x00001540ul;
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	f443 53aa 	orr.w	r3, r3, #5440	@ 0x1540
 80003e8:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, GPIO_CTRL, GPIO_MODE_SUB, reg);
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	2200      	movs	r2, #0
 80003ee:	2126      	movs	r1, #38	@ 0x26
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f001 ff46 	bl	8002282 <dwSpiWrite32>

	// Enable debounce clock (used to clock the LED blinking)
	reg = dwSpiRead32(dev, PMSC, PMSC_CTRL0_SUB);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2136      	movs	r1, #54	@ 0x36
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f001 fed2 	bl	80021a4 <dwSpiRead32>
 8000400:	60f8      	str	r0, [r7, #12]
	reg |= 0x00840000ul;
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	f443 0304 	orr.w	r3, r3, #8650752	@ 0x840000
 8000408:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_CTRL0_SUB, reg);
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	2200      	movs	r2, #0
 800040e:	2136      	movs	r1, #54	@ 0x36
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f001 ff36 	bl	8002282 <dwSpiWrite32>

	// Enable LED blinking and set the rate
	reg = 0x00000110ul;
 8000416:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800041a:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	2228      	movs	r2, #40	@ 0x28
 8000420:	2136      	movs	r1, #54	@ 0x36
 8000422:	6878      	ldr	r0, [r7, #4]
 8000424:	f001 ff2d 	bl	8002282 <dwSpiWrite32>

	// Trigger a manual blink of the LEDs for test
	reg |= 0x000f0000ul;
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 800042e:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	2228      	movs	r2, #40	@ 0x28
 8000434:	2136      	movs	r1, #54	@ 0x36
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	f001 ff23 	bl	8002282 <dwSpiWrite32>
	reg &= ~0x000f0000ul;
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000442:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, PMSC, PMSC_LEDC, reg);
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	2228      	movs	r2, #40	@ 0x28
 8000448:	2136      	movs	r1, #54	@ 0x36
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f001 ff19 	bl	8002282 <dwSpiWrite32>
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <dwEnableClock>:

void dwEnableClock(dwDevice_t* dev, dwClock_t clock) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af02      	add	r7, sp, #8
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	memset(pmscctrl0, 0, LEN_PMSC_CTRL0);
 8000464:	f107 030c 	add.w	r3, r7, #12
 8000468:	2204      	movs	r2, #4
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f00a fc61 	bl	800ad34 <memset>
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000472:	f107 030c 	add.w	r3, r7, #12
 8000476:	2204      	movs	r2, #4
 8000478:	9200      	str	r2, [sp, #0]
 800047a:	2200      	movs	r2, #0
 800047c:	2136      	movs	r1, #54	@ 0x36
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f001 fe52 	bl	8002128 <dwSpiRead>
	if(clock == dwClockAuto) {
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d10d      	bne.n	80004a6 <dwEnableClock+0x4e>
		dev->ops->spiSetSpeed(dev, dwSpiSpeedLow);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	2100      	movs	r1, #0
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	4798      	blx	r3
		pmscctrl0[0] = dwClockAuto;
 8000496:	2300      	movs	r3, #0
 8000498:	733b      	strb	r3, [r7, #12]
		pmscctrl0[1] &= 0xFE;
 800049a:	7b7b      	ldrb	r3, [r7, #13]
 800049c:	f023 0301 	bic.w	r3, r3, #1
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	737b      	strb	r3, [r7, #13]
 80004a4:	e026      	b.n	80004f4 <dwEnableClock+0x9c>
	} else if(clock == dwClockXti) {
 80004a6:	78fb      	ldrb	r3, [r7, #3]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d110      	bne.n	80004ce <dwEnableClock+0x76>
		dev->ops->spiSetSpeed(dev, dwSpiSpeedLow);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	2100      	movs	r1, #0
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	4798      	blx	r3
		pmscctrl0[0] &= 0xFC;
 80004b8:	7b3b      	ldrb	r3, [r7, #12]
 80004ba:	f023 0303 	bic.w	r3, r3, #3
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	733b      	strb	r3, [r7, #12]
		pmscctrl0[0] |= dwClockXti;
 80004c2:	7b3b      	ldrb	r3, [r7, #12]
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	733b      	strb	r3, [r7, #12]
 80004cc:	e012      	b.n	80004f4 <dwEnableClock+0x9c>
	} else if(clock == dwClockPll) {
 80004ce:	78fb      	ldrb	r3, [r7, #3]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d10f      	bne.n	80004f4 <dwEnableClock+0x9c>
		dev->ops->spiSetSpeed(dev, dwSpiSpeedHigh);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	2101      	movs	r1, #1
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	4798      	blx	r3
		pmscctrl0[0] &= 0xFC;
 80004e0:	7b3b      	ldrb	r3, [r7, #12]
 80004e2:	f023 0303 	bic.w	r3, r3, #3
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	733b      	strb	r3, [r7, #12]
		pmscctrl0[0] |= dwClockPll;
 80004ea:	7b3b      	ldrb	r3, [r7, #12]
 80004ec:	f043 0302 	orr.w	r3, r3, #2
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	733b      	strb	r3, [r7, #12]
	} else {
		// TODO deliver proper warning
	}
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, 1);
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	2201      	movs	r2, #1
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	2200      	movs	r2, #0
 80004fe:	2136      	movs	r1, #54	@ 0x36
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f001 fe64 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	2204      	movs	r2, #4
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	2200      	movs	r2, #0
 8000510:	2136      	movs	r1, #54	@ 0x36
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f001 fe5b 	bl	80021ce <dwSpiWrite>
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <dwSoftReset>:

void dwSoftReset(dwDevice_t* dev)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af02      	add	r7, sp, #8
 8000526:	6078      	str	r0, [r7, #4]
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2204      	movs	r2, #4
 800052e:	9200      	str	r2, [sp, #0]
 8000530:	2200      	movs	r2, #0
 8000532:	2136      	movs	r1, #54	@ 0x36
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f001 fdf7 	bl	8002128 <dwSpiRead>
	pmscctrl0[0] = 0x01;
 800053a:	2301      	movs	r3, #1
 800053c:	733b      	strb	r3, [r7, #12]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 800053e:	f107 030c 	add.w	r3, r7, #12
 8000542:	2204      	movs	r2, #4
 8000544:	9200      	str	r2, [sp, #0]
 8000546:	2200      	movs	r2, #0
 8000548:	2136      	movs	r1, #54	@ 0x36
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f001 fe3f 	bl	80021ce <dwSpiWrite>
	pmscctrl0[3] = 0x00;
 8000550:	2300      	movs	r3, #0
 8000552:	73fb      	strb	r3, [r7, #15]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2204      	movs	r2, #4
 800055a:	9200      	str	r2, [sp, #0]
 800055c:	2200      	movs	r2, #0
 800055e:	2136      	movs	r1, #54	@ 0x36
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f001 fe34 	bl	80021ce <dwSpiWrite>
	delayms(10);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	210a      	movs	r1, #10
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	4798      	blx	r3
	pmscctrl0[0] = 0x00;
 8000572:	2300      	movs	r3, #0
 8000574:	733b      	strb	r3, [r7, #12]
	pmscctrl0[3] = 0xF0;
 8000576:	23f0      	movs	r3, #240	@ 0xf0
 8000578:	73fb      	strb	r3, [r7, #15]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	2204      	movs	r2, #4
 8000580:	9200      	str	r2, [sp, #0]
 8000582:	2200      	movs	r2, #0
 8000584:	2136      	movs	r1, #54	@ 0x36
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f001 fe21 	bl	80021ce <dwSpiWrite>
	// force into idle mode
	dwIdle(dev);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 fa16 	bl	80009be <dwIdle>
}
 8000592:	bf00      	nop
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <dwRxSoftReset>:

/**
 Reset the receiver. Needed after errors or timeouts.
 From the DW1000 User Manual, v2.13 page 35: "Due to an issue in the re-initialisation of the receiver, it is necessary to apply a receiver reset after certain receiver error or timeout events (i.e. RXPHE (PHY Header Error), RXRFSL (Reed Solomon error), RXRFTO (Frame wait timeout), etc.). This ensures that the next good frame will have correctly calculated timestamp. It is not necessary to do this in the cases of RXPTO (Preamble detection Timeout) and RXSFDTO (SFD timeout). For details on how to apply a receiver-only reset see SOFTRESET field of Sub- Register 0x36:00 – PMSC_CTRL0."
 */
void dwRxSoftReset(dwDevice_t* dev) {
 800059a:	b580      	push	{r7, lr}
 800059c:	b086      	sub	sp, #24
 800059e:	af02      	add	r7, sp, #8
 80005a0:	6078      	str	r0, [r7, #4]
	uint8_t pmscctrl0[LEN_PMSC_CTRL0];
	dwSpiRead(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	2204      	movs	r2, #4
 80005a8:	9200      	str	r2, [sp, #0]
 80005aa:	2200      	movs	r2, #0
 80005ac:	2136      	movs	r1, #54	@ 0x36
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f001 fdba 	bl	8002128 <dwSpiRead>

	pmscctrl0[3] = pmscctrl0[3] & 0xEF;
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	f023 0310 	bic.w	r3, r3, #16
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	73fb      	strb	r3, [r7, #15]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	2204      	movs	r2, #4
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	2200      	movs	r2, #0
 80005c8:	2136      	movs	r1, #54	@ 0x36
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f001 fdff 	bl	80021ce <dwSpiWrite>
	pmscctrl0[3] = pmscctrl0[3] | 0x10;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f043 0310 	orr.w	r3, r3, #16
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	73fb      	strb	r3, [r7, #15]
	dwSpiWrite(dev, PMSC, PMSC_CTRL0_SUB, pmscctrl0, LEN_PMSC_CTRL0);
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2204      	movs	r2, #4
 80005e0:	9200      	str	r2, [sp, #0]
 80005e2:	2200      	movs	r2, #0
 80005e4:	2136      	movs	r1, #54	@ 0x36
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f001 fdf1 	bl	80021ce <dwSpiWrite>
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <dwReadSystemConfigurationRegister>:

/* ###########################################################################
 * #### DW1000 register read/write ###########################################
 * ######################################################################### */

void dwReadSystemConfigurationRegister(dwDevice_t* dev) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3311      	adds	r3, #17
 8000600:	2204      	movs	r2, #4
 8000602:	9200      	str	r2, [sp, #0]
 8000604:	2200      	movs	r2, #0
 8000606:	2104      	movs	r1, #4
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f001 fd8d 	bl	8002128 <dwSpiRead>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <dwWriteSystemConfigurationRegister>:

void dwWriteSystemConfigurationRegister(dwDevice_t* dev) {
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af02      	add	r7, sp, #8
 800061c:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, SYS_CFG, NO_SUB, dev->syscfg, LEN_SYS_CFG);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3311      	adds	r3, #17
 8000622:	2204      	movs	r2, #4
 8000624:	9200      	str	r2, [sp, #0]
 8000626:	2200      	movs	r2, #0
 8000628:	2104      	movs	r1, #4
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f001 fdcf 	bl	80021ce <dwSpiWrite>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <dwReadSystemEventStatusRegister>:

void dwReadSystemEventStatusRegister(dwDevice_t* dev) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af02      	add	r7, sp, #8
 800063e:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, SYS_STATUS, NO_SUB, dev->sysstatus, LEN_SYS_STATUS);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	331d      	adds	r3, #29
 8000644:	2205      	movs	r2, #5
 8000646:	9200      	str	r2, [sp, #0]
 8000648:	2200      	movs	r2, #0
 800064a:	210f      	movs	r1, #15
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f001 fd6b 	bl	8002128 <dwSpiRead>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <dwReadNetworkIdAndDeviceAddress>:

void dwReadNetworkIdAndDeviceAddress(dwDevice_t* dev) {
 800065a:	b580      	push	{r7, lr}
 800065c:	b084      	sub	sp, #16
 800065e:	af02      	add	r7, sp, #8
 8000660:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	330d      	adds	r3, #13
 8000666:	2204      	movs	r2, #4
 8000668:	9200      	str	r2, [sp, #0]
 800066a:	2200      	movs	r2, #0
 800066c:	2103      	movs	r1, #3
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f001 fd5a 	bl	8002128 <dwSpiRead>
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <dwWriteNetworkIdAndDeviceAddress>:

void dwWriteNetworkIdAndDeviceAddress(dwDevice_t* dev) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af02      	add	r7, sp, #8
 8000682:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, PANADR, NO_SUB, dev->networkAndAddress, LEN_PANADR);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	330d      	adds	r3, #13
 8000688:	2204      	movs	r2, #4
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	2103      	movs	r1, #3
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f001 fd9c 	bl	80021ce <dwSpiWrite>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <dwReadSystemEventMaskRegister>:

void dwReadSystemEventMaskRegister(dwDevice_t* dev) {
 800069e:	b580      	push	{r7, lr}
 80006a0:	b084      	sub	sp, #16
 80006a2:	af02      	add	r7, sp, #8
 80006a4:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	3315      	adds	r3, #21
 80006aa:	2204      	movs	r2, #4
 80006ac:	9200      	str	r2, [sp, #0]
 80006ae:	2200      	movs	r2, #0
 80006b0:	210e      	movs	r1, #14
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f001 fd38 	bl	8002128 <dwSpiRead>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <dwWriteSystemEventMaskRegister>:

void dwWriteSystemEventMaskRegister(dwDevice_t* dev) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, SYS_MASK, NO_SUB, dev->sysmask, LEN_SYS_MASK);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3315      	adds	r3, #21
 80006cc:	2204      	movs	r2, #4
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	2200      	movs	r2, #0
 80006d2:	210e      	movs	r1, #14
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f001 fd7a 	bl	80021ce <dwSpiWrite>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <dwReadChannelControlRegister>:

void dwReadChannelControlRegister(dwDevice_t* dev) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b084      	sub	sp, #16
 80006e6:	af02      	add	r7, sp, #8
 80006e8:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	3319      	adds	r3, #25
 80006ee:	2204      	movs	r2, #4
 80006f0:	9200      	str	r2, [sp, #0]
 80006f2:	2200      	movs	r2, #0
 80006f4:	211f      	movs	r1, #31
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f001 fd16 	bl	8002128 <dwSpiRead>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <dwWriteChannelControlRegister>:

void dwWriteChannelControlRegister(dwDevice_t* dev) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, CHAN_CTRL, NO_SUB, dev->chanctrl, LEN_CHAN_CTRL);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3319      	adds	r3, #25
 8000710:	2204      	movs	r2, #4
 8000712:	9200      	str	r2, [sp, #0]
 8000714:	2200      	movs	r2, #0
 8000716:	211f      	movs	r1, #31
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f001 fd58 	bl	80021ce <dwSpiWrite>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <dwReadTransmitFrameControlRegister>:

void dwReadTransmitFrameControlRegister(dwDevice_t* dev) {
 8000726:	b580      	push	{r7, lr}
 8000728:	b084      	sub	sp, #16
 800072a:	af02      	add	r7, sp, #8
 800072c:	6078      	str	r0, [r7, #4]
	dwSpiRead(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	3322      	adds	r3, #34	@ 0x22
 8000732:	2205      	movs	r2, #5
 8000734:	9200      	str	r2, [sp, #0]
 8000736:	2200      	movs	r2, #0
 8000738:	2108      	movs	r1, #8
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f001 fcf4 	bl	8002128 <dwSpiRead>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <dwWriteTransmitFrameControlRegister>:

void dwWriteTransmitFrameControlRegister(dwDevice_t* dev) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af02      	add	r7, sp, #8
 800074e:	6078      	str	r0, [r7, #4]
	dwSpiWrite(dev, TX_FCTRL, NO_SUB, dev->txfctrl, LEN_TX_FCTRL);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3322      	adds	r3, #34	@ 0x22
 8000754:	2205      	movs	r2, #5
 8000756:	9200      	str	r2, [sp, #0]
 8000758:	2200      	movs	r2, #0
 800075a:	2108      	movs	r1, #8
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f001 fd36 	bl	80021ce <dwSpiWrite>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <dwSetFrameFilter>:
void dwSetReceiveWaitTimeout(dwDevice_t *dev, uint16_t timeout) {
	dwSpiWrite(dev, RX_FWTO, NO_SUB, &timeout, 2);
	setBit(dev->syscfg, LEN_SYS_CFG, RXWTOE_BIT, timeout!=0);
}

void dwSetFrameFilter(dwDevice_t* dev, bool val) {
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	460b      	mov	r3, r1
 8000774:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, FFEN_BIT, val);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f103 0011 	add.w	r0, r3, #17
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2200      	movs	r2, #0
 8000780:	2104      	movs	r1, #4
 8000782:	f001 fc17 	bl	8001fb4 <setBit>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <dwSetFrameFilterAllowData>:

void dwSetFrameFilterAllowBeacon(dwDevice_t* dev, bool val) {
	setBit(dev->syscfg, LEN_SYS_CFG, FFAB_BIT, val);
}

void dwSetFrameFilterAllowData(dwDevice_t* dev, bool val) {
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
 8000796:	460b      	mov	r3, r1
 8000798:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, FFAD_BIT, val);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f103 0011 	add.w	r0, r3, #17
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	2203      	movs	r2, #3
 80007a4:	2104      	movs	r1, #4
 80007a6:	f001 fc05 	bl	8001fb4 <setBit>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <dwSetFrameFilterAllowReserved>:

void dwSetFrameFilterAllowMAC(dwDevice_t* dev, bool val) {
	setBit(dev->syscfg, LEN_SYS_CFG, FFAM_BIT, val);
}

void dwSetFrameFilterAllowReserved(dwDevice_t* dev, bool val) {
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, FFAR_BIT, val);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f103 0011 	add.w	r0, r3, #17
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	2206      	movs	r2, #6
 80007c8:	2104      	movs	r1, #4
 80007ca:	f001 fbf3 	bl	8001fb4 <setBit>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <dwSetDoubleBuffering>:

void dwSetDoubleBuffering(dwDevice_t* dev, bool val) {
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	460b      	mov	r3, r1
 80007e0:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, DIS_DRXB_BIT, !val);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f103 0011 	add.w	r0, r3, #17
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	bf14      	ite	ne
 80007ee:	2301      	movne	r3, #1
 80007f0:	2300      	moveq	r3, #0
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	f083 0301 	eor.w	r3, r3, #1
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	220c      	movs	r2, #12
 8000802:	2104      	movs	r1, #4
 8000804:	f001 fbd6 	bl	8001fb4 <setBit>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <dwSetInterruptPolarity>:

void dwSetInterruptPolarity(dwDevice_t* dev, bool val) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, HIRQ_POL_BIT, val);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f103 0011 	add.w	r0, r3, #17
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	2209      	movs	r2, #9
 8000826:	2104      	movs	r1, #4
 8000828:	f001 fbc4 	bl	8001fb4 <setBit>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <dwSetReceiverAutoReenable>:

void dwSetReceiverAutoReenable(dwDevice_t* dev, bool val) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
	setBit(dev->syscfg, LEN_SYS_CFG, RXAUTR_BIT, val);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f103 0011 	add.w	r0, r3, #17
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	221d      	movs	r2, #29
 800084a:	2104      	movs	r1, #4
 800084c:	f001 fbb2 	bl	8001fb4 <setBit>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <dwInterruptOnSent>:

void dwInterruptOnSent(dwDevice_t* dev, bool val) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, TXFRS_BIT, val);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f103 0015 	add.w	r0, r3, #21
 800086a:	78fb      	ldrb	r3, [r7, #3]
 800086c:	2207      	movs	r2, #7
 800086e:	2104      	movs	r1, #4
 8000870:	f001 fba0 	bl	8001fb4 <setBit>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <dwInterruptOnReceived>:

void dwInterruptOnReceived(dwDevice_t* dev, bool val) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, RXDFR_BIT, val);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f103 0015 	add.w	r0, r3, #21
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	220d      	movs	r2, #13
 8000892:	2104      	movs	r1, #4
 8000894:	f001 fb8e 	bl	8001fb4 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, RXFCG_BIT, val);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f103 0015 	add.w	r0, r3, #21
 800089e:	78fb      	ldrb	r3, [r7, #3]
 80008a0:	220e      	movs	r2, #14
 80008a2:	2104      	movs	r1, #4
 80008a4:	f001 fb86 	bl	8001fb4 <setBit>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <dwInterruptOnReceiveFailed>:

void dwInterruptOnReceiveFailed(dwDevice_t* dev, bool val) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_STATUS, LDEERR_BIT, val);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f103 0015 	add.w	r0, r3, #21
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	2212      	movs	r2, #18
 80008c6:	2105      	movs	r1, #5
 80008c8:	f001 fb74 	bl	8001fb4 <setBit>
	setBit(dev->sysmask, LEN_SYS_STATUS, RXFCE_BIT, val);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f103 0015 	add.w	r0, r3, #21
 80008d2:	78fb      	ldrb	r3, [r7, #3]
 80008d4:	220f      	movs	r2, #15
 80008d6:	2105      	movs	r1, #5
 80008d8:	f001 fb6c 	bl	8001fb4 <setBit>
	setBit(dev->sysmask, LEN_SYS_STATUS, RXPHE_BIT, val);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f103 0015 	add.w	r0, r3, #21
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	220c      	movs	r2, #12
 80008e6:	2105      	movs	r1, #5
 80008e8:	f001 fb64 	bl	8001fb4 <setBit>
	setBit(dev->sysmask, LEN_SYS_STATUS, RXRFSL_BIT, val);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f103 0015 	add.w	r0, r3, #21
 80008f2:	78fb      	ldrb	r3, [r7, #3]
 80008f4:	2210      	movs	r2, #16
 80008f6:	2105      	movs	r1, #5
 80008f8:	f001 fb5c 	bl	8001fb4 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, RXSFDTO_BIT, val);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f103 0015 	add.w	r0, r3, #21
 8000902:	78fb      	ldrb	r3, [r7, #3]
 8000904:	221a      	movs	r2, #26
 8000906:	2104      	movs	r1, #4
 8000908:	f001 fb54 	bl	8001fb4 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, AFFREJ_BIT, val);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f103 0015 	add.w	r0, r3, #21
 8000912:	78fb      	ldrb	r3, [r7, #3]
 8000914:	221d      	movs	r2, #29
 8000916:	2104      	movs	r1, #4
 8000918:	f001 fb4c 	bl	8001fb4 <setBit>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <dwInterruptOnReceiveTimeout>:

void dwInterruptOnReceiveTimeout(dwDevice_t* dev, bool val) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, RXRFTO_BIT, val);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f103 0015 	add.w	r0, r3, #21
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	2211      	movs	r2, #17
 800093a:	2104      	movs	r1, #4
 800093c:	f001 fb3a 	bl	8001fb4 <setBit>
	setBit(dev->sysmask, LEN_SYS_MASK, RXPTO_BIT, val);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f103 0015 	add.w	r0, r3, #21
 8000946:	78fb      	ldrb	r3, [r7, #3]
 8000948:	2215      	movs	r2, #21
 800094a:	2104      	movs	r1, #4
 800094c:	f001 fb32 	bl	8001fb4 <setBit>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <dwInterruptOnReceiveTimestampAvailable>:

void dwInterruptOnReceiveTimestampAvailable(dwDevice_t* dev, bool val) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, LDEDONE_BIT, val);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f103 0015 	add.w	r0, r3, #21
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	220a      	movs	r2, #10
 800096e:	2104      	movs	r1, #4
 8000970:	f001 fb20 	bl	8001fb4 <setBit>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <dwInterruptOnAutomaticAcknowledgeTrigger>:

void dwInterruptOnAutomaticAcknowledgeTrigger(dwDevice_t* dev, bool val) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
	setBit(dev->sysmask, LEN_SYS_MASK, AAT_BIT, val);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f103 0015 	add.w	r0, r3, #21
 800098e:	78fb      	ldrb	r3, [r7, #3]
 8000990:	2203      	movs	r2, #3
 8000992:	2104      	movs	r1, #4
 8000994:	f001 fb0e 	bl	8001fb4 <setBit>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <dwClearInterrupts>:

void dwClearInterrupts(dwDevice_t* dev) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	memset(dev->sysmask, 0, LEN_SYS_MASK);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3315      	adds	r3, #21
 80009ac:	2204      	movs	r2, #4
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f00a f9bf 	bl	800ad34 <memset>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <dwIdle>:

void dwIdle(dwDevice_t* dev)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b084      	sub	sp, #16
 80009c2:	af02      	add	r7, sp, #8
 80009c4:	6078      	str	r0, [r7, #4]
	 memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3308      	adds	r3, #8
 80009ca:	2204      	movs	r2, #4
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f00a f9b0 	bl	800ad34 <memset>
	 dev->sysctrl[0] |= 1<<TRXOFF_BIT;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	7a1b      	ldrb	r3, [r3, #8]
 80009d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	721a      	strb	r2, [r3, #8]
	 dev->deviceMode = IDLE_MODE;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	731a      	strb	r2, [r3, #12]
	 dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3308      	adds	r3, #8
 80009ec:	2204      	movs	r2, #4
 80009ee:	9200      	str	r2, [sp, #0]
 80009f0:	2200      	movs	r2, #0
 80009f2:	210d      	movs	r1, #13
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f001 fbea 	bl	80021ce <dwSpiWrite>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <dwNewReceive>:

void dwNewReceive(dwDevice_t* dev) {
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
	dwIdle(dev);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ffd7 	bl	80009be <dwIdle>
	memset(dev->sysctrl, 0, LEN_SYS_CTRL);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3308      	adds	r3, #8
 8000a14:	2204      	movs	r2, #4
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f00a f98b 	bl	800ad34 <memset>
	dwClearReceiveStatus(dev);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f000 fb76 	bl	8001110 <dwClearReceiveStatus>
	dev->deviceMode = RX_MODE;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2201      	movs	r2, #1
 8000a28:	731a      	strb	r2, [r3, #12]
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <dwStartReceive>:

void dwStartReceive(dwDevice_t* dev) {
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af02      	add	r7, sp, #8
 8000a38:	6078      	str	r0, [r7, #4]
	setBit(dev->sysctrl, LEN_SYS_CTRL, SFCST_BIT, !dev->frameCheck);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f103 0008 	add.w	r0, r3, #8
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	bf14      	ite	ne
 8000a4a:	2301      	movne	r3, #1
 8000a4c:	2300      	moveq	r3, #0
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	f083 0301 	eor.w	r3, r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2104      	movs	r1, #4
 8000a60:	f001 faa8 	bl	8001fb4 <setBit>
	setBit(dev->sysctrl, LEN_SYS_CTRL, RXENAB_BIT, true);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f103 0008 	add.w	r0, r3, #8
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	2104      	movs	r1, #4
 8000a70:	f001 faa0 	bl	8001fb4 <setBit>
	dwSpiWrite(dev, SYS_CTRL, NO_SUB, dev->sysctrl, LEN_SYS_CTRL);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3308      	adds	r3, #8
 8000a78:	2204      	movs	r2, #4
 8000a7a:	9200      	str	r2, [sp, #0]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	210d      	movs	r1, #13
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f001 fba4 	bl	80021ce <dwSpiWrite>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <dwNewConfiguration>:
	} else {
		dev->deviceMode = IDLE_MODE;
	}
}

void dwNewConfiguration(dwDevice_t* dev) {
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
	dwIdle(dev);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ff91 	bl	80009be <dwIdle>
	dwReadNetworkIdAndDeviceAddress(dev);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff fddc 	bl	800065a <dwReadNetworkIdAndDeviceAddress>
	dwReadSystemConfigurationRegister(dev);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fda6 	bl	80005f4 <dwReadSystemConfigurationRegister>
	dwReadChannelControlRegister(dev);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff fe1a 	bl	80006e2 <dwReadChannelControlRegister>
	dwReadTransmitFrameControlRegister(dev);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff fe39 	bl	8000726 <dwReadTransmitFrameControlRegister>
	dwReadSystemEventMaskRegister(dev);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff fdf2 	bl	800069e <dwReadSystemEventMaskRegister>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <dwCommitConfiguration>:

void dwCommitConfiguration(dwDevice_t* dev) {
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b084      	sub	sp, #16
 8000ac6:	af02      	add	r7, sp, #8
 8000ac8:	6078      	str	r0, [r7, #4]
	// write all configurations back to device
	dwWriteNetworkIdAndDeviceAddress(dev);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fdd6 	bl	800067c <dwWriteNetworkIdAndDeviceAddress>
	dwWriteSystemConfigurationRegister(dev);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff fda0 	bl	8000616 <dwWriteSystemConfigurationRegister>
	dwWriteChannelControlRegister(dev);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff fe14 	bl	8000704 <dwWriteChannelControlRegister>
	dwWriteTransmitFrameControlRegister(dev);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff fe33 	bl	8000748 <dwWriteTransmitFrameControlRegister>
	dwWriteSystemEventMaskRegister(dev);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff fdec 	bl	80006c0 <dwWriteSystemEventMaskRegister>
	// tune according to configuration
	dwTune(dev);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f000 fb63 	bl	80011b4 <dwTune>
	// uint8_t antennaDelayBytes[LEN_STAMP];
	// writeValueToBytes(antennaDelayBytes, 16384, LEN_STAMP);
	// dev->antennaDelay.setTimestamp(antennaDelayBytes);
	// dwSpiRead(dev, TX_ANTD, NO_SUB, antennaDelayBytes, LEN_TX_ANTD);
	// dwSpiRead(dev, LDE_IF, LDE_RXANTD_SUB, antennaDelayBytes, LEN_LDE_RXANTD);
	dwSpiWrite(dev, TX_ANTD, NO_SUB, dev->antennaDelay.raw, LEN_TX_ANTD);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3338      	adds	r3, #56	@ 0x38
 8000af2:	2202      	movs	r2, #2
 8000af4:	9200      	str	r2, [sp, #0]
 8000af6:	2200      	movs	r2, #0
 8000af8:	2118      	movs	r1, #24
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f001 fb67 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_RXANTD_SUB, dev->antennaDelay.raw, LEN_LDE_RXANTD);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3338      	adds	r3, #56	@ 0x38
 8000b04:	2202      	movs	r2, #2
 8000b06:	9200      	str	r2, [sp, #0]
 8000b08:	f641 0204 	movw	r2, #6148	@ 0x1804
 8000b0c:	212e      	movs	r1, #46	@ 0x2e
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f001 fb5d 	bl	80021ce <dwSpiWrite>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <dwSuppressFrameCheck>:
void dwWaitForResponse(dwDevice_t* dev, bool val) {
	dev->wait4resp = val;
	setBit(dev->sysctrl, LEN_SYS_CTRL, WAIT4RESP_BIT, val);
}

void dwSuppressFrameCheck(dwDevice_t* dev, bool val) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	70fb      	strb	r3, [r7, #3]
	dev->frameCheck = !val;
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	bf14      	ite	ne
 8000b2e:	2301      	movne	r3, #1
 8000b30:	2300      	moveq	r3, #0
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	f083 0301 	eor.w	r3, r3, #1
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <dwUseSmartPower>:

void dwUseSmartPower(dwDevice_t* dev, bool smartPower) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	70fb      	strb	r3, [r7, #3]
	dev->smartPower = smartPower;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	78fa      	ldrb	r2, [r7, #3]
 8000b60:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	setBit(dev->syscfg, LEN_SYS_CFG, DIS_STXP_BIT, !smartPower);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f103 0011 	add.w	r0, r3, #17
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	bf14      	ite	ne
 8000b70:	2301      	movne	r3, #1
 8000b72:	2300      	moveq	r3, #0
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	f083 0301 	eor.w	r3, r3, #1
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2212      	movs	r2, #18
 8000b84:	2104      	movs	r1, #4
 8000b86:	f001 fa15 	bl	8001fb4 <setBit>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <dwSetDataRate>:
	delayBytes[1] &= 0xFE;
	dwSpiWrite(dev, DX_TIME, NO_SUB, delayBytes, LEN_DX_TIME);
}


void dwSetDataRate(dwDevice_t* dev, uint8_t rate) {
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af02      	add	r7, sp, #8
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	70fb      	strb	r3, [r7, #3]
	rate &= 0x03;
 8000b9e:	78fb      	ldrb	r3, [r7, #3]
 8000ba0:	f003 0303 	and.w	r3, r3, #3
 8000ba4:	70fb      	strb	r3, [r7, #3]
	dev->txfctrl[1] &= 0x83;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000bac:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	dev->txfctrl[1] |= (uint8_t)((rate << 5) & 0xFF);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	015b      	lsls	r3, r3, #5
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	// special 110kbps flag
	if(rate == TRX_RATE_110KBPS) {
 8000bce:	78fb      	ldrb	r3, [r7, #3]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d108      	bne.n	8000be6 <dwSetDataRate+0x54>
		setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, true);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f103 0011 	add.w	r0, r3, #17
 8000bda:	2301      	movs	r3, #1
 8000bdc:	2216      	movs	r2, #22
 8000bde:	2104      	movs	r1, #4
 8000be0:	f001 f9e8 	bl	8001fb4 <setBit>
 8000be4:	e007      	b.n	8000bf6 <dwSetDataRate+0x64>
	} else {
		setBit(dev->syscfg, LEN_SYS_CFG, RXM110K_BIT, false);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f103 0011 	add.w	r0, r3, #17
 8000bec:	2300      	movs	r3, #0
 8000bee:	2216      	movs	r2, #22
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	f001 f9df 	bl	8001fb4 <setBit>
	}
	// SFD mode and type (non-configurable, as in Table )
	if(rate == TRX_RATE_6800KBPS) {
 8000bf6:	78fb      	ldrb	r3, [r7, #3]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d118      	bne.n	8000c2e <dwSetDataRate+0x9c>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, false);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f103 0019 	add.w	r0, r3, #25
 8000c02:	2300      	movs	r3, #0
 8000c04:	2211      	movs	r2, #17
 8000c06:	2104      	movs	r1, #4
 8000c08:	f001 f9d4 	bl	8001fb4 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, false);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f103 0019 	add.w	r0, r3, #25
 8000c12:	2300      	movs	r3, #0
 8000c14:	2214      	movs	r2, #20
 8000c16:	2104      	movs	r1, #4
 8000c18:	f001 f9cc 	bl	8001fb4 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, false);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f103 0019 	add.w	r0, r3, #25
 8000c22:	2300      	movs	r3, #0
 8000c24:	2215      	movs	r2, #21
 8000c26:	2104      	movs	r1, #4
 8000c28:	f001 f9c4 	bl	8001fb4 <setBit>
 8000c2c:	e017      	b.n	8000c5e <dwSetDataRate+0xcc>
	} else {
		setBit(dev->chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, true);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f103 0019 	add.w	r0, r3, #25
 8000c34:	2301      	movs	r3, #1
 8000c36:	2211      	movs	r2, #17
 8000c38:	2104      	movs	r1, #4
 8000c3a:	f001 f9bb 	bl	8001fb4 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, true);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f103 0019 	add.w	r0, r3, #25
 8000c44:	2301      	movs	r3, #1
 8000c46:	2214      	movs	r2, #20
 8000c48:	2104      	movs	r1, #4
 8000c4a:	f001 f9b3 	bl	8001fb4 <setBit>
		setBit(dev->chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, true);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f103 0019 	add.w	r0, r3, #25
 8000c54:	2301      	movs	r3, #1
 8000c56:	2215      	movs	r2, #21
 8000c58:	2104      	movs	r1, #4
 8000c5a:	f001 f9ab 	bl	8001fb4 <setBit>

	}
	uint8_t sfdLength;
	if(rate == TRX_RATE_6800KBPS) {
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d102      	bne.n	8000c6a <dwSetDataRate+0xd8>
		sfdLength = 0x08;
 8000c64:	2308      	movs	r3, #8
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e007      	b.n	8000c7a <dwSetDataRate+0xe8>
	} else if(rate == TRX_RATE_850KBPS) {
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d102      	bne.n	8000c76 <dwSetDataRate+0xe4>
		sfdLength = 0x10;
 8000c70:	2310      	movs	r3, #16
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	e001      	b.n	8000c7a <dwSetDataRate+0xe8>
	} else {
		sfdLength = 0x40;
 8000c76:	2340      	movs	r3, #64	@ 0x40
 8000c78:	73fb      	strb	r3, [r7, #15]
	}
	dwSpiWrite(dev, USR_SFD, SFD_LENGTH_SUB, &sfdLength, LEN_SFD_LENGTH);
 8000c7a:	f107 030f 	add.w	r3, r7, #15
 8000c7e:	2201      	movs	r2, #1
 8000c80:	9200      	str	r2, [sp, #0]
 8000c82:	2200      	movs	r2, #0
 8000c84:	2121      	movs	r1, #33	@ 0x21
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f001 faa1 	bl	80021ce <dwSpiWrite>
	dev->dataRate = rate;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	78fa      	ldrb	r2, [r7, #3]
 8000c90:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <dwSetPulseFrequency>:

void dwSetPulseFrequency(dwDevice_t* dev, uint8_t freq) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
	freq &= 0x03;
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	70fb      	strb	r3, [r7, #3]
	dev->txfctrl[2] &= 0xFC;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000cb6:	f023 0303 	bic.w	r3, r3, #3
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	dev->txfctrl[2] |= (uint8_t)(freq & 0xFF);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	dev->chanctrl[2] &= 0xF3;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7edb      	ldrb	r3, [r3, #27]
 8000cd8:	f023 030c 	bic.w	r3, r3, #12
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	76da      	strb	r2, [r3, #27]
	dev->chanctrl[2] |= (uint8_t)((freq << 2) & 0xFF);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	7eda      	ldrb	r2, [r3, #27]
 8000ce6:	78fb      	ldrb	r3, [r7, #3]
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	76da      	strb	r2, [r3, #27]
	dev->pulseFrequency = freq;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	78fa      	ldrb	r2, [r7, #3]
 8000cf8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <dwSetPreambleLength>:

uint8_t dwGetPulseFrequency(dwDevice_t* dev) {
	return dev->pulseFrequency;
}

void dwSetPreambleLength(dwDevice_t* dev, uint8_t prealen) {
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	70fb      	strb	r3, [r7, #3]
	prealen &= 0x0F;
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	f003 030f 	and.w	r3, r3, #15
 8000d18:	70fb      	strb	r3, [r7, #3]
	dev->txfctrl[2] &= 0xC3;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d20:	f023 033c 	bic.w	r3, r3, #60	@ 0x3c
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	dev->txfctrl[2] |= (uint8_t)((prealen << 2) & 0xFF);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000d32:	78fb      	ldrb	r3, [r7, #3]
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	if(prealen == TX_PREAMBLE_LEN_64 || prealen == TX_PREAMBLE_LEN_128) {
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d002      	beq.n	8000d4e <dwSetPreambleLength+0x48>
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	2b05      	cmp	r3, #5
 8000d4c:	d104      	bne.n	8000d58 <dwSetPreambleLength+0x52>
		dev->pacSize = PAC_SIZE_8;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2208      	movs	r2, #8
 8000d52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8000d56:	e016      	b.n	8000d86 <dwSetPreambleLength+0x80>
	} else if(prealen == TX_PREAMBLE_LEN_256 || prealen == TX_PREAMBLE_LEN_512) {
 8000d58:	78fb      	ldrb	r3, [r7, #3]
 8000d5a:	2b09      	cmp	r3, #9
 8000d5c:	d002      	beq.n	8000d64 <dwSetPreambleLength+0x5e>
 8000d5e:	78fb      	ldrb	r3, [r7, #3]
 8000d60:	2b0d      	cmp	r3, #13
 8000d62:	d104      	bne.n	8000d6e <dwSetPreambleLength+0x68>
		dev->pacSize = PAC_SIZE_16;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2210      	movs	r2, #16
 8000d68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8000d6c:	e00b      	b.n	8000d86 <dwSetPreambleLength+0x80>
	} else if(prealen == TX_PREAMBLE_LEN_1024) {
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d104      	bne.n	8000d7e <dwSetPreambleLength+0x78>
		dev->pacSize = PAC_SIZE_32;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2220      	movs	r2, #32
 8000d78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8000d7c:	e003      	b.n	8000d86 <dwSetPreambleLength+0x80>
	} else {
		dev->pacSize = PAC_SIZE_64;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2240      	movs	r2, #64	@ 0x40
 8000d82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}
	dev->preambleLength = prealen;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	78fa      	ldrb	r2, [r7, #3]
 8000d8a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <dwUseExtendedFrameLength>:

void dwUseExtendedFrameLength(dwDevice_t* dev, bool val) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	70fb      	strb	r3, [r7, #3]
	dev->extendedFrameLength = (val ? FRAME_LENGTH_EXTENDED : FRAME_LENGTH_NORMAL);
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <dwUseExtendedFrameLength+0x16>
 8000daa:	2203      	movs	r2, #3
 8000dac:	e000      	b.n	8000db0 <dwUseExtendedFrameLength+0x18>
 8000dae:	2200      	movs	r2, #0
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	dev->syscfg[2] &= 0xFC;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7cdb      	ldrb	r3, [r3, #19]
 8000dba:	f023 0303 	bic.w	r3, r3, #3
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	74da      	strb	r2, [r3, #19]
	dev->syscfg[2] |= dev->extendedFrameLength;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7cda      	ldrb	r2, [r3, #19]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	74da      	strb	r2, [r3, #19]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <dwReceivePermanently>:

void dwReceivePermanently(dwDevice_t* dev, bool val) {
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	70fb      	strb	r3, [r7, #3]
	dev->permanentReceive = val;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	78fa      	ldrb	r2, [r7, #3]
 8000df0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr

08000dfe <dwSetChannel>:

void dwSetChannel(dwDevice_t* dev, uint8_t channel) {
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	460b      	mov	r3, r1
 8000e08:	70fb      	strb	r3, [r7, #3]
	channel &= 0xF;
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	70fb      	strb	r3, [r7, #3]
	dev->chanctrl[0] = ((channel | (channel << 4)) & 0xFF);
 8000e12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e16:	011b      	lsls	r3, r3, #4
 8000e18:	b25a      	sxtb	r2, r3
 8000e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	765a      	strb	r2, [r3, #25]
	dev->channel = channel;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	78fa      	ldrb	r2, [r7, #3]
 8000e2c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <dwSetPreambleCode>:

void dwSetPreambleCode(dwDevice_t* dev, uint8_t preacode) {
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	460b      	mov	r3, r1
 8000e44:	70fb      	strb	r3, [r7, #3]
	preacode &= 0x1F;
 8000e46:	78fb      	ldrb	r3, [r7, #3]
 8000e48:	f003 031f 	and.w	r3, r3, #31
 8000e4c:	70fb      	strb	r3, [r7, #3]
	dev->chanctrl[2] &= 0x3F;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7edb      	ldrb	r3, [r3, #27]
 8000e52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	76da      	strb	r2, [r3, #27]
	dev->chanctrl[2] |= ((preacode << 6) & 0xFF);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	7edb      	ldrb	r3, [r3, #27]
 8000e60:	b25a      	sxtb	r2, r3
 8000e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e66:	019b      	lsls	r3, r3, #6
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	76da      	strb	r2, [r3, #27]
	dev->chanctrl[3] = 0x00;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	771a      	strb	r2, [r3, #28]
	dev->chanctrl[3] = ((((preacode >> 2) & 0x07) | (preacode << 3)) & 0xFF);
 8000e7a:	78fb      	ldrb	r3, [r7, #3]
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	b25a      	sxtb	r2, r3
 8000e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	4313      	orrs	r3, r2
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	771a      	strb	r2, [r3, #28]
	dev->preambleCode = preacode;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	78fa      	ldrb	r2, [r7, #3]
 8000e9e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <dwSetDefaults>:

void dwSetDefaults(dwDevice_t* dev) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	if(dev->deviceMode == TX_MODE) {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7b1b      	ldrb	r3, [r3, #12]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d03f      	beq.n	8000f3c <dwSetDefaults+0x90>

	} else if(dev->deviceMode == RX_MODE) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7b1b      	ldrb	r3, [r3, #12]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d03b      	beq.n	8000f3c <dwSetDefaults+0x90>

	} else if(dev->deviceMode == IDLE_MODE) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7b1b      	ldrb	r3, [r3, #12]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d137      	bne.n	8000f3c <dwSetDefaults+0x90>
		dwUseExtendedFrameLength(dev, false);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ff62 	bl	8000d98 <dwUseExtendedFrameLength>
		dwUseSmartPower(dev, false);
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff fe3a 	bl	8000b50 <dwUseSmartPower>
		dwSuppressFrameCheck(dev, false);
 8000edc:	2100      	movs	r1, #0
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff fe1c 	bl	8000b1c <dwSuppressFrameCheck>
		//for global frame filtering
		dwSetFrameFilter(dev, false);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff fc3f 	bl	800076a <dwSetFrameFilter>
		//for data frame (poll, poll_ack, range, range report, range failed) filtering
		dwSetFrameFilterAllowData(dev, false);
 8000eec:	2100      	movs	r1, #0
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fc4d 	bl	800078e <dwSetFrameFilterAllowData>
		//for reserved (blink) frame filtering
		dwSetFrameFilterAllowReserved(dev, false);
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff fc5b 	bl	80007b2 <dwSetFrameFilterAllowReserved>
		//setFrameFilterAllowMAC(true);
		//setFrameFilterAllowBeacon(true);
		//setFrameFilterAllowAcknowledgement(true);
		dwInterruptOnSent(dev, true);
 8000efc:	2101      	movs	r1, #1
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff fcaa 	bl	8000858 <dwInterruptOnSent>
		dwInterruptOnReceived(dev, true);
 8000f04:	2101      	movs	r1, #1
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff fcb8 	bl	800087c <dwInterruptOnReceived>
		dwInterruptOnReceiveTimeout(dev, true);
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fd08 	bl	8000924 <dwInterruptOnReceiveTimeout>
		dwInterruptOnReceiveFailed(dev, false);
 8000f14:	2100      	movs	r1, #0
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff fcca 	bl	80008b0 <dwInterruptOnReceiveFailed>
		dwInterruptOnReceiveTimestampAvailable(dev, false);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff fd1a 	bl	8000958 <dwInterruptOnReceiveTimestampAvailable>
		dwInterruptOnAutomaticAcknowledgeTrigger(dev, false);
 8000f24:	2100      	movs	r1, #0
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff fd28 	bl	800097c <dwInterruptOnAutomaticAcknowledgeTrigger>
		dwSetReceiverAutoReenable(dev, true);
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff fc80 	bl	8000834 <dwSetReceiverAutoReenable>
		// default mode when powering up the chip
		// still explicitly selected for later tuning
		dwEnableMode(dev, MODE_LONGDATA_RANGE_LOWPOWER);
 8000f34:	4903      	ldr	r1, [pc, #12]	@ (8000f44 <dwSetDefaults+0x98>)
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f90c 	bl	8001154 <dwEnableMode>
	}
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	0800b788 	.word	0x0800b788

08000f48 <dwIsTransmitDone>:

void dwGetSystemTimestamp(dwDevice_t* dev, dwTime_t* time) {
	dwSpiRead(dev, SYS_TIME, NO_SUB, time->raw, LEN_SYS_TIME);
}

bool dwIsTransmitDone(dwDevice_t* dev) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	return getBit(dev->sysstatus, LEN_SYS_STATUS, TXFRS_BIT);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	331d      	adds	r3, #29
 8000f54:	2207      	movs	r2, #7
 8000f56:	2105      	movs	r1, #5
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 f867 	bl	800202c <getBit>
 8000f5e:	4603      	mov	r3, r0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <dwIsReceiveTimestampAvailable>:

bool dwIsReceiveTimestampAvailable(dwDevice_t* dev) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	return getBit(dev->sysstatus, LEN_SYS_STATUS, LDEDONE_BIT);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	331d      	adds	r3, #29
 8000f74:	220a      	movs	r2, #10
 8000f76:	2105      	movs	r1, #5
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f001 f857 	bl	800202c <getBit>
 8000f7e:	4603      	mov	r3, r0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <dwIsReceiveDone>:

bool dwIsReceiveDone(dwDevice_t* dev) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	if(dev->frameCheck) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d008      	beq.n	8000fac <dwIsReceiveDone+0x24>
		return getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCG_BIT);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	331d      	adds	r3, #29
 8000f9e:	220e      	movs	r2, #14
 8000fa0:	2105      	movs	r1, #5
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 f842 	bl	800202c <getBit>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	e007      	b.n	8000fbc <dwIsReceiveDone+0x34>
	}
	return getBit(dev->sysstatus, LEN_SYS_STATUS, RXDFR_BIT);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	331d      	adds	r3, #29
 8000fb0:	220d      	movs	r2, #13
 8000fb2:	2105      	movs	r1, #5
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 f839 	bl	800202c <getBit>
 8000fba:	4603      	mov	r3, r0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <dwIsReceiveFailed>:

bool dwIsReceiveFailed(dwDevice_t *dev) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	bool ldeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, LDEERR_BIT);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	331d      	adds	r3, #29
 8000fd0:	2212      	movs	r2, #18
 8000fd2:	2105      	movs	r1, #5
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 f829 	bl	800202c <getBit>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	73fb      	strb	r3, [r7, #15]
	bool rxCRCErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXFCE_BIT);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	331d      	adds	r3, #29
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 f820 	bl	800202c <getBit>
 8000fec:	4603      	mov	r3, r0
 8000fee:	73bb      	strb	r3, [r7, #14]
	bool rxHeaderErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXPHE_BIT);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	331d      	adds	r3, #29
 8000ff4:	220c      	movs	r2, #12
 8000ff6:	2105      	movs	r1, #5
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f001 f817 	bl	800202c <getBit>
 8000ffe:	4603      	mov	r3, r0
 8001000:	737b      	strb	r3, [r7, #13]
	bool rxDecodeErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFSL_BIT);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	331d      	adds	r3, #29
 8001006:	2210      	movs	r2, #16
 8001008:	2105      	movs	r1, #5
 800100a:	4618      	mov	r0, r3
 800100c:	f001 f80e 	bl	800202c <getBit>
 8001010:	4603      	mov	r3, r0
 8001012:	733b      	strb	r3, [r7, #12]


	bool rxSfdto = getBit(dev->sysstatus, LEN_SYS_STATUS, RXSFDTO_BIT);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	331d      	adds	r3, #29
 8001018:	221a      	movs	r2, #26
 800101a:	2105      	movs	r1, #5
 800101c:	4618      	mov	r0, r3
 800101e:	f001 f805 	bl	800202c <getBit>
 8001022:	4603      	mov	r3, r0
 8001024:	72fb      	strb	r3, [r7, #11]
	bool affrej = getBit(dev->sysstatus, LEN_SYS_STATUS, AFFREJ_BIT);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	331d      	adds	r3, #29
 800102a:	221d      	movs	r2, #29
 800102c:	2105      	movs	r1, #5
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fffc 	bl	800202c <getBit>
 8001034:	4603      	mov	r3, r0
 8001036:	72bb      	strb	r3, [r7, #10]

	return (ldeErr || rxCRCErr || rxHeaderErr || rxDecodeErr || rxSfdto || affrej);
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10e      	bne.n	800105c <dwIsReceiveFailed+0x98>
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10b      	bne.n	800105c <dwIsReceiveFailed+0x98>
 8001044:	7b7b      	ldrb	r3, [r7, #13]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d108      	bne.n	800105c <dwIsReceiveFailed+0x98>
 800104a:	7b3b      	ldrb	r3, [r7, #12]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d105      	bne.n	800105c <dwIsReceiveFailed+0x98>
 8001050:	7afb      	ldrb	r3, [r7, #11]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d102      	bne.n	800105c <dwIsReceiveFailed+0x98>
 8001056:	7abb      	ldrb	r3, [r7, #10]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <dwIsReceiveFailed+0x9c>
 800105c:	2301      	movs	r3, #1
 800105e:	e000      	b.n	8001062 <dwIsReceiveFailed+0x9e>
 8001060:	2300      	movs	r3, #0
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <dwIsReceiveTimeout>:

bool dwIsReceiveTimeout(dwDevice_t* dev) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	return getBit(dev->sysstatus, LEN_SYS_STATUS, RXRFTO_BIT);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	331d      	adds	r3, #29
 800107c:	2211      	movs	r2, #17
 800107e:	2105      	movs	r1, #5
 8001080:	4618      	mov	r0, r3
 8001082:	f000 ffd3 	bl	800202c <getBit>
 8001086:	4603      	mov	r3, r0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <dwIsClockProblem>:

bool dwIsClockProblem(dwDevice_t* dev) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	bool clkllErr, rfllErr;
	clkllErr = getBit(dev->sysstatus, LEN_SYS_STATUS, CLKPLL_LL_BIT);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	331d      	adds	r3, #29
 800109c:	2219      	movs	r2, #25
 800109e:	2105      	movs	r1, #5
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 ffc3 	bl	800202c <getBit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73fb      	strb	r3, [r7, #15]
	rfllErr = getBit(dev->sysstatus, LEN_SYS_STATUS, RFPLL_LL_BIT);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	331d      	adds	r3, #29
 80010ae:	2218      	movs	r2, #24
 80010b0:	2105      	movs	r1, #5
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 ffba 	bl	800202c <getBit>
 80010b8:	4603      	mov	r3, r0
 80010ba:	73bb      	strb	r3, [r7, #14]
	if(clkllErr || rfllErr) {
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d102      	bne.n	80010c8 <dwIsClockProblem+0x38>
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <dwIsClockProblem+0x3c>
		return true;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <dwIsClockProblem+0x3e>
	}
	return false;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <dwClearReceiveTimestampAvailableStatus>:
	memset(dev->sysstatus, 0, LEN_SYS_STATUS);
	uint32_t reg = 0xffffffff;
	dwSpiWrite(dev, SYS_STATUS, NO_SUB,  &reg, LEN_SYS_STATUS);
}

void dwClearReceiveTimestampAvailableStatus(dwDevice_t* dev) {
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af02      	add	r7, sp, #8
 80010dc:	6078      	str	r0, [r7, #4]
	uint8_t reg[LEN_SYS_STATUS] = {0};
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	711a      	strb	r2, [r3, #4]
	setBit(reg, LEN_SYS_STATUS, LDEDONE_BIT, true);
 80010e8:	f107 0008 	add.w	r0, r7, #8
 80010ec:	2301      	movs	r3, #1
 80010ee:	220a      	movs	r2, #10
 80010f0:	2105      	movs	r1, #5
 80010f2:	f000 ff5f 	bl	8001fb4 <setBit>
	dwSpiWrite(dev, SYS_STATUS, NO_SUB, reg, LEN_SYS_STATUS);
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	2205      	movs	r2, #5
 80010fc:	9200      	str	r2, [sp, #0]
 80010fe:	2200      	movs	r2, #0
 8001100:	210f      	movs	r1, #15
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f001 f863 	bl	80021ce <dwSpiWrite>
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <dwClearReceiveStatus>:

void dwClearReceiveStatus(dwDevice_t* dev) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	// clear latched RX bits (i.e. write 1 to clear)
	uint32_t regData = SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_GOOD;
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <dwClearReceiveStatus+0x20>)
 800111a:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	210f      	movs	r1, #15
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f001 f8ad 	bl	8002282 <dwSpiWrite32>
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2427ff00 	.word	0x2427ff00

08001134 <dwClearTransmitStatus>:

void dwClearTransmitStatus(dwDevice_t* dev) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	// clear latched TX bits
	uint32_t regData = SYS_STATUS_ALL_TX;
 800113c:	23f8      	movs	r3, #248	@ 0xf8
 800113e:	60fb      	str	r3, [r7, #12]
	dwSpiWrite32(dev, SYS_STATUS, NO_SUB, regData);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	210f      	movs	r1, #15
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f001 f89b 	bl	8002282 <dwSpiWrite32>
}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <dwEnableMode>:
	float twoPower17 = 131072.0f;

	return calculatePower(C * twoPower17, N, dev->pulseFrequency);
}

void dwEnableMode(dwDevice_t *dev, const uint8_t mode[]) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
	dwSetDataRate(dev, mode[0]);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4619      	mov	r1, r3
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff fd14 	bl	8000b92 <dwSetDataRate>
	dwSetPulseFrequency(dev, mode[1]);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fd92 	bl	8000c9c <dwSetPulseFrequency>
	dwSetPreambleLength(dev, mode[2]);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	3302      	adds	r3, #2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4619      	mov	r1, r3
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff fdc0 	bl	8000d06 <dwSetPreambleLength>
	// TODO add channel and code to mode tuples
	// TODO add channel and code settings with checks (see Table 58)
	dwSetChannel(dev, CHANNEL_5);
 8001186:	2105      	movs	r1, #5
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff fe38 	bl	8000dfe <dwSetChannel>
	if(mode[1] == TX_PULSE_FREQ_16MHZ) {
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d104      	bne.n	80011a2 <dwEnableMode+0x4e>
		dwSetPreambleCode(dev, PREAMBLE_CODE_16MHZ_4);
 8001198:	2104      	movs	r1, #4
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fe4d 	bl	8000e3a <dwSetPreambleCode>
	} else {
		dwSetPreambleCode(dev, PREAMBLE_CODE_64MHZ_10);
	}
}
 80011a0:	e003      	b.n	80011aa <dwEnableMode+0x56>
		dwSetPreambleCode(dev, PREAMBLE_CODE_64MHZ_10);
 80011a2:	210a      	movs	r1, #10
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff fe48 	bl	8000e3a <dwSetPreambleCode>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <dwTune>:

void dwTune(dwDevice_t *dev) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b098      	sub	sp, #96	@ 0x60
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	6078      	str	r0, [r7, #4]
	uint8_t tcpgdelay[LEN_TC_PGDELAY];
	uint8_t fspllcfg[LEN_FS_PLLCFG];
	uint8_t fsplltune[LEN_FS_PLLTUNE];
	uint8_t fsxtalt[LEN_FS_XTALT];
	// AGC_TUNE1
	if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d108      	bne.n	80011d8 <dwTune+0x24>
		writeValueToBytes(agctune1, 0x8870, LEN_AGC_TUNE1);
 80011c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011ca:	2202      	movs	r2, #2
 80011cc:	f648 0170 	movw	r1, #34928	@ 0x8870
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 ff53 	bl	800207c <writeValueToBytes>
 80011d6:	e00c      	b.n	80011f2 <dwTune+0x3e>
	} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d107      	bne.n	80011f2 <dwTune+0x3e>
		writeValueToBytes(agctune1, 0x889B, LEN_AGC_TUNE1);
 80011e2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011e6:	2202      	movs	r2, #2
 80011e8:	f648 019b 	movw	r1, #34971	@ 0x889b
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 ff45 	bl	800207c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// AGC_TUNE2
	writeValueToBytes(agctune2, 0x2502A907L, LEN_AGC_TUNE2);
 80011f2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80011f6:	2204      	movs	r2, #4
 80011f8:	49b9      	ldr	r1, [pc, #740]	@ (80014e0 <dwTune+0x32c>)
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 ff3e 	bl	800207c <writeValueToBytes>
	// AGC_TUNE3
	writeValueToBytes(agctune3, 0x0035, LEN_AGC_TUNE3);
 8001200:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001204:	2202      	movs	r2, #2
 8001206:	2135      	movs	r1, #53	@ 0x35
 8001208:	4618      	mov	r0, r3
 800120a:	f000 ff37 	bl	800207c <writeValueToBytes>
	// DRX_TUNE0b (already optimized according to Table 20 of user manual)
	if(dev->dataRate == TRX_RATE_110KBPS) {
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001214:	2b00      	cmp	r3, #0
 8001216:	d107      	bne.n	8001228 <dwTune+0x74>
		writeValueToBytes(drxtune0b, 0x0016, LEN_DRX_TUNE0b);
 8001218:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800121c:	2202      	movs	r2, #2
 800121e:	2116      	movs	r1, #22
 8001220:	4618      	mov	r0, r3
 8001222:	f000 ff2b 	bl	800207c <writeValueToBytes>
 8001226:	e018      	b.n	800125a <dwTune+0xa6>
	} else if(dev->dataRate == TRX_RATE_850KBPS) {
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800122e:	2b01      	cmp	r3, #1
 8001230:	d107      	bne.n	8001242 <dwTune+0x8e>
		writeValueToBytes(drxtune0b, 0x0006, LEN_DRX_TUNE0b);
 8001232:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001236:	2202      	movs	r2, #2
 8001238:	2106      	movs	r1, #6
 800123a:	4618      	mov	r0, r3
 800123c:	f000 ff1e 	bl	800207c <writeValueToBytes>
 8001240:	e00b      	b.n	800125a <dwTune+0xa6>
	} else if(dev->dataRate == TRX_RATE_6800KBPS) {
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001248:	2b02      	cmp	r3, #2
 800124a:	d106      	bne.n	800125a <dwTune+0xa6>
		writeValueToBytes(drxtune0b, 0x0001, LEN_DRX_TUNE0b);
 800124c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001250:	2202      	movs	r2, #2
 8001252:	2101      	movs	r1, #1
 8001254:	4618      	mov	r0, r3
 8001256:	f000 ff11 	bl	800207c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// DRX_TUNE1a
	if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001260:	2b01      	cmp	r3, #1
 8001262:	d107      	bne.n	8001274 <dwTune+0xc0>
		writeValueToBytes(drxtune1a, 0x0087, LEN_DRX_TUNE1a);
 8001264:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001268:	2202      	movs	r2, #2
 800126a:	2187      	movs	r1, #135	@ 0x87
 800126c:	4618      	mov	r0, r3
 800126e:	f000 ff05 	bl	800207c <writeValueToBytes>
 8001272:	e00b      	b.n	800128c <dwTune+0xd8>
	} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800127a:	2b02      	cmp	r3, #2
 800127c:	d106      	bne.n	800128c <dwTune+0xd8>
		writeValueToBytes(drxtune1a, 0x008D, LEN_DRX_TUNE1a);
 800127e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001282:	2202      	movs	r2, #2
 8001284:	218d      	movs	r1, #141	@ 0x8d
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fef8 	bl	800207c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// DRX_TUNE1b
	if(dev->preambleLength ==  TX_PREAMBLE_LEN_1536 || dev->preambleLength ==  TX_PREAMBLE_LEN_2048 ||
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001292:	2b06      	cmp	r3, #6
 8001294:	d009      	beq.n	80012aa <dwTune+0xf6>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800129c:	2b0a      	cmp	r3, #10
 800129e:	d004      	beq.n	80012aa <dwTune+0xf6>
			dev->preambleLength ==  TX_PREAMBLE_LEN_4096) {
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	if(dev->preambleLength ==  TX_PREAMBLE_LEN_1536 || dev->preambleLength ==  TX_PREAMBLE_LEN_2048 ||
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d10c      	bne.n	80012c4 <dwTune+0x110>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d12a      	bne.n	800130a <dwTune+0x156>
			writeValueToBytes(drxtune1b, 0x0064, LEN_DRX_TUNE1b);
 80012b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012b8:	2202      	movs	r2, #2
 80012ba:	2164      	movs	r1, #100	@ 0x64
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fedd 	bl	800207c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80012c2:	e022      	b.n	800130a <dwTune+0x156>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->preambleLength != TX_PREAMBLE_LEN_64) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d011      	beq.n	80012f2 <dwTune+0x13e>
		if(dev->dataRate == TRX_RATE_850KBPS || dev->dataRate == TRX_RATE_6800KBPS) {
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d004      	beq.n	80012e2 <dwTune+0x12e>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d113      	bne.n	800130a <dwTune+0x156>
			writeValueToBytes(drxtune1b, 0x0020, LEN_DRX_TUNE1b);
 80012e2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012e6:	2202      	movs	r2, #2
 80012e8:	2120      	movs	r1, #32
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fec6 	bl	800207c <writeValueToBytes>
 80012f0:	e00b      	b.n	800130a <dwTune+0x156>
		} else {
			// TODO proper error/warning handling
		}
	} else {
		if(dev->dataRate == TRX_RATE_6800KBPS) {
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d106      	bne.n	800130a <dwTune+0x156>
			writeValueToBytes(drxtune1b, 0x0010, LEN_DRX_TUNE1b);
 80012fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001300:	2202      	movs	r2, #2
 8001302:	2110      	movs	r1, #16
 8001304:	4618      	mov	r0, r3
 8001306:	f000 feb9 	bl	800207c <writeValueToBytes>
		} else {
			// TODO proper error/warning handling
		}
	}
	// DRX_TUNE2
	if(dev->pacSize == PAC_SIZE_8) {
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001310:	2b08      	cmp	r3, #8
 8001312:	d119      	bne.n	8001348 <dwTune+0x194>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800131a:	2b01      	cmp	r3, #1
 800131c:	d107      	bne.n	800132e <dwTune+0x17a>
			writeValueToBytes(drxtune2, 0x311A002DL, LEN_DRX_TUNE2);
 800131e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001322:	2204      	movs	r2, #4
 8001324:	496f      	ldr	r1, [pc, #444]	@ (80014e4 <dwTune+0x330>)
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fea8 	bl	800207c <writeValueToBytes>
 800132c:	e068      	b.n	8001400 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001334:	2b02      	cmp	r3, #2
 8001336:	d163      	bne.n	8001400 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x313B006BL, LEN_DRX_TUNE2);
 8001338:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800133c:	2204      	movs	r2, #4
 800133e:	496a      	ldr	r1, [pc, #424]	@ (80014e8 <dwTune+0x334>)
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fe9b 	bl	800207c <writeValueToBytes>
 8001346:	e05b      	b.n	8001400 <dwTune+0x24c>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->pacSize == PAC_SIZE_16) {
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800134e:	2b10      	cmp	r3, #16
 8001350:	d119      	bne.n	8001386 <dwTune+0x1d2>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001358:	2b01      	cmp	r3, #1
 800135a:	d107      	bne.n	800136c <dwTune+0x1b8>
			writeValueToBytes(drxtune2, 0x331A0052L, LEN_DRX_TUNE2);
 800135c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001360:	2204      	movs	r2, #4
 8001362:	4962      	ldr	r1, [pc, #392]	@ (80014ec <dwTune+0x338>)
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fe89 	bl	800207c <writeValueToBytes>
 800136a:	e049      	b.n	8001400 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001372:	2b02      	cmp	r3, #2
 8001374:	d144      	bne.n	8001400 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x333B00BEL, LEN_DRX_TUNE2);
 8001376:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800137a:	2204      	movs	r2, #4
 800137c:	495c      	ldr	r1, [pc, #368]	@ (80014f0 <dwTune+0x33c>)
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fe7c 	bl	800207c <writeValueToBytes>
 8001384:	e03c      	b.n	8001400 <dwTune+0x24c>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->pacSize == PAC_SIZE_32) {
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800138c:	2b20      	cmp	r3, #32
 800138e:	d119      	bne.n	80013c4 <dwTune+0x210>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001396:	2b01      	cmp	r3, #1
 8001398:	d107      	bne.n	80013aa <dwTune+0x1f6>
			writeValueToBytes(drxtune2, 0x351A009AL, LEN_DRX_TUNE2);
 800139a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800139e:	2204      	movs	r2, #4
 80013a0:	4954      	ldr	r1, [pc, #336]	@ (80014f4 <dwTune+0x340>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fe6a 	bl	800207c <writeValueToBytes>
 80013a8:	e02a      	b.n	8001400 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d125      	bne.n	8001400 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x353B015EL, LEN_DRX_TUNE2);
 80013b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013b8:	2204      	movs	r2, #4
 80013ba:	494f      	ldr	r1, [pc, #316]	@ (80014f8 <dwTune+0x344>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fe5d 	bl	800207c <writeValueToBytes>
 80013c2:	e01d      	b.n	8001400 <dwTune+0x24c>
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->pacSize == PAC_SIZE_64) {
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80013ca:	2b40      	cmp	r3, #64	@ 0x40
 80013cc:	d118      	bne.n	8001400 <dwTune+0x24c>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d107      	bne.n	80013e8 <dwTune+0x234>
			writeValueToBytes(drxtune2, 0x371A011DL, LEN_DRX_TUNE2);
 80013d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013dc:	2204      	movs	r2, #4
 80013de:	4947      	ldr	r1, [pc, #284]	@ (80014fc <dwTune+0x348>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 fe4b 	bl	800207c <writeValueToBytes>
 80013e6:	e00b      	b.n	8001400 <dwTune+0x24c>
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d106      	bne.n	8001400 <dwTune+0x24c>
			writeValueToBytes(drxtune2, 0x373B0296L, LEN_DRX_TUNE2);
 80013f2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013f6:	2204      	movs	r2, #4
 80013f8:	4941      	ldr	r1, [pc, #260]	@ (8001500 <dwTune+0x34c>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fe3e 	bl	800207c <writeValueToBytes>
		}
	} else {
		// TODO proper error/warning handling
	}
	// DRX_TUNE4H
	if(dev->preambleLength == TX_PREAMBLE_LEN_64) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001406:	2b01      	cmp	r3, #1
 8001408:	d107      	bne.n	800141a <dwTune+0x266>
		writeValueToBytes(drxtune4H, 0x0010, LEN_DRX_TUNE4H);
 800140a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800140e:	2202      	movs	r2, #2
 8001410:	2110      	movs	r1, #16
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fe32 	bl	800207c <writeValueToBytes>
 8001418:	e006      	b.n	8001428 <dwTune+0x274>
	} else {
		writeValueToBytes(drxtune4H, 0x0028, LEN_DRX_TUNE4H);
 800141a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800141e:	2202      	movs	r2, #2
 8001420:	2128      	movs	r1, #40	@ 0x28
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fe2a 	bl	800207c <writeValueToBytes>
	}
	// RF_RXCTRLH
	if(dev->channel != CHANNEL_4 && dev->channel != CHANNEL_7) {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800142e:	2b04      	cmp	r3, #4
 8001430:	d00c      	beq.n	800144c <dwTune+0x298>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001438:	2b07      	cmp	r3, #7
 800143a:	d007      	beq.n	800144c <dwTune+0x298>
		writeValueToBytes(rfrxctrlh, 0xD8, LEN_RF_RXCTRLH);
 800143c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001440:	2201      	movs	r2, #1
 8001442:	21d8      	movs	r1, #216	@ 0xd8
 8001444:	4618      	mov	r0, r3
 8001446:	f000 fe19 	bl	800207c <writeValueToBytes>
 800144a:	e006      	b.n	800145a <dwTune+0x2a6>
	} else {
		writeValueToBytes(rfrxctrlh, 0xBC, LEN_RF_RXCTRLH);
 800144c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001450:	2201      	movs	r2, #1
 8001452:	21bc      	movs	r1, #188	@ 0xbc
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fe11 	bl	800207c <writeValueToBytes>
	}
	// RX_TXCTRL
	if(dev->channel == CHANNEL_1) {
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001460:	2b01      	cmp	r3, #1
 8001462:	d108      	bne.n	8001476 <dwTune+0x2c2>
		writeValueToBytes(rftxctrl, 0x00005C40L, LEN_RF_TXCTRL);
 8001464:	f107 0320 	add.w	r3, r7, #32
 8001468:	2204      	movs	r2, #4
 800146a:	f645 4140 	movw	r1, #23616	@ 0x5c40
 800146e:	4618      	mov	r0, r3
 8001470:	f000 fe04 	bl	800207c <writeValueToBytes>
 8001474:	e05a      	b.n	800152c <dwTune+0x378>
	} else if(dev->channel == CHANNEL_2) {
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800147c:	2b02      	cmp	r3, #2
 800147e:	d107      	bne.n	8001490 <dwTune+0x2dc>
		writeValueToBytes(rftxctrl, 0x00045CA0L, LEN_RF_TXCTRL);
 8001480:	f107 0320 	add.w	r3, r7, #32
 8001484:	2204      	movs	r2, #4
 8001486:	491f      	ldr	r1, [pc, #124]	@ (8001504 <dwTune+0x350>)
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fdf7 	bl	800207c <writeValueToBytes>
 800148e:	e04d      	b.n	800152c <dwTune+0x378>
	} else if(dev->channel == CHANNEL_3) {
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001496:	2b03      	cmp	r3, #3
 8001498:	d107      	bne.n	80014aa <dwTune+0x2f6>
		writeValueToBytes(rftxctrl, 0x00086CC0L, LEN_RF_TXCTRL);
 800149a:	f107 0320 	add.w	r3, r7, #32
 800149e:	2204      	movs	r2, #4
 80014a0:	4919      	ldr	r1, [pc, #100]	@ (8001508 <dwTune+0x354>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fdea 	bl	800207c <writeValueToBytes>
 80014a8:	e040      	b.n	800152c <dwTune+0x378>
	} else if(dev->channel == CHANNEL_4) {
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d107      	bne.n	80014c4 <dwTune+0x310>
		writeValueToBytes(rftxctrl, 0x00045C80L, LEN_RF_TXCTRL);
 80014b4:	f107 0320 	add.w	r3, r7, #32
 80014b8:	2204      	movs	r2, #4
 80014ba:	4914      	ldr	r1, [pc, #80]	@ (800150c <dwTune+0x358>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fddd 	bl	800207c <writeValueToBytes>
 80014c2:	e033      	b.n	800152c <dwTune+0x378>
	} else if(dev->channel == CHANNEL_5) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d122      	bne.n	8001514 <dwTune+0x360>
		writeValueToBytes(rftxctrl, 0x001E3FE0L, LEN_RF_TXCTRL);
 80014ce:	f107 0320 	add.w	r3, r7, #32
 80014d2:	2204      	movs	r2, #4
 80014d4:	490e      	ldr	r1, [pc, #56]	@ (8001510 <dwTune+0x35c>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fdd0 	bl	800207c <writeValueToBytes>
 80014dc:	e026      	b.n	800152c <dwTune+0x378>
 80014de:	bf00      	nop
 80014e0:	2502a907 	.word	0x2502a907
 80014e4:	311a002d 	.word	0x311a002d
 80014e8:	313b006b 	.word	0x313b006b
 80014ec:	331a0052 	.word	0x331a0052
 80014f0:	333b00be 	.word	0x333b00be
 80014f4:	351a009a 	.word	0x351a009a
 80014f8:	353b015e 	.word	0x353b015e
 80014fc:	371a011d 	.word	0x371a011d
 8001500:	373b0296 	.word	0x373b0296
 8001504:	00045ca0 	.word	0x00045ca0
 8001508:	00086cc0 	.word	0x00086cc0
 800150c:	00045c80 	.word	0x00045c80
 8001510:	001e3fe0 	.word	0x001e3fe0
	} else if(dev->channel == CHANNEL_7) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800151a:	2b07      	cmp	r3, #7
 800151c:	d106      	bne.n	800152c <dwTune+0x378>
		writeValueToBytes(rftxctrl, 0x001E7DE0L, LEN_RF_TXCTRL);
 800151e:	f107 0320 	add.w	r3, r7, #32
 8001522:	2204      	movs	r2, #4
 8001524:	49be      	ldr	r1, [pc, #760]	@ (8001820 <dwTune+0x66c>)
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fda8 	bl	800207c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// TC_PGDELAY
	if(dev->channel == CHANNEL_1) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001532:	2b01      	cmp	r3, #1
 8001534:	d107      	bne.n	8001546 <dwTune+0x392>
		writeValueToBytes(tcpgdelay, 0xC9, LEN_TC_PGDELAY);
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	2201      	movs	r2, #1
 800153c:	21c9      	movs	r1, #201	@ 0xc9
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fd9c 	bl	800207c <writeValueToBytes>
 8001544:	e03f      	b.n	80015c6 <dwTune+0x412>
	} else if(dev->channel == CHANNEL_2) {
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800154c:	2b02      	cmp	r3, #2
 800154e:	d107      	bne.n	8001560 <dwTune+0x3ac>
		writeValueToBytes(tcpgdelay, 0xC2, LEN_TC_PGDELAY);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	2201      	movs	r2, #1
 8001556:	21c2      	movs	r1, #194	@ 0xc2
 8001558:	4618      	mov	r0, r3
 800155a:	f000 fd8f 	bl	800207c <writeValueToBytes>
 800155e:	e032      	b.n	80015c6 <dwTune+0x412>
	} else if(dev->channel == CHANNEL_3) {
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001566:	2b03      	cmp	r3, #3
 8001568:	d107      	bne.n	800157a <dwTune+0x3c6>
		writeValueToBytes(tcpgdelay, 0xC5, LEN_TC_PGDELAY);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	2201      	movs	r2, #1
 8001570:	21c5      	movs	r1, #197	@ 0xc5
 8001572:	4618      	mov	r0, r3
 8001574:	f000 fd82 	bl	800207c <writeValueToBytes>
 8001578:	e025      	b.n	80015c6 <dwTune+0x412>
	} else if(dev->channel == CHANNEL_4) {
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001580:	2b04      	cmp	r3, #4
 8001582:	d107      	bne.n	8001594 <dwTune+0x3e0>
		writeValueToBytes(tcpgdelay, 0x95, LEN_TC_PGDELAY);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	2201      	movs	r2, #1
 800158a:	2195      	movs	r1, #149	@ 0x95
 800158c:	4618      	mov	r0, r3
 800158e:	f000 fd75 	bl	800207c <writeValueToBytes>
 8001592:	e018      	b.n	80015c6 <dwTune+0x412>
	} else if(dev->channel == CHANNEL_5) {
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800159a:	2b05      	cmp	r3, #5
 800159c:	d107      	bne.n	80015ae <dwTune+0x3fa>
		writeValueToBytes(tcpgdelay, 0xC0, LEN_TC_PGDELAY);
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	2201      	movs	r2, #1
 80015a4:	21c0      	movs	r1, #192	@ 0xc0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 fd68 	bl	800207c <writeValueToBytes>
 80015ac:	e00b      	b.n	80015c6 <dwTune+0x412>
	} else if(dev->channel == CHANNEL_7) {
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80015b4:	2b07      	cmp	r3, #7
 80015b6:	d106      	bne.n	80015c6 <dwTune+0x412>
		writeValueToBytes(tcpgdelay, 0x93, LEN_TC_PGDELAY);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	2201      	movs	r2, #1
 80015be:	2193      	movs	r1, #147	@ 0x93
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 fd5b 	bl	800207c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// FS_PLLCFG and FS_PLLTUNE
	if(dev->channel == CHANNEL_1) {
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d10e      	bne.n	80015ee <dwTune+0x43a>
		writeValueToBytes(fspllcfg, 0x09000407L, LEN_FS_PLLCFG);
 80015d0:	f107 0318 	add.w	r3, r7, #24
 80015d4:	2204      	movs	r2, #4
 80015d6:	4993      	ldr	r1, [pc, #588]	@ (8001824 <dwTune+0x670>)
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fd4f 	bl	800207c <writeValueToBytes>
		writeValueToBytes(fsplltune, 0x1E, LEN_FS_PLLTUNE);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	2201      	movs	r2, #1
 80015e4:	211e      	movs	r1, #30
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fd48 	bl	800207c <writeValueToBytes>
 80015ec:	e044      	b.n	8001678 <dwTune+0x4c4>
	} else if(dev->channel == CHANNEL_2 || dev->channel == CHANNEL_4) {
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d004      	beq.n	8001602 <dwTune+0x44e>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d10e      	bne.n	8001620 <dwTune+0x46c>
		writeValueToBytes(fspllcfg, 0x08400508L, LEN_FS_PLLCFG);
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	2204      	movs	r2, #4
 8001608:	4987      	ldr	r1, [pc, #540]	@ (8001828 <dwTune+0x674>)
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fd36 	bl	800207c <writeValueToBytes>
		writeValueToBytes(fsplltune, 0x26, LEN_FS_PLLTUNE);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2201      	movs	r2, #1
 8001616:	2126      	movs	r1, #38	@ 0x26
 8001618:	4618      	mov	r0, r3
 800161a:	f000 fd2f 	bl	800207c <writeValueToBytes>
 800161e:	e02b      	b.n	8001678 <dwTune+0x4c4>
	} else if(dev->channel == CHANNEL_3) {
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001626:	2b03      	cmp	r3, #3
 8001628:	d10e      	bne.n	8001648 <dwTune+0x494>
		writeValueToBytes(fspllcfg, 0x08401009L, LEN_FS_PLLCFG);
 800162a:	f107 0318 	add.w	r3, r7, #24
 800162e:	2204      	movs	r2, #4
 8001630:	497e      	ldr	r1, [pc, #504]	@ (800182c <dwTune+0x678>)
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fd22 	bl	800207c <writeValueToBytes>
		writeValueToBytes(fsplltune, 0x56, LEN_FS_PLLTUNE);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2201      	movs	r2, #1
 800163e:	2156      	movs	r1, #86	@ 0x56
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fd1b 	bl	800207c <writeValueToBytes>
 8001646:	e017      	b.n	8001678 <dwTune+0x4c4>
	} else if(dev->channel == CHANNEL_5 || dev->channel == CHANNEL_7) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800164e:	2b05      	cmp	r3, #5
 8001650:	d004      	beq.n	800165c <dwTune+0x4a8>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001658:	2b07      	cmp	r3, #7
 800165a:	d10d      	bne.n	8001678 <dwTune+0x4c4>
		writeValueToBytes(fspllcfg, 0x0800041DL, LEN_FS_PLLCFG);
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	2204      	movs	r2, #4
 8001662:	4973      	ldr	r1, [pc, #460]	@ (8001830 <dwTune+0x67c>)
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fd09 	bl	800207c <writeValueToBytes>
		writeValueToBytes(fsplltune, 0xA6, LEN_FS_PLLTUNE);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	2201      	movs	r2, #1
 8001670:	21a6      	movs	r1, #166	@ 0xa6
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fd02 	bl	800207c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// LDE_CFG1
	writeValueToBytes(ldecfg1, 0xD, LEN_LDE_CFG1);
 8001678:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800167c:	2201      	movs	r2, #1
 800167e:	210d      	movs	r1, #13
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fcfb 	bl	800207c <writeValueToBytes>
	// LDE_CFG2
	if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800168c:	2b01      	cmp	r3, #1
 800168e:	d108      	bne.n	80016a2 <dwTune+0x4ee>
		writeValueToBytes(ldecfg2, 0x1607, LEN_LDE_CFG2);
 8001690:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001694:	2202      	movs	r2, #2
 8001696:	f241 6107 	movw	r1, #5639	@ 0x1607
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fcee 	bl	800207c <writeValueToBytes>
 80016a0:	e00c      	b.n	80016bc <dwTune+0x508>
	} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d107      	bne.n	80016bc <dwTune+0x508>
		writeValueToBytes(ldecfg2, 0x0607, LEN_LDE_CFG2);
 80016ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016b0:	2202      	movs	r2, #2
 80016b2:	f240 6107 	movw	r1, #1543	@ 0x607
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fce0 	bl	800207c <writeValueToBytes>
	} else {
		// TODO proper error/warning handling
	}
	// LDE_REPC
	if(dev->preambleCode == PREAMBLE_CODE_16MHZ_1 || dev->preambleCode == PREAMBLE_CODE_16MHZ_2) {
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d004      	beq.n	80016d0 <dwTune+0x51c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d116      	bne.n	80016fe <dwTune+0x54a>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d108      	bne.n	80016ec <dwTune+0x538>
			writeValueToBytes(lderepc, ((0x5998 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80016da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016de:	2202      	movs	r2, #2
 80016e0:	f640 3133 	movw	r1, #2867	@ 0xb33
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fcc9 	bl	800207c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80016ea:	e154      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x5998, LEN_LDE_REPC);
 80016ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016f0:	2202      	movs	r2, #2
 80016f2:	f645 1198 	movw	r1, #22936	@ 0x5998
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fcc0 	bl	800207c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80016fc:	e14b      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_3 || dev->preambleCode == PREAMBLE_CODE_16MHZ_8) {
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001704:	2b03      	cmp	r3, #3
 8001706:	d004      	beq.n	8001712 <dwTune+0x55e>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800170e:	2b08      	cmp	r3, #8
 8001710:	d116      	bne.n	8001740 <dwTune+0x58c>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001718:	2b00      	cmp	r3, #0
 800171a:	d108      	bne.n	800172e <dwTune+0x57a>
			writeValueToBytes(lderepc, ((0x51EA >> 3) & 0xFFFF), LEN_LDE_REPC);
 800171c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001720:	2202      	movs	r2, #2
 8001722:	f640 213d 	movw	r1, #2621	@ 0xa3d
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fca8 	bl	800207c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800172c:	e133      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x51EA, LEN_LDE_REPC);
 800172e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001732:	2202      	movs	r2, #2
 8001734:	f245 11ea 	movw	r1, #20970	@ 0x51ea
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fc9f 	bl	800207c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800173e:	e12a      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_4) {
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001746:	2b04      	cmp	r3, #4
 8001748:	d116      	bne.n	8001778 <dwTune+0x5c4>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001750:	2b00      	cmp	r3, #0
 8001752:	d108      	bne.n	8001766 <dwTune+0x5b2>
			writeValueToBytes(lderepc, ((0x428E >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001754:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001758:	2202      	movs	r2, #2
 800175a:	f640 0151 	movw	r1, #2129	@ 0x851
 800175e:	4618      	mov	r0, r3
 8001760:	f000 fc8c 	bl	800207c <writeValueToBytes>
 8001764:	e117      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x428E, LEN_LDE_REPC);
 8001766:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800176a:	2202      	movs	r2, #2
 800176c:	f244 218e 	movw	r1, #17038	@ 0x428e
 8001770:	4618      	mov	r0, r3
 8001772:	f000 fc83 	bl	800207c <writeValueToBytes>
 8001776:	e10e      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_5) {
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800177e:	2b05      	cmp	r3, #5
 8001780:	d116      	bne.n	80017b0 <dwTune+0x5fc>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001788:	2b00      	cmp	r3, #0
 800178a:	d108      	bne.n	800179e <dwTune+0x5ea>
			writeValueToBytes(lderepc, ((0x451E >> 3) & 0xFFFF), LEN_LDE_REPC);
 800178c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001790:	2202      	movs	r2, #2
 8001792:	f640 01a3 	movw	r1, #2211	@ 0x8a3
 8001796:	4618      	mov	r0, r3
 8001798:	f000 fc70 	bl	800207c <writeValueToBytes>
 800179c:	e0fb      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x451E, LEN_LDE_REPC);
 800179e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017a2:	2202      	movs	r2, #2
 80017a4:	f244 511e 	movw	r1, #17694	@ 0x451e
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 fc67 	bl	800207c <writeValueToBytes>
 80017ae:	e0f2      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_6) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d116      	bne.n	80017e8 <dwTune+0x634>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d108      	bne.n	80017d6 <dwTune+0x622>
			writeValueToBytes(lderepc, ((0x2E14 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80017c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017c8:	2202      	movs	r2, #2
 80017ca:	f240 51c2 	movw	r1, #1474	@ 0x5c2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fc54 	bl	800207c <writeValueToBytes>
 80017d4:	e0df      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x2E14, LEN_LDE_REPC);
 80017d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017da:	2202      	movs	r2, #2
 80017dc:	f642 6114 	movw	r1, #11796	@ 0x2e14
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fc4b 	bl	800207c <writeValueToBytes>
 80017e6:	e0d6      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_16MHZ_7) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80017ee:	2b07      	cmp	r3, #7
 80017f0:	d120      	bne.n	8001834 <dwTune+0x680>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d108      	bne.n	800180e <dwTune+0x65a>
			writeValueToBytes(lderepc, ((0x8000 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80017fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001800:	2202      	movs	r2, #2
 8001802:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001806:	4618      	mov	r0, r3
 8001808:	f000 fc38 	bl	800207c <writeValueToBytes>
 800180c:	e0c3      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x8000, LEN_LDE_REPC);
 800180e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001812:	2202      	movs	r2, #2
 8001814:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001818:	4618      	mov	r0, r3
 800181a:	f000 fc2f 	bl	800207c <writeValueToBytes>
 800181e:	e0ba      	b.n	8001996 <dwTune+0x7e2>
 8001820:	001e7de0 	.word	0x001e7de0
 8001824:	09000407 	.word	0x09000407
 8001828:	08400508 	.word	0x08400508
 800182c:	08401009 	.word	0x08401009
 8001830:	0800041d 	.word	0x0800041d
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_9) {
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800183a:	2b09      	cmp	r3, #9
 800183c:	d116      	bne.n	800186c <dwTune+0x6b8>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001844:	2b00      	cmp	r3, #0
 8001846:	d108      	bne.n	800185a <dwTune+0x6a6>
			writeValueToBytes(lderepc, ((0x28F4 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001848:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800184c:	2202      	movs	r2, #2
 800184e:	f240 511e 	movw	r1, #1310	@ 0x51e
 8001852:	4618      	mov	r0, r3
 8001854:	f000 fc12 	bl	800207c <writeValueToBytes>
 8001858:	e09d      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x28F4, LEN_LDE_REPC);
 800185a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800185e:	2202      	movs	r2, #2
 8001860:	f642 01f4 	movw	r1, #10484	@ 0x28f4
 8001864:	4618      	mov	r0, r3
 8001866:	f000 fc09 	bl	800207c <writeValueToBytes>
 800186a:	e094      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_10 || dev->preambleCode == PREAMBLE_CODE_64MHZ_17) {
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001872:	2b0a      	cmp	r3, #10
 8001874:	d004      	beq.n	8001880 <dwTune+0x6cc>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800187c:	2b11      	cmp	r3, #17
 800187e:	d116      	bne.n	80018ae <dwTune+0x6fa>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001886:	2b00      	cmp	r3, #0
 8001888:	d108      	bne.n	800189c <dwTune+0x6e8>
			writeValueToBytes(lderepc, ((0x3332 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800188a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800188e:	2202      	movs	r2, #2
 8001890:	f240 6166 	movw	r1, #1638	@ 0x666
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fbf1 	bl	800207c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800189a:	e07c      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x3332, LEN_LDE_REPC);
 800189c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018a0:	2202      	movs	r2, #2
 80018a2:	f243 3132 	movw	r1, #13106	@ 0x3332
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fbe8 	bl	800207c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80018ac:	e073      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_11) {
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80018b4:	2b0b      	cmp	r3, #11
 80018b6:	d116      	bne.n	80018e6 <dwTune+0x732>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d108      	bne.n	80018d4 <dwTune+0x720>
			writeValueToBytes(lderepc, ((0x3AE0 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80018c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018c6:	2202      	movs	r2, #2
 80018c8:	f240 715c 	movw	r1, #1884	@ 0x75c
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 fbd5 	bl	800207c <writeValueToBytes>
 80018d2:	e060      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x3AE0, LEN_LDE_REPC);
 80018d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018d8:	2202      	movs	r2, #2
 80018da:	f643 21e0 	movw	r1, #15072	@ 0x3ae0
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 fbcc 	bl	800207c <writeValueToBytes>
 80018e4:	e057      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_12) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	d116      	bne.n	800191e <dwTune+0x76a>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d108      	bne.n	800190c <dwTune+0x758>
			writeValueToBytes(lderepc, ((0x3D70 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80018fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018fe:	2202      	movs	r2, #2
 8001900:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fbb9 	bl	800207c <writeValueToBytes>
 800190a:	e044      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x3D70, LEN_LDE_REPC);
 800190c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001910:	2202      	movs	r2, #2
 8001912:	f643 5170 	movw	r1, #15728	@ 0x3d70
 8001916:	4618      	mov	r0, r3
 8001918:	f000 fbb0 	bl	800207c <writeValueToBytes>
 800191c:	e03b      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_18 || dev->preambleCode == PREAMBLE_CODE_64MHZ_19) {
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001924:	2b12      	cmp	r3, #18
 8001926:	d004      	beq.n	8001932 <dwTune+0x77e>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800192e:	2b13      	cmp	r3, #19
 8001930:	d116      	bne.n	8001960 <dwTune+0x7ac>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001938:	2b00      	cmp	r3, #0
 800193a:	d108      	bne.n	800194e <dwTune+0x79a>
			writeValueToBytes(lderepc, ((0x35C2 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800193c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001940:	2202      	movs	r2, #2
 8001942:	f44f 61d7 	mov.w	r1, #1720	@ 0x6b8
 8001946:	4618      	mov	r0, r3
 8001948:	f000 fb98 	bl	800207c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800194c:	e023      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x35C2, LEN_LDE_REPC);
 800194e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001952:	2202      	movs	r2, #2
 8001954:	f243 51c2 	movw	r1, #13762	@ 0x35c2
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fb8f 	bl	800207c <writeValueToBytes>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800195e:	e01a      	b.n	8001996 <dwTune+0x7e2>
		}
	} else if(dev->preambleCode == PREAMBLE_CODE_64MHZ_20) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001966:	2b14      	cmp	r3, #20
 8001968:	d115      	bne.n	8001996 <dwTune+0x7e2>
		if(dev->dataRate == TRX_RATE_110KBPS) {
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001970:	2b00      	cmp	r3, #0
 8001972:	d108      	bne.n	8001986 <dwTune+0x7d2>
			writeValueToBytes(lderepc, ((0x47AE >> 3) & 0xFFFF), LEN_LDE_REPC);
 8001974:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001978:	2202      	movs	r2, #2
 800197a:	f640 01f5 	movw	r1, #2293	@ 0x8f5
 800197e:	4618      	mov	r0, r3
 8001980:	f000 fb7c 	bl	800207c <writeValueToBytes>
 8001984:	e007      	b.n	8001996 <dwTune+0x7e2>
		} else {
			writeValueToBytes(lderepc, 0x47AE, LEN_LDE_REPC);
 8001986:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800198a:	2202      	movs	r2, #2
 800198c:	f244 71ae 	movw	r1, #18350	@ 0x47ae
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fb73 	bl	800207c <writeValueToBytes>
		}
	} else {
		// TODO proper error/warning handling
	}
	// TX_POWER (enabled smart transmit power control)
	if(dev->forceTxPower) {
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800199c:	2b00      	cmp	r3, #0
 800199e:	d009      	beq.n	80019b4 <dwTune+0x800>
		writeValueToBytes(txpower, dev->txPower, LEN_TX_POWER);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a4:	4619      	mov	r1, r3
 80019a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019aa:	2204      	movs	r2, #4
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 fb65 	bl	800207c <writeValueToBytes>
 80019b2:	e12f      	b.n	8001c14 <dwTune+0xa60>
	} else if(dev->channel == CHANNEL_1 || dev->channel == CHANNEL_2) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d004      	beq.n	80019c8 <dwTune+0x814>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d136      	bne.n	8001a36 <dwTune+0x882>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d115      	bne.n	80019fe <dwTune+0x84a>
			if(dev->smartPower) {
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d007      	beq.n	80019ec <dwTune+0x838>
				writeValueToBytes(txpower, 0x15355575L, LEN_TX_POWER);
 80019dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019e0:	2204      	movs	r2, #4
 80019e2:	4995      	ldr	r1, [pc, #596]	@ (8001c38 <dwTune+0xa84>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fb49 	bl	800207c <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80019ea:	e112      	b.n	8001c12 <dwTune+0xa5e>
			} else {
				writeValueToBytes(txpower, 0x75757575L, LEN_TX_POWER);
 80019ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019f0:	2204      	movs	r2, #4
 80019f2:	f04f 3175 	mov.w	r1, #1970632053	@ 0x75757575
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fb40 	bl	800207c <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 80019fc:	e109      	b.n	8001c12 <dwTune+0xa5e>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	f040 8104 	bne.w	8001c12 <dwTune+0xa5e>
			if(dev->smartPower) {
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d007      	beq.n	8001a24 <dwTune+0x870>
				writeValueToBytes(txpower, 0x07274767L, LEN_TX_POWER);
 8001a14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a18:	2204      	movs	r2, #4
 8001a1a:	4988      	ldr	r1, [pc, #544]	@ (8001c3c <dwTune+0xa88>)
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fb2d 	bl	800207c <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001a22:	e0f6      	b.n	8001c12 <dwTune+0xa5e>
			} else {
				writeValueToBytes(txpower, 0x67676767L, LEN_TX_POWER);
 8001a24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a28:	2204      	movs	r2, #4
 8001a2a:	f04f 3167 	mov.w	r1, #1734829927	@ 0x67676767
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 fb24 	bl	800207c <writeValueToBytes>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001a34:	e0ed      	b.n	8001c12 <dwTune+0xa5e>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_3) {
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d136      	bne.n	8001aae <dwTune+0x8fa>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d115      	bne.n	8001a76 <dwTune+0x8c2>
			if(dev->smartPower) {
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d007      	beq.n	8001a64 <dwTune+0x8b0>
				writeValueToBytes(txpower, 0x0F2F4F6FL, LEN_TX_POWER);
 8001a54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a58:	2204      	movs	r2, #4
 8001a5a:	4979      	ldr	r1, [pc, #484]	@ (8001c40 <dwTune+0xa8c>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 fb0d 	bl	800207c <writeValueToBytes>
 8001a62:	e0d7      	b.n	8001c14 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x6F6F6F6FL, LEN_TX_POWER);
 8001a64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a68:	2204      	movs	r2, #4
 8001a6a:	f04f 316f 	mov.w	r1, #1869573999	@ 0x6f6f6f6f
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fb04 	bl	800207c <writeValueToBytes>
 8001a74:	e0ce      	b.n	8001c14 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	f040 80c9 	bne.w	8001c14 <dwTune+0xa60>
			if(dev->smartPower) {
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d007      	beq.n	8001a9c <dwTune+0x8e8>
				writeValueToBytes(txpower, 0x2B4B6B8BL, LEN_TX_POWER);
 8001a8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a90:	2204      	movs	r2, #4
 8001a92:	496c      	ldr	r1, [pc, #432]	@ (8001c44 <dwTune+0xa90>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 faf1 	bl	800207c <writeValueToBytes>
 8001a9a:	e0bb      	b.n	8001c14 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x8B8B8B8BL, LEN_TX_POWER);
 8001a9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	f04f 318b 	mov.w	r1, #2341178251	@ 0x8b8b8b8b
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 fae8 	bl	800207c <writeValueToBytes>
 8001aac:	e0b2      	b.n	8001c14 <dwTune+0xa60>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_4) {
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d136      	bne.n	8001b26 <dwTune+0x972>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d115      	bne.n	8001aee <dwTune+0x93a>
			if(dev->smartPower) {
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d007      	beq.n	8001adc <dwTune+0x928>
				writeValueToBytes(txpower, 0x1F1F3F5FL, LEN_TX_POWER);
 8001acc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	495d      	ldr	r1, [pc, #372]	@ (8001c48 <dwTune+0xa94>)
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 fad1 	bl	800207c <writeValueToBytes>
 8001ada:	e09b      	b.n	8001c14 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x5F5F5F5FL, LEN_TX_POWER);
 8001adc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	f04f 315f 	mov.w	r1, #1600085855	@ 0x5f5f5f5f
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 fac8 	bl	800207c <writeValueToBytes>
 8001aec:	e092      	b.n	8001c14 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	f040 808d 	bne.w	8001c14 <dwTune+0xa60>
			if(dev->smartPower) {
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d007      	beq.n	8001b14 <dwTune+0x960>
				writeValueToBytes(txpower, 0x3A5A7A9AL, LEN_TX_POWER);
 8001b04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b08:	2204      	movs	r2, #4
 8001b0a:	4950      	ldr	r1, [pc, #320]	@ (8001c4c <dwTune+0xa98>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 fab5 	bl	800207c <writeValueToBytes>
 8001b12:	e07f      	b.n	8001c14 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x9A9A9A9AL, LEN_TX_POWER);
 8001b14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b18:	2204      	movs	r2, #4
 8001b1a:	f04f 319a 	mov.w	r1, #2593823386	@ 0x9a9a9a9a
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 faac 	bl	800207c <writeValueToBytes>
 8001b24:	e076      	b.n	8001c14 <dwTune+0xa60>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_5) {
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001b2c:	2b05      	cmp	r3, #5
 8001b2e:	d135      	bne.n	8001b9c <dwTune+0x9e8>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d115      	bne.n	8001b66 <dwTune+0x9b2>
			if(dev->smartPower) {
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d007      	beq.n	8001b54 <dwTune+0x9a0>
				writeValueToBytes(txpower, 0x0E082848L, LEN_TX_POWER);
 8001b44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b48:	2204      	movs	r2, #4
 8001b4a:	4941      	ldr	r1, [pc, #260]	@ (8001c50 <dwTune+0xa9c>)
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 fa95 	bl	800207c <writeValueToBytes>
 8001b52:	e05f      	b.n	8001c14 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x48484848L, LEN_TX_POWER);
 8001b54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b58:	2204      	movs	r2, #4
 8001b5a:	f04f 3148 	mov.w	r1, #1212696648	@ 0x48484848
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fa8c 	bl	800207c <writeValueToBytes>
 8001b64:	e056      	b.n	8001c14 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d151      	bne.n	8001c14 <dwTune+0xa60>
			if(dev->smartPower) {
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <dwTune+0x9d6>
				writeValueToBytes(txpower, 0x25456585L, LEN_TX_POWER);
 8001b7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b7e:	2204      	movs	r2, #4
 8001b80:	4934      	ldr	r1, [pc, #208]	@ (8001c54 <dwTune+0xaa0>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 fa7a 	bl	800207c <writeValueToBytes>
 8001b88:	e044      	b.n	8001c14 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x85858585L, LEN_TX_POWER);
 8001b8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b8e:	2204      	movs	r2, #4
 8001b90:	f04f 3185 	mov.w	r1, #2240120197	@ 0x85858585
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 fa71 	bl	800207c <writeValueToBytes>
 8001b9a:	e03b      	b.n	8001c14 <dwTune+0xa60>
			}
		} else {
			// TODO proper error/warning handling
		}
	} else if(dev->channel == CHANNEL_7) {
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001ba2:	2b07      	cmp	r3, #7
 8001ba4:	d136      	bne.n	8001c14 <dwTune+0xa60>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d115      	bne.n	8001bdc <dwTune+0xa28>
			if(dev->smartPower) {
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <dwTune+0xa16>
				writeValueToBytes(txpower, 0x32527292L, LEN_TX_POWER);
 8001bba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	4925      	ldr	r1, [pc, #148]	@ (8001c58 <dwTune+0xaa4>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 fa5a 	bl	800207c <writeValueToBytes>
 8001bc8:	e024      	b.n	8001c14 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0x92929292L, LEN_TX_POWER);
 8001bca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bce:	2204      	movs	r2, #4
 8001bd0:	f04f 3192 	mov.w	r1, #2459079314	@ 0x92929292
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fa51 	bl	800207c <writeValueToBytes>
 8001bda:	e01b      	b.n	8001c14 <dwTune+0xa60>
			}
		} else if(dev->pulseFrequency == TX_PULSE_FREQ_64MHZ) {
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d116      	bne.n	8001c14 <dwTune+0xa60>
			if(dev->smartPower) {
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <dwTune+0xa4c>
				writeValueToBytes(txpower, 0x5171B1D1L, LEN_TX_POWER);
 8001bf0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	4919      	ldr	r1, [pc, #100]	@ (8001c5c <dwTune+0xaa8>)
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 fa3f 	bl	800207c <writeValueToBytes>
 8001bfe:	e009      	b.n	8001c14 <dwTune+0xa60>
			} else {
				writeValueToBytes(txpower, 0xD1D1D1D1L, LEN_TX_POWER);
 8001c00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c04:	2204      	movs	r2, #4
 8001c06:	f04f 31d1 	mov.w	r1, #3520188881	@ 0xd1d1d1d1
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 fa36 	bl	800207c <writeValueToBytes>
 8001c10:	e000      	b.n	8001c14 <dwTune+0xa60>
		if(dev->pulseFrequency == TX_PULSE_FREQ_16MHZ) {
 8001c12:	bf00      	nop
	} else {
		// TODO proper error/warning handling
	}
	// Crystal calibration from OTP (if available)
	uint8_t buf_otp[4];
	readBytesOTP(dev, 0x01E, buf_otp);
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	461a      	mov	r2, r3
 8001c1a:	211e      	movs	r1, #30
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fa4d 	bl	80020bc <readBytesOTP>
	if (buf_otp[0] == 0) {
 8001c22:	7b3b      	ldrb	r3, [r7, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d11b      	bne.n	8001c60 <dwTune+0xaac>
		// No trim value available from OTP, use midrange value of 0x10
		writeValueToBytes(fsxtalt, ((0x10 & 0x1F) | 0x60), LEN_FS_XTALT);
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	2170      	movs	r1, #112	@ 0x70
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 fa23 	bl	800207c <writeValueToBytes>
 8001c36:	e01e      	b.n	8001c76 <dwTune+0xac2>
 8001c38:	15355575 	.word	0x15355575
 8001c3c:	07274767 	.word	0x07274767
 8001c40:	0f2f4f6f 	.word	0x0f2f4f6f
 8001c44:	2b4b6b8b 	.word	0x2b4b6b8b
 8001c48:	1f1f3f5f 	.word	0x1f1f3f5f
 8001c4c:	3a5a7a9a 	.word	0x3a5a7a9a
 8001c50:	0e082848 	.word	0x0e082848
 8001c54:	25456585 	.word	0x25456585
 8001c58:	32527292 	.word	0x32527292
 8001c5c:	5171b1d1 	.word	0x5171b1d1
	} else {
		writeValueToBytes(fsxtalt, ((buf_otp[0] & 0x1F) | 0x60), LEN_FS_XTALT);
 8001c60:	7b3b      	ldrb	r3, [r7, #12]
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	f043 0160 	orr.w	r1, r3, #96	@ 0x60
 8001c6a:	f107 0310 	add.w	r3, r7, #16
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 fa03 	bl	800207c <writeValueToBytes>
	}
	// write configuration back to chip
	dwSpiWrite(dev, AGC_TUNE, AGC_TUNE1_SUB, agctune1, LEN_AGC_TUNE1);
 8001c76:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	9200      	str	r2, [sp, #0]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	2123      	movs	r1, #35	@ 0x23
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 faa3 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, AGC_TUNE, AGC_TUNE2_SUB, agctune2, LEN_AGC_TUNE2);
 8001c88:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	9200      	str	r2, [sp, #0]
 8001c90:	220c      	movs	r2, #12
 8001c92:	2123      	movs	r1, #35	@ 0x23
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fa9a 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, AGC_TUNE, AGC_TUNE3_SUB, agctune3, LEN_AGC_TUNE3);
 8001c9a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	9200      	str	r2, [sp, #0]
 8001ca2:	2212      	movs	r2, #18
 8001ca4:	2123      	movs	r1, #35	@ 0x23
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fa91 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE0b_SUB, drxtune0b, LEN_DRX_TUNE0b);
 8001cac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	9200      	str	r2, [sp, #0]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	2127      	movs	r1, #39	@ 0x27
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 fa88 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1a_SUB, drxtune1a, LEN_DRX_TUNE1a);
 8001cbe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	9200      	str	r2, [sp, #0]
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	2127      	movs	r1, #39	@ 0x27
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fa7f 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE1b_SUB, drxtune1b, LEN_DRX_TUNE1b);
 8001cd0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	9200      	str	r2, [sp, #0]
 8001cd8:	2206      	movs	r2, #6
 8001cda:	2127      	movs	r1, #39	@ 0x27
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 fa76 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE2_SUB, drxtune2, LEN_DRX_TUNE2);
 8001ce2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	9200      	str	r2, [sp, #0]
 8001cea:	2208      	movs	r2, #8
 8001cec:	2127      	movs	r1, #39	@ 0x27
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fa6d 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, DRX_TUNE, DRX_TUNE4H_SUB, drxtune4H, LEN_DRX_TUNE4H);
 8001cf4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	9200      	str	r2, [sp, #0]
 8001cfc:	2226      	movs	r2, #38	@ 0x26
 8001cfe:	2127      	movs	r1, #39	@ 0x27
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fa64 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_CFG1_SUB, ldecfg1, LEN_LDE_CFG1);
 8001d06:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	9200      	str	r2, [sp, #0]
 8001d0e:	f640 0206 	movw	r2, #2054	@ 0x806
 8001d12:	212e      	movs	r1, #46	@ 0x2e
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 fa5a 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_CFG2_SUB, ldecfg2, LEN_LDE_CFG2);
 8001d1a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d1e:	2202      	movs	r2, #2
 8001d20:	9200      	str	r2, [sp, #0]
 8001d22:	f641 0206 	movw	r2, #6150	@ 0x1806
 8001d26:	212e      	movs	r1, #46	@ 0x2e
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fa50 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, LDE_IF, LDE_REPC_SUB, lderepc, LEN_LDE_REPC);
 8001d2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d32:	2202      	movs	r2, #2
 8001d34:	9200      	str	r2, [sp, #0]
 8001d36:	f642 0204 	movw	r2, #10244	@ 0x2804
 8001d3a:	212e      	movs	r1, #46	@ 0x2e
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fa46 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, TX_POWER, NO_SUB, txpower, LEN_TX_POWER);
 8001d42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d46:	2204      	movs	r2, #4
 8001d48:	9200      	str	r2, [sp, #0]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	211e      	movs	r1, #30
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fa3d 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, RF_CONF, RF_RXCTRLH_SUB, rfrxctrlh, LEN_RF_RXCTRLH);
 8001d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d58:	2201      	movs	r2, #1
 8001d5a:	9200      	str	r2, [sp, #0]
 8001d5c:	220b      	movs	r2, #11
 8001d5e:	2128      	movs	r1, #40	@ 0x28
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fa34 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, RF_CONF, RF_TXCTRL_SUB, rftxctrl, LEN_RF_TXCTRL);
 8001d66:	f107 0320 	add.w	r3, r7, #32
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	9200      	str	r2, [sp, #0]
 8001d6e:	220c      	movs	r2, #12
 8001d70:	2128      	movs	r1, #40	@ 0x28
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 fa2b 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, TX_CAL, TC_PGDELAY_SUB, tcpgdelay, LEN_TC_PGDELAY);
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	9200      	str	r2, [sp, #0]
 8001d80:	220b      	movs	r2, #11
 8001d82:	212a      	movs	r1, #42	@ 0x2a
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fa22 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, FS_CTRL, FS_PLLTUNE_SUB, fsplltune, LEN_FS_PLLTUNE);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	2201      	movs	r2, #1
 8001d90:	9200      	str	r2, [sp, #0]
 8001d92:	220b      	movs	r2, #11
 8001d94:	212b      	movs	r1, #43	@ 0x2b
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fa19 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, FS_CTRL, FS_PLLCFG_SUB, fspllcfg, LEN_FS_PLLCFG);
 8001d9c:	f107 0318 	add.w	r3, r7, #24
 8001da0:	2204      	movs	r2, #4
 8001da2:	9200      	str	r2, [sp, #0]
 8001da4:	2207      	movs	r2, #7
 8001da6:	212b      	movs	r1, #43	@ 0x2b
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 fa10 	bl	80021ce <dwSpiWrite>
	dwSpiWrite(dev, FS_CTRL, FS_XTALT_SUB, fsxtalt, LEN_FS_XTALT);
 8001dae:	f107 0310 	add.w	r3, r7, #16
 8001db2:	2201      	movs	r2, #1
 8001db4:	9200      	str	r2, [sp, #0]
 8001db6:	220e      	movs	r2, #14
 8001db8:	212b      	movs	r1, #43	@ 0x2b
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fa07 	bl	80021ce <dwSpiWrite>
}
 8001dc0:	bf00      	nop
 8001dc2:	3758      	adds	r7, #88	@ 0x58
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <dwHandleInterrupt>:

void dwHandleInterrupt(dwDevice_t *dev) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	// read current status and handle via callbacks
	dwReadSystemEventStatusRegister(dev);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7fe fc31 	bl	8000638 <dwReadSystemEventStatusRegister>
	if(dwIsClockProblem(dev) /* TODO and others */ && dev->handleError != 0) {
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff f95a 	bl	8001090 <dwIsClockProblem>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <dwHandleInterrupt+0x2a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <dwHandleInterrupt+0x2a>
		(*dev->handleError)(dev);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	4798      	blx	r3
	}
	if(dwIsTransmitDone(dev) && dev->handleSent != 0) {
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff f8a8 	bl	8000f48 <dwIsTransmitDone>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00a      	beq.n	8001e14 <dwHandleInterrupt+0x4c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d006      	beq.n	8001e14 <dwHandleInterrupt+0x4c>
		dwClearTransmitStatus(dev);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff f994 	bl	8001134 <dwClearTransmitStatus>
		(*dev->handleSent)(dev);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4798      	blx	r3
	}
	if(dwIsReceiveTimestampAvailable(dev) && dev->handleReceiveTimestampAvailable != 0) {
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff f8a7 	bl	8000f68 <dwIsReceiveTimestampAvailable>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00a      	beq.n	8001e36 <dwHandleInterrupt+0x6e>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <dwHandleInterrupt+0x6e>
		dwClearReceiveTimestampAvailableStatus(dev);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff f954 	bl	80010d6 <dwClearReceiveTimestampAvailableStatus>
		(*dev->handleReceiveTimestampAvailable)(dev);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	4798      	blx	r3
	}
	if(dwIsReceiveFailed(dev)) {
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff f8c4 	bl	8000fc4 <dwIsReceiveFailed>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d019      	beq.n	8001e76 <dwHandleInterrupt+0xae>
		dwClearReceiveStatus(dev);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff f964 	bl	8001110 <dwClearReceiveStatus>
		dwRxSoftReset(dev); // Needed due to error in the RX auto-re-enable functionality. See page 35 of DW1000 manual, v2.13.
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7fe fba6 	bl	800059a <dwRxSoftReset>
		if(dev->handleReceiveFailed != 0) {
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d04b      	beq.n	8001eee <dwHandleInterrupt+0x126>
			dev->handleReceiveFailed(dev);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	4798      	blx	r3
			if(dev->permanentReceive) {
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d042      	beq.n	8001eee <dwHandleInterrupt+0x126>
				dwNewReceive(dev);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7fe fdca 	bl	8000a02 <dwNewReceive>
				dwStartReceive(dev);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7fe fddf 	bl	8000a32 <dwStartReceive>
		if(dev->permanentReceive) {
			dwNewReceive(dev);
			dwStartReceive(dev);
		}
	}
}
 8001e74:	e03b      	b.n	8001eee <dwHandleInterrupt+0x126>
	} else if(dwIsReceiveTimeout(dev)) {
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff f8fa 	bl	8001070 <dwIsReceiveTimeout>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d019      	beq.n	8001eb6 <dwHandleInterrupt+0xee>
		dwClearReceiveStatus(dev);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff f944 	bl	8001110 <dwClearReceiveStatus>
		dwRxSoftReset(dev); // Needed due to error in the RX auto-re-enable functionality. See page 35 of DW1000 manual, v2.13.
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7fe fb86 	bl	800059a <dwRxSoftReset>
		if(dev->handleReceiveTimeout != 0) {
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d02b      	beq.n	8001eee <dwHandleInterrupt+0x126>
			(*dev->handleReceiveTimeout)(dev);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	4798      	blx	r3
			if(dev->permanentReceive) {
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d022      	beq.n	8001eee <dwHandleInterrupt+0x126>
				dwNewReceive(dev);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7fe fdaa 	bl	8000a02 <dwNewReceive>
				dwStartReceive(dev);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe fdbf 	bl	8000a32 <dwStartReceive>
}
 8001eb4:	e01b      	b.n	8001eee <dwHandleInterrupt+0x126>
	} else if(dwIsReceiveDone(dev) && dev->handleReceived != 0) {
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff f866 	bl	8000f88 <dwIsReceiveDone>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d015      	beq.n	8001eee <dwHandleInterrupt+0x126>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d011      	beq.n	8001eee <dwHandleInterrupt+0x126>
		dwClearReceiveStatus(dev);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff f920 	bl	8001110 <dwClearReceiveStatus>
		(*dev->handleReceived)(dev);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	4798      	blx	r3
		if(dev->permanentReceive) {
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <dwHandleInterrupt+0x126>
			dwNewReceive(dev);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7fe fd8d 	bl	8000a02 <dwNewReceive>
			dwStartReceive(dev);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7fe fda2 	bl	8000a32 <dwStartReceive>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <dwAttachSentHandler>:
{
	dev->forceTxPower = true;
	dev->txPower = txPower;
}

void dwAttachSentHandler(dwDevice_t *dev, dwHandler_t handler) {
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6039      	str	r1, [r7, #0]
	dev->handleSent = handler;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <dwAttachErrorHandler>:

void dwAttachErrorHandler(dwDevice_t *dev, dwHandler_t handler) {
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
	dev->handleError = handler;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr

08001f2a <dwAttachReceivedHandler>:

void dwAttachReceivedHandler(dwDevice_t *dev, dwHandler_t handler) {
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
	dev->handleReceived = handler;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <dwAttachReceiveFailedHandler>:

void dwAttachReceiveTimeoutHandler(dwDevice_t *dev, dwHandler_t handler) {
	dev->handleReceiveTimeout = handler;
}

void dwAttachReceiveFailedHandler(dwDevice_t *dev, dwHandler_t handler) {
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
	dev->handleReceiveFailed = handler;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr

08001f5e <dwSetAntenaDelay>:

void dwAttachReceiveTimestampAvailable(dwDevice_t *dev, dwHandler_t handler) {
	dev->handleReceiveTimestampAvailable = handler;
}

void dwSetAntenaDelay(dwDevice_t *dev, dwTime_t delay) {
 8001f5e:	b480      	push	{r7}
 8001f60:	b085      	sub	sp, #20
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	4639      	mov	r1, r7
 8001f68:	e881 000c 	stmia.w	r1, {r2, r3}
	dev->antennaDelay.full = delay.full;
 8001f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f70:	68f9      	ldr	r1, [r7, #12]
 8001f72:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <dwStrError>:

char* dwStrError(int error)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	if (error == DW_ERROR_OK) return "No error";
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <dwStrError+0x12>
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <dwStrError+0x28>)
 8001f90:	e005      	b.n	8001f9e <dwStrError+0x1e>
	else if (error == DW_ERROR_WRONG_ID) return "Wrong chip ID";
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <dwStrError+0x1c>
 8001f98:	4b04      	ldr	r3, [pc, #16]	@ (8001fac <dwStrError+0x2c>)
 8001f9a:	e000      	b.n	8001f9e <dwStrError+0x1e>
	else return "Uknown error";
 8001f9c:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <dwStrError+0x30>)
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	0800b668 	.word	0x0800b668
 8001fac:	0800b674 	.word	0x0800b674
 8001fb0:	0800b684 	.word	0x0800b684

08001fb4 <setBit>:

static void setBit(uint8_t data[], unsigned int n, unsigned int bit, bool val) {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	@ 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	70fb      	strb	r3, [r7, #3]
	unsigned int idx;
	unsigned int shift;

	idx = bit / 8;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	61fb      	str	r3, [r7, #28]
	if(idx >= n) {
 8001fc8:	69fa      	ldr	r2, [r7, #28]
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d228      	bcs.n	8002022 <setBit+0x6e>
		return; // TODO proper error handling: out of bounds
	}
	uint8_t* targetByte = &data[idx];
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
	shift = bit % 8;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	617b      	str	r3, [r7, #20]
	if(val) {
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00d      	beq.n	8002002 <setBit+0x4e>
		*targetByte |= (1<<shift);
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b25a      	sxtb	r2, r3
 8001fec:	2101      	movs	r1, #1
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	b25b      	sxtb	r3, r3
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	e010      	b.n	8002024 <setBit+0x70>
	} else {
		*targetByte &= ~(1<<shift);
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	b25a      	sxtb	r2, r3
 8002008:	2101      	movs	r1, #1
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	b25b      	sxtb	r3, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	b25b      	sxtb	r3, r3
 8002016:	4013      	ands	r3, r2
 8002018:	b25b      	sxtb	r3, r3
 800201a:	b2da      	uxtb	r2, r3
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	701a      	strb	r2, [r3, #0]
 8002020:	e000      	b.n	8002024 <setBit+0x70>
		return; // TODO proper error handling: out of bounds
 8002022:	bf00      	nop
	}
}
 8002024:	3724      	adds	r7, #36	@ 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <getBit>:

static bool getBit(uint8_t data[], unsigned int n, unsigned int bit) {
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	@ 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
	unsigned int idx;
	unsigned int shift;

	idx = bit / 8;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	08db      	lsrs	r3, r3, #3
 800203c:	61fb      	str	r3, [r7, #28]
	if(idx >= n) {
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	429a      	cmp	r2, r3
 8002044:	d301      	bcc.n	800204a <getBit+0x1e>
		return false; // TODO proper error handling: out of bounds
 8002046:	2300      	movs	r3, #0
 8002048:	e013      	b.n	8002072 <getBit+0x46>
	}
	uint8_t targetByte = data[idx];
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	4413      	add	r3, r2
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	76fb      	strb	r3, [r7, #27]
	shift = bit % 8;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	617b      	str	r3, [r7, #20]

	return (targetByte>>shift)&0x01;
 800205c:	7efa      	ldrb	r2, [r7, #27]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	fa42 f303 	asr.w	r3, r2, r3
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf14      	ite	ne
 800206c:	2301      	movne	r3, #1
 800206e:	2300      	moveq	r3, #0
 8002070:	b2db      	uxtb	r3, r3
}
 8002072:	4618      	mov	r0, r3
 8002074:	3724      	adds	r7, #36	@ 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <writeValueToBytes>:

static void writeValueToBytes(uint8_t data[], long val, unsigned int n) {
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
	unsigned int i;
	for(i = 0; i < n; i++) {
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	e00c      	b.n	80020a8 <writeValueToBytes+0x2c>
		data[i] = ((val >> (i * 8)) & 0xFF);
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	fa42 f103 	asr.w	r1, r2, r3
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	4413      	add	r3, r2
 800209e:	b2ca      	uxtb	r2, r1
 80020a0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < n; i++) {
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3301      	adds	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d3ee      	bcc.n	800208e <writeValueToBytes+0x12>
	}
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	371c      	adds	r7, #28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <readBytesOTP>:

static void readBytesOTP(dwDevice_t* dev, uint16_t address, uint8_t data[]) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	460b      	mov	r3, r1
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	817b      	strh	r3, [r7, #10]
	uint8_t addressBytes[LEN_OTP_ADDR];

	// p60 - 6.3.3 Reading a value from OTP memory
	// bytes of address
	addressBytes[0] = (address & 0xFF);
 80020ca:	897b      	ldrh	r3, [r7, #10]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	753b      	strb	r3, [r7, #20]
	addressBytes[1] = ((address >> 8) & 0xFF);
 80020d0:	897b      	ldrh	r3, [r7, #10]
 80020d2:	0a1b      	lsrs	r3, r3, #8
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	757b      	strb	r3, [r7, #21]
	// set address
	dwSpiWrite(dev, OTP_IF, OTP_ADDR_SUB, addressBytes, LEN_OTP_ADDR);
 80020da:	f107 0314 	add.w	r3, r7, #20
 80020de:	2202      	movs	r2, #2
 80020e0:	9200      	str	r2, [sp, #0]
 80020e2:	2204      	movs	r2, #4
 80020e4:	212d      	movs	r1, #45	@ 0x2d
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f871 	bl	80021ce <dwSpiWrite>
	// switch into read mode
	dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x03); // OTPRDEN | OTPREAD
 80020ec:	2303      	movs	r3, #3
 80020ee:	2206      	movs	r2, #6
 80020f0:	212d      	movs	r1, #45	@ 0x2d
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f8ae 	bl	8002254 <dwSpiWrite8>
	dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x01); // OTPRDEN
 80020f8:	2301      	movs	r3, #1
 80020fa:	2206      	movs	r2, #6
 80020fc:	212d      	movs	r1, #45	@ 0x2d
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f8a8 	bl	8002254 <dwSpiWrite8>
	// read value/block - 4 bytes
	dwSpiRead(dev, OTP_IF, OTP_RDAT_SUB, data, LEN_OTP_RDAT);
 8002104:	2304      	movs	r3, #4
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	220a      	movs	r2, #10
 800210c:	212d      	movs	r1, #45	@ 0x2d
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f80a 	bl	8002128 <dwSpiRead>
	// end read mode
	dwSpiWrite8(dev, OTP_IF, OTP_CTRL_SUB, 0x00);
 8002114:	2300      	movs	r3, #0
 8002116:	2206      	movs	r2, #6
 8002118:	212d      	movs	r1, #45	@ 0x2d
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f89a 	bl	8002254 <dwSpiWrite8>
}
 8002120:	bf00      	nop
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <dwSpiRead>:

#include "libdw1000Spi.h"


void dwSpiRead(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                void* data, size_t length) {
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b089      	sub	sp, #36	@ 0x24
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	460b      	mov	r3, r1
 8002136:	72fb      	strb	r3, [r7, #11]
	uint8_t header[3];
 	size_t headerLength=1;
 8002138:	2301      	movs	r3, #1
 800213a:	617b      	str	r3, [r7, #20]

	header[0] = regid & 0x3f;
 800213c:	7afb      	ldrb	r3, [r7, #11]
 800213e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002142:	b2db      	uxtb	r3, r3
 8002144:	743b      	strb	r3, [r7, #16]

	if (address != 0) {
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01c      	beq.n	8002186 <dwSpiRead+0x5e>
		header[0] |= 0x40;
 800214c:	7c3b      	ldrb	r3, [r7, #16]
 800214e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002152:	b2db      	uxtb	r3, r3
 8002154:	743b      	strb	r3, [r7, #16]

		header[1] = address & 0x7f;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800215e:	b2db      	uxtb	r3, r3
 8002160:	747b      	strb	r3, [r7, #17]
		address >>= 7;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	09db      	lsrs	r3, r3, #7
 8002166:	607b      	str	r3, [r7, #4]
		headerLength = 2;
 8002168:	2302      	movs	r3, #2
 800216a:	617b      	str	r3, [r7, #20]

		if (address != 0) {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <dwSpiRead+0x5e>
			header[1] |= 0x80;
 8002172:	7c7b      	ldrb	r3, [r7, #17]
 8002174:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002178:	b2db      	uxtb	r3, r3
 800217a:	747b      	strb	r3, [r7, #17]
			header[2] = address & 0xff;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	74bb      	strb	r3, [r7, #18]
			headerLength = 3;
 8002182:	2303      	movs	r3, #3
 8002184:	617b      	str	r3, [r7, #20]
		}
	}

	dev->ops->spiRead(dev, header, headerLength, data, length);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681c      	ldr	r4, [r3, #0]
 800218c:	f107 0110 	add.w	r1, r7, #16
 8002190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	47a0      	blx	r4
}
 800219c:	bf00      	nop
 800219e:	371c      	adds	r7, #28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd90      	pop	{r4, r7, pc}

080021a4 <dwSpiRead32>:
	uint16_t data;
	dwSpiRead(dev, regid, address, &data, sizeof(data));
	return data;
}

uint32_t dwSpiRead32(dwDevice_t *dev, uint8_t regid, uint32_t address) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	460b      	mov	r3, r1
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	72fb      	strb	r3, [r7, #11]
	uint32_t data;
	dwSpiRead(dev, regid, address, &data, sizeof(data));
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	7af9      	ldrb	r1, [r7, #11]
 80021b8:	2204      	movs	r2, #4
 80021ba:	9200      	str	r2, [sp, #0]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f7ff ffb2 	bl	8002128 <dwSpiRead>
	return data;
 80021c4:	697b      	ldr	r3, [r7, #20]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <dwSpiWrite>:

void dwSpiWrite(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                 const void* data, size_t length) {
 80021ce:	b590      	push	{r4, r7, lr}
 80021d0:	b089      	sub	sp, #36	@ 0x24
 80021d2:	af02      	add	r7, sp, #8
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	460b      	mov	r3, r1
 80021dc:	72fb      	strb	r3, [r7, #11]
	uint8_t header[3];
	size_t headerLength=1;
 80021de:	2301      	movs	r3, #1
 80021e0:	617b      	str	r3, [r7, #20]

	header[0] = regid & 0x3f;
 80021e2:	7afb      	ldrb	r3, [r7, #11]
 80021e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	743b      	strb	r3, [r7, #16]
	header[0] |= 0x80;
 80021ec:	7c3b      	ldrb	r3, [r7, #16]
 80021ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	743b      	strb	r3, [r7, #16]

	if (address != 0) {
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d01c      	beq.n	8002236 <dwSpiWrite+0x68>
		header[0] |= 0x40;
 80021fc:	7c3b      	ldrb	r3, [r7, #16]
 80021fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002202:	b2db      	uxtb	r3, r3
 8002204:	743b      	strb	r3, [r7, #16]

		header[1] = address & 0x7f;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800220e:	b2db      	uxtb	r3, r3
 8002210:	747b      	strb	r3, [r7, #17]
		address >>= 7;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	09db      	lsrs	r3, r3, #7
 8002216:	607b      	str	r3, [r7, #4]
		headerLength = 2;
 8002218:	2302      	movs	r3, #2
 800221a:	617b      	str	r3, [r7, #20]

		if (address != 0) {
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <dwSpiWrite+0x68>
			header[1] |= 0x80;
 8002222:	7c7b      	ldrb	r3, [r7, #17]
 8002224:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002228:	b2db      	uxtb	r3, r3
 800222a:	747b      	strb	r3, [r7, #17]
			header[2] = address & 0xff;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	74bb      	strb	r3, [r7, #18]
			headerLength = 3;
 8002232:	2303      	movs	r3, #3
 8002234:	617b      	str	r3, [r7, #20]
		}
	}

	dev->ops->spiWrite(dev, header, headerLength, data, length);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685c      	ldr	r4, [r3, #4]
 800223c:	f107 0110 	add.w	r1, r7, #16
 8002240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	47a0      	blx	r4
}
 800224c:	bf00      	nop
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	bd90      	pop	{r4, r7, pc}

08002254 <dwSpiWrite8>:

void dwSpiWrite8(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                   uint8_t data) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af02      	add	r7, sp, #8
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	461a      	mov	r2, r3
 8002260:	460b      	mov	r3, r1
 8002262:	72fb      	strb	r3, [r7, #11]
 8002264:	4613      	mov	r3, r2
 8002266:	72bb      	strb	r3, [r7, #10]
	dwSpiWrite(dev, regid, address, &data, sizeof(data));
 8002268:	f107 030a 	add.w	r3, r7, #10
 800226c:	7af9      	ldrb	r1, [r7, #11]
 800226e:	2201      	movs	r2, #1
 8002270:	9200      	str	r2, [sp, #0]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f7ff ffaa 	bl	80021ce <dwSpiWrite>
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <dwSpiWrite32>:

void dwSpiWrite32(dwDevice_t *dev, uint8_t regid, uint32_t address,
                                   uint32_t data) {
 8002282:	b580      	push	{r7, lr}
 8002284:	b086      	sub	sp, #24
 8002286:	af02      	add	r7, sp, #8
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	460b      	mov	r3, r1
 8002290:	72fb      	strb	r3, [r7, #11]
	dwSpiWrite(dev, regid, address, &data, sizeof(data));
 8002292:	463b      	mov	r3, r7
 8002294:	7af9      	ldrb	r1, [r7, #11]
 8002296:	2204      	movs	r2, #4
 8002298:	9200      	str	r2, [sp, #0]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f7ff ff96 	bl	80021ce <dwSpiWrite>
}
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80022aa:	b580      	push	{r7, lr}
 80022ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80022ae:	f000 fd43 	bl	8002d38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80022b2:	f000 f80d 	bl	80022d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80022b6:	f000 f8c7 	bl	8002448 <MX_GPIO_Init>
	MX_SPI1_Init();
 80022ba:	f000 f865 	bl	8002388 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 80022be:	f008 f87b 	bl	800a3b8 <MX_USB_DEVICE_Init>
	MX_USART1_UART_Init();
 80022c2:	f000 f897 	bl	80023f4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	setup();
 80022c6:	f000 fbef 	bl	8002aa8 <setup>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		loop();
 80022ca:	f000 fd07 	bl	8002cdc <loop>
 80022ce:	e7fc      	b.n	80022ca <main+0x20>

080022d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b094      	sub	sp, #80	@ 0x50
 80022d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80022d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022da:	2228      	movs	r2, #40	@ 0x28
 80022dc:	2100      	movs	r1, #0
 80022de:	4618      	mov	r0, r3
 80022e0:	f008 fd28 	bl	800ad34 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002300:	2301      	movs	r3, #1
 8002302:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002304:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002308:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800230a:	2300      	movs	r3, #0
 800230c:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800230e:	2301      	movs	r3, #1
 8002310:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002312:	2302      	movs	r3, #2
 8002314:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002316:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800231a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800231c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002320:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002322:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002326:	4618      	mov	r0, r3
 8002328:	f002 fe0a 	bl	8004f40 <HAL_RCC_OscConfig>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <SystemClock_Config+0x66>
		Error_Handler();
 8002332:	f000 f915 	bl	8002560 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002336:	230f      	movs	r3, #15
 8002338:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800233a:	2302      	movs	r3, #2
 800233c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002346:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002348:	2300      	movs	r3, #0
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	2101      	movs	r1, #1
 8002352:	4618      	mov	r0, r3
 8002354:	f003 f876 	bl	8005444 <HAL_RCC_ClockConfig>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <SystemClock_Config+0x92>
		Error_Handler();
 800235e:	f000 f8ff 	bl	8002560 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002362:	2310      	movs	r3, #16
 8002364:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002366:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800236a:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	4618      	mov	r0, r3
 8002370:	f003 f9f6 	bl	8005760 <HAL_RCCEx_PeriphCLKConfig>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <SystemClock_Config+0xae>
		Error_Handler();
 800237a:	f000 f8f1 	bl	8002560 <Error_Handler>
	}
}
 800237e:	bf00      	nop
 8002380:	3750      	adds	r7, #80	@ 0x50
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800238c:	4b17      	ldr	r3, [pc, #92]	@ (80023ec <MX_SPI1_Init+0x64>)
 800238e:	4a18      	ldr	r2, [pc, #96]	@ (80023f0 <MX_SPI1_Init+0x68>)
 8002390:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002392:	4b16      	ldr	r3, [pc, #88]	@ (80023ec <MX_SPI1_Init+0x64>)
 8002394:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002398:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800239a:	4b14      	ldr	r3, [pc, #80]	@ (80023ec <MX_SPI1_Init+0x64>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023a0:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <MX_SPI1_Init+0x64>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023a6:	4b11      	ldr	r3, [pc, #68]	@ (80023ec <MX_SPI1_Init+0x64>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023ac:	4b0f      	ldr	r3, [pc, #60]	@ (80023ec <MX_SPI1_Init+0x64>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80023b2:	4b0e      	ldr	r3, [pc, #56]	@ (80023ec <MX_SPI1_Init+0x64>)
 80023b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023b8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023ba:	4b0c      	ldr	r3, [pc, #48]	@ (80023ec <MX_SPI1_Init+0x64>)
 80023bc:	2218      	movs	r2, #24
 80023be:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023c0:	4b0a      	ldr	r3, [pc, #40]	@ (80023ec <MX_SPI1_Init+0x64>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023c6:	4b09      	ldr	r3, [pc, #36]	@ (80023ec <MX_SPI1_Init+0x64>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023cc:	4b07      	ldr	r3, [pc, #28]	@ (80023ec <MX_SPI1_Init+0x64>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 80023d2:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <MX_SPI1_Init+0x64>)
 80023d4:	220a      	movs	r2, #10
 80023d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80023d8:	4804      	ldr	r0, [pc, #16]	@ (80023ec <MX_SPI1_Init+0x64>)
 80023da:	f003 fa77 	bl	80058cc <HAL_SPI_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_SPI1_Init+0x60>
		Error_Handler();
 80023e4:	f000 f8bc 	bl	8002560 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000204 	.word	0x20000204
 80023f0:	40013000 	.word	0x40013000

080023f4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80023f8:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <MX_USART1_UART_Init+0x4c>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	@ (8002444 <MX_USART1_UART_Init+0x50>)
 80023fc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80023fe:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <MX_USART1_UART_Init+0x4c>)
 8002400:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002404:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002406:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <MX_USART1_UART_Init+0x4c>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800240c:	4b0c      	ldr	r3, [pc, #48]	@ (8002440 <MX_USART1_UART_Init+0x4c>)
 800240e:	2200      	movs	r2, #0
 8002410:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002412:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <MX_USART1_UART_Init+0x4c>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002418:	4b09      	ldr	r3, [pc, #36]	@ (8002440 <MX_USART1_UART_Init+0x4c>)
 800241a:	220c      	movs	r2, #12
 800241c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241e:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <MX_USART1_UART_Init+0x4c>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002424:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <MX_USART1_UART_Init+0x4c>)
 8002426:	2200      	movs	r2, #0
 8002428:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800242a:	4805      	ldr	r0, [pc, #20]	@ (8002440 <MX_USART1_UART_Init+0x4c>)
 800242c:	f003 ffe3 	bl	80063f6 <HAL_UART_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002436:	f000 f893 	bl	8002560 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000025c 	.word	0x2000025c
 8002444:	40013800 	.word	0x40013800

08002448 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800244e:	f107 0310 	add.w	r3, r7, #16
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800245c:	4b3c      	ldr	r3, [pc, #240]	@ (8002550 <MX_GPIO_Init+0x108>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	4a3b      	ldr	r2, [pc, #236]	@ (8002550 <MX_GPIO_Init+0x108>)
 8002462:	f043 0320 	orr.w	r3, r3, #32
 8002466:	6193      	str	r3, [r2, #24]
 8002468:	4b39      	ldr	r3, [pc, #228]	@ (8002550 <MX_GPIO_Init+0x108>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002474:	4b36      	ldr	r3, [pc, #216]	@ (8002550 <MX_GPIO_Init+0x108>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	4a35      	ldr	r2, [pc, #212]	@ (8002550 <MX_GPIO_Init+0x108>)
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	6193      	str	r3, [r2, #24]
 8002480:	4b33      	ldr	r3, [pc, #204]	@ (8002550 <MX_GPIO_Init+0x108>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800248c:	4b30      	ldr	r3, [pc, #192]	@ (8002550 <MX_GPIO_Init+0x108>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	4a2f      	ldr	r2, [pc, #188]	@ (8002550 <MX_GPIO_Init+0x108>)
 8002492:	f043 0308 	orr.w	r3, r3, #8
 8002496:	6193      	str	r3, [r2, #24]
 8002498:	4b2d      	ldr	r3, [pc, #180]	@ (8002550 <MX_GPIO_Init+0x108>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DW_RSTn_GPIO_Port, DW_RSTn_Pin, GPIO_PIN_RESET);
 80024a4:	2200      	movs	r2, #0
 80024a6:	2101      	movs	r1, #1
 80024a8:	482a      	ldr	r0, [pc, #168]	@ (8002554 <MX_GPIO_Init+0x10c>)
 80024aa:	f000 ffa0 	bl	80033ee <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, USB_EN_Pin | NSS_Pin, GPIO_PIN_SET);
 80024ae:	2201      	movs	r2, #1
 80024b0:	2118      	movs	r1, #24
 80024b2:	4828      	ldr	r0, [pc, #160]	@ (8002554 <MX_GPIO_Init+0x10c>)
 80024b4:	f000 ff9b 	bl	80033ee <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80024b8:	2201      	movs	r2, #1
 80024ba:	2140      	movs	r1, #64	@ 0x40
 80024bc:	4826      	ldr	r0, [pc, #152]	@ (8002558 <MX_GPIO_Init+0x110>)
 80024be:	f000 ff96 	bl	80033ee <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2180      	movs	r1, #128	@ 0x80
 80024c6:	4824      	ldr	r0, [pc, #144]	@ (8002558 <MX_GPIO_Init+0x110>)
 80024c8:	f000 ff91 	bl	80033ee <HAL_GPIO_WritePin>

	/*Configure GPIO pin : DW_RSTn_Pin */
	GPIO_InitStruct.Pin = DW_RSTn_Pin;
 80024cc:	2301      	movs	r3, #1
 80024ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80024d0:	2311      	movs	r3, #17
 80024d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d8:	2302      	movs	r3, #2
 80024da:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DW_RSTn_GPIO_Port, &GPIO_InitStruct);
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	4619      	mov	r1, r3
 80024e2:	481c      	ldr	r0, [pc, #112]	@ (8002554 <MX_GPIO_Init+0x10c>)
 80024e4:	f000 fde8 	bl	80030b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_EN_Pin NSS_Pin */
	GPIO_InitStruct.Pin = USB_EN_Pin | NSS_Pin;
 80024e8:	2318      	movs	r3, #24
 80024ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ec:	2301      	movs	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f4:	2302      	movs	r3, #2
 80024f6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	4619      	mov	r1, r3
 80024fe:	4815      	ldr	r0, [pc, #84]	@ (8002554 <MX_GPIO_Init+0x10c>)
 8002500:	f000 fdda 	bl	80030b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : DW_IRQn_Pin */
	GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8002504:	2320      	movs	r3, #32
 8002506:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002508:	4b14      	ldr	r3, [pc, #80]	@ (800255c <MX_GPIO_Init+0x114>)
 800250a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8002510:	f107 0310 	add.w	r3, r7, #16
 8002514:	4619      	mov	r1, r3
 8002516:	4810      	ldr	r0, [pc, #64]	@ (8002558 <MX_GPIO_Init+0x110>)
 8002518:	f000 fdce 	bl	80030b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD2_Pin;
 800251c:	23c0      	movs	r3, #192	@ 0xc0
 800251e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002520:	2301      	movs	r3, #1
 8002522:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	2302      	movs	r3, #2
 800252a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	4619      	mov	r1, r3
 8002532:	4809      	ldr	r0, [pc, #36]	@ (8002558 <MX_GPIO_Init+0x110>)
 8002534:	f000 fdc0 	bl	80030b8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002538:	2200      	movs	r2, #0
 800253a:	2100      	movs	r1, #0
 800253c:	2017      	movs	r0, #23
 800253e:	f000 fd76 	bl	800302e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002542:	2017      	movs	r0, #23
 8002544:	f000 fd8f 	bl	8003066 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8002548:	bf00      	nop
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000
 8002554:	40010800 	.word	0x40010800
 8002558:	40010c00 	.word	0x40010c00
 800255c:	10310000 	.word	0x10310000

08002560 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002564:	b672      	cpsid	i
}
 8002566:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <Error_Handler+0x8>

0800256c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <HAL_MspInit+0x5c>)
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	4a14      	ldr	r2, [pc, #80]	@ (80025c8 <HAL_MspInit+0x5c>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6193      	str	r3, [r2, #24]
 800257e:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <HAL_MspInit+0x5c>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <HAL_MspInit+0x5c>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a0e      	ldr	r2, [pc, #56]	@ (80025c8 <HAL_MspInit+0x5c>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002594:	61d3      	str	r3, [r2, #28]
 8002596:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <HAL_MspInit+0x5c>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800259e:	607b      	str	r3, [r7, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025a2:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <HAL_MspInit+0x60>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	4a04      	ldr	r2, [pc, #16]	@ (80025cc <HAL_MspInit+0x60>)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40010000 	.word	0x40010000

080025d0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002658 <HAL_SPI_MspInit+0x88>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d12f      	bne.n	8002650 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025f0:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <HAL_SPI_MspInit+0x8c>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	4a19      	ldr	r2, [pc, #100]	@ (800265c <HAL_SPI_MspInit+0x8c>)
 80025f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025fa:	6193      	str	r3, [r2, #24]
 80025fc:	4b17      	ldr	r3, [pc, #92]	@ (800265c <HAL_SPI_MspInit+0x8c>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002608:	4b14      	ldr	r3, [pc, #80]	@ (800265c <HAL_SPI_MspInit+0x8c>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	4a13      	ldr	r2, [pc, #76]	@ (800265c <HAL_SPI_MspInit+0x8c>)
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	6193      	str	r3, [r2, #24]
 8002614:	4b11      	ldr	r3, [pc, #68]	@ (800265c <HAL_SPI_MspInit+0x8c>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002620:	23a0      	movs	r3, #160	@ 0xa0
 8002622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262c:	f107 0310 	add.w	r3, r7, #16
 8002630:	4619      	mov	r1, r3
 8002632:	480b      	ldr	r0, [pc, #44]	@ (8002660 <HAL_SPI_MspInit+0x90>)
 8002634:	f000 fd40 	bl	80030b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002638:	2340      	movs	r3, #64	@ 0x40
 800263a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002644:	f107 0310 	add.w	r3, r7, #16
 8002648:	4619      	mov	r1, r3
 800264a:	4805      	ldr	r0, [pc, #20]	@ (8002660 <HAL_SPI_MspInit+0x90>)
 800264c:	f000 fd34 	bl	80030b8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002650:	bf00      	nop
 8002652:	3720      	adds	r7, #32
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40013000 	.word	0x40013000
 800265c:	40021000 	.word	0x40021000
 8002660:	40010800 	.word	0x40010800

08002664 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 0310 	add.w	r3, r7, #16
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1c      	ldr	r2, [pc, #112]	@ (80026f0 <HAL_UART_MspInit+0x8c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d131      	bne.n	80026e8 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002684:	4b1b      	ldr	r3, [pc, #108]	@ (80026f4 <HAL_UART_MspInit+0x90>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	4a1a      	ldr	r2, [pc, #104]	@ (80026f4 <HAL_UART_MspInit+0x90>)
 800268a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800268e:	6193      	str	r3, [r2, #24]
 8002690:	4b18      	ldr	r3, [pc, #96]	@ (80026f4 <HAL_UART_MspInit+0x90>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269c:	4b15      	ldr	r3, [pc, #84]	@ (80026f4 <HAL_UART_MspInit+0x90>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	4a14      	ldr	r2, [pc, #80]	@ (80026f4 <HAL_UART_MspInit+0x90>)
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	6193      	str	r3, [r2, #24]
 80026a8:	4b12      	ldr	r3, [pc, #72]	@ (80026f4 <HAL_UART_MspInit+0x90>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026be:	2303      	movs	r3, #3
 80026c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c2:	f107 0310 	add.w	r3, r7, #16
 80026c6:	4619      	mov	r1, r3
 80026c8:	480b      	ldr	r0, [pc, #44]	@ (80026f8 <HAL_UART_MspInit+0x94>)
 80026ca:	f000 fcf5 	bl	80030b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026dc:	f107 0310 	add.w	r3, r7, #16
 80026e0:	4619      	mov	r1, r3
 80026e2:	4805      	ldr	r0, [pc, #20]	@ (80026f8 <HAL_UART_MspInit+0x94>)
 80026e4:	f000 fce8 	bl	80030b8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80026e8:	bf00      	nop
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40013800 	.word	0x40013800
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40010800 	.word	0x40010800

080026fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <NMI_Handler+0x4>

08002704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <HardFault_Handler+0x4>

0800270c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <MemManage_Handler+0x4>

08002714 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <BusFault_Handler+0x4>

0800271c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002720:	bf00      	nop
 8002722:	e7fd      	b.n	8002720 <UsageFault_Handler+0x4>

08002724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800274c:	f000 fb3a 	bl	8002dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}

08002754 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002758:	4802      	ldr	r0, [pc, #8]	@ (8002764 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800275a:	f000 ffad 	bl	80036b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200010d4 	.word	0x200010d4

08002768 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 800276c:	2020      	movs	r0, #32
 800276e:	f000 fe6f 	bl	8003450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002780:	4a14      	ldr	r2, [pc, #80]	@ (80027d4 <_sbrk+0x5c>)
 8002782:	4b15      	ldr	r3, [pc, #84]	@ (80027d8 <_sbrk+0x60>)
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800278c:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <_sbrk+0x64>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002794:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <_sbrk+0x64>)
 8002796:	4a12      	ldr	r2, [pc, #72]	@ (80027e0 <_sbrk+0x68>)
 8002798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800279a:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <_sbrk+0x64>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d207      	bcs.n	80027b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a8:	f008 facc 	bl	800ad44 <__errno>
 80027ac:	4603      	mov	r3, r0
 80027ae:	220c      	movs	r2, #12
 80027b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295
 80027b6:	e009      	b.n	80027cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b8:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <_sbrk+0x64>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027be:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <_sbrk+0x64>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	4a05      	ldr	r2, [pc, #20]	@ (80027dc <_sbrk+0x64>)
 80027c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ca:	68fb      	ldr	r3, [r7, #12]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20005000 	.word	0x20005000
 80027d8:	00000400 	.word	0x00000400
 80027dc:	200002a4 	.word	0x200002a4
 80027e0:	20001718 	.word	0x20001718

080027e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db0b      	blt.n	800281a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	4906      	ldr	r1, [pc, #24]	@ (8002824 <__NVIC_EnableIRQ+0x34>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2001      	movs	r0, #1
 8002812:	fa00 f202 	lsl.w	r2, r0, r2
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	e000e100 	.word	0xe000e100

08002828 <spiRead>:
 * @param data: pointer to data buffer
 * @param dataLength: length of data to read
 * @retval None
 */
void spiRead(dwDevice_t *dev, const void *header, size_t headerLength,
		void *data, size_t dataLength) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
	// Function for SPI_Read for decawave device, member of dw_ops .spiRead field
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0); // CS Low
 8002836:	2200      	movs	r2, #0
 8002838:	2110      	movs	r1, #16
 800283a:	480d      	ldr	r0, [pc, #52]	@ (8002870 <spiRead+0x48>)
 800283c:	f000 fdd7 	bl	80033ee <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*) header, headerLength,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	b29a      	uxth	r2, r3
 8002844:	2364      	movs	r3, #100	@ 0x64
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	480a      	ldr	r0, [pc, #40]	@ (8002874 <spiRead+0x4c>)
 800284a:	f003 f8c3 	bl	80059d4 <HAL_SPI_Transmit>
	SPI_Transmit_Timeout);
	HAL_SPI_Receive(&hspi1, (uint8_t*) data, dataLength, SPI_Transmit_Timeout);
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	b29a      	uxth	r2, r3
 8002852:	2364      	movs	r3, #100	@ 0x64
 8002854:	6839      	ldr	r1, [r7, #0]
 8002856:	4807      	ldr	r0, [pc, #28]	@ (8002874 <spiRead+0x4c>)
 8002858:	f003 fa00 	bl	8005c5c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1); // CS High
 800285c:	2201      	movs	r2, #1
 800285e:	2110      	movs	r1, #16
 8002860:	4803      	ldr	r0, [pc, #12]	@ (8002870 <spiRead+0x48>)
 8002862:	f000 fdc4 	bl	80033ee <HAL_GPIO_WritePin>
}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40010800 	.word	0x40010800
 8002874:	20000204 	.word	0x20000204

08002878 <spiWrite>:
 * @param data: pointer to data to write
 * @param dataLength: length of data to write
 * @retval None
 */
void spiWrite(dwDevice_t *dev, const void *header, size_t headerLength,
		const void *data, size_t dataLength) {
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
	// Function for SPI_Write for decawave device, member of dw_ops .spiWrite field
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0); // CS Low
 8002886:	2200      	movs	r2, #0
 8002888:	2110      	movs	r1, #16
 800288a:	480d      	ldr	r0, [pc, #52]	@ (80028c0 <spiWrite+0x48>)
 800288c:	f000 fdaf 	bl	80033ee <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*) header, headerLength,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	b29a      	uxth	r2, r3
 8002894:	2364      	movs	r3, #100	@ 0x64
 8002896:	68b9      	ldr	r1, [r7, #8]
 8002898:	480a      	ldr	r0, [pc, #40]	@ (80028c4 <spiWrite+0x4c>)
 800289a:	f003 f89b 	bl	80059d4 <HAL_SPI_Transmit>
	SPI_Transmit_Timeout);
	HAL_SPI_Transmit(&hspi1, (uint8_t*) data, dataLength, SPI_Transmit_Timeout);
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	2364      	movs	r3, #100	@ 0x64
 80028a4:	6839      	ldr	r1, [r7, #0]
 80028a6:	4807      	ldr	r0, [pc, #28]	@ (80028c4 <spiWrite+0x4c>)
 80028a8:	f003 f894 	bl	80059d4 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1); // CS High
 80028ac:	2201      	movs	r2, #1
 80028ae:	2110      	movs	r1, #16
 80028b0:	4803      	ldr	r0, [pc, #12]	@ (80028c0 <spiWrite+0x48>)
 80028b2:	f000 fd9c 	bl	80033ee <HAL_GPIO_WritePin>
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40010800 	.word	0x40010800
 80028c4:	20000204 	.word	0x20000204

080028c8 <spiSetSpeed>:
 * @param dev: pointer to dwDevice_t structure
 * @param speed: SPI speed to set
 * @retval None
 * @note Needs to restart SPI using HAL, future improvement
 */
void spiSetSpeed(dwDevice_t *dev, dwSpiSpeed_t speed) {
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	70fb      	strb	r3, [r7, #3]
	// Needs to restart SPI using HAL, future improvement
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <delayms>:
 * @param dev: pointer to dwDevice_t structure
 * @param delay: delay in milliseconds
 * @retval None
 */

void delayms(dwDevice_t *dev, unsigned int delay) {
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
	HAL_Delay(delay);
 80028e8:	6838      	ldr	r0, [r7, #0]
 80028ea:	f000 fa87 	bl	8002dfc <HAL_Delay>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <reset>:
/**
 * @brief Reset function for decawave device
 * @param dev: pointer to dwDevice_t structure
 * @retval None
 */
void reset(dwDevice_t *dev) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8002900:	2201      	movs	r2, #1
 8002902:	2101      	movs	r1, #1
 8002904:	4807      	ldr	r0, [pc, #28]	@ (8002924 <reset+0x2c>)
 8002906:	f000 fd72 	bl	80033ee <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800290a:	200a      	movs	r0, #10
 800290c:	f000 fa76 	bl	8002dfc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8002910:	2200      	movs	r2, #0
 8002912:	2102      	movs	r1, #2
 8002914:	4803      	ldr	r0, [pc, #12]	@ (8002924 <reset+0x2c>)
 8002916:	f000 fd6a 	bl	80033ee <HAL_GPIO_WritePin>
	// Open drain output, must not be driven High externally
	// See: DW1000 datasheet, page 8
	// Hardware RST pin
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40010800 	.word	0x40010800

08002928 <TX_Callback>:
/**
 * @brief TX Complete callback function
 * @param dev: pointer to dwDevice_t structure
 * @retval None
 */
void TX_Callback(dwDevice_t *dev) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	sprintf((char*) USB_TX_Buffer, "TX Complete %d \n\r\0", HAL_GetTick());
 8002930:	f000 fa5a 	bl	8002de8 <HAL_GetTick>
 8002934:	4603      	mov	r3, r0
 8002936:	461a      	mov	r2, r3
 8002938:	4908      	ldr	r1, [pc, #32]	@ (800295c <TX_Callback+0x34>)
 800293a:	4809      	ldr	r0, [pc, #36]	@ (8002960 <TX_Callback+0x38>)
 800293c:	f008 f9d8 	bl	800acf0 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002940:	4807      	ldr	r0, [pc, #28]	@ (8002960 <TX_Callback+0x38>)
 8002942:	f7fd fc03 	bl	800014c <strlen>
 8002946:	4603      	mov	r3, r0
 8002948:	b29b      	uxth	r3, r3
 800294a:	4619      	mov	r1, r3
 800294c:	4804      	ldr	r0, [pc, #16]	@ (8002960 <TX_Callback+0x38>)
 800294e:	f007 fdf1 	bl	800a534 <CDC_Transmit_FS>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	0800b694 	.word	0x0800b694
 8002960:	200002a8 	.word	0x200002a8

08002964 <RX_Callback>:
/**
 * @brief RX Complete callback function
 * @param dev: pointer to dwDevice_t structure
 * @retval None
 */
void RX_Callback(dwDevice_t *dev) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800296c:	2180      	movs	r1, #128	@ 0x80
 800296e:	480d      	ldr	r0, [pc, #52]	@ (80029a4 <RX_Callback+0x40>)
 8002970:	f000 fd55 	bl	800341e <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8002974:	2064      	movs	r0, #100	@ 0x64
 8002976:	f000 fa41 	bl	8002dfc <HAL_Delay>
	sprintf((char*) USB_TX_Buffer, "RX Complete %d \n\r\0", HAL_GetTick());
 800297a:	f000 fa35 	bl	8002de8 <HAL_GetTick>
 800297e:	4603      	mov	r3, r0
 8002980:	461a      	mov	r2, r3
 8002982:	4909      	ldr	r1, [pc, #36]	@ (80029a8 <RX_Callback+0x44>)
 8002984:	4809      	ldr	r0, [pc, #36]	@ (80029ac <RX_Callback+0x48>)
 8002986:	f008 f9b3 	bl	800acf0 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 800298a:	4808      	ldr	r0, [pc, #32]	@ (80029ac <RX_Callback+0x48>)
 800298c:	f7fd fbde 	bl	800014c <strlen>
 8002990:	4603      	mov	r3, r0
 8002992:	b29b      	uxth	r3, r3
 8002994:	4619      	mov	r1, r3
 8002996:	4805      	ldr	r0, [pc, #20]	@ (80029ac <RX_Callback+0x48>)
 8002998:	f007 fdcc 	bl	800a534 <CDC_Transmit_FS>
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40010c00 	.word	0x40010c00
 80029a8:	0800b6a8 	.word	0x0800b6a8
 80029ac:	200002a8 	.word	0x200002a8

080029b0 <receivedFailedCallback>:
/**
 * @brief RX Failed callback function
 * @param dev: pointer to dwDevice_t structure
 * @retval None
 */
void receivedFailedCallback(dwDevice_t *dev) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	sprintf((char*) USB_TX_Buffer, "RX Failed %d \n\r\0", HAL_GetTick());
 80029b8:	f000 fa16 	bl	8002de8 <HAL_GetTick>
 80029bc:	4603      	mov	r3, r0
 80029be:	461a      	mov	r2, r3
 80029c0:	490a      	ldr	r1, [pc, #40]	@ (80029ec <receivedFailedCallback+0x3c>)
 80029c2:	480b      	ldr	r0, [pc, #44]	@ (80029f0 <receivedFailedCallback+0x40>)
 80029c4:	f008 f994 	bl	800acf0 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 80029c8:	4809      	ldr	r0, [pc, #36]	@ (80029f0 <receivedFailedCallback+0x40>)
 80029ca:	f7fd fbbf 	bl	800014c <strlen>
 80029ce:	4603      	mov	r3, r0
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	4619      	mov	r1, r3
 80029d4:	4806      	ldr	r0, [pc, #24]	@ (80029f0 <receivedFailedCallback+0x40>)
 80029d6:	f007 fdad 	bl	800a534 <CDC_Transmit_FS>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80029da:	2201      	movs	r2, #1
 80029dc:	2140      	movs	r1, #64	@ 0x40
 80029de:	4805      	ldr	r0, [pc, #20]	@ (80029f4 <receivedFailedCallback+0x44>)
 80029e0:	f000 fd05 	bl	80033ee <HAL_GPIO_WritePin>
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	0800b6bc 	.word	0x0800b6bc
 80029f0:	200002a8 	.word	0x200002a8
 80029f4:	40010c00 	.word	0x40010c00

080029f8 <DW1000_Error_Handler>:
/**
 * @brief DW1000 Error Handler callback function
 * @param dev: pointer to dwDevice_t structure
 * @retval None
 */
void DW1000_Error_Handler(dwDevice_t *dev) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
	sprintf((char*) USB_TX_Buffer, "DW1000 Error %d \n\r\0", HAL_GetTick());
 8002a00:	f000 f9f2 	bl	8002de8 <HAL_GetTick>
 8002a04:	4603      	mov	r3, r0
 8002a06:	461a      	mov	r2, r3
 8002a08:	490a      	ldr	r1, [pc, #40]	@ (8002a34 <DW1000_Error_Handler+0x3c>)
 8002a0a:	480b      	ldr	r0, [pc, #44]	@ (8002a38 <DW1000_Error_Handler+0x40>)
 8002a0c:	f008 f970 	bl	800acf0 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002a10:	4809      	ldr	r0, [pc, #36]	@ (8002a38 <DW1000_Error_Handler+0x40>)
 8002a12:	f7fd fb9b 	bl	800014c <strlen>
 8002a16:	4603      	mov	r3, r0
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4806      	ldr	r0, [pc, #24]	@ (8002a38 <DW1000_Error_Handler+0x40>)
 8002a1e:	f007 fd89 	bl	800a534 <CDC_Transmit_FS>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8002a22:	2201      	movs	r2, #1
 8002a24:	2140      	movs	r1, #64	@ 0x40
 8002a26:	4805      	ldr	r0, [pc, #20]	@ (8002a3c <DW1000_Error_Handler+0x44>)
 8002a28:	f000 fce1 	bl	80033ee <HAL_GPIO_WritePin>
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	0800b6e0 	.word	0x0800b6e0
 8002a38:	200002a8 	.word	0x200002a8
 8002a3c:	40010c00 	.word	0x40010c00

08002a40 <checkIrq>:

/**
 * @brief Check IRQ pin status
 * @retval int: IRQ pin status
 */
int checkIrq(void) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8002a44:	2120      	movs	r1, #32
 8002a46:	4803      	ldr	r0, [pc, #12]	@ (8002a54 <checkIrq+0x14>)
 8002a48:	f000 fcba 	bl	80033c0 <HAL_GPIO_ReadPin>
 8002a4c:	4603      	mov	r3, r0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40010c00 	.word	0x40010c00

08002a58 <dwOpsInit>:
/**
 * @brief Initialize DW1000 operations and enable NVIC interrupt
 * @param device: pointer to dwDevice_t structure
 * @retval None
 */
void dwOpsInit(dwDevice_t *device) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	NVIC_EnableIRQ(DWM_IRQn);
 8002a60:	2017      	movs	r0, #23
 8002a62:	f7ff fec5 	bl	80027f0 <__NVIC_EnableIRQ>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief GPIO EXTI Callback function
 * @param GPIO_Pin: GPIO pin that triggered the interrupt
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == DWM_IRQ_PIN) { // If The INT Source Is EXTI Line9 (A9 Pin)
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d10c      	bne.n	8002a9a <HAL_GPIO_EXTI_Callback+0x2a>
		// GPIO_PIN_5- PB5
		do {
			dwHandleInterrupt(dwm);
 8002a80:	4b08      	ldr	r3, [pc, #32]	@ (8002aa4 <HAL_GPIO_EXTI_Callback+0x34>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff f99f 	bl	8001dc8 <dwHandleInterrupt>
		} while (checkIrq() != 0);
 8002a8a:	f7ff ffd9 	bl	8002a40 <checkIrq>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f5      	bne.n	8002a80 <HAL_GPIO_EXTI_Callback+0x10>
		HAL_NVIC_ClearPendingIRQ(DWM_IRQn);
 8002a94:	2017      	movs	r0, #23
 8002a96:	f000 fb00 	bl	800309a <HAL_NVIC_ClearPendingIRQ>
	}
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000004 	.word	0x20000004

08002aa8 <setup>:

/**
 * @brief Setup function - Initialize DW1000 and configure system
 * @retval None
 */
void setup(void) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
	sprintf((char*) USB_TX_Buffer, "Starting test \n\r\0");
 8002aae:	497e      	ldr	r1, [pc, #504]	@ (8002ca8 <setup+0x200>)
 8002ab0:	487e      	ldr	r0, [pc, #504]	@ (8002cac <setup+0x204>)
 8002ab2:	f008 f91d 	bl	800acf0 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002ab6:	487d      	ldr	r0, [pc, #500]	@ (8002cac <setup+0x204>)
 8002ab8:	f7fd fb48 	bl	800014c <strlen>
 8002abc:	4603      	mov	r3, r0
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	487a      	ldr	r0, [pc, #488]	@ (8002cac <setup+0x204>)
 8002ac4:	f007 fd36 	bl	800a534 <CDC_Transmit_FS>

	sprintf((char*) USB_TX_Buffer, "Test:Init for DW1000 \n\r\0");
 8002ac8:	4979      	ldr	r1, [pc, #484]	@ (8002cb0 <setup+0x208>)
 8002aca:	4878      	ldr	r0, [pc, #480]	@ (8002cac <setup+0x204>)
 8002acc:	f008 f910 	bl	800acf0 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002ad0:	4876      	ldr	r0, [pc, #472]	@ (8002cac <setup+0x204>)
 8002ad2:	f7fd fb3b 	bl	800014c <strlen>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	4619      	mov	r1, r3
 8002adc:	4873      	ldr	r0, [pc, #460]	@ (8002cac <setup+0x204>)
 8002ade:	f007 fd29 	bl	800a534 <CDC_Transmit_FS>
	HAL_Delay(1000);
 8002ae2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ae6:	f000 f989 	bl	8002dfc <HAL_Delay>

	// Initialize Decawave
	dwInit(dwm, &dw_ops);
 8002aea:	4b72      	ldr	r3, [pc, #456]	@ (8002cb4 <setup+0x20c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4972      	ldr	r1, [pc, #456]	@ (8002cb8 <setup+0x210>)
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fd fb39 	bl	8000168 <dwInit>

	// Enable NVIC interrupt for DW1000
	dwOpsInit(dwm);
 8002af6:	4b6f      	ldr	r3, [pc, #444]	@ (8002cb4 <setup+0x20c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff ffac 	bl	8002a58 <dwOpsInit>

	//Device Address:
	uint16_t dwm_Address = 0x11 + TRANSMITTER;
 8002b00:	2311      	movs	r3, #17
 8002b02:	81fb      	strh	r3, [r7, #14]
	dwm->networkAndAddress[0] = (dwm_Address & 0xFF);
 8002b04:	4b6b      	ldr	r3, [pc, #428]	@ (8002cb4 <setup+0x20c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	89fa      	ldrh	r2, [r7, #14]
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	735a      	strb	r2, [r3, #13]
	dwm->networkAndAddress[1] = ((dwm_Address >> 8) & 0xFF);
 8002b0e:	89fb      	ldrh	r3, [r7, #14]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	4b67      	ldr	r3, [pc, #412]	@ (8002cb4 <setup+0x20c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	739a      	strb	r2, [r3, #14]

	//Device Network:
	uint16_t dwm_Network = 0x10;
 8002b1c:	2310      	movs	r3, #16
 8002b1e:	81bb      	strh	r3, [r7, #12]
	dwm->networkAndAddress[2] = (dwm_Network & 0xFF);
 8002b20:	4b64      	ldr	r3, [pc, #400]	@ (8002cb4 <setup+0x20c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	89ba      	ldrh	r2, [r7, #12]
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	73da      	strb	r2, [r3, #15]
	dwm->networkAndAddress[3] = (dwm_Network >> 8) & 0xFF;
 8002b2a:	89bb      	ldrh	r3, [r7, #12]
 8002b2c:	0a1b      	lsrs	r3, r3, #8
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	4b60      	ldr	r3, [pc, #384]	@ (8002cb4 <setup+0x20c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	741a      	strb	r2, [r3, #16]

	dwWriteNetworkIdAndDeviceAddress(dwm);
 8002b38:	4b5e      	ldr	r3, [pc, #376]	@ (8002cb4 <setup+0x20c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fd fd9d 	bl	800067c <dwWriteNetworkIdAndDeviceAddress>
	uint8_t result = dwConfigure(dwm); // Configure the dw1000 chip
 8002b42:	4b5c      	ldr	r3, [pc, #368]	@ (8002cb4 <setup+0x20c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fb68 	bl	800021c <dwConfigure>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	72fb      	strb	r3, [r7, #11]

	if (result == 0) {
 8002b50:	7afb      	ldrb	r3, [r7, #11]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d112      	bne.n	8002b7c <setup+0xd4>
		sprintf((char*) USB_TX_Buffer, "Ok \n\r\0");
 8002b56:	4959      	ldr	r1, [pc, #356]	@ (8002cbc <setup+0x214>)
 8002b58:	4854      	ldr	r0, [pc, #336]	@ (8002cac <setup+0x204>)
 8002b5a:	f008 f8c9 	bl	800acf0 <siprintf>
		CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002b5e:	4853      	ldr	r0, [pc, #332]	@ (8002cac <setup+0x204>)
 8002b60:	f7fd faf4 	bl	800014c <strlen>
 8002b64:	4603      	mov	r3, r0
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4850      	ldr	r0, [pc, #320]	@ (8002cac <setup+0x204>)
 8002b6c:	f007 fce2 	bl	800a534 <CDC_Transmit_FS>
		dwEnableAllLeds(dwm);
 8002b70:	4b50      	ldr	r3, [pc, #320]	@ (8002cb4 <setup+0x20c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fd fc26 	bl	80003c6 <dwEnableAllLeds>
 8002b7a:	e012      	b.n	8002ba2 <setup+0xfa>
	} else {
		sprintf((char*) USB_TX_Buffer, "[ERROR]: %s\n\r\0", dwStrError(result));
 8002b7c:	7afb      	ldrb	r3, [r7, #11]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff f9fe 	bl	8001f80 <dwStrError>
 8002b84:	4603      	mov	r3, r0
 8002b86:	461a      	mov	r2, r3
 8002b88:	494d      	ldr	r1, [pc, #308]	@ (8002cc0 <setup+0x218>)
 8002b8a:	4848      	ldr	r0, [pc, #288]	@ (8002cac <setup+0x204>)
 8002b8c:	f008 f8b0 	bl	800acf0 <siprintf>
		CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002b90:	4846      	ldr	r0, [pc, #280]	@ (8002cac <setup+0x204>)
 8002b92:	f7fd fadb 	bl	800014c <strlen>
 8002b96:	4603      	mov	r3, r0
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4843      	ldr	r0, [pc, #268]	@ (8002cac <setup+0x204>)
 8002b9e:	f007 fcc9 	bl	800a534 <CDC_Transmit_FS>
	}

	sprintf((char*) USB_TX_Buffer, "Config End \n\r\0");
 8002ba2:	4948      	ldr	r1, [pc, #288]	@ (8002cc4 <setup+0x21c>)
 8002ba4:	4841      	ldr	r0, [pc, #260]	@ (8002cac <setup+0x204>)
 8002ba6:	f008 f8a3 	bl	800acf0 <siprintf>
	CDC_Transmit_FS((uint8_t*) USB_TX_Buffer, strlen(USB_TX_Buffer));
 8002baa:	4840      	ldr	r0, [pc, #256]	@ (8002cac <setup+0x204>)
 8002bac:	f7fd face 	bl	800014c <strlen>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	483d      	ldr	r0, [pc, #244]	@ (8002cac <setup+0x204>)
 8002bb8:	f007 fcbc 	bl	800a534 <CDC_Transmit_FS>
	HAL_Delay(1000);
 8002bbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bc0:	f000 f91c 	bl	8002dfc <HAL_Delay>

	// Continue with config:
	dwTime_t delay = { .full = 0 };
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	e9c7 2300 	strd	r2, r3, [r7]
	dwSetAntenaDelay(dwm, delay);
 8002bd0:	4b38      	ldr	r3, [pc, #224]	@ (8002cb4 <setup+0x20c>)
 8002bd2:	6819      	ldr	r1, [r3, #0]
 8002bd4:	463b      	mov	r3, r7
 8002bd6:	cb0c      	ldmia	r3, {r2, r3}
 8002bd8:	4608      	mov	r0, r1
 8002bda:	f7ff f9c0 	bl	8001f5e <dwSetAntenaDelay>

	dwAttachSentHandler(dwm, TX_Callback);
 8002bde:	4b35      	ldr	r3, [pc, #212]	@ (8002cb4 <setup+0x20c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4939      	ldr	r1, [pc, #228]	@ (8002cc8 <setup+0x220>)
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff f986 	bl	8001ef6 <dwAttachSentHandler>
	dwAttachReceivedHandler(dwm, RX_Callback);
 8002bea:	4b32      	ldr	r3, [pc, #200]	@ (8002cb4 <setup+0x20c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4937      	ldr	r1, [pc, #220]	@ (8002ccc <setup+0x224>)
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff f99a 	bl	8001f2a <dwAttachReceivedHandler>
	dwAttachErrorHandler(dwm, DW1000_Error_Handler);
 8002bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb4 <setup+0x20c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4935      	ldr	r1, [pc, #212]	@ (8002cd0 <setup+0x228>)
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff f987 	bl	8001f10 <dwAttachErrorHandler>
	dwAttachReceiveFailedHandler(dwm, receivedFailedCallback);
 8002c02:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb4 <setup+0x20c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4933      	ldr	r1, [pc, #204]	@ (8002cd4 <setup+0x22c>)
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff f99b 	bl	8001f44 <dwAttachReceiveFailedHandler>

	dwNewConfiguration(dwm);
 8002c0e:	4b29      	ldr	r3, [pc, #164]	@ (8002cb4 <setup+0x20c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd ff3b 	bl	8000a8e <dwNewConfiguration>
	dwSetDefaults(dwm);
 8002c18:	4b26      	ldr	r3, [pc, #152]	@ (8002cb4 <setup+0x20c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fe f945 	bl	8000eac <dwSetDefaults>

	dwEnableMode(dwm, MODE_SHORTDATA_FAST_ACCURACY);
 8002c22:	4b24      	ldr	r3, [pc, #144]	@ (8002cb4 <setup+0x20c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	492c      	ldr	r1, [pc, #176]	@ (8002cd8 <setup+0x230>)
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe fa93 	bl	8001154 <dwEnableMode>
	dwSetChannel(dwm, CHANNEL_2);
 8002c2e:	4b21      	ldr	r3, [pc, #132]	@ (8002cb4 <setup+0x20c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2102      	movs	r1, #2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe f8e2 	bl	8000dfe <dwSetChannel>
	dwSetPreambleCode(dwm, PREAMBLE_CODE_64MHZ_9);
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb4 <setup+0x20c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2109      	movs	r1, #9
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe f8fa 	bl	8000e3a <dwSetPreambleCode>

	dwCommitConfiguration(dwm);
 8002c46:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb4 <setup+0x20c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fd ff39 	bl	8000ac2 <dwCommitConfiguration>

	// Enable DW1000 interrupts for receive operations
	dwInterruptOnReceived(dwm, true);
 8002c50:	4b18      	ldr	r3, [pc, #96]	@ (8002cb4 <setup+0x20c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2101      	movs	r1, #1
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd fe10 	bl	800087c <dwInterruptOnReceived>
	dwInterruptOnReceiveFailed(dwm, true);
 8002c5c:	4b15      	ldr	r3, [pc, #84]	@ (8002cb4 <setup+0x20c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2101      	movs	r1, #1
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fe24 	bl	80008b0 <dwInterruptOnReceiveFailed>
	dwInterruptOnReceiveTimeout(dwm, true);
 8002c68:	4b12      	ldr	r3, [pc, #72]	@ (8002cb4 <setup+0x20c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd fe58 	bl	8000924 <dwInterruptOnReceiveTimeout>

	// Setup receiver mode if not transmitter
	if (TRANSMITTER == 0) {
		dwNewReceive(dwm);
 8002c74:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb4 <setup+0x20c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fec2 	bl	8000a02 <dwNewReceive>
		dwSetDefaults(dwm);
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb4 <setup+0x20c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe f912 	bl	8000eac <dwSetDefaults>
		dwReceivePermanently(dwm, 1);
 8002c88:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <setup+0x20c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe f8a6 	bl	8000de0 <dwReceivePermanently>
		dwStartReceive(dwm);
 8002c94:	4b07      	ldr	r3, [pc, #28]	@ (8002cb4 <setup+0x20c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd feca 	bl	8000a32 <dwStartReceive>
	}
}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	0800b6f4 	.word	0x0800b6f4
 8002cac:	200002a8 	.word	0x200002a8
 8002cb0:	0800b708 	.word	0x0800b708
 8002cb4:	20000004 	.word	0x20000004
 8002cb8:	20000008 	.word	0x20000008
 8002cbc:	0800b724 	.word	0x0800b724
 8002cc0:	0800b72c 	.word	0x0800b72c
 8002cc4:	0800b73c 	.word	0x0800b73c
 8002cc8:	08002929 	.word	0x08002929
 8002ccc:	08002965 	.word	0x08002965
 8002cd0:	080029f9 	.word	0x080029f9
 8002cd4:	080029b1 	.word	0x080029b1
 8002cd8:	0800b78c 	.word	0x0800b78c

08002cdc <loop>:

/**
 * @brief Main loop function - Handle transmit/receive operations
 * @retval None
 */
void loop(void) {
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
		send_Data_Over_UWB(mesaj);
		HAL_Delay(100);
	} else {
		// Receiver mode - just wait for interrupts
	}
}
 8002ce2:	bf00      	nop
 8002ce4:	371c      	adds	r7, #28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cec:	f7ff fd7a 	bl	80027e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cf0:	480b      	ldr	r0, [pc, #44]	@ (8002d20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002cf2:	490c      	ldr	r1, [pc, #48]	@ (8002d24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8002d28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf8:	e002      	b.n	8002d00 <LoopCopyDataInit>

08002cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cfe:	3304      	adds	r3, #4

08002d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d04:	d3f9      	bcc.n	8002cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d06:	4a09      	ldr	r2, [pc, #36]	@ (8002d2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d08:	4c09      	ldr	r4, [pc, #36]	@ (8002d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d0c:	e001      	b.n	8002d12 <LoopFillZerobss>

08002d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d10:	3204      	adds	r2, #4

08002d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d14:	d3fb      	bcc.n	8002d0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d16:	f008 f81b 	bl	800ad50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d1a:	f7ff fac6 	bl	80022aa <main>
  bx lr
 8002d1e:	4770      	bx	lr
  ldr r0, =_sdata
 8002d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d24:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002d28:	0800b800 	.word	0x0800b800
  ldr r2, =_sbss
 8002d2c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002d30:	20001714 	.word	0x20001714

08002d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d34:	e7fe      	b.n	8002d34 <ADC1_2_IRQHandler>
	...

08002d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d3c:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <HAL_Init+0x28>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a07      	ldr	r2, [pc, #28]	@ (8002d60 <HAL_Init+0x28>)
 8002d42:	f043 0310 	orr.w	r3, r3, #16
 8002d46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d48:	2003      	movs	r0, #3
 8002d4a:	f000 f965 	bl	8003018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d4e:	200f      	movs	r0, #15
 8002d50:	f000 f808 	bl	8002d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d54:	f7ff fc0a 	bl	800256c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40022000 	.word	0x40022000

08002d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d6c:	4b12      	ldr	r3, [pc, #72]	@ (8002db8 <HAL_InitTick+0x54>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b12      	ldr	r3, [pc, #72]	@ (8002dbc <HAL_InitTick+0x58>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	4619      	mov	r1, r3
 8002d76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f97d 	bl	8003082 <HAL_SYSTICK_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00e      	b.n	8002db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b0f      	cmp	r3, #15
 8002d96:	d80a      	bhi.n	8002dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	f000 f945 	bl	800302e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002da4:	4a06      	ldr	r2, [pc, #24]	@ (8002dc0 <HAL_InitTick+0x5c>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e000      	b.n	8002db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	20000020 	.word	0x20000020
 8002dc0:	2000001c 	.word	0x2000001c

08002dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dc8:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <HAL_IncTick+0x1c>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b05      	ldr	r3, [pc, #20]	@ (8002de4 <HAL_IncTick+0x20>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	4a03      	ldr	r2, [pc, #12]	@ (8002de4 <HAL_IncTick+0x20>)
 8002dd6:	6013      	str	r3, [r2, #0]
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	20000020 	.word	0x20000020
 8002de4:	20000408 	.word	0x20000408

08002de8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return uwTick;
 8002dec:	4b02      	ldr	r3, [pc, #8]	@ (8002df8 <HAL_GetTick+0x10>)
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr
 8002df8:	20000408 	.word	0x20000408

08002dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e04:	f7ff fff0 	bl	8002de8 <HAL_GetTick>
 8002e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d005      	beq.n	8002e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e16:	4b0a      	ldr	r3, [pc, #40]	@ (8002e40 <HAL_Delay+0x44>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4413      	add	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e22:	bf00      	nop
 8002e24:	f7ff ffe0 	bl	8002de8 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d8f7      	bhi.n	8002e24 <HAL_Delay+0x28>
  {
  }
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000020 	.word	0x20000020

08002e44 <__NVIC_SetPriorityGrouping>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e54:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <__NVIC_SetPriorityGrouping+0x44>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e60:	4013      	ands	r3, r2
 8002e62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e76:	4a04      	ldr	r2, [pc, #16]	@ (8002e88 <__NVIC_SetPriorityGrouping+0x44>)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	60d3      	str	r3, [r2, #12]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_GetPriorityGrouping>:
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e90:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	f003 0307 	and.w	r3, r3, #7
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <__NVIC_EnableIRQ>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	db0b      	blt.n	8002ed2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	f003 021f 	and.w	r2, r3, #31
 8002ec0:	4906      	ldr	r1, [pc, #24]	@ (8002edc <__NVIC_EnableIRQ+0x34>)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	2001      	movs	r0, #1
 8002eca:	fa00 f202 	lsl.w	r2, r0, r2
 8002ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr
 8002edc:	e000e100 	.word	0xe000e100

08002ee0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	db0c      	blt.n	8002f0c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	f003 021f 	and.w	r2, r3, #31
 8002ef8:	4907      	ldr	r1, [pc, #28]	@ (8002f18 <__NVIC_ClearPendingIRQ+0x38>)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	2001      	movs	r0, #1
 8002f02:	fa00 f202 	lsl.w	r2, r0, r2
 8002f06:	3360      	adds	r3, #96	@ 0x60
 8002f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	e000e100 	.word	0xe000e100

08002f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	6039      	str	r1, [r7, #0]
 8002f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	db0a      	blt.n	8002f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	490c      	ldr	r1, [pc, #48]	@ (8002f68 <__NVIC_SetPriority+0x4c>)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	0112      	lsls	r2, r2, #4
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	440b      	add	r3, r1
 8002f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f44:	e00a      	b.n	8002f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4908      	ldr	r1, [pc, #32]	@ (8002f6c <__NVIC_SetPriority+0x50>)
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	3b04      	subs	r3, #4
 8002f54:	0112      	lsls	r2, r2, #4
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	440b      	add	r3, r1
 8002f5a:	761a      	strb	r2, [r3, #24]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	e000e100 	.word	0xe000e100
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	@ 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f1c3 0307 	rsb	r3, r3, #7
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	bf28      	it	cs
 8002f8e:	2304      	movcs	r3, #4
 8002f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3304      	adds	r3, #4
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d902      	bls.n	8002fa0 <NVIC_EncodePriority+0x30>
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3b03      	subs	r3, #3
 8002f9e:	e000      	b.n	8002fa2 <NVIC_EncodePriority+0x32>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc2:	43d9      	mvns	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc8:	4313      	orrs	r3, r2
         );
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3724      	adds	r7, #36	@ 0x24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fe4:	d301      	bcc.n	8002fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e00f      	b.n	800300a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fea:	4a0a      	ldr	r2, [pc, #40]	@ (8003014 <SysTick_Config+0x40>)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ff2:	210f      	movs	r1, #15
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff8:	f7ff ff90 	bl	8002f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ffc:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <SysTick_Config+0x40>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003002:	4b04      	ldr	r3, [pc, #16]	@ (8003014 <SysTick_Config+0x40>)
 8003004:	2207      	movs	r2, #7
 8003006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	e000e010 	.word	0xe000e010

08003018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ff0f 	bl	8002e44 <__NVIC_SetPriorityGrouping>
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800302e:	b580      	push	{r7, lr}
 8003030:	b086      	sub	sp, #24
 8003032:	af00      	add	r7, sp, #0
 8003034:	4603      	mov	r3, r0
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003040:	f7ff ff24 	bl	8002e8c <__NVIC_GetPriorityGrouping>
 8003044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	6978      	ldr	r0, [r7, #20]
 800304c:	f7ff ff90 	bl	8002f70 <NVIC_EncodePriority>
 8003050:	4602      	mov	r2, r0
 8003052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff5f 	bl	8002f1c <__NVIC_SetPriority>
}
 800305e:	bf00      	nop
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	4603      	mov	r3, r0
 800306e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff17 	bl	8002ea8 <__NVIC_EnableIRQ>
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff ffa2 	bl	8002fd4 <SysTick_Config>
 8003090:	4603      	mov	r3, r0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	4603      	mov	r3, r0
 80030a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80030a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ff19 	bl	8002ee0 <__NVIC_ClearPendingIRQ>
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b08b      	sub	sp, #44	@ 0x2c
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030c6:	2300      	movs	r3, #0
 80030c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ca:	e169      	b.n	80033a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030cc:	2201      	movs	r2, #1
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	f040 8158 	bne.w	800339a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4a9a      	ldr	r2, [pc, #616]	@ (8003358 <HAL_GPIO_Init+0x2a0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d05e      	beq.n	80031b2 <HAL_GPIO_Init+0xfa>
 80030f4:	4a98      	ldr	r2, [pc, #608]	@ (8003358 <HAL_GPIO_Init+0x2a0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d875      	bhi.n	80031e6 <HAL_GPIO_Init+0x12e>
 80030fa:	4a98      	ldr	r2, [pc, #608]	@ (800335c <HAL_GPIO_Init+0x2a4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d058      	beq.n	80031b2 <HAL_GPIO_Init+0xfa>
 8003100:	4a96      	ldr	r2, [pc, #600]	@ (800335c <HAL_GPIO_Init+0x2a4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d86f      	bhi.n	80031e6 <HAL_GPIO_Init+0x12e>
 8003106:	4a96      	ldr	r2, [pc, #600]	@ (8003360 <HAL_GPIO_Init+0x2a8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d052      	beq.n	80031b2 <HAL_GPIO_Init+0xfa>
 800310c:	4a94      	ldr	r2, [pc, #592]	@ (8003360 <HAL_GPIO_Init+0x2a8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d869      	bhi.n	80031e6 <HAL_GPIO_Init+0x12e>
 8003112:	4a94      	ldr	r2, [pc, #592]	@ (8003364 <HAL_GPIO_Init+0x2ac>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d04c      	beq.n	80031b2 <HAL_GPIO_Init+0xfa>
 8003118:	4a92      	ldr	r2, [pc, #584]	@ (8003364 <HAL_GPIO_Init+0x2ac>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d863      	bhi.n	80031e6 <HAL_GPIO_Init+0x12e>
 800311e:	4a92      	ldr	r2, [pc, #584]	@ (8003368 <HAL_GPIO_Init+0x2b0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d046      	beq.n	80031b2 <HAL_GPIO_Init+0xfa>
 8003124:	4a90      	ldr	r2, [pc, #576]	@ (8003368 <HAL_GPIO_Init+0x2b0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d85d      	bhi.n	80031e6 <HAL_GPIO_Init+0x12e>
 800312a:	2b12      	cmp	r3, #18
 800312c:	d82a      	bhi.n	8003184 <HAL_GPIO_Init+0xcc>
 800312e:	2b12      	cmp	r3, #18
 8003130:	d859      	bhi.n	80031e6 <HAL_GPIO_Init+0x12e>
 8003132:	a201      	add	r2, pc, #4	@ (adr r2, 8003138 <HAL_GPIO_Init+0x80>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	080031b3 	.word	0x080031b3
 800313c:	0800318d 	.word	0x0800318d
 8003140:	0800319f 	.word	0x0800319f
 8003144:	080031e1 	.word	0x080031e1
 8003148:	080031e7 	.word	0x080031e7
 800314c:	080031e7 	.word	0x080031e7
 8003150:	080031e7 	.word	0x080031e7
 8003154:	080031e7 	.word	0x080031e7
 8003158:	080031e7 	.word	0x080031e7
 800315c:	080031e7 	.word	0x080031e7
 8003160:	080031e7 	.word	0x080031e7
 8003164:	080031e7 	.word	0x080031e7
 8003168:	080031e7 	.word	0x080031e7
 800316c:	080031e7 	.word	0x080031e7
 8003170:	080031e7 	.word	0x080031e7
 8003174:	080031e7 	.word	0x080031e7
 8003178:	080031e7 	.word	0x080031e7
 800317c:	08003195 	.word	0x08003195
 8003180:	080031a9 	.word	0x080031a9
 8003184:	4a79      	ldr	r2, [pc, #484]	@ (800336c <HAL_GPIO_Init+0x2b4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800318a:	e02c      	b.n	80031e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	623b      	str	r3, [r7, #32]
          break;
 8003192:	e029      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	3304      	adds	r3, #4
 800319a:	623b      	str	r3, [r7, #32]
          break;
 800319c:	e024      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	3308      	adds	r3, #8
 80031a4:	623b      	str	r3, [r7, #32]
          break;
 80031a6:	e01f      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	330c      	adds	r3, #12
 80031ae:	623b      	str	r3, [r7, #32]
          break;
 80031b0:	e01a      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031ba:	2304      	movs	r3, #4
 80031bc:	623b      	str	r3, [r7, #32]
          break;
 80031be:	e013      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d105      	bne.n	80031d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031c8:	2308      	movs	r3, #8
 80031ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	611a      	str	r2, [r3, #16]
          break;
 80031d2:	e009      	b.n	80031e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031d4:	2308      	movs	r3, #8
 80031d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	615a      	str	r2, [r3, #20]
          break;
 80031de:	e003      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031e0:	2300      	movs	r3, #0
 80031e2:	623b      	str	r3, [r7, #32]
          break;
 80031e4:	e000      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          break;
 80031e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2bff      	cmp	r3, #255	@ 0xff
 80031ec:	d801      	bhi.n	80031f2 <HAL_GPIO_Init+0x13a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	e001      	b.n	80031f6 <HAL_GPIO_Init+0x13e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3304      	adds	r3, #4
 80031f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2bff      	cmp	r3, #255	@ 0xff
 80031fc:	d802      	bhi.n	8003204 <HAL_GPIO_Init+0x14c>
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	e002      	b.n	800320a <HAL_GPIO_Init+0x152>
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	3b08      	subs	r3, #8
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	210f      	movs	r1, #15
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	fa01 f303 	lsl.w	r3, r1, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	401a      	ands	r2, r3
 800321c:	6a39      	ldr	r1, [r7, #32]
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	431a      	orrs	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 80b1 	beq.w	800339a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003238:	4b4d      	ldr	r3, [pc, #308]	@ (8003370 <HAL_GPIO_Init+0x2b8>)
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	4a4c      	ldr	r2, [pc, #304]	@ (8003370 <HAL_GPIO_Init+0x2b8>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6193      	str	r3, [r2, #24]
 8003244:	4b4a      	ldr	r3, [pc, #296]	@ (8003370 <HAL_GPIO_Init+0x2b8>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003250:	4a48      	ldr	r2, [pc, #288]	@ (8003374 <HAL_GPIO_Init+0x2bc>)
 8003252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003254:	089b      	lsrs	r3, r3, #2
 8003256:	3302      	adds	r3, #2
 8003258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	220f      	movs	r2, #15
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4013      	ands	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a40      	ldr	r2, [pc, #256]	@ (8003378 <HAL_GPIO_Init+0x2c0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d013      	beq.n	80032a4 <HAL_GPIO_Init+0x1ec>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a3f      	ldr	r2, [pc, #252]	@ (800337c <HAL_GPIO_Init+0x2c4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00d      	beq.n	80032a0 <HAL_GPIO_Init+0x1e8>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a3e      	ldr	r2, [pc, #248]	@ (8003380 <HAL_GPIO_Init+0x2c8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d007      	beq.n	800329c <HAL_GPIO_Init+0x1e4>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a3d      	ldr	r2, [pc, #244]	@ (8003384 <HAL_GPIO_Init+0x2cc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d101      	bne.n	8003298 <HAL_GPIO_Init+0x1e0>
 8003294:	2303      	movs	r3, #3
 8003296:	e006      	b.n	80032a6 <HAL_GPIO_Init+0x1ee>
 8003298:	2304      	movs	r3, #4
 800329a:	e004      	b.n	80032a6 <HAL_GPIO_Init+0x1ee>
 800329c:	2302      	movs	r3, #2
 800329e:	e002      	b.n	80032a6 <HAL_GPIO_Init+0x1ee>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <HAL_GPIO_Init+0x1ee>
 80032a4:	2300      	movs	r3, #0
 80032a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032a8:	f002 0203 	and.w	r2, r2, #3
 80032ac:	0092      	lsls	r2, r2, #2
 80032ae:	4093      	lsls	r3, r2
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032b6:	492f      	ldr	r1, [pc, #188]	@ (8003374 <HAL_GPIO_Init+0x2bc>)
 80032b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ba:	089b      	lsrs	r3, r3, #2
 80032bc:	3302      	adds	r3, #2
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d006      	beq.n	80032de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	492c      	ldr	r1, [pc, #176]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]
 80032dc:	e006      	b.n	80032ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032de:	4b2a      	ldr	r3, [pc, #168]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	4928      	ldr	r1, [pc, #160]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d006      	beq.n	8003306 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032f8:	4b23      	ldr	r3, [pc, #140]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	4922      	ldr	r1, [pc, #136]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	60cb      	str	r3, [r1, #12]
 8003304:	e006      	b.n	8003314 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003306:	4b20      	ldr	r3, [pc, #128]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	43db      	mvns	r3, r3
 800330e:	491e      	ldr	r1, [pc, #120]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 8003310:	4013      	ands	r3, r2
 8003312:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d006      	beq.n	800332e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003320:	4b19      	ldr	r3, [pc, #100]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	4918      	ldr	r1, [pc, #96]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
 800332c:	e006      	b.n	800333c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800332e:	4b16      	ldr	r3, [pc, #88]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	43db      	mvns	r3, r3
 8003336:	4914      	ldr	r1, [pc, #80]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 8003338:	4013      	ands	r3, r2
 800333a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d021      	beq.n	800338c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003348:	4b0f      	ldr	r3, [pc, #60]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	490e      	ldr	r1, [pc, #56]	@ (8003388 <HAL_GPIO_Init+0x2d0>)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	4313      	orrs	r3, r2
 8003352:	600b      	str	r3, [r1, #0]
 8003354:	e021      	b.n	800339a <HAL_GPIO_Init+0x2e2>
 8003356:	bf00      	nop
 8003358:	10320000 	.word	0x10320000
 800335c:	10310000 	.word	0x10310000
 8003360:	10220000 	.word	0x10220000
 8003364:	10210000 	.word	0x10210000
 8003368:	10120000 	.word	0x10120000
 800336c:	10110000 	.word	0x10110000
 8003370:	40021000 	.word	0x40021000
 8003374:	40010000 	.word	0x40010000
 8003378:	40010800 	.word	0x40010800
 800337c:	40010c00 	.word	0x40010c00
 8003380:	40011000 	.word	0x40011000
 8003384:	40011400 	.word	0x40011400
 8003388:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800338c:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <HAL_GPIO_Init+0x304>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	43db      	mvns	r3, r3
 8003394:	4909      	ldr	r1, [pc, #36]	@ (80033bc <HAL_GPIO_Init+0x304>)
 8003396:	4013      	ands	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800339a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339c:	3301      	adds	r3, #1
 800339e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a6:	fa22 f303 	lsr.w	r3, r2, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f47f ae8e 	bne.w	80030cc <HAL_GPIO_Init+0x14>
  }
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	372c      	adds	r7, #44	@ 0x2c
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	40010400 	.word	0x40010400

080033c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	887b      	ldrh	r3, [r7, #2]
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
 80033dc:	e001      	b.n	80033e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033de:	2300      	movs	r3, #0
 80033e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr

080033ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	460b      	mov	r3, r1
 80033f8:	807b      	strh	r3, [r7, #2]
 80033fa:	4613      	mov	r3, r2
 80033fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033fe:	787b      	ldrb	r3, [r7, #1]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003404:	887a      	ldrh	r2, [r7, #2]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800340a:	e003      	b.n	8003414 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800340c:	887b      	ldrh	r3, [r7, #2]
 800340e:	041a      	lsls	r2, r3, #16
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	611a      	str	r2, [r3, #16]
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr

0800341e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800341e:	b480      	push	{r7}
 8003420:	b085      	sub	sp, #20
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	460b      	mov	r3, r1
 8003428:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003430:	887a      	ldrh	r2, [r7, #2]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4013      	ands	r3, r2
 8003436:	041a      	lsls	r2, r3, #16
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	43d9      	mvns	r1, r3
 800343c:	887b      	ldrh	r3, [r7, #2]
 800343e:	400b      	ands	r3, r1
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	611a      	str	r2, [r3, #16]
}
 8003446:	bf00      	nop
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800345a:	4b08      	ldr	r3, [pc, #32]	@ (800347c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	4013      	ands	r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d006      	beq.n	8003474 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003466:	4a05      	ldr	r2, [pc, #20]	@ (800347c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fafe 	bl	8002a70 <HAL_GPIO_EXTI_Callback>
  }
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40010400 	.word	0x40010400

08003480 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e0e8      	b.n	8003664 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f007 f978 	bl	800a79c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2203      	movs	r2, #3
 80034b0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f003 f89b 	bl	80065fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3304      	adds	r3, #4
 80034cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034ce:	f003 f871 	bl	80065b4 <USB_CoreInit>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0bf      	b.n	8003664 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2100      	movs	r1, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	f003 f89f 	bl	800662e <USB_SetCurrentMode>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2202      	movs	r2, #2
 80034fa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e0b0      	b.n	8003664 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003502:	2300      	movs	r3, #0
 8003504:	73fb      	strb	r3, [r7, #15]
 8003506:	e03e      	b.n	8003586 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003508:	7bfa      	ldrb	r2, [r7, #15]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	440b      	add	r3, r1
 8003516:	3311      	adds	r3, #17
 8003518:	2201      	movs	r2, #1
 800351a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800351c:	7bfa      	ldrb	r2, [r7, #15]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	440b      	add	r3, r1
 800352a:	3310      	adds	r3, #16
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	440b      	add	r3, r1
 800353e:	3313      	adds	r3, #19
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	440b      	add	r3, r1
 8003552:	3320      	adds	r3, #32
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003558:	7bfa      	ldrb	r2, [r7, #15]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	440b      	add	r3, r1
 8003566:	3324      	adds	r3, #36	@ 0x24
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	440b      	add	r3, r1
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	3301      	adds	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	791b      	ldrb	r3, [r3, #4]
 800358a:	7bfa      	ldrb	r2, [r7, #15]
 800358c:	429a      	cmp	r2, r3
 800358e:	d3bb      	bcc.n	8003508 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003590:	2300      	movs	r3, #0
 8003592:	73fb      	strb	r3, [r7, #15]
 8003594:	e044      	b.n	8003620 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003596:	7bfa      	ldrb	r2, [r7, #15]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	440b      	add	r3, r1
 80035a4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80035a8:	2200      	movs	r2, #0
 80035aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035ac:	7bfa      	ldrb	r2, [r7, #15]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	440b      	add	r3, r1
 80035ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	440b      	add	r3, r1
 80035d0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	440b      	add	r3, r1
 80035e6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035ee:	7bfa      	ldrb	r2, [r7, #15]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	440b      	add	r3, r1
 80035fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	440b      	add	r3, r1
 8003612:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	3301      	adds	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	791b      	ldrb	r3, [r3, #4]
 8003624:	7bfa      	ldrb	r2, [r7, #15]
 8003626:	429a      	cmp	r2, r3
 8003628:	d3b5      	bcc.n	8003596 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3304      	adds	r3, #4
 8003632:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003634:	f003 f807 	bl	8006646 <USB_DevInit>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2202      	movs	r2, #2
 8003642:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e00c      	b.n	8003664 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f005 fa86 	bl	8008b6e <USB_DevDisconnect>

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_PCD_Start+0x16>
 800367e:	2302      	movs	r3, #2
 8003680:	e016      	b.n	80036b0 <HAL_PCD_Start+0x44>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f002 ff9d 	bl	80065ce <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003694:	2101      	movs	r1, #1
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f007 faf3 	bl	800ac82 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f005 fa5a 	bl	8008b5a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f005 fa5c 	bl	8008b82 <USB_ReadInterrupts>
 80036ca:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fb1a 	bl	8003d10 <PCD_EP_ISR_Handler>

    return;
 80036dc:	e119      	b.n	8003912 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d013      	beq.n	8003710 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036fa:	b292      	uxth	r2, r2
 80036fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f007 f8c6 	bl	800a892 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003706:	2100      	movs	r1, #0
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f905 	bl	8003918 <HAL_PCD_SetAddress>

    return;
 800370e:	e100      	b.n	8003912 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00c      	beq.n	8003734 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003722:	b29a      	uxth	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800372c:	b292      	uxth	r2, r2
 800372e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003732:	e0ee      	b.n	8003912 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00c      	beq.n	8003758 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003746:	b29a      	uxth	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003750:	b292      	uxth	r2, r2
 8003752:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003756:	e0dc      	b.n	8003912 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d027      	beq.n	80037b2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800376a:	b29a      	uxth	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0204 	bic.w	r2, r2, #4
 8003774:	b292      	uxth	r2, r2
 8003776:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003782:	b29a      	uxth	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0208 	bic.w	r2, r2, #8
 800378c:	b292      	uxth	r2, r2
 800378e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f007 f8b6 	bl	800a904 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037aa:	b292      	uxth	r2, r2
 80037ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80037b0:	e0af      	b.n	8003912 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8083 	beq.w	80038c4 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80037be:	2300      	movs	r3, #0
 80037c0:	77fb      	strb	r3, [r7, #31]
 80037c2:	e010      	b.n	80037e6 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	7ffb      	ldrb	r3, [r7, #31]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	441a      	add	r2, r3
 80037d0:	7ffb      	ldrb	r3, [r7, #31]
 80037d2:	8812      	ldrh	r2, [r2, #0]
 80037d4:	b292      	uxth	r2, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	3320      	adds	r3, #32
 80037da:	443b      	add	r3, r7
 80037dc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80037e0:	7ffb      	ldrb	r3, [r7, #31]
 80037e2:	3301      	adds	r3, #1
 80037e4:	77fb      	strb	r3, [r7, #31]
 80037e6:	7ffb      	ldrb	r3, [r7, #31]
 80037e8:	2b07      	cmp	r3, #7
 80037ea:	d9eb      	bls.n	80037c4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	b292      	uxth	r2, r2
 8003800:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800380c:	b29a      	uxth	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	b292      	uxth	r2, r2
 8003818:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800381c:	bf00      	nop
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003826:	b29b      	uxth	r3, r3
 8003828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f6      	beq.n	800381e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003838:	b29a      	uxth	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003842:	b292      	uxth	r2, r2
 8003844:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003848:	2300      	movs	r3, #0
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	e00f      	b.n	800386e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800384e:	7ffb      	ldrb	r3, [r7, #31]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	4611      	mov	r1, r2
 8003856:	7ffa      	ldrb	r2, [r7, #31]
 8003858:	0092      	lsls	r2, r2, #2
 800385a:	440a      	add	r2, r1
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	3320      	adds	r3, #32
 8003860:	443b      	add	r3, r7
 8003862:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003866:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003868:	7ffb      	ldrb	r3, [r7, #31]
 800386a:	3301      	adds	r3, #1
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	7ffb      	ldrb	r3, [r7, #31]
 8003870:	2b07      	cmp	r3, #7
 8003872:	d9ec      	bls.n	800384e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800387c:	b29a      	uxth	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0208 	orr.w	r2, r2, #8
 8003886:	b292      	uxth	r2, r2
 8003888:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003894:	b29a      	uxth	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800389e:	b292      	uxth	r2, r2
 80038a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0204 	orr.w	r2, r2, #4
 80038b6:	b292      	uxth	r2, r2
 80038b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f007 f807 	bl	800a8d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038c2:	e026      	b.n	8003912 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00f      	beq.n	80038ee <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038e0:	b292      	uxth	r2, r2
 80038e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f006 ffc5 	bl	800a876 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038ec:	e011      	b.n	8003912 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00c      	beq.n	8003912 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003900:	b29a      	uxth	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800390a:	b292      	uxth	r2, r2
 800390c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003910:	bf00      	nop
  }
}
 8003912:	3720      	adds	r7, #32
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_PCD_SetAddress+0x1a>
 800392e:	2302      	movs	r3, #2
 8003930:	e012      	b.n	8003958 <HAL_PCD_SetAddress+0x40>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	78fa      	ldrb	r2, [r7, #3]
 800393e:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	4611      	mov	r1, r2
 8003948:	4618      	mov	r0, r3
 800394a:	f005 f8f3 	bl	8008b34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	4608      	mov	r0, r1
 800396a:	4611      	mov	r1, r2
 800396c:	461a      	mov	r2, r3
 800396e:	4603      	mov	r3, r0
 8003970:	70fb      	strb	r3, [r7, #3]
 8003972:	460b      	mov	r3, r1
 8003974:	803b      	strh	r3, [r7, #0]
 8003976:	4613      	mov	r3, r2
 8003978:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800397e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003982:	2b00      	cmp	r3, #0
 8003984:	da0e      	bge.n	80039a4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	f003 0207 	and.w	r2, r3, #7
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	3310      	adds	r3, #16
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	4413      	add	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	705a      	strb	r2, [r3, #1]
 80039a2:	e00e      	b.n	80039c2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	f003 0207 	and.w	r2, r3, #7
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	4413      	add	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039ce:	883a      	ldrh	r2, [r7, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	78ba      	ldrb	r2, [r7, #2]
 80039d8:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039da:	78bb      	ldrb	r3, [r7, #2]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d102      	bne.n	80039e6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_PCD_EP_Open+0x94>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e00e      	b.n	8003a12 <HAL_PCD_EP_Open+0xb2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68f9      	ldr	r1, [r7, #12]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f002 fe3c 	bl	8006680 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003a10:	7afb      	ldrb	r3, [r7, #11]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	da0e      	bge.n	8003a4c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	f003 0207 	and.w	r2, r3, #7
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	3310      	adds	r3, #16
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	705a      	strb	r2, [r3, #1]
 8003a4a:	e00e      	b.n	8003a6a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	f003 0207 	and.w	r2, r3, #7
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_PCD_EP_Close+0x6a>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e00e      	b.n	8003aa2 <HAL_PCD_EP_Close+0x88>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68f9      	ldr	r1, [r7, #12]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f003 f9b4 	bl	8006e00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b086      	sub	sp, #24
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aba:	7afb      	ldrb	r3, [r7, #11]
 8003abc:	f003 0207 	and.w	r2, r3, #7
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4413      	add	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aea:	7afb      	ldrb	r3, [r7, #11]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6979      	ldr	r1, [r7, #20]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f003 fb6b 	bl	80071d8 <USB_EPStartXfer>

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	f003 0207 	and.w	r2, r3, #7
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	440b      	add	r3, r1
 8003b2a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003b2e:	681b      	ldr	r3, [r3, #0]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr

08003b3a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b086      	sub	sp, #24
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	460b      	mov	r3, r1
 8003b48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b4a:	7afb      	ldrb	r3, [r7, #11]
 8003b4c:	f003 0207 	and.w	r2, r3, #7
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	3310      	adds	r3, #16
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2201      	movs	r2, #1
 8003b84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b86:	7afb      	ldrb	r3, [r7, #11]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6979      	ldr	r1, [r7, #20]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f003 fb1d 	bl	80071d8 <USB_EPStartXfer>

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	7912      	ldrb	r2, [r2, #4]
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e04c      	b.n	8003c60 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	da0e      	bge.n	8003bec <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	f003 0207 	and.w	r2, r3, #7
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	3310      	adds	r3, #16
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	705a      	strb	r2, [r3, #1]
 8003bea:	e00c      	b.n	8003c06 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bec:	78fa      	ldrb	r2, [r7, #3]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d101      	bne.n	8003c26 <HAL_PCD_EP_SetStall+0x7e>
 8003c22:	2302      	movs	r3, #2
 8003c24:	e01c      	b.n	8003c60 <HAL_PCD_EP_SetStall+0xb8>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68f9      	ldr	r1, [r7, #12]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f004 fe80 	bl	800893a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c3a:	78fb      	ldrb	r3, [r7, #3]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d108      	bne.n	8003c56 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f004 ffa5 	bl	8008ba0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	7912      	ldrb	r2, [r2, #4]
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e040      	b.n	8003d08 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	da0e      	bge.n	8003cac <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c8e:	78fb      	ldrb	r3, [r7, #3]
 8003c90:	f003 0207 	and.w	r2, r3, #7
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	3310      	adds	r3, #16
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	705a      	strb	r2, [r3, #1]
 8003caa:	e00e      	b.n	8003cca <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cac:	78fb      	ldrb	r3, [r7, #3]
 8003cae:	f003 0207 	and.w	r2, r3, #7
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_PCD_EP_ClrStall+0x82>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e00e      	b.n	8003d08 <HAL_PCD_EP_ClrStall+0xa0>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68f9      	ldr	r1, [r7, #12]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f004 fe6e 	bl	80089da <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b096      	sub	sp, #88	@ 0x58
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d18:	e3bb      	b.n	8004492 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d22:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003d34:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f040 8175 	bne.w	8004028 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d14e      	bne.n	8003de8 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d5a:	81fb      	strh	r3, [r7, #14]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	89fb      	ldrh	r3, [r7, #14]
 8003d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3310      	adds	r3, #16
 8003d72:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4413      	add	r3, r2
 8003d88:	3302      	adds	r3, #2
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d9e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da2:	695a      	ldr	r2, [r3, #20]
 8003da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	441a      	add	r2, r3
 8003daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dac:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003dae:	2100      	movs	r1, #0
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f006 fd46 	bl	800a842 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	7b5b      	ldrb	r3, [r3, #13]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8368 	beq.w	8004492 <PCD_EP_ISR_Handler+0x782>
 8003dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f040 8363 	bne.w	8004492 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	7b5b      	ldrb	r3, [r3, #13]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	735a      	strb	r2, [r3, #13]
 8003de6:	e354      	b.n	8004492 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003dee:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003dfa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003dfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d034      	beq.n	8003e70 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4413      	add	r3, r2
 8003e1a:	3306      	adds	r3, #6
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e30:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e3e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e42:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	f004 fefc 	bl	8008c42 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e56:	4013      	ands	r3, r2
 8003e58:	823b      	strh	r3, [r7, #16]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	8a3a      	ldrh	r2, [r7, #16]
 8003e60:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e64:	b292      	uxth	r2, r2
 8003e66:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f006 fcbd 	bl	800a7e8 <HAL_PCD_SetupStageCallback>
 8003e6e:	e310      	b.n	8004492 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e70:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f280 830c 	bge.w	8004492 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e86:	4013      	ands	r3, r2
 8003e88:	83fb      	strh	r3, [r7, #30]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	8bfa      	ldrh	r2, [r7, #30]
 8003e90:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e94:	b292      	uxth	r2, r2
 8003e96:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4413      	add	r3, r2
 8003eac:	3306      	adds	r3, #6
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d019      	beq.n	8003f00 <PCD_EP_ISR_Handler+0x1f0>
 8003ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d015      	beq.n	8003f00 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6818      	ldr	r0, [r3, #0]
 8003ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eda:	6959      	ldr	r1, [r3, #20]
 8003edc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ede:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f004 feac 	bl	8008c42 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	441a      	add	r2, r3
 8003ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ef8:	2100      	movs	r1, #0
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f006 fc86 	bl	800a80c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003f0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f040 82bd 	bne.w	8004492 <PCD_EP_ISR_Handler+0x782>
 8003f18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f1c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f24:	f000 82b5 	beq.w	8004492 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	801a      	strh	r2, [r3, #0]
 8003f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f5e:	d91d      	bls.n	8003f9c <PCD_EP_ISR_Handler+0x28c>
 8003f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d102      	bne.n	8003f7a <PCD_EP_ISR_Handler+0x26a>
 8003f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f76:	3b01      	subs	r3, #1
 8003f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	029b      	lsls	r3, r3, #10
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	801a      	strh	r2, [r3, #0]
 8003f9a:	e026      	b.n	8003fea <PCD_EP_ISR_Handler+0x2da>
 8003f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <PCD_EP_ISR_Handler+0x2aa>
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	801a      	strh	r2, [r3, #0]
 8003fb8:	e017      	b.n	8003fea <PCD_EP_ISR_Handler+0x2da>
 8003fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <PCD_EP_ISR_Handler+0x2c4>
 8003fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	029b      	lsls	r3, r3, #10
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ffa:	827b      	strh	r3, [r7, #18]
 8003ffc:	8a7b      	ldrh	r3, [r7, #18]
 8003ffe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004002:	827b      	strh	r3, [r7, #18]
 8004004:	8a7b      	ldrh	r3, [r7, #18]
 8004006:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800400a:	827b      	strh	r3, [r7, #18]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	8a7b      	ldrh	r3, [r7, #18]
 8004012:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004016:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800401a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800401e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004022:	b29b      	uxth	r3, r3
 8004024:	8013      	strh	r3, [r2, #0]
 8004026:	e234      	b.n	8004492 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800403c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004040:	2b00      	cmp	r3, #0
 8004042:	f280 80fc 	bge.w	800423e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	b29a      	uxth	r2, r3
 8004058:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800405c:	4013      	ands	r3, r2
 800405e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004074:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004078:	b292      	uxth	r2, r2
 800407a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800407c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	4413      	add	r3, r2
 8004090:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004094:	7b1b      	ldrb	r3, [r3, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d125      	bne.n	80040e6 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4413      	add	r3, r2
 80040ae:	3306      	adds	r3, #6
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040c2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80040c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8092 	beq.w	80041f4 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d6:	6959      	ldr	r1, [r3, #20]
 80040d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040da:	88da      	ldrh	r2, [r3, #6]
 80040dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80040e0:	f004 fdaf 	bl	8008c42 <USB_ReadPMA>
 80040e4:	e086      	b.n	80041f4 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80040e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e8:	78db      	ldrb	r3, [r3, #3]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d10a      	bne.n	8004104 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80040ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80040f2:	461a      	mov	r2, r3
 80040f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f9d9 	bl	80044ae <HAL_PCD_EP_DB_Receive>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004102:	e077      	b.n	80041f4 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b29b      	uxth	r3, r3
 8004116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800411a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800411e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	441a      	add	r2, r3
 8004130:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004134:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004138:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800413c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004140:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004144:	b29b      	uxth	r3, r3
 8004146:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	b29b      	uxth	r3, r3
 800415a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d024      	beq.n	80041ac <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800416a:	b29b      	uxth	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4413      	add	r3, r2
 8004176:	3302      	adds	r3, #2
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800418a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800418e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004192:	2b00      	cmp	r3, #0
 8004194:	d02e      	beq.n	80041f4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800419c:	6959      	ldr	r1, [r3, #20]
 800419e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a0:	891a      	ldrh	r2, [r3, #8]
 80041a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041a6:	f004 fd4c 	bl	8008c42 <USB_ReadPMA>
 80041aa:	e023      	b.n	80041f4 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4413      	add	r3, r2
 80041c0:	3306      	adds	r3, #6
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041d4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80041d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d009      	beq.n	80041f4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e6:	6959      	ldr	r1, [r3, #20]
 80041e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ea:	895a      	ldrh	r2, [r3, #10]
 80041ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041f0:	f004 fd27 	bl	8008c42 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80041f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041fc:	441a      	add	r2, r3
 80041fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004200:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800420a:	441a      	add	r2, r3
 800420c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800420e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <PCD_EP_ISR_Handler+0x514>
 8004218:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800421c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	429a      	cmp	r2, r3
 8004222:	d206      	bcs.n	8004232 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	4619      	mov	r1, r3
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f006 faee 	bl	800a80c <HAL_PCD_DataOutStageCallback>
 8004230:	e005      	b.n	800423e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004238:	4618      	mov	r0, r3
 800423a:	f002 ffcd 	bl	80071d8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800423e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 8123 	beq.w	8004492 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800424c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	3310      	adds	r3, #16
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	4413      	add	r3, r2
 800425e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	461a      	mov	r2, r3
 8004266:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	b29b      	uxth	r3, r3
 8004272:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800427a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	441a      	add	r2, r3
 800428c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004298:	b29b      	uxth	r3, r3
 800429a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800429c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800429e:	78db      	ldrb	r3, [r3, #3]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	f040 80a2 	bne.w	80043ea <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80042a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a8:	2200      	movs	r2, #0
 80042aa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80042ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ae:	7b1b      	ldrb	r3, [r3, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8093 	beq.w	80043dc <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80042b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80042ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d046      	beq.n	8004350 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c4:	785b      	ldrb	r3, [r3, #1]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d126      	bne.n	8004318 <PCD_EP_ISR_Handler+0x608>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042d8:	b29b      	uxth	r3, r3
 80042da:	461a      	mov	r2, r3
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	4413      	add	r3, r2
 80042e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	011a      	lsls	r2, r3, #4
 80042e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ea:	4413      	add	r3, r2
 80042ec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042f0:	623b      	str	r3, [r7, #32]
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	801a      	strh	r2, [r3, #0]
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	b29b      	uxth	r3, r3
 8004308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004310:	b29a      	uxth	r2, r3
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	801a      	strh	r2, [r3, #0]
 8004316:	e061      	b.n	80043dc <PCD_EP_ISR_Handler+0x6cc>
 8004318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800431a:	785b      	ldrb	r3, [r3, #1]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d15d      	bne.n	80043dc <PCD_EP_ISR_Handler+0x6cc>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800432e:	b29b      	uxth	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004334:	4413      	add	r3, r2
 8004336:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	011a      	lsls	r2, r3, #4
 800433e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004340:	4413      	add	r3, r2
 8004342:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004346:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434a:	2200      	movs	r2, #0
 800434c:	801a      	strh	r2, [r3, #0]
 800434e:	e045      	b.n	80043dc <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d126      	bne.n	80043ac <PCD_EP_ISR_Handler+0x69c>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	637b      	str	r3, [r7, #52]	@ 0x34
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800436c:	b29b      	uxth	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004372:	4413      	add	r3, r2
 8004374:	637b      	str	r3, [r7, #52]	@ 0x34
 8004376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	011a      	lsls	r2, r3, #4
 800437c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437e:	4413      	add	r3, r2
 8004380:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004384:	633b      	str	r3, [r7, #48]	@ 0x30
 8004386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004390:	b29a      	uxth	r2, r3
 8004392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004394:	801a      	strh	r2, [r3, #0]
 8004396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b29b      	uxth	r3, r3
 800439c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a8:	801a      	strh	r2, [r3, #0]
 80043aa:	e017      	b.n	80043dc <PCD_EP_ISR_Handler+0x6cc>
 80043ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ae:	785b      	ldrb	r3, [r3, #1]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d113      	bne.n	80043dc <PCD_EP_ISR_Handler+0x6cc>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043bc:	b29b      	uxth	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043c2:	4413      	add	r3, r2
 80043c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	011a      	lsls	r2, r3, #4
 80043cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ce:	4413      	add	r3, r2
 80043d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d8:	2200      	movs	r2, #0
 80043da:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	4619      	mov	r1, r3
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f006 fa2d 	bl	800a842 <HAL_PCD_DataInStageCallback>
 80043e8:	e053      	b.n	8004492 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80043ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80043ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d146      	bne.n	8004484 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043fe:	b29b      	uxth	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4413      	add	r3, r2
 800440a:	3302      	adds	r3, #2
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6812      	ldr	r2, [r2, #0]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800441e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800442a:	429a      	cmp	r2, r3
 800442c:	d907      	bls.n	800443e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800442e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004436:	1ad2      	subs	r2, r2, r3
 8004438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800443a:	619a      	str	r2, [r3, #24]
 800443c:	e002      	b.n	8004444 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800443e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004440:	2200      	movs	r2, #0
 8004442:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800444c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	4619      	mov	r1, r3
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f006 f9f5 	bl	800a842 <HAL_PCD_DataInStageCallback>
 8004458:	e01b      	b.n	8004492 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800445a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004462:	441a      	add	r2, r3
 8004464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004466:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004470:	441a      	add	r2, r3
 8004472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004474:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800447c:	4618      	mov	r0, r3
 800447e:	f002 feab 	bl	80071d8 <USB_EPStartXfer>
 8004482:	e006      	b.n	8004492 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004484:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004488:	461a      	mov	r2, r3
 800448a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f91b 	bl	80046c8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800449a:	b29b      	uxth	r3, r3
 800449c:	b21b      	sxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f6ff ac3b 	blt.w	8003d1a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3758      	adds	r7, #88	@ 0x58
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b088      	sub	sp, #32
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	4613      	mov	r3, r2
 80044ba:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d07e      	beq.n	80045c4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	4413      	add	r3, r2
 80044da:	3302      	adds	r3, #2
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	6812      	ldr	r2, [r2, #0]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	699a      	ldr	r2, [r3, #24]
 80044f4:	8b7b      	ldrh	r3, [r7, #26]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d306      	bcc.n	8004508 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	8b7b      	ldrh	r3, [r7, #26]
 8004500:	1ad2      	subs	r2, r2, r3
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	619a      	str	r2, [r3, #24]
 8004506:	e002      	b.n	800450e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2200      	movs	r2, #0
 800450c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d123      	bne.n	800455e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	b29b      	uxth	r3, r3
 8004528:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800452c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004530:	833b      	strh	r3, [r7, #24]
 8004532:	8b3b      	ldrh	r3, [r7, #24]
 8004534:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004538:	833b      	strh	r3, [r7, #24]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	441a      	add	r2, r3
 8004548:	8b3b      	ldrh	r3, [r7, #24]
 800454a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800454e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800455a:	b29b      	uxth	r3, r3
 800455c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800455e:	88fb      	ldrh	r3, [r7, #6]
 8004560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01f      	beq.n	80045a8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	b29b      	uxth	r3, r3
 800457a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800457e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004582:	82fb      	strh	r3, [r7, #22]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	441a      	add	r2, r3
 8004592:	8afb      	ldrh	r3, [r7, #22]
 8004594:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004598:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800459c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80045a8:	8b7b      	ldrh	r3, [r7, #26]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 8087 	beq.w	80046be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6959      	ldr	r1, [r3, #20]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	891a      	ldrh	r2, [r3, #8]
 80045bc:	8b7b      	ldrh	r3, [r7, #26]
 80045be:	f004 fb40 	bl	8008c42 <USB_ReadPMA>
 80045c2:	e07c      	b.n	80046be <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4413      	add	r3, r2
 80045d8:	3306      	adds	r3, #6
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	8b7b      	ldrh	r3, [r7, #26]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d306      	bcc.n	8004606 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	8b7b      	ldrh	r3, [r7, #26]
 80045fe:	1ad2      	subs	r2, r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	619a      	str	r2, [r3, #24]
 8004604:	e002      	b.n	800460c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2200      	movs	r2, #0
 800460a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d123      	bne.n	800465c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	b29b      	uxth	r3, r3
 8004626:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800462a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800462e:	83fb      	strh	r3, [r7, #30]
 8004630:	8bfb      	ldrh	r3, [r7, #30]
 8004632:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004636:	83fb      	strh	r3, [r7, #30]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	441a      	add	r2, r3
 8004646:	8bfb      	ldrh	r3, [r7, #30]
 8004648:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800464c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004650:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004658:	b29b      	uxth	r3, r3
 800465a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d11f      	bne.n	80046a6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800467c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004680:	83bb      	strh	r3, [r7, #28]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	441a      	add	r2, r3
 8004690:	8bbb      	ldrh	r3, [r7, #28]
 8004692:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004696:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800469a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800469e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80046a6:	8b7b      	ldrh	r3, [r7, #26]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	6959      	ldr	r1, [r3, #20]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	895a      	ldrh	r2, [r3, #10]
 80046b8:	8b7b      	ldrh	r3, [r7, #26]
 80046ba:	f004 fac2 	bl	8008c42 <USB_ReadPMA>
    }
  }

  return count;
 80046be:	8b7b      	ldrh	r3, [r7, #26]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3720      	adds	r7, #32
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b0a4      	sub	sp, #144	@ 0x90
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	4613      	mov	r3, r2
 80046d4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80046d6:	88fb      	ldrh	r3, [r7, #6]
 80046d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 81dd 	beq.w	8004a9c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	4413      	add	r3, r2
 80046f6:	3302      	adds	r3, #2
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	6812      	ldr	r2, [r2, #0]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800470a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	699a      	ldr	r2, [r3, #24]
 8004712:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004716:	429a      	cmp	r2, r3
 8004718:	d907      	bls.n	800472a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004722:	1ad2      	subs	r2, r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	619a      	str	r2, [r3, #24]
 8004728:	e002      	b.n	8004730 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2200      	movs	r2, #0
 800472e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	f040 80b9 	bne.w	80048ac <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	785b      	ldrb	r3, [r3, #1]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d126      	bne.n	8004790 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004750:	b29b      	uxth	r3, r3
 8004752:	461a      	mov	r2, r3
 8004754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004756:	4413      	add	r3, r2
 8004758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	011a      	lsls	r2, r3, #4
 8004760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004762:	4413      	add	r3, r2
 8004764:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28
 800476a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	b29b      	uxth	r3, r3
 8004770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004774:	b29a      	uxth	r2, r3
 8004776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004778:	801a      	strh	r2, [r3, #0]
 800477a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004788:	b29a      	uxth	r2, r3
 800478a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478c:	801a      	strh	r2, [r3, #0]
 800478e:	e01a      	b.n	80047c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	785b      	ldrb	r3, [r3, #1]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d116      	bne.n	80047c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	637b      	str	r3, [r7, #52]	@ 0x34
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	461a      	mov	r2, r3
 80047aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ac:	4413      	add	r3, r2
 80047ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	011a      	lsls	r2, r3, #4
 80047b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b8:	4413      	add	r3, r2
 80047ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047be:	633b      	str	r3, [r7, #48]	@ 0x30
 80047c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c2:	2200      	movs	r2, #0
 80047c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	785b      	ldrb	r3, [r3, #1]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d126      	bne.n	8004822 <HAL_PCD_EP_DB_Transmit+0x15a>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	461a      	mov	r2, r3
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	4413      	add	r3, r2
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	011a      	lsls	r2, r3, #4
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	4413      	add	r3, r2
 80047f6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047fa:	61bb      	str	r3, [r7, #24]
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004806:	b29a      	uxth	r2, r3
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	801a      	strh	r2, [r3, #0]
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29b      	uxth	r3, r3
 8004812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800481a:	b29a      	uxth	r2, r3
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	801a      	strh	r2, [r3, #0]
 8004820:	e017      	b.n	8004852 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	785b      	ldrb	r3, [r3, #1]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d113      	bne.n	8004852 <HAL_PCD_EP_DB_Transmit+0x18a>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004832:	b29b      	uxth	r3, r3
 8004834:	461a      	mov	r2, r3
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	4413      	add	r3, r2
 800483a:	627b      	str	r3, [r7, #36]	@ 0x24
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	011a      	lsls	r2, r3, #4
 8004842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004844:	4413      	add	r3, r2
 8004846:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800484a:	623b      	str	r3, [r7, #32]
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	2200      	movs	r2, #0
 8004850:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	4619      	mov	r1, r3
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f005 fff2 	bl	800a842 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 82fc 	beq.w	8004e62 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	b29b      	uxth	r3, r3
 800487c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004884:	82fb      	strh	r3, [r7, #22]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	441a      	add	r2, r3
 8004894:	8afb      	ldrh	r3, [r7, #22]
 8004896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800489a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800489e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	8013      	strh	r3, [r2, #0]
 80048aa:	e2da      	b.n	8004e62 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d021      	beq.n	80048fa <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	441a      	add	r2, r3
 80048e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80048e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004900:	2b01      	cmp	r3, #1
 8004902:	f040 82ae 	bne.w	8004e62 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800490e:	441a      	add	r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	69da      	ldr	r2, [r3, #28]
 8004918:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800491c:	441a      	add	r2, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	6a1a      	ldr	r2, [r3, #32]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	429a      	cmp	r2, r3
 800492c:	d30b      	bcc.n	8004946 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	6a1a      	ldr	r2, [r3, #32]
 800493a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800493e:	1ad2      	subs	r2, r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	621a      	str	r2, [r3, #32]
 8004944:	e017      	b.n	8004976 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d108      	bne.n	8004960 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800494e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004952:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800495e:	e00a      	b.n	8004976 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2200      	movs	r2, #0
 8004974:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	785b      	ldrb	r3, [r3, #1]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d165      	bne.n	8004a4a <HAL_PCD_EP_DB_Transmit+0x382>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800498c:	b29b      	uxth	r3, r3
 800498e:	461a      	mov	r2, r3
 8004990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004992:	4413      	add	r3, r2
 8004994:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	011a      	lsls	r2, r3, #4
 800499c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800499e:	4413      	add	r3, r2
 80049a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80049a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b4:	801a      	strh	r2, [r3, #0]
 80049b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80049bc:	d91d      	bls.n	80049fa <HAL_PCD_EP_DB_Transmit+0x332>
 80049be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d102      	bne.n	80049d8 <HAL_PCD_EP_DB_Transmit+0x310>
 80049d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049d4:	3b01      	subs	r3, #1
 80049d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	b29a      	uxth	r2, r3
 80049de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	029b      	lsls	r3, r3, #10
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	4313      	orrs	r3, r2
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f6:	801a      	strh	r2, [r3, #0]
 80049f8:	e044      	b.n	8004a84 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80049fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10a      	bne.n	8004a18 <HAL_PCD_EP_DB_Transmit+0x350>
 8004a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a14:	801a      	strh	r2, [r3, #0]
 8004a16:	e035      	b.n	8004a84 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a1c:	085b      	lsrs	r3, r3, #1
 8004a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004a2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a2e:	3301      	adds	r3, #1
 8004a30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	029b      	lsls	r3, r3, #10
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	4313      	orrs	r3, r2
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a46:	801a      	strh	r2, [r3, #0]
 8004a48:	e01c      	b.n	8004a84 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	785b      	ldrb	r3, [r3, #1]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d118      	bne.n	8004a84 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a66:	4413      	add	r3, r2
 8004a68:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	011a      	lsls	r2, r3, #4
 8004a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a72:	4413      	add	r3, r2
 8004a74:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a78:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a82:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	6959      	ldr	r1, [r3, #20]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	891a      	ldrh	r2, [r3, #8]
 8004a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	f004 f88e 	bl	8008bb6 <USB_WritePMA>
 8004a9a:	e1e2      	b.n	8004e62 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	4413      	add	r3, r2
 8004ab0:	3306      	adds	r3, #6
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ac4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	699a      	ldr	r2, [r3, #24]
 8004acc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d307      	bcc.n	8004ae4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	699a      	ldr	r2, [r3, #24]
 8004ad8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004adc:	1ad2      	subs	r2, r2, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	619a      	str	r2, [r3, #24]
 8004ae2:	e002      	b.n	8004aea <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f040 80c0 	bne.w	8004c74 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	785b      	ldrb	r3, [r3, #1]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d126      	bne.n	8004b4a <HAL_PCD_EP_DB_Transmit+0x482>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b10:	4413      	add	r3, r2
 8004b12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	011a      	lsls	r2, r3, #4
 8004b1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b32:	801a      	strh	r2, [r3, #0]
 8004b34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b46:	801a      	strh	r2, [r3, #0]
 8004b48:	e01a      	b.n	8004b80 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	785b      	ldrb	r3, [r3, #1]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d116      	bne.n	8004b80 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	461a      	mov	r2, r3
 8004b64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b66:	4413      	add	r3, r2
 8004b68:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	011a      	lsls	r2, r3, #4
 8004b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b72:	4413      	add	r3, r2
 8004b74:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b78:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d12b      	bne.n	8004be6 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ba2:	4413      	add	r3, r2
 8004ba4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	011a      	lsls	r2, r3, #4
 8004bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bae:	4413      	add	r3, r2
 8004bb0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004bb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bca:	801a      	strh	r2, [r3, #0]
 8004bcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004be2:	801a      	strh	r2, [r3, #0]
 8004be4:	e017      	b.n	8004c16 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	785b      	ldrb	r3, [r3, #1]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d113      	bne.n	8004c16 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bfc:	4413      	add	r3, r2
 8004bfe:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	011a      	lsls	r2, r3, #4
 8004c06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c08:	4413      	add	r3, r2
 8004c0a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c12:	2200      	movs	r2, #0
 8004c14:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f005 fe10 	bl	800a842 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f040 811a 	bne.w	8004e62 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c48:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	441a      	add	r2, r3
 8004c5a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004c5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	8013      	strh	r3, [r2, #0]
 8004c72:	e0f6      	b.n	8004e62 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c74:	88fb      	ldrh	r3, [r7, #6]
 8004c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d121      	bne.n	8004cc2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c98:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	441a      	add	r2, r3
 8004caa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004cae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	f040 80ca 	bne.w	8004e62 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	695a      	ldr	r2, [r3, #20]
 8004cd2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cd6:	441a      	add	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ce4:	441a      	add	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	6a1a      	ldr	r2, [r3, #32]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d30b      	bcc.n	8004d0e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	6a1a      	ldr	r2, [r3, #32]
 8004d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d06:	1ad2      	subs	r2, r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	621a      	str	r2, [r3, #32]
 8004d0c:	e017      	b.n	8004d3e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d108      	bne.n	8004d28 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004d16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004d26:	e00a      	b.n	8004d3e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2200      	movs	r2, #0
 8004d34:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d165      	bne.n	8004e18 <HAL_PCD_EP_DB_Transmit+0x750>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d60:	4413      	add	r3, r2
 8004d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	011a      	lsls	r2, r3, #4
 8004d6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d82:	801a      	strh	r2, [r3, #0]
 8004d84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d88:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d8a:	d91d      	bls.n	8004dc8 <HAL_PCD_EP_DB_Transmit+0x700>
 8004d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d98:	f003 031f 	and.w	r3, r3, #31
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d102      	bne.n	8004da6 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004da0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004da2:	3b01      	subs	r3, #1
 8004da4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004da6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	029b      	lsls	r3, r3, #10
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	4313      	orrs	r3, r2
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dc4:	801a      	strh	r2, [r3, #0]
 8004dc6:	e041      	b.n	8004e4c <HAL_PCD_EP_DB_Transmit+0x784>
 8004dc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10a      	bne.n	8004de6 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004dd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004de2:	801a      	strh	r2, [r3, #0]
 8004de4:	e032      	b.n	8004e4c <HAL_PCD_EP_DB_Transmit+0x784>
 8004de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dea:	085b      	lsrs	r3, r3, #1
 8004dec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_PCD_EP_DB_Transmit+0x738>
 8004dfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	029b      	lsls	r3, r3, #10
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e14:	801a      	strh	r2, [r3, #0]
 8004e16:	e019      	b.n	8004e4c <HAL_PCD_EP_DB_Transmit+0x784>
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	785b      	ldrb	r3, [r3, #1]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d115      	bne.n	8004e4c <HAL_PCD_EP_DB_Transmit+0x784>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e2e:	4413      	add	r3, r2
 8004e30:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	011a      	lsls	r2, r3, #4
 8004e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e40:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e4a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	6959      	ldr	r1, [r3, #20]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	895a      	ldrh	r2, [r3, #10]
 8004e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	f003 feaa 	bl	8008bb6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e7c:	82bb      	strh	r3, [r7, #20]
 8004e7e:	8abb      	ldrh	r3, [r7, #20]
 8004e80:	f083 0310 	eor.w	r3, r3, #16
 8004e84:	82bb      	strh	r3, [r7, #20]
 8004e86:	8abb      	ldrh	r3, [r7, #20]
 8004e88:	f083 0320 	eor.w	r3, r3, #32
 8004e8c:	82bb      	strh	r3, [r7, #20]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	441a      	add	r2, r3
 8004e9c:	8abb      	ldrh	r3, [r7, #20]
 8004e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3790      	adds	r7, #144	@ 0x90
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	607b      	str	r3, [r7, #4]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	817b      	strh	r3, [r7, #10]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004ece:	897b      	ldrh	r3, [r7, #10]
 8004ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00b      	beq.n	8004ef2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eda:	897b      	ldrh	r3, [r7, #10]
 8004edc:	f003 0207 	and.w	r2, r3, #7
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	3310      	adds	r3, #16
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4413      	add	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e009      	b.n	8004f06 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ef2:	897a      	ldrh	r2, [r7, #10]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4413      	add	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f06:	893b      	ldrh	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d107      	bne.n	8004f1c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	80da      	strh	r2, [r3, #6]
 8004f1a:	e00b      	b.n	8004f34 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	0c1b      	lsrs	r3, r3, #16
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr

08004f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e272      	b.n	8005438 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 8087 	beq.w	800506e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f60:	4b92      	ldr	r3, [pc, #584]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f003 030c 	and.w	r3, r3, #12
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d00c      	beq.n	8004f86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f6c:	4b8f      	ldr	r3, [pc, #572]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f003 030c 	and.w	r3, r3, #12
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d112      	bne.n	8004f9e <HAL_RCC_OscConfig+0x5e>
 8004f78:	4b8c      	ldr	r3, [pc, #560]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f84:	d10b      	bne.n	8004f9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f86:	4b89      	ldr	r3, [pc, #548]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d06c      	beq.n	800506c <HAL_RCC_OscConfig+0x12c>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d168      	bne.n	800506c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e24c      	b.n	8005438 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa6:	d106      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x76>
 8004fa8:	4b80      	ldr	r3, [pc, #512]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a7f      	ldr	r2, [pc, #508]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8004fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	e02e      	b.n	8005014 <HAL_RCC_OscConfig+0xd4>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10c      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x98>
 8004fbe:	4b7b      	ldr	r3, [pc, #492]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a7a      	ldr	r2, [pc, #488]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8004fc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	4b78      	ldr	r3, [pc, #480]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a77      	ldr	r2, [pc, #476]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8004fd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	e01d      	b.n	8005014 <HAL_RCC_OscConfig+0xd4>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fe0:	d10c      	bne.n	8004ffc <HAL_RCC_OscConfig+0xbc>
 8004fe2:	4b72      	ldr	r3, [pc, #456]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a71      	ldr	r2, [pc, #452]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8004fe8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	4b6f      	ldr	r3, [pc, #444]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a6e      	ldr	r2, [pc, #440]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8004ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	e00b      	b.n	8005014 <HAL_RCC_OscConfig+0xd4>
 8004ffc:	4b6b      	ldr	r3, [pc, #428]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a6a      	ldr	r2, [pc, #424]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8005002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	4b68      	ldr	r3, [pc, #416]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a67      	ldr	r2, [pc, #412]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 800500e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005012:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d013      	beq.n	8005044 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501c:	f7fd fee4 	bl	8002de8 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005024:	f7fd fee0 	bl	8002de8 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b64      	cmp	r3, #100	@ 0x64
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e200      	b.n	8005438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005036:	4b5d      	ldr	r3, [pc, #372]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0f0      	beq.n	8005024 <HAL_RCC_OscConfig+0xe4>
 8005042:	e014      	b.n	800506e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fd fed0 	bl	8002de8 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800504c:	f7fd fecc 	bl	8002de8 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b64      	cmp	r3, #100	@ 0x64
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e1ec      	b.n	8005438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800505e:	4b53      	ldr	r3, [pc, #332]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x10c>
 800506a:	e000      	b.n	800506e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800506c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d063      	beq.n	8005142 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800507a:	4b4c      	ldr	r3, [pc, #304]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f003 030c 	and.w	r3, r3, #12
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00b      	beq.n	800509e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005086:	4b49      	ldr	r3, [pc, #292]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f003 030c 	and.w	r3, r3, #12
 800508e:	2b08      	cmp	r3, #8
 8005090:	d11c      	bne.n	80050cc <HAL_RCC_OscConfig+0x18c>
 8005092:	4b46      	ldr	r3, [pc, #280]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d116      	bne.n	80050cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800509e:	4b43      	ldr	r3, [pc, #268]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <HAL_RCC_OscConfig+0x176>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d001      	beq.n	80050b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e1c0      	b.n	8005438 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b6:	4b3d      	ldr	r3, [pc, #244]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	4939      	ldr	r1, [pc, #228]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ca:	e03a      	b.n	8005142 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d020      	beq.n	8005116 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050d4:	4b36      	ldr	r3, [pc, #216]	@ (80051b0 <HAL_RCC_OscConfig+0x270>)
 80050d6:	2201      	movs	r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050da:	f7fd fe85 	bl	8002de8 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050e2:	f7fd fe81 	bl	8002de8 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e1a1      	b.n	8005438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f4:	4b2d      	ldr	r3, [pc, #180]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0f0      	beq.n	80050e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005100:	4b2a      	ldr	r3, [pc, #168]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	4927      	ldr	r1, [pc, #156]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8005110:	4313      	orrs	r3, r2
 8005112:	600b      	str	r3, [r1, #0]
 8005114:	e015      	b.n	8005142 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005116:	4b26      	ldr	r3, [pc, #152]	@ (80051b0 <HAL_RCC_OscConfig+0x270>)
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511c:	f7fd fe64 	bl	8002de8 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005124:	f7fd fe60 	bl	8002de8 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e180      	b.n	8005438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005136:	4b1d      	ldr	r3, [pc, #116]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f0      	bne.n	8005124 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d03a      	beq.n	80051c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d019      	beq.n	800518a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005156:	4b17      	ldr	r3, [pc, #92]	@ (80051b4 <HAL_RCC_OscConfig+0x274>)
 8005158:	2201      	movs	r2, #1
 800515a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515c:	f7fd fe44 	bl	8002de8 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005164:	f7fd fe40 	bl	8002de8 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e160      	b.n	8005438 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005176:	4b0d      	ldr	r3, [pc, #52]	@ (80051ac <HAL_RCC_OscConfig+0x26c>)
 8005178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005182:	2001      	movs	r0, #1
 8005184:	f000 face 	bl	8005724 <RCC_Delay>
 8005188:	e01c      	b.n	80051c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800518a:	4b0a      	ldr	r3, [pc, #40]	@ (80051b4 <HAL_RCC_OscConfig+0x274>)
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005190:	f7fd fe2a 	bl	8002de8 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005196:	e00f      	b.n	80051b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005198:	f7fd fe26 	bl	8002de8 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d908      	bls.n	80051b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e146      	b.n	8005438 <HAL_RCC_OscConfig+0x4f8>
 80051aa:	bf00      	nop
 80051ac:	40021000 	.word	0x40021000
 80051b0:	42420000 	.word	0x42420000
 80051b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b8:	4b92      	ldr	r3, [pc, #584]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 80051ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e9      	bne.n	8005198 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 80a6 	beq.w	800531e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051d2:	2300      	movs	r3, #0
 80051d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051d6:	4b8b      	ldr	r3, [pc, #556]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10d      	bne.n	80051fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051e2:	4b88      	ldr	r3, [pc, #544]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	4a87      	ldr	r2, [pc, #540]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 80051e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ec:	61d3      	str	r3, [r2, #28]
 80051ee:	4b85      	ldr	r3, [pc, #532]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f6:	60bb      	str	r3, [r7, #8]
 80051f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051fa:	2301      	movs	r3, #1
 80051fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051fe:	4b82      	ldr	r3, [pc, #520]	@ (8005408 <HAL_RCC_OscConfig+0x4c8>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005206:	2b00      	cmp	r3, #0
 8005208:	d118      	bne.n	800523c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800520a:	4b7f      	ldr	r3, [pc, #508]	@ (8005408 <HAL_RCC_OscConfig+0x4c8>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a7e      	ldr	r2, [pc, #504]	@ (8005408 <HAL_RCC_OscConfig+0x4c8>)
 8005210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005216:	f7fd fde7 	bl	8002de8 <HAL_GetTick>
 800521a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521c:	e008      	b.n	8005230 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800521e:	f7fd fde3 	bl	8002de8 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b64      	cmp	r3, #100	@ 0x64
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e103      	b.n	8005438 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005230:	4b75      	ldr	r3, [pc, #468]	@ (8005408 <HAL_RCC_OscConfig+0x4c8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0f0      	beq.n	800521e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d106      	bne.n	8005252 <HAL_RCC_OscConfig+0x312>
 8005244:	4b6f      	ldr	r3, [pc, #444]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	4a6e      	ldr	r2, [pc, #440]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 800524a:	f043 0301 	orr.w	r3, r3, #1
 800524e:	6213      	str	r3, [r2, #32]
 8005250:	e02d      	b.n	80052ae <HAL_RCC_OscConfig+0x36e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10c      	bne.n	8005274 <HAL_RCC_OscConfig+0x334>
 800525a:	4b6a      	ldr	r3, [pc, #424]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	4a69      	ldr	r2, [pc, #420]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 8005260:	f023 0301 	bic.w	r3, r3, #1
 8005264:	6213      	str	r3, [r2, #32]
 8005266:	4b67      	ldr	r3, [pc, #412]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	4a66      	ldr	r2, [pc, #408]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 800526c:	f023 0304 	bic.w	r3, r3, #4
 8005270:	6213      	str	r3, [r2, #32]
 8005272:	e01c      	b.n	80052ae <HAL_RCC_OscConfig+0x36e>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	2b05      	cmp	r3, #5
 800527a:	d10c      	bne.n	8005296 <HAL_RCC_OscConfig+0x356>
 800527c:	4b61      	ldr	r3, [pc, #388]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	4a60      	ldr	r2, [pc, #384]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 8005282:	f043 0304 	orr.w	r3, r3, #4
 8005286:	6213      	str	r3, [r2, #32]
 8005288:	4b5e      	ldr	r3, [pc, #376]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	4a5d      	ldr	r2, [pc, #372]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 800528e:	f043 0301 	orr.w	r3, r3, #1
 8005292:	6213      	str	r3, [r2, #32]
 8005294:	e00b      	b.n	80052ae <HAL_RCC_OscConfig+0x36e>
 8005296:	4b5b      	ldr	r3, [pc, #364]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	4a5a      	ldr	r2, [pc, #360]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 800529c:	f023 0301 	bic.w	r3, r3, #1
 80052a0:	6213      	str	r3, [r2, #32]
 80052a2:	4b58      	ldr	r3, [pc, #352]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	4a57      	ldr	r2, [pc, #348]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 80052a8:	f023 0304 	bic.w	r3, r3, #4
 80052ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d015      	beq.n	80052e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052b6:	f7fd fd97 	bl	8002de8 <HAL_GetTick>
 80052ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052bc:	e00a      	b.n	80052d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052be:	f7fd fd93 	bl	8002de8 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e0b1      	b.n	8005438 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d4:	4b4b      	ldr	r3, [pc, #300]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0ee      	beq.n	80052be <HAL_RCC_OscConfig+0x37e>
 80052e0:	e014      	b.n	800530c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052e2:	f7fd fd81 	bl	8002de8 <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052e8:	e00a      	b.n	8005300 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ea:	f7fd fd7d 	bl	8002de8 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d901      	bls.n	8005300 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e09b      	b.n	8005438 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005300:	4b40      	ldr	r3, [pc, #256]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1ee      	bne.n	80052ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800530c:	7dfb      	ldrb	r3, [r7, #23]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d105      	bne.n	800531e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005312:	4b3c      	ldr	r3, [pc, #240]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	4a3b      	ldr	r2, [pc, #236]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 8005318:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800531c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 8087 	beq.w	8005436 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005328:	4b36      	ldr	r3, [pc, #216]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f003 030c 	and.w	r3, r3, #12
 8005330:	2b08      	cmp	r3, #8
 8005332:	d061      	beq.n	80053f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	2b02      	cmp	r3, #2
 800533a:	d146      	bne.n	80053ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800533c:	4b33      	ldr	r3, [pc, #204]	@ (800540c <HAL_RCC_OscConfig+0x4cc>)
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005342:	f7fd fd51 	bl	8002de8 <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800534a:	f7fd fd4d 	bl	8002de8 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e06d      	b.n	8005438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800535c:	4b29      	ldr	r3, [pc, #164]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1f0      	bne.n	800534a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005370:	d108      	bne.n	8005384 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005372:	4b24      	ldr	r3, [pc, #144]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	4921      	ldr	r1, [pc, #132]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 8005380:	4313      	orrs	r3, r2
 8005382:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005384:	4b1f      	ldr	r3, [pc, #124]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a19      	ldr	r1, [r3, #32]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005394:	430b      	orrs	r3, r1
 8005396:	491b      	ldr	r1, [pc, #108]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 8005398:	4313      	orrs	r3, r2
 800539a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800539c:	4b1b      	ldr	r3, [pc, #108]	@ (800540c <HAL_RCC_OscConfig+0x4cc>)
 800539e:	2201      	movs	r2, #1
 80053a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a2:	f7fd fd21 	bl	8002de8 <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053aa:	f7fd fd1d 	bl	8002de8 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e03d      	b.n	8005438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053bc:	4b11      	ldr	r3, [pc, #68]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f0      	beq.n	80053aa <HAL_RCC_OscConfig+0x46a>
 80053c8:	e035      	b.n	8005436 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ca:	4b10      	ldr	r3, [pc, #64]	@ (800540c <HAL_RCC_OscConfig+0x4cc>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d0:	f7fd fd0a 	bl	8002de8 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d8:	f7fd fd06 	bl	8002de8 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e026      	b.n	8005438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053ea:	4b06      	ldr	r3, [pc, #24]	@ (8005404 <HAL_RCC_OscConfig+0x4c4>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x498>
 80053f6:	e01e      	b.n	8005436 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d107      	bne.n	8005410 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e019      	b.n	8005438 <HAL_RCC_OscConfig+0x4f8>
 8005404:	40021000 	.word	0x40021000
 8005408:	40007000 	.word	0x40007000
 800540c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005410:	4b0b      	ldr	r3, [pc, #44]	@ (8005440 <HAL_RCC_OscConfig+0x500>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	429a      	cmp	r2, r3
 8005422:	d106      	bne.n	8005432 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542e:	429a      	cmp	r2, r3
 8005430:	d001      	beq.n	8005436 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40021000 	.word	0x40021000

08005444 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e0d0      	b.n	80055fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005458:	4b6a      	ldr	r3, [pc, #424]	@ (8005604 <HAL_RCC_ClockConfig+0x1c0>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d910      	bls.n	8005488 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005466:	4b67      	ldr	r3, [pc, #412]	@ (8005604 <HAL_RCC_ClockConfig+0x1c0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f023 0207 	bic.w	r2, r3, #7
 800546e:	4965      	ldr	r1, [pc, #404]	@ (8005604 <HAL_RCC_ClockConfig+0x1c0>)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	4313      	orrs	r3, r2
 8005474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005476:	4b63      	ldr	r3, [pc, #396]	@ (8005604 <HAL_RCC_ClockConfig+0x1c0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	429a      	cmp	r2, r3
 8005482:	d001      	beq.n	8005488 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e0b8      	b.n	80055fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d020      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054a0:	4b59      	ldr	r3, [pc, #356]	@ (8005608 <HAL_RCC_ClockConfig+0x1c4>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	4a58      	ldr	r2, [pc, #352]	@ (8005608 <HAL_RCC_ClockConfig+0x1c4>)
 80054a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80054aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0308 	and.w	r3, r3, #8
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054b8:	4b53      	ldr	r3, [pc, #332]	@ (8005608 <HAL_RCC_ClockConfig+0x1c4>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	4a52      	ldr	r2, [pc, #328]	@ (8005608 <HAL_RCC_ClockConfig+0x1c4>)
 80054be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80054c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054c4:	4b50      	ldr	r3, [pc, #320]	@ (8005608 <HAL_RCC_ClockConfig+0x1c4>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	494d      	ldr	r1, [pc, #308]	@ (8005608 <HAL_RCC_ClockConfig+0x1c4>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d040      	beq.n	8005564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d107      	bne.n	80054fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ea:	4b47      	ldr	r3, [pc, #284]	@ (8005608 <HAL_RCC_ClockConfig+0x1c4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d115      	bne.n	8005522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e07f      	b.n	80055fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d107      	bne.n	8005512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005502:	4b41      	ldr	r3, [pc, #260]	@ (8005608 <HAL_RCC_ClockConfig+0x1c4>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d109      	bne.n	8005522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e073      	b.n	80055fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005512:	4b3d      	ldr	r3, [pc, #244]	@ (8005608 <HAL_RCC_ClockConfig+0x1c4>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e06b      	b.n	80055fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005522:	4b39      	ldr	r3, [pc, #228]	@ (8005608 <HAL_RCC_ClockConfig+0x1c4>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f023 0203 	bic.w	r2, r3, #3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	4936      	ldr	r1, [pc, #216]	@ (8005608 <HAL_RCC_ClockConfig+0x1c4>)
 8005530:	4313      	orrs	r3, r2
 8005532:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005534:	f7fd fc58 	bl	8002de8 <HAL_GetTick>
 8005538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553a:	e00a      	b.n	8005552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800553c:	f7fd fc54 	bl	8002de8 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800554a:	4293      	cmp	r3, r2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e053      	b.n	80055fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005552:	4b2d      	ldr	r3, [pc, #180]	@ (8005608 <HAL_RCC_ClockConfig+0x1c4>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f003 020c 	and.w	r2, r3, #12
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	429a      	cmp	r2, r3
 8005562:	d1eb      	bne.n	800553c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005564:	4b27      	ldr	r3, [pc, #156]	@ (8005604 <HAL_RCC_ClockConfig+0x1c0>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d210      	bcs.n	8005594 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005572:	4b24      	ldr	r3, [pc, #144]	@ (8005604 <HAL_RCC_ClockConfig+0x1c0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f023 0207 	bic.w	r2, r3, #7
 800557a:	4922      	ldr	r1, [pc, #136]	@ (8005604 <HAL_RCC_ClockConfig+0x1c0>)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	4313      	orrs	r3, r2
 8005580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005582:	4b20      	ldr	r3, [pc, #128]	@ (8005604 <HAL_RCC_ClockConfig+0x1c0>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d001      	beq.n	8005594 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e032      	b.n	80055fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d008      	beq.n	80055b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055a0:	4b19      	ldr	r3, [pc, #100]	@ (8005608 <HAL_RCC_ClockConfig+0x1c4>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	4916      	ldr	r1, [pc, #88]	@ (8005608 <HAL_RCC_ClockConfig+0x1c4>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d009      	beq.n	80055d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055be:	4b12      	ldr	r3, [pc, #72]	@ (8005608 <HAL_RCC_ClockConfig+0x1c4>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	490e      	ldr	r1, [pc, #56]	@ (8005608 <HAL_RCC_ClockConfig+0x1c4>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055d2:	f000 f821 	bl	8005618 <HAL_RCC_GetSysClockFreq>
 80055d6:	4602      	mov	r2, r0
 80055d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005608 <HAL_RCC_ClockConfig+0x1c4>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	091b      	lsrs	r3, r3, #4
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	490a      	ldr	r1, [pc, #40]	@ (800560c <HAL_RCC_ClockConfig+0x1c8>)
 80055e4:	5ccb      	ldrb	r3, [r1, r3]
 80055e6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ea:	4a09      	ldr	r2, [pc, #36]	@ (8005610 <HAL_RCC_ClockConfig+0x1cc>)
 80055ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055ee:	4b09      	ldr	r3, [pc, #36]	@ (8005614 <HAL_RCC_ClockConfig+0x1d0>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fd fbb6 	bl	8002d64 <HAL_InitTick>

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	40022000 	.word	0x40022000
 8005608:	40021000 	.word	0x40021000
 800560c:	0800b790 	.word	0x0800b790
 8005610:	20000000 	.word	0x20000000
 8005614:	2000001c 	.word	0x2000001c

08005618 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	2300      	movs	r3, #0
 8005624:	60bb      	str	r3, [r7, #8]
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	2300      	movs	r3, #0
 800562c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005632:	4b1e      	ldr	r3, [pc, #120]	@ (80056ac <HAL_RCC_GetSysClockFreq+0x94>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f003 030c 	and.w	r3, r3, #12
 800563e:	2b04      	cmp	r3, #4
 8005640:	d002      	beq.n	8005648 <HAL_RCC_GetSysClockFreq+0x30>
 8005642:	2b08      	cmp	r3, #8
 8005644:	d003      	beq.n	800564e <HAL_RCC_GetSysClockFreq+0x36>
 8005646:	e027      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005648:	4b19      	ldr	r3, [pc, #100]	@ (80056b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800564a:	613b      	str	r3, [r7, #16]
      break;
 800564c:	e027      	b.n	800569e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	0c9b      	lsrs	r3, r3, #18
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	4a17      	ldr	r2, [pc, #92]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005658:	5cd3      	ldrb	r3, [r2, r3]
 800565a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d010      	beq.n	8005688 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005666:	4b11      	ldr	r3, [pc, #68]	@ (80056ac <HAL_RCC_GetSysClockFreq+0x94>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	0c5b      	lsrs	r3, r3, #17
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	4a11      	ldr	r2, [pc, #68]	@ (80056b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005672:	5cd3      	ldrb	r3, [r2, r3]
 8005674:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a0d      	ldr	r2, [pc, #52]	@ (80056b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800567a:	fb03 f202 	mul.w	r2, r3, r2
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	fbb2 f3f3 	udiv	r3, r2, r3
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	e004      	b.n	8005692 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a0c      	ldr	r2, [pc, #48]	@ (80056bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800568c:	fb02 f303 	mul.w	r3, r2, r3
 8005690:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	613b      	str	r3, [r7, #16]
      break;
 8005696:	e002      	b.n	800569e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005698:	4b05      	ldr	r3, [pc, #20]	@ (80056b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800569a:	613b      	str	r3, [r7, #16]
      break;
 800569c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800569e:	693b      	ldr	r3, [r7, #16]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	40021000 	.word	0x40021000
 80056b0:	007a1200 	.word	0x007a1200
 80056b4:	0800b7a8 	.word	0x0800b7a8
 80056b8:	0800b7b8 	.word	0x0800b7b8
 80056bc:	003d0900 	.word	0x003d0900

080056c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056c4:	4b02      	ldr	r3, [pc, #8]	@ (80056d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80056c6:	681b      	ldr	r3, [r3, #0]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr
 80056d0:	20000000 	.word	0x20000000

080056d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056d8:	f7ff fff2 	bl	80056c0 <HAL_RCC_GetHCLKFreq>
 80056dc:	4602      	mov	r2, r0
 80056de:	4b05      	ldr	r3, [pc, #20]	@ (80056f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	0a1b      	lsrs	r3, r3, #8
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	4903      	ldr	r1, [pc, #12]	@ (80056f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056ea:	5ccb      	ldrb	r3, [r1, r3]
 80056ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40021000 	.word	0x40021000
 80056f8:	0800b7a0 	.word	0x0800b7a0

080056fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005700:	f7ff ffde 	bl	80056c0 <HAL_RCC_GetHCLKFreq>
 8005704:	4602      	mov	r2, r0
 8005706:	4b05      	ldr	r3, [pc, #20]	@ (800571c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	0adb      	lsrs	r3, r3, #11
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	4903      	ldr	r1, [pc, #12]	@ (8005720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005712:	5ccb      	ldrb	r3, [r1, r3]
 8005714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005718:	4618      	mov	r0, r3
 800571a:	bd80      	pop	{r7, pc}
 800571c:	40021000 	.word	0x40021000
 8005720:	0800b7a0 	.word	0x0800b7a0

08005724 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800572c:	4b0a      	ldr	r3, [pc, #40]	@ (8005758 <RCC_Delay+0x34>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a0a      	ldr	r2, [pc, #40]	@ (800575c <RCC_Delay+0x38>)
 8005732:	fba2 2303 	umull	r2, r3, r2, r3
 8005736:	0a5b      	lsrs	r3, r3, #9
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	fb02 f303 	mul.w	r3, r2, r3
 800573e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005740:	bf00      	nop
  }
  while (Delay --);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1e5a      	subs	r2, r3, #1
 8005746:	60fa      	str	r2, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f9      	bne.n	8005740 <RCC_Delay+0x1c>
}
 800574c:	bf00      	nop
 800574e:	bf00      	nop
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr
 8005758:	20000000 	.word	0x20000000
 800575c:	10624dd3 	.word	0x10624dd3

08005760 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d07d      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800577c:	2300      	movs	r3, #0
 800577e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005780:	4b4f      	ldr	r3, [pc, #316]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10d      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800578c:	4b4c      	ldr	r3, [pc, #304]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	4a4b      	ldr	r2, [pc, #300]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005796:	61d3      	str	r3, [r2, #28]
 8005798:	4b49      	ldr	r3, [pc, #292]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057a0:	60bb      	str	r3, [r7, #8]
 80057a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057a4:	2301      	movs	r3, #1
 80057a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a8:	4b46      	ldr	r3, [pc, #280]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d118      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057b4:	4b43      	ldr	r3, [pc, #268]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a42      	ldr	r2, [pc, #264]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057c0:	f7fd fb12 	bl	8002de8 <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c6:	e008      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c8:	f7fd fb0e 	bl	8002de8 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b64      	cmp	r3, #100	@ 0x64
 80057d4:	d901      	bls.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e06d      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057da:	4b3a      	ldr	r3, [pc, #232]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0f0      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057e6:	4b36      	ldr	r3, [pc, #216]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d02e      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	429a      	cmp	r2, r3
 8005802:	d027      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005804:	4b2e      	ldr	r3, [pc, #184]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800580c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800580e:	4b2e      	ldr	r3, [pc, #184]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005810:	2201      	movs	r2, #1
 8005812:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005814:	4b2c      	ldr	r3, [pc, #176]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800581a:	4a29      	ldr	r2, [pc, #164]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d014      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582a:	f7fd fadd 	bl	8002de8 <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005830:	e00a      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005832:	f7fd fad9 	bl	8002de8 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005840:	4293      	cmp	r3, r2
 8005842:	d901      	bls.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e036      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005848:	4b1d      	ldr	r3, [pc, #116]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0ee      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005854:	4b1a      	ldr	r3, [pc, #104]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	4917      	ldr	r1, [pc, #92]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005862:	4313      	orrs	r3, r2
 8005864:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005866:	7dfb      	ldrb	r3, [r7, #23]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d105      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800586c:	4b14      	ldr	r3, [pc, #80]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	4a13      	ldr	r2, [pc, #76]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005872:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005876:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005884:	4b0e      	ldr	r3, [pc, #56]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	490b      	ldr	r1, [pc, #44]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005892:	4313      	orrs	r3, r2
 8005894:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0310 	and.w	r3, r3, #16
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d008      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058a2:	4b07      	ldr	r3, [pc, #28]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	4904      	ldr	r1, [pc, #16]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40021000 	.word	0x40021000
 80058c4:	40007000 	.word	0x40007000
 80058c8:	42420440 	.word	0x42420440

080058cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e076      	b.n	80059cc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d108      	bne.n	80058f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058ee:	d009      	beq.n	8005904 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	61da      	str	r2, [r3, #28]
 80058f6:	e005      	b.n	8005904 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d106      	bne.n	8005924 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7fc fe56 	bl	80025d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800593a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800594c:	431a      	orrs	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005988:	ea42 0103 	orr.w	r1, r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005990:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	0c1a      	lsrs	r2, r3, #16
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f002 0204 	and.w	r2, r2, #4
 80059aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	69da      	ldr	r2, [r3, #28]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	4613      	mov	r3, r2
 80059e2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059e4:	f7fd fa00 	bl	8002de8 <HAL_GetTick>
 80059e8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d001      	beq.n	80059fe <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80059fa:	2302      	movs	r3, #2
 80059fc:	e12a      	b.n	8005c54 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <HAL_SPI_Transmit+0x36>
 8005a04:	88fb      	ldrh	r3, [r7, #6]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e122      	b.n	8005c54 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d101      	bne.n	8005a1c <HAL_SPI_Transmit+0x48>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e11b      	b.n	8005c54 <HAL_SPI_Transmit+0x280>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2203      	movs	r2, #3
 8005a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	88fa      	ldrh	r2, [r7, #6]
 8005a3c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	88fa      	ldrh	r2, [r7, #6]
 8005a42:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a6a:	d10f      	bne.n	8005a8c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a96:	2b40      	cmp	r3, #64	@ 0x40
 8005a98:	d007      	beq.n	8005aaa <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005aa8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ab2:	d152      	bne.n	8005b5a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <HAL_SPI_Transmit+0xee>
 8005abc:	8b7b      	ldrh	r3, [r7, #26]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d145      	bne.n	8005b4e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac6:	881a      	ldrh	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad2:	1c9a      	adds	r2, r3, #2
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ae6:	e032      	b.n	8005b4e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d112      	bne.n	8005b1c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afa:	881a      	ldrh	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b06:	1c9a      	adds	r2, r3, #2
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b1a:	e018      	b.n	8005b4e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b1c:	f7fd f964 	bl	8002de8 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d803      	bhi.n	8005b34 <HAL_SPI_Transmit+0x160>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b32:	d102      	bne.n	8005b3a <HAL_SPI_Transmit+0x166>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d109      	bne.n	8005b4e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e082      	b.n	8005c54 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1c7      	bne.n	8005ae8 <HAL_SPI_Transmit+0x114>
 8005b58:	e053      	b.n	8005c02 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_SPI_Transmit+0x194>
 8005b62:	8b7b      	ldrh	r3, [r7, #26]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d147      	bne.n	8005bf8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	330c      	adds	r3, #12
 8005b72:	7812      	ldrb	r2, [r2, #0]
 8005b74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b8e:	e033      	b.n	8005bf8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d113      	bne.n	8005bc6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	330c      	adds	r3, #12
 8005ba8:	7812      	ldrb	r2, [r2, #0]
 8005baa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005bc4:	e018      	b.n	8005bf8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bc6:	f7fd f90f 	bl	8002de8 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d803      	bhi.n	8005bde <HAL_SPI_Transmit+0x20a>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bdc:	d102      	bne.n	8005be4 <HAL_SPI_Transmit+0x210>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d109      	bne.n	8005bf8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e02d      	b.n	8005c54 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1c6      	bne.n	8005b90 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c02:	69fa      	ldr	r2, [r7, #28]
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 fbc4 	bl	8006394 <SPI_EndRxTxTransaction>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d002      	beq.n	8005c18 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2220      	movs	r2, #32
 8005c16:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10a      	bne.n	8005c36 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005c52:	2300      	movs	r3, #0
  }
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3720      	adds	r7, #32
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	603b      	str	r3, [r7, #0]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d001      	beq.n	8005c7c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e104      	b.n	8005e86 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c84:	d112      	bne.n	8005cac <HAL_SPI_Receive+0x50>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10e      	bne.n	8005cac <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2204      	movs	r2, #4
 8005c92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c96:	88fa      	ldrh	r2, [r7, #6]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f8f3 	bl	8005e8e <HAL_SPI_TransmitReceive>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	e0ec      	b.n	8005e86 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cac:	f7fd f89c 	bl	8002de8 <HAL_GetTick>
 8005cb0:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <HAL_SPI_Receive+0x62>
 8005cb8:	88fb      	ldrh	r3, [r7, #6]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e0e1      	b.n	8005e86 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d101      	bne.n	8005cd0 <HAL_SPI_Receive+0x74>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e0da      	b.n	8005e86 <HAL_SPI_Receive+0x22a>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2204      	movs	r2, #4
 8005cdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	88fa      	ldrh	r2, [r7, #6]
 8005cf0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	88fa      	ldrh	r2, [r7, #6]
 8005cf6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d1e:	d10f      	bne.n	8005d40 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d3e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4a:	2b40      	cmp	r3, #64	@ 0x40
 8005d4c:	d007      	beq.n	8005d5e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d5c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d170      	bne.n	8005e48 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d66:	e035      	b.n	8005dd4 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d115      	bne.n	8005da2 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f103 020c 	add.w	r2, r3, #12
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d82:	7812      	ldrb	r2, [r2, #0]
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005da0:	e018      	b.n	8005dd4 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005da2:	f7fd f821 	bl	8002de8 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d803      	bhi.n	8005dba <HAL_SPI_Receive+0x15e>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d102      	bne.n	8005dc0 <HAL_SPI_Receive+0x164>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d109      	bne.n	8005dd4 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e058      	b.n	8005e86 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1c4      	bne.n	8005d68 <HAL_SPI_Receive+0x10c>
 8005dde:	e038      	b.n	8005e52 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d113      	bne.n	8005e16 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df8:	b292      	uxth	r2, r2
 8005dfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e00:	1c9a      	adds	r2, r3, #2
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e14:	e018      	b.n	8005e48 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e16:	f7fc ffe7 	bl	8002de8 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d803      	bhi.n	8005e2e <HAL_SPI_Receive+0x1d2>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2c:	d102      	bne.n	8005e34 <HAL_SPI_Receive+0x1d8>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d109      	bne.n	8005e48 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e01e      	b.n	8005e86 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1c6      	bne.n	8005de0 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 fa4a 	bl	80062f0 <SPI_EndRxTransaction>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2220      	movs	r2, #32
 8005e66:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e000      	b.n	8005e86 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005e84:	2300      	movs	r3, #0
  }
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b08a      	sub	sp, #40	@ 0x28
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
 8005e9a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ea0:	f7fc ffa2 	bl	8002de8 <HAL_GetTick>
 8005ea4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005eac:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005eb4:	887b      	ldrh	r3, [r7, #2]
 8005eb6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005eb8:	7ffb      	ldrb	r3, [r7, #31]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d00c      	beq.n	8005ed8 <HAL_SPI_TransmitReceive+0x4a>
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ec4:	d106      	bne.n	8005ed4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d102      	bne.n	8005ed4 <HAL_SPI_TransmitReceive+0x46>
 8005ece:	7ffb      	ldrb	r3, [r7, #31]
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d001      	beq.n	8005ed8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e17f      	b.n	80061d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d005      	beq.n	8005eea <HAL_SPI_TransmitReceive+0x5c>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <HAL_SPI_TransmitReceive+0x5c>
 8005ee4:	887b      	ldrh	r3, [r7, #2]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e174      	b.n	80061d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <HAL_SPI_TransmitReceive+0x6e>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e16d      	b.n	80061d8 <HAL_SPI_TransmitReceive+0x34a>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d003      	beq.n	8005f18 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2205      	movs	r2, #5
 8005f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	887a      	ldrh	r2, [r7, #2]
 8005f28:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	887a      	ldrh	r2, [r7, #2]
 8005f2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	887a      	ldrh	r2, [r7, #2]
 8005f3a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	887a      	ldrh	r2, [r7, #2]
 8005f40:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f58:	2b40      	cmp	r3, #64	@ 0x40
 8005f5a:	d007      	beq.n	8005f6c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f74:	d17e      	bne.n	8006074 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <HAL_SPI_TransmitReceive+0xf6>
 8005f7e:	8afb      	ldrh	r3, [r7, #22]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d16c      	bne.n	800605e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f88:	881a      	ldrh	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f94:	1c9a      	adds	r2, r3, #2
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fa8:	e059      	b.n	800605e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d11b      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x162>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d016      	beq.n	8005ff0 <HAL_SPI_TransmitReceive+0x162>
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d113      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fcc:	881a      	ldrh	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd8:	1c9a      	adds	r2, r3, #2
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d119      	bne.n	8006032 <HAL_SPI_TransmitReceive+0x1a4>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006002:	b29b      	uxth	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d014      	beq.n	8006032 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006012:	b292      	uxth	r2, r2
 8006014:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601a:	1c9a      	adds	r2, r3, #2
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006024:	b29b      	uxth	r3, r3
 8006026:	3b01      	subs	r3, #1
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800602e:	2301      	movs	r3, #1
 8006030:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006032:	f7fc fed9 	bl	8002de8 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800603e:	429a      	cmp	r2, r3
 8006040:	d80d      	bhi.n	800605e <HAL_SPI_TransmitReceive+0x1d0>
 8006042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006048:	d009      	beq.n	800605e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e0bc      	b.n	80061d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1a0      	bne.n	8005faa <HAL_SPI_TransmitReceive+0x11c>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d19b      	bne.n	8005faa <HAL_SPI_TransmitReceive+0x11c>
 8006072:	e082      	b.n	800617a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <HAL_SPI_TransmitReceive+0x1f4>
 800607c:	8afb      	ldrh	r3, [r7, #22]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d171      	bne.n	8006166 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	330c      	adds	r3, #12
 800608c:	7812      	ldrb	r2, [r2, #0]
 800608e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800609e:	b29b      	uxth	r3, r3
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060a8:	e05d      	b.n	8006166 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d11c      	bne.n	80060f2 <HAL_SPI_TransmitReceive+0x264>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060bc:	b29b      	uxth	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d017      	beq.n	80060f2 <HAL_SPI_TransmitReceive+0x264>
 80060c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d114      	bne.n	80060f2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	330c      	adds	r3, #12
 80060d2:	7812      	ldrb	r2, [r2, #0]
 80060d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d119      	bne.n	8006134 <HAL_SPI_TransmitReceive+0x2a6>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d014      	beq.n	8006134 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006130:	2301      	movs	r3, #1
 8006132:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006134:	f7fc fe58 	bl	8002de8 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006140:	429a      	cmp	r2, r3
 8006142:	d803      	bhi.n	800614c <HAL_SPI_TransmitReceive+0x2be>
 8006144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614a:	d102      	bne.n	8006152 <HAL_SPI_TransmitReceive+0x2c4>
 800614c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614e:	2b00      	cmp	r3, #0
 8006150:	d109      	bne.n	8006166 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e038      	b.n	80061d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d19c      	bne.n	80060aa <HAL_SPI_TransmitReceive+0x21c>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d197      	bne.n	80060aa <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800617a:	6a3a      	ldr	r2, [r7, #32]
 800617c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 f908 	bl	8006394 <SPI_EndRxTxTransaction>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d008      	beq.n	800619c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2220      	movs	r2, #32
 800618e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e01d      	b.n	80061d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061a4:	2300      	movs	r3, #0
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	613b      	str	r3, [r7, #16]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e000      	b.n	80061d8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80061d6:	2300      	movs	r3, #0
  }
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3728      	adds	r7, #40	@ 0x28
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	603b      	str	r3, [r7, #0]
 80061ec:	4613      	mov	r3, r2
 80061ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061f0:	f7fc fdfa 	bl	8002de8 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f8:	1a9b      	subs	r3, r3, r2
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	4413      	add	r3, r2
 80061fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006200:	f7fc fdf2 	bl	8002de8 <HAL_GetTick>
 8006204:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006206:	4b39      	ldr	r3, [pc, #228]	@ (80062ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	015b      	lsls	r3, r3, #5
 800620c:	0d1b      	lsrs	r3, r3, #20
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	fb02 f303 	mul.w	r3, r2, r3
 8006214:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006216:	e054      	b.n	80062c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621e:	d050      	beq.n	80062c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006220:	f7fc fde2 	bl	8002de8 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	429a      	cmp	r2, r3
 800622e:	d902      	bls.n	8006236 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d13d      	bne.n	80062b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006244:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800624e:	d111      	bne.n	8006274 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006258:	d004      	beq.n	8006264 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006262:	d107      	bne.n	8006274 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006272:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800627c:	d10f      	bne.n	800629e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800629c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e017      	b.n	80062e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	3b01      	subs	r3, #1
 80062c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	4013      	ands	r3, r2
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	bf0c      	ite	eq
 80062d2:	2301      	moveq	r3, #1
 80062d4:	2300      	movne	r3, #0
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	461a      	mov	r2, r3
 80062da:	79fb      	ldrb	r3, [r7, #7]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d19b      	bne.n	8006218 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3720      	adds	r7, #32
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20000000 	.word	0x20000000

080062f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af02      	add	r7, sp, #8
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006304:	d111      	bne.n	800632a <SPI_EndRxTransaction+0x3a>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800630e:	d004      	beq.n	800631a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006318:	d107      	bne.n	800632a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006328:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006332:	d117      	bne.n	8006364 <SPI_EndRxTransaction+0x74>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800633c:	d112      	bne.n	8006364 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2200      	movs	r2, #0
 8006346:	2101      	movs	r1, #1
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f7ff ff49 	bl	80061e0 <SPI_WaitFlagStateUntilTimeout>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d01a      	beq.n	800638a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006358:	f043 0220 	orr.w	r2, r3, #32
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e013      	b.n	800638c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2200      	movs	r2, #0
 800636c:	2180      	movs	r1, #128	@ 0x80
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f7ff ff36 	bl	80061e0 <SPI_WaitFlagStateUntilTimeout>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d007      	beq.n	800638a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800637e:	f043 0220 	orr.w	r2, r3, #32
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e000      	b.n	800638c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2201      	movs	r2, #1
 80063a8:	2102      	movs	r1, #2
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f7ff ff18 	bl	80061e0 <SPI_WaitFlagStateUntilTimeout>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d007      	beq.n	80063c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ba:	f043 0220 	orr.w	r2, r3, #32
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e013      	b.n	80063ee <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2200      	movs	r2, #0
 80063ce:	2180      	movs	r1, #128	@ 0x80
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f7ff ff05 	bl	80061e0 <SPI_WaitFlagStateUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d007      	beq.n	80063ec <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063e0:	f043 0220 	orr.w	r2, r3, #32
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e000      	b.n	80063ee <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e042      	b.n	800648e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d106      	bne.n	8006422 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7fc f921 	bl	8002664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2224      	movs	r2, #36	@ 0x24
 8006426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006438:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f82c 	bl	8006498 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	691a      	ldr	r2, [r3, #16]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800644e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695a      	ldr	r2, [r3, #20]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800645e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800646e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2220      	movs	r2, #32
 800647a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2220      	movs	r2, #32
 8006482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80064d2:	f023 030c 	bic.w	r3, r3, #12
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6812      	ldr	r2, [r2, #0]
 80064da:	68b9      	ldr	r1, [r7, #8]
 80064dc:	430b      	orrs	r3, r1
 80064de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a2c      	ldr	r2, [pc, #176]	@ (80065ac <UART_SetConfig+0x114>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d103      	bne.n	8006508 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006500:	f7ff f8fc 	bl	80056fc <HAL_RCC_GetPCLK2Freq>
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	e002      	b.n	800650e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006508:	f7ff f8e4 	bl	80056d4 <HAL_RCC_GetPCLK1Freq>
 800650c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	009a      	lsls	r2, r3, #2
 8006518:	441a      	add	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	fbb2 f3f3 	udiv	r3, r2, r3
 8006524:	4a22      	ldr	r2, [pc, #136]	@ (80065b0 <UART_SetConfig+0x118>)
 8006526:	fba2 2303 	umull	r2, r3, r2, r3
 800652a:	095b      	lsrs	r3, r3, #5
 800652c:	0119      	lsls	r1, r3, #4
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	4613      	mov	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	009a      	lsls	r2, r3, #2
 8006538:	441a      	add	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	fbb2 f2f3 	udiv	r2, r2, r3
 8006544:	4b1a      	ldr	r3, [pc, #104]	@ (80065b0 <UART_SetConfig+0x118>)
 8006546:	fba3 0302 	umull	r0, r3, r3, r2
 800654a:	095b      	lsrs	r3, r3, #5
 800654c:	2064      	movs	r0, #100	@ 0x64
 800654e:	fb00 f303 	mul.w	r3, r0, r3
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	3332      	adds	r3, #50	@ 0x32
 8006558:	4a15      	ldr	r2, [pc, #84]	@ (80065b0 <UART_SetConfig+0x118>)
 800655a:	fba2 2303 	umull	r2, r3, r2, r3
 800655e:	095b      	lsrs	r3, r3, #5
 8006560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006564:	4419      	add	r1, r3
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4613      	mov	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	009a      	lsls	r2, r3, #2
 8006570:	441a      	add	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	fbb2 f2f3 	udiv	r2, r2, r3
 800657c:	4b0c      	ldr	r3, [pc, #48]	@ (80065b0 <UART_SetConfig+0x118>)
 800657e:	fba3 0302 	umull	r0, r3, r3, r2
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	2064      	movs	r0, #100	@ 0x64
 8006586:	fb00 f303 	mul.w	r3, r0, r3
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	011b      	lsls	r3, r3, #4
 800658e:	3332      	adds	r3, #50	@ 0x32
 8006590:	4a07      	ldr	r2, [pc, #28]	@ (80065b0 <UART_SetConfig+0x118>)
 8006592:	fba2 2303 	umull	r2, r3, r2, r3
 8006596:	095b      	lsrs	r3, r3, #5
 8006598:	f003 020f 	and.w	r2, r3, #15
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	440a      	add	r2, r1
 80065a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80065a4:	bf00      	nop
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	40013800 	.word	0x40013800
 80065b0:	51eb851f 	.word	0x51eb851f

080065b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	4638      	mov	r0, r7
 80065be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bc80      	pop	{r7}
 80065cc:	4770      	bx	lr

080065ce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b085      	sub	sp, #20
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065de:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80065e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bc80      	pop	{r7}
 80065f8:	4770      	bx	lr

080065fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b085      	sub	sp, #20
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006602:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006606:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800660e:	b29a      	uxth	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	b29b      	uxth	r3, r3
 8006614:	43db      	mvns	r3, r3
 8006616:	b29b      	uxth	r3, r3
 8006618:	4013      	ands	r3, r2
 800661a:	b29a      	uxth	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	bc80      	pop	{r7}
 800662c:	4770      	bx	lr

0800662e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	460b      	mov	r3, r1
 8006638:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr

08006646 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006646:	b480      	push	{r7}
 8006648:	b085      	sub	sp, #20
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	4638      	mov	r0, r7
 8006650:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	bc80      	pop	{r7}
 800667e:	4770      	bx	lr

08006680 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006680:	b480      	push	{r7}
 8006682:	b09d      	sub	sp, #116	@ 0x74
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80066a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066a6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	78db      	ldrb	r3, [r3, #3]
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	d81f      	bhi.n	80066f2 <USB_ActivateEndpoint+0x72>
 80066b2:	a201      	add	r2, pc, #4	@ (adr r2, 80066b8 <USB_ActivateEndpoint+0x38>)
 80066b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b8:	080066c9 	.word	0x080066c9
 80066bc:	080066e5 	.word	0x080066e5
 80066c0:	080066fb 	.word	0x080066fb
 80066c4:	080066d7 	.word	0x080066d7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80066c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80066d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80066d4:	e012      	b.n	80066fc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80066d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066da:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80066de:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80066e2:	e00b      	b.n	80066fc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80066e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80066ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80066f0:	e004      	b.n	80066fc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80066f8:	e000      	b.n	80066fc <USB_ActivateEndpoint+0x7c>
      break;
 80066fa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	441a      	add	r2, r3
 8006706:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800670a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800670e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800671a:	b29b      	uxth	r3, r3
 800671c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	b29b      	uxth	r3, r3
 800672c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006730:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006734:	b29b      	uxth	r3, r3
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	7812      	ldrb	r2, [r2, #0]
 800673a:	4313      	orrs	r3, r2
 800673c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	441a      	add	r2, r3
 800674a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800674e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006752:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800675a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800675e:	b29b      	uxth	r3, r3
 8006760:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	7b1b      	ldrb	r3, [r3, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	f040 8178 	bne.w	8006a5c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	785b      	ldrb	r3, [r3, #1]
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 8084 	beq.w	800687e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006780:	b29b      	uxth	r3, r3
 8006782:	461a      	mov	r2, r3
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	4413      	add	r3, r2
 8006788:	61bb      	str	r3, [r7, #24]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	011a      	lsls	r2, r3, #4
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006798:	617b      	str	r3, [r7, #20]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	88db      	ldrh	r3, [r3, #6]
 800679e:	085b      	lsrs	r3, r3, #1
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	827b      	strh	r3, [r7, #18]
 80067b8:	8a7b      	ldrh	r3, [r7, #18]
 80067ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d01b      	beq.n	80067fa <USB_ActivateEndpoint+0x17a>
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d8:	823b      	strh	r3, [r7, #16]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	441a      	add	r2, r3
 80067e4:	8a3b      	ldrh	r3, [r7, #16]
 80067e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	78db      	ldrb	r3, [r3, #3]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d020      	beq.n	8006844 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006818:	81bb      	strh	r3, [r7, #12]
 800681a:	89bb      	ldrh	r3, [r7, #12]
 800681c:	f083 0320 	eor.w	r3, r3, #32
 8006820:	81bb      	strh	r3, [r7, #12]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	441a      	add	r2, r3
 800682c:	89bb      	ldrh	r3, [r7, #12]
 800682e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006832:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800683a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800683e:	b29b      	uxth	r3, r3
 8006840:	8013      	strh	r3, [r2, #0]
 8006842:	e2d5      	b.n	8006df0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006856:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800685a:	81fb      	strh	r3, [r7, #14]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	441a      	add	r2, r3
 8006866:	89fb      	ldrh	r3, [r7, #14]
 8006868:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800686c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006870:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006878:	b29b      	uxth	r3, r3
 800687a:	8013      	strh	r3, [r2, #0]
 800687c:	e2b8      	b.n	8006df0 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	633b      	str	r3, [r7, #48]	@ 0x30
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006888:	b29b      	uxth	r3, r3
 800688a:	461a      	mov	r2, r3
 800688c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688e:	4413      	add	r3, r2
 8006890:	633b      	str	r3, [r7, #48]	@ 0x30
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	011a      	lsls	r2, r3, #4
 8006898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689a:	4413      	add	r3, r2
 800689c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80068a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	88db      	ldrh	r3, [r3, #6]
 80068a6:	085b      	lsrs	r3, r3, #1
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b0:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068bc:	b29b      	uxth	r3, r3
 80068be:	461a      	mov	r2, r3
 80068c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c2:	4413      	add	r3, r2
 80068c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	011a      	lsls	r2, r3, #4
 80068cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ce:	4413      	add	r3, r2
 80068d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	b29b      	uxth	r3, r3
 80068dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e4:	801a      	strh	r2, [r3, #0]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80068ec:	d91d      	bls.n	800692a <USB_ActivateEndpoint+0x2aa>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f003 031f 	and.w	r3, r3, #31
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d102      	bne.n	8006908 <USB_ActivateEndpoint+0x288>
 8006902:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006904:	3b01      	subs	r3, #1
 8006906:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	b29a      	uxth	r2, r3
 800690e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006910:	b29b      	uxth	r3, r3
 8006912:	029b      	lsls	r3, r3, #10
 8006914:	b29b      	uxth	r3, r3
 8006916:	4313      	orrs	r3, r2
 8006918:	b29b      	uxth	r3, r3
 800691a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800691e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006922:	b29a      	uxth	r2, r3
 8006924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006926:	801a      	strh	r2, [r3, #0]
 8006928:	e026      	b.n	8006978 <USB_ActivateEndpoint+0x2f8>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <USB_ActivateEndpoint+0x2c8>
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	b29b      	uxth	r3, r3
 8006938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800693c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006940:	b29a      	uxth	r2, r3
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006944:	801a      	strh	r2, [r3, #0]
 8006946:	e017      	b.n	8006978 <USB_ActivateEndpoint+0x2f8>
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	085b      	lsrs	r3, r3, #1
 800694e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <USB_ActivateEndpoint+0x2e2>
 800695c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800695e:	3301      	adds	r3, #1
 8006960:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	b29a      	uxth	r2, r3
 8006968:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800696a:	b29b      	uxth	r3, r3
 800696c:	029b      	lsls	r3, r3, #10
 800696e:	b29b      	uxth	r3, r3
 8006970:	4313      	orrs	r3, r2
 8006972:	b29a      	uxth	r2, r3
 8006974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006976:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006986:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006988:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01b      	beq.n	80069c8 <USB_ActivateEndpoint+0x348>
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a6:	843b      	strh	r3, [r7, #32]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	441a      	add	r2, r3
 80069b2:	8c3b      	ldrh	r3, [r7, #32]
 80069b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d124      	bne.n	8006a1a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e6:	83bb      	strh	r3, [r7, #28]
 80069e8:	8bbb      	ldrh	r3, [r7, #28]
 80069ea:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069ee:	83bb      	strh	r3, [r7, #28]
 80069f0:	8bbb      	ldrh	r3, [r7, #28]
 80069f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069f6:	83bb      	strh	r3, [r7, #28]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	441a      	add	r2, r3
 8006a02:	8bbb      	ldrh	r3, [r7, #28]
 8006a04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	8013      	strh	r3, [r2, #0]
 8006a18:	e1ea      	b.n	8006df0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a30:	83fb      	strh	r3, [r7, #30]
 8006a32:	8bfb      	ldrh	r3, [r7, #30]
 8006a34:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a38:	83fb      	strh	r3, [r7, #30]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	441a      	add	r2, r3
 8006a44:	8bfb      	ldrh	r3, [r7, #30]
 8006a46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	8013      	strh	r3, [r2, #0]
 8006a5a:	e1c9      	b.n	8006df0 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	78db      	ldrb	r3, [r3, #3]
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d11e      	bne.n	8006aa2 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a7a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	441a      	add	r2, r3
 8006a88:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006a8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a94:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	8013      	strh	r3, [r2, #0]
 8006aa0:	e01d      	b.n	8006ade <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	441a      	add	r2, r3
 8006ac6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006aca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ace:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006aee:	4413      	add	r3, r2
 8006af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	011a      	lsls	r2, r3, #4
 8006af8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	891b      	ldrh	r3, [r3, #8]
 8006b06:	085b      	lsrs	r3, r3, #1
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b10:	801a      	strh	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	461a      	mov	r2, r3
 8006b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b22:	4413      	add	r3, r2
 8006b24:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	011a      	lsls	r2, r3, #4
 8006b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006b34:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	895b      	ldrh	r3, [r3, #10]
 8006b3a:	085b      	lsrs	r3, r3, #1
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b44:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f040 8093 	bne.w	8006c76 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006b60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01b      	beq.n	8006ba4 <USB_ActivateEndpoint+0x524>
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b82:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	441a      	add	r2, r3
 8006b8e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006bb2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d01b      	beq.n	8006bf4 <USB_ActivateEndpoint+0x574>
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	441a      	add	r2, r3
 8006bde:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006be0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006be4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006be8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c0a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006c0c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006c0e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006c12:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006c14:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006c16:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006c1a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	441a      	add	r2, r3
 8006c26:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006c28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c52:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	441a      	add	r2, r3
 8006c5e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	8013      	strh	r3, [r2, #0]
 8006c74:	e0bc      	b.n	8006df0 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006c86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d01d      	beq.n	8006cce <USB_ActivateEndpoint+0x64e>
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ca4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	441a      	add	r2, r3
 8006cb6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006cba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006cde:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d01d      	beq.n	8006d26 <USB_ActivateEndpoint+0x6a6>
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d00:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	441a      	add	r2, r3
 8006d0e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006d12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d1e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	78db      	ldrb	r3, [r3, #3]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d024      	beq.n	8006d78 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d44:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006d48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006d4c:	f083 0320 	eor.w	r3, r3, #32
 8006d50:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	441a      	add	r2, r3
 8006d5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006d62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	8013      	strh	r3, [r2, #0]
 8006d76:	e01d      	b.n	8006db4 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d8e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	441a      	add	r2, r3
 8006d9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006da0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006da4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006da8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dca:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	441a      	add	r2, r3
 8006dd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006ddc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006de0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006df0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3774      	adds	r7, #116	@ 0x74
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop

08006e00 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b08d      	sub	sp, #52	@ 0x34
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	7b1b      	ldrb	r3, [r3, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f040 808e 	bne.w	8006f30 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	785b      	ldrb	r3, [r3, #1]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d044      	beq.n	8006ea6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	81bb      	strh	r3, [r7, #12]
 8006e2a:	89bb      	ldrh	r3, [r7, #12]
 8006e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d01b      	beq.n	8006e6c <USB_DeactivateEndpoint+0x6c>
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e4a:	817b      	strh	r3, [r7, #10]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	441a      	add	r2, r3
 8006e56:	897b      	ldrh	r3, [r7, #10]
 8006e58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e82:	813b      	strh	r3, [r7, #8]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	441a      	add	r2, r3
 8006e8e:	893b      	ldrh	r3, [r7, #8]
 8006e90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	8013      	strh	r3, [r2, #0]
 8006ea4:	e192      	b.n	80071cc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	827b      	strh	r3, [r7, #18]
 8006eb4:	8a7b      	ldrh	r3, [r7, #18]
 8006eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d01b      	beq.n	8006ef6 <USB_DeactivateEndpoint+0xf6>
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ed4:	823b      	strh	r3, [r7, #16]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	441a      	add	r2, r3
 8006ee0:	8a3b      	ldrh	r3, [r7, #16]
 8006ee2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ee6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f0c:	81fb      	strh	r3, [r7, #14]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	441a      	add	r2, r3
 8006f18:	89fb      	ldrh	r3, [r7, #14]
 8006f1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	8013      	strh	r3, [r2, #0]
 8006f2e:	e14d      	b.n	80071cc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	785b      	ldrb	r3, [r3, #1]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f040 80a5 	bne.w	8007084 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	843b      	strh	r3, [r7, #32]
 8006f48:	8c3b      	ldrh	r3, [r7, #32]
 8006f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01b      	beq.n	8006f8a <USB_DeactivateEndpoint+0x18a>
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f68:	83fb      	strh	r3, [r7, #30]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	441a      	add	r2, r3
 8006f74:	8bfb      	ldrh	r3, [r7, #30]
 8006f76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	83bb      	strh	r3, [r7, #28]
 8006f98:	8bbb      	ldrh	r3, [r7, #28]
 8006f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d01b      	beq.n	8006fda <USB_DeactivateEndpoint+0x1da>
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fb8:	837b      	strh	r3, [r7, #26]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	441a      	add	r2, r3
 8006fc4:	8b7b      	ldrh	r3, [r7, #26]
 8006fc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fd2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff0:	833b      	strh	r3, [r7, #24]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	441a      	add	r2, r3
 8006ffc:	8b3b      	ldrh	r3, [r7, #24]
 8006ffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800700a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800700e:	b29b      	uxth	r3, r3
 8007010:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	b29b      	uxth	r3, r3
 8007020:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007028:	82fb      	strh	r3, [r7, #22]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	441a      	add	r2, r3
 8007034:	8afb      	ldrh	r3, [r7, #22]
 8007036:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800703a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800703e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007046:	b29b      	uxth	r3, r3
 8007048:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	b29b      	uxth	r3, r3
 8007058:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800705c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007060:	82bb      	strh	r3, [r7, #20]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	441a      	add	r2, r3
 800706c:	8abb      	ldrh	r3, [r7, #20]
 800706e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007072:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800707a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800707e:	b29b      	uxth	r3, r3
 8007080:	8013      	strh	r3, [r2, #0]
 8007082:	e0a3      	b.n	80071cc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007092:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007094:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d01b      	beq.n	80070d4 <USB_DeactivateEndpoint+0x2d4>
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070b2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	441a      	add	r2, r3
 80070be:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80070c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80070e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80070e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d01b      	beq.n	8007124 <USB_DeactivateEndpoint+0x324>
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007102:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	441a      	add	r2, r3
 800710e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007110:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007114:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007118:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800711c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007120:	b29b      	uxth	r3, r3
 8007122:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	b29b      	uxth	r3, r3
 8007132:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800713a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	441a      	add	r2, r3
 8007146:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007148:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800714c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007150:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007158:	b29b      	uxth	r3, r3
 800715a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	b29b      	uxth	r3, r3
 800716a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800716e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007172:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	441a      	add	r2, r3
 800717e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007180:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007184:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007188:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800718c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007190:	b29b      	uxth	r3, r3
 8007192:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071aa:	847b      	strh	r3, [r7, #34]	@ 0x22
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	441a      	add	r2, r3
 80071b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80071b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3734      	adds	r7, #52	@ 0x34
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bc80      	pop	{r7}
 80071d6:	4770      	bx	lr

080071d8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b0c2      	sub	sp, #264	@ 0x108
 80071dc:	af00      	add	r7, sp, #0
 80071de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071e6:	6018      	str	r0, [r3, #0]
 80071e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	785b      	ldrb	r3, [r3, #1]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	f040 86b7 	bne.w	8007f72 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	699a      	ldr	r2, [r3, #24]
 8007210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	429a      	cmp	r2, r3
 800721e:	d908      	bls.n	8007232 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007230:	e007      	b.n	8007242 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	7b1b      	ldrb	r3, [r3, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d13a      	bne.n	80072c8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6959      	ldr	r1, [r3, #20]
 800725e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	88da      	ldrh	r2, [r3, #6]
 800726a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726e:	b29b      	uxth	r3, r3
 8007270:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007274:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007278:	6800      	ldr	r0, [r0, #0]
 800727a:	f001 fc9c 	bl	8008bb6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800727e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007282:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	613b      	str	r3, [r7, #16]
 800728a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007298:	b29b      	uxth	r3, r3
 800729a:	461a      	mov	r2, r3
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	4413      	add	r3, r2
 80072a0:	613b      	str	r3, [r7, #16]
 80072a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	011a      	lsls	r2, r3, #4
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	4413      	add	r3, r2
 80072b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072be:	b29a      	uxth	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	801a      	strh	r2, [r3, #0]
 80072c4:	f000 be1f 	b.w	8007f06 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80072c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	78db      	ldrb	r3, [r3, #3]
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	f040 8462 	bne.w	8007b9e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80072da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6a1a      	ldr	r2, [r3, #32]
 80072e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	f240 83df 	bls.w	8007ab6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80072f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	b29b      	uxth	r3, r3
 8007316:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800731a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800731e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007326:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	441a      	add	r2, r3
 800733c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007340:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007344:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007348:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800734c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007350:	b29b      	uxth	r3, r3
 8007352:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6a1a      	ldr	r2, [r3, #32]
 8007360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007364:	1ad2      	subs	r2, r2, r3
 8007366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007376:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	b29b      	uxth	r3, r3
 8007390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 81c7 	beq.w	8007728 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800739a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80073a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	785b      	ldrb	r3, [r3, #1]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d177      	bne.n	80074a6 <USB_EPStartXfer+0x2ce>
 80073b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	461a      	mov	r2, r3
 80073d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d6:	4413      	add	r3, r2
 80073d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	011a      	lsls	r2, r3, #4
 80073e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ea:	4413      	add	r3, r2
 80073ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80073f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007400:	801a      	strh	r2, [r3, #0]
 8007402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007406:	2b3e      	cmp	r3, #62	@ 0x3e
 8007408:	d921      	bls.n	800744e <USB_EPStartXfer+0x276>
 800740a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007418:	f003 031f 	and.w	r3, r3, #31
 800741c:	2b00      	cmp	r3, #0
 800741e:	d104      	bne.n	800742a <USB_EPStartXfer+0x252>
 8007420:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007424:	3b01      	subs	r3, #1
 8007426:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800742a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b29a      	uxth	r2, r3
 8007430:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007434:	b29b      	uxth	r3, r3
 8007436:	029b      	lsls	r3, r3, #10
 8007438:	b29b      	uxth	r3, r3
 800743a:	4313      	orrs	r3, r2
 800743c:	b29b      	uxth	r3, r3
 800743e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007446:	b29a      	uxth	r2, r3
 8007448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744a:	801a      	strh	r2, [r3, #0]
 800744c:	e050      	b.n	80074f0 <USB_EPStartXfer+0x318>
 800744e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10a      	bne.n	800746c <USB_EPStartXfer+0x294>
 8007456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b29b      	uxth	r3, r3
 800745c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007464:	b29a      	uxth	r2, r3
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	801a      	strh	r2, [r3, #0]
 800746a:	e041      	b.n	80074f0 <USB_EPStartXfer+0x318>
 800746c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007470:	085b      	lsrs	r3, r3, #1
 8007472:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d004      	beq.n	800748c <USB_EPStartXfer+0x2b4>
 8007482:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007486:	3301      	adds	r3, #1
 8007488:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800748c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	b29a      	uxth	r2, r3
 8007492:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007496:	b29b      	uxth	r3, r3
 8007498:	029b      	lsls	r3, r3, #10
 800749a:	b29b      	uxth	r3, r3
 800749c:	4313      	orrs	r3, r2
 800749e:	b29a      	uxth	r2, r3
 80074a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a2:	801a      	strh	r2, [r3, #0]
 80074a4:	e024      	b.n	80074f0 <USB_EPStartXfer+0x318>
 80074a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	785b      	ldrb	r3, [r3, #1]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d11c      	bne.n	80074f0 <USB_EPStartXfer+0x318>
 80074b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	461a      	mov	r2, r3
 80074c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ca:	4413      	add	r3, r2
 80074cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80074ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	011a      	lsls	r2, r3, #4
 80074dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074de:	4413      	add	r3, r2
 80074e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80074f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	895b      	ldrh	r3, [r3, #10]
 80074fc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6959      	ldr	r1, [r3, #20]
 800750c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007510:	b29b      	uxth	r3, r3
 8007512:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007516:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800751a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800751e:	6800      	ldr	r0, [r0, #0]
 8007520:	f001 fb49 	bl	8008bb6 <USB_WritePMA>
            ep->xfer_buff += len;
 8007524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	695a      	ldr	r2, [r3, #20]
 8007530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007534:	441a      	add	r2, r3
 8007536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6a1a      	ldr	r2, [r3, #32]
 800754e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	429a      	cmp	r2, r3
 800755c:	d90f      	bls.n	800757e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800755e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6a1a      	ldr	r2, [r3, #32]
 800756a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800756e:	1ad2      	subs	r2, r2, r3
 8007570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	621a      	str	r2, [r3, #32]
 800757c:	e00e      	b.n	800759c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800757e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007582:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800758e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2200      	movs	r2, #0
 800759a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800759c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	785b      	ldrb	r3, [r3, #1]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d177      	bne.n	800769c <USB_EPStartXfer+0x4c4>
 80075ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	61bb      	str	r3, [r7, #24]
 80075b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	461a      	mov	r2, r3
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	4413      	add	r3, r2
 80075ce:	61bb      	str	r3, [r7, #24]
 80075d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	011a      	lsls	r2, r3, #4
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	4413      	add	r3, r2
 80075e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	801a      	strh	r2, [r3, #0]
 80075f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80075fe:	d921      	bls.n	8007644 <USB_EPStartXfer+0x46c>
 8007600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007604:	095b      	lsrs	r3, r3, #5
 8007606:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800760a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760e:	f003 031f 	and.w	r3, r3, #31
 8007612:	2b00      	cmp	r3, #0
 8007614:	d104      	bne.n	8007620 <USB_EPStartXfer+0x448>
 8007616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800761a:	3b01      	subs	r3, #1
 800761c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29a      	uxth	r2, r3
 8007626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800762a:	b29b      	uxth	r3, r3
 800762c:	029b      	lsls	r3, r3, #10
 800762e:	b29b      	uxth	r3, r3
 8007630:	4313      	orrs	r3, r2
 8007632:	b29b      	uxth	r3, r3
 8007634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800763c:	b29a      	uxth	r2, r3
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	801a      	strh	r2, [r3, #0]
 8007642:	e056      	b.n	80076f2 <USB_EPStartXfer+0x51a>
 8007644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10a      	bne.n	8007662 <USB_EPStartXfer+0x48a>
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	881b      	ldrh	r3, [r3, #0]
 8007650:	b29b      	uxth	r3, r3
 8007652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800765a:	b29a      	uxth	r2, r3
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	801a      	strh	r2, [r3, #0]
 8007660:	e047      	b.n	80076f2 <USB_EPStartXfer+0x51a>
 8007662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007666:	085b      	lsrs	r3, r3, #1
 8007668:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800766c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	d004      	beq.n	8007682 <USB_EPStartXfer+0x4aa>
 8007678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800767c:	3301      	adds	r3, #1
 800767e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	b29a      	uxth	r2, r3
 8007688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800768c:	b29b      	uxth	r3, r3
 800768e:	029b      	lsls	r3, r3, #10
 8007690:	b29b      	uxth	r3, r3
 8007692:	4313      	orrs	r3, r2
 8007694:	b29a      	uxth	r2, r3
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	801a      	strh	r2, [r3, #0]
 800769a:	e02a      	b.n	80076f2 <USB_EPStartXfer+0x51a>
 800769c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d122      	bne.n	80076f2 <USB_EPStartXfer+0x51a>
 80076ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	623b      	str	r3, [r7, #32]
 80076b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	461a      	mov	r2, r3
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	4413      	add	r3, r2
 80076ce:	623b      	str	r3, [r7, #32]
 80076d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	011a      	lsls	r2, r3, #4
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	4413      	add	r3, r2
 80076e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076e6:	61fb      	str	r3, [r7, #28]
 80076e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80076f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	891b      	ldrh	r3, [r3, #8]
 80076fe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6959      	ldr	r1, [r3, #20]
 800770e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007712:	b29b      	uxth	r3, r3
 8007714:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007718:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800771c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007720:	6800      	ldr	r0, [r0, #0]
 8007722:	f001 fa48 	bl	8008bb6 <USB_WritePMA>
 8007726:	e3ee      	b.n	8007f06 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	785b      	ldrb	r3, [r3, #1]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d177      	bne.n	8007828 <USB_EPStartXfer+0x650>
 8007738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007748:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007752:	b29b      	uxth	r3, r3
 8007754:	461a      	mov	r2, r3
 8007756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007758:	4413      	add	r3, r2
 800775a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800775c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	011a      	lsls	r2, r3, #4
 800776a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800776c:	4413      	add	r3, r2
 800776e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007772:	647b      	str	r3, [r7, #68]	@ 0x44
 8007774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	b29b      	uxth	r3, r3
 800777a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800777e:	b29a      	uxth	r2, r3
 8007780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007782:	801a      	strh	r2, [r3, #0]
 8007784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007788:	2b3e      	cmp	r3, #62	@ 0x3e
 800778a:	d921      	bls.n	80077d0 <USB_EPStartXfer+0x5f8>
 800778c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007790:	095b      	lsrs	r3, r3, #5
 8007792:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800779a:	f003 031f 	and.w	r3, r3, #31
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d104      	bne.n	80077ac <USB_EPStartXfer+0x5d4>
 80077a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077a6:	3b01      	subs	r3, #1
 80077a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80077ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	029b      	lsls	r3, r3, #10
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	4313      	orrs	r3, r2
 80077be:	b29b      	uxth	r3, r3
 80077c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077cc:	801a      	strh	r2, [r3, #0]
 80077ce:	e056      	b.n	800787e <USB_EPStartXfer+0x6a6>
 80077d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10a      	bne.n	80077ee <USB_EPStartXfer+0x616>
 80077d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077ea:	801a      	strh	r2, [r3, #0]
 80077ec:	e047      	b.n	800787e <USB_EPStartXfer+0x6a6>
 80077ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f2:	085b      	lsrs	r3, r3, #1
 80077f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80077f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	2b00      	cmp	r3, #0
 8007802:	d004      	beq.n	800780e <USB_EPStartXfer+0x636>
 8007804:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007808:	3301      	adds	r3, #1
 800780a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800780e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	b29a      	uxth	r2, r3
 8007814:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007818:	b29b      	uxth	r3, r3
 800781a:	029b      	lsls	r3, r3, #10
 800781c:	b29b      	uxth	r3, r3
 800781e:	4313      	orrs	r3, r2
 8007820:	b29a      	uxth	r2, r3
 8007822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007824:	801a      	strh	r2, [r3, #0]
 8007826:	e02a      	b.n	800787e <USB_EPStartXfer+0x6a6>
 8007828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	785b      	ldrb	r3, [r3, #1]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d122      	bne.n	800787e <USB_EPStartXfer+0x6a6>
 8007838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	653b      	str	r3, [r7, #80]	@ 0x50
 8007844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007848:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007852:	b29b      	uxth	r3, r3
 8007854:	461a      	mov	r2, r3
 8007856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007858:	4413      	add	r3, r2
 800785a:	653b      	str	r3, [r7, #80]	@ 0x50
 800785c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	011a      	lsls	r2, r3, #4
 800786a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800786c:	4413      	add	r3, r2
 800786e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007878:	b29a      	uxth	r2, r3
 800787a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800787c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800787e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	891b      	ldrh	r3, [r3, #8]
 800788a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800788e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6959      	ldr	r1, [r3, #20]
 800789a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800789e:	b29b      	uxth	r3, r3
 80078a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80078a4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80078a8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80078ac:	6800      	ldr	r0, [r0, #0]
 80078ae:	f001 f982 	bl	8008bb6 <USB_WritePMA>
            ep->xfer_buff += len;
 80078b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	695a      	ldr	r2, [r3, #20]
 80078be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c2:	441a      	add	r2, r3
 80078c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80078d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6a1a      	ldr	r2, [r3, #32]
 80078dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d90f      	bls.n	800790c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80078ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6a1a      	ldr	r2, [r3, #32]
 80078f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078fc:	1ad2      	subs	r2, r2, r3
 80078fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	621a      	str	r2, [r3, #32]
 800790a:	e00e      	b.n	800792a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800790c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800791c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2200      	movs	r2, #0
 8007928:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800792a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	643b      	str	r3, [r7, #64]	@ 0x40
 8007936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	785b      	ldrb	r3, [r3, #1]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d177      	bne.n	8007a36 <USB_EPStartXfer+0x85e>
 8007946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007956:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007960:	b29b      	uxth	r3, r3
 8007962:	461a      	mov	r2, r3
 8007964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007966:	4413      	add	r3, r2
 8007968:	63bb      	str	r3, [r7, #56]	@ 0x38
 800796a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	011a      	lsls	r2, r3, #4
 8007978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797a:	4413      	add	r3, r2
 800797c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007980:	637b      	str	r3, [r7, #52]	@ 0x34
 8007982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	b29b      	uxth	r3, r3
 8007988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800798c:	b29a      	uxth	r2, r3
 800798e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007990:	801a      	strh	r2, [r3, #0]
 8007992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007996:	2b3e      	cmp	r3, #62	@ 0x3e
 8007998:	d921      	bls.n	80079de <USB_EPStartXfer+0x806>
 800799a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800799e:	095b      	lsrs	r3, r3, #5
 80079a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80079a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a8:	f003 031f 	and.w	r3, r3, #31
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d104      	bne.n	80079ba <USB_EPStartXfer+0x7e2>
 80079b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b4:	3b01      	subs	r3, #1
 80079b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80079ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	b29a      	uxth	r2, r3
 80079c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	029b      	lsls	r3, r3, #10
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	4313      	orrs	r3, r2
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079da:	801a      	strh	r2, [r3, #0]
 80079dc:	e050      	b.n	8007a80 <USB_EPStartXfer+0x8a8>
 80079de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10a      	bne.n	80079fc <USB_EPStartXfer+0x824>
 80079e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f8:	801a      	strh	r2, [r3, #0]
 80079fa:	e041      	b.n	8007a80 <USB_EPStartXfer+0x8a8>
 80079fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a00:	085b      	lsrs	r3, r3, #1
 8007a02:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d004      	beq.n	8007a1c <USB_EPStartXfer+0x844>
 8007a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a16:	3301      	adds	r3, #1
 8007a18:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	029b      	lsls	r3, r3, #10
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a32:	801a      	strh	r2, [r3, #0]
 8007a34:	e024      	b.n	8007a80 <USB_EPStartXfer+0x8a8>
 8007a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	785b      	ldrb	r3, [r3, #1]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d11c      	bne.n	8007a80 <USB_EPStartXfer+0x8a8>
 8007a46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	461a      	mov	r2, r3
 8007a58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a5a:	4413      	add	r3, r2
 8007a5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	011a      	lsls	r2, r3, #4
 8007a6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a6e:	4413      	add	r3, r2
 8007a70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a7e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	895b      	ldrh	r3, [r3, #10]
 8007a8c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6959      	ldr	r1, [r3, #20]
 8007a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007aa6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007aaa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007aae:	6800      	ldr	r0, [r0, #0]
 8007ab0:	f001 f881 	bl	8008bb6 <USB_WritePMA>
 8007ab4:	e227      	b.n	8007f06 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	881b      	ldrh	r3, [r3, #0]
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007ae8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aec:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007afe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	441a      	add	r2, r3
 8007b0a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007b0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	461a      	mov	r2, r3
 8007b40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b42:	4413      	add	r3, r2
 8007b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	011a      	lsls	r2, r3, #4
 8007b54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b56:	4413      	add	r3, r2
 8007b58:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b66:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	891b      	ldrh	r3, [r3, #8]
 8007b74:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6959      	ldr	r1, [r3, #20]
 8007b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b8e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b92:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b96:	6800      	ldr	r0, [r0, #0]
 8007b98:	f001 f80d 	bl	8008bb6 <USB_WritePMA>
 8007b9c:	e1b3      	b.n	8007f06 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6a1a      	ldr	r2, [r3, #32]
 8007baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bae:	1ad2      	subs	r2, r2, r3
 8007bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	881b      	ldrh	r3, [r3, #0]
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 80c6 	beq.w	8007d70 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	785b      	ldrb	r3, [r3, #1]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d177      	bne.n	8007cf0 <USB_EPStartXfer+0xb18>
 8007c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c20:	4413      	add	r3, r2
 8007c22:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	011a      	lsls	r2, r3, #4
 8007c32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c34:	4413      	add	r3, r2
 8007c36:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c4a:	801a      	strh	r2, [r3, #0]
 8007c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c50:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c52:	d921      	bls.n	8007c98 <USB_EPStartXfer+0xac0>
 8007c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c58:	095b      	lsrs	r3, r3, #5
 8007c5a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c62:	f003 031f 	and.w	r3, r3, #31
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d104      	bne.n	8007c74 <USB_EPStartXfer+0xa9c>
 8007c6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	029b      	lsls	r3, r3, #10
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	4313      	orrs	r3, r2
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c94:	801a      	strh	r2, [r3, #0]
 8007c96:	e050      	b.n	8007d3a <USB_EPStartXfer+0xb62>
 8007c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10a      	bne.n	8007cb6 <USB_EPStartXfer+0xade>
 8007ca0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cb2:	801a      	strh	r2, [r3, #0]
 8007cb4:	e041      	b.n	8007d3a <USB_EPStartXfer+0xb62>
 8007cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cba:	085b      	lsrs	r3, r3, #1
 8007cbc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d004      	beq.n	8007cd6 <USB_EPStartXfer+0xafe>
 8007ccc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007cd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	029b      	lsls	r3, r3, #10
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cec:	801a      	strh	r2, [r3, #0]
 8007cee:	e024      	b.n	8007d3a <USB_EPStartXfer+0xb62>
 8007cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	785b      	ldrb	r3, [r3, #1]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d11c      	bne.n	8007d3a <USB_EPStartXfer+0xb62>
 8007d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	461a      	mov	r2, r3
 8007d12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d14:	4413      	add	r3, r2
 8007d16:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	011a      	lsls	r2, r3, #4
 8007d26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d28:	4413      	add	r3, r2
 8007d2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	895b      	ldrh	r3, [r3, #10]
 8007d46:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6959      	ldr	r1, [r3, #20]
 8007d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d60:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d64:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d68:	6800      	ldr	r0, [r0, #0]
 8007d6a:	f000 ff24 	bl	8008bb6 <USB_WritePMA>
 8007d6e:	e0ca      	b.n	8007f06 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	785b      	ldrb	r3, [r3, #1]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d177      	bne.n	8007e70 <USB_EPStartXfer+0xc98>
 8007d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007da0:	4413      	add	r3, r2
 8007da2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	011a      	lsls	r2, r3, #4
 8007db2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007db4:	4413      	add	r3, r2
 8007db6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007dba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007dbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dbe:	881b      	ldrh	r3, [r3, #0]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dca:	801a      	strh	r2, [r3, #0]
 8007dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007dd2:	d921      	bls.n	8007e18 <USB_EPStartXfer+0xc40>
 8007dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd8:	095b      	lsrs	r3, r3, #5
 8007dda:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de2:	f003 031f 	and.w	r3, r3, #31
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d104      	bne.n	8007df4 <USB_EPStartXfer+0xc1c>
 8007dea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007dee:	3b01      	subs	r3, #1
 8007df0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007df4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007df6:	881b      	ldrh	r3, [r3, #0]
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	029b      	lsls	r3, r3, #10
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	4313      	orrs	r3, r2
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e14:	801a      	strh	r2, [r3, #0]
 8007e16:	e05c      	b.n	8007ed2 <USB_EPStartXfer+0xcfa>
 8007e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10a      	bne.n	8007e36 <USB_EPStartXfer+0xc5e>
 8007e20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e32:	801a      	strh	r2, [r3, #0]
 8007e34:	e04d      	b.n	8007ed2 <USB_EPStartXfer+0xcfa>
 8007e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e3a:	085b      	lsrs	r3, r3, #1
 8007e3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d004      	beq.n	8007e56 <USB_EPStartXfer+0xc7e>
 8007e4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007e50:	3301      	adds	r3, #1
 8007e52:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e58:	881b      	ldrh	r3, [r3, #0]
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	029b      	lsls	r3, r3, #10
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	4313      	orrs	r3, r2
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e6c:	801a      	strh	r2, [r3, #0]
 8007e6e:	e030      	b.n	8007ed2 <USB_EPStartXfer+0xcfa>
 8007e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	785b      	ldrb	r3, [r3, #1]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d128      	bne.n	8007ed2 <USB_EPStartXfer+0xcfa>
 8007e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	011a      	lsls	r2, r3, #4
 8007eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ec2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ed0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	891b      	ldrh	r3, [r3, #8]
 8007ede:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6959      	ldr	r1, [r3, #20]
 8007eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007ef8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007efc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007f00:	6800      	ldr	r0, [r0, #0]
 8007f02:	f000 fe58 	bl	8008bb6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f2c:	817b      	strh	r3, [r7, #10]
 8007f2e:	897b      	ldrh	r3, [r7, #10]
 8007f30:	f083 0310 	eor.w	r3, r3, #16
 8007f34:	817b      	strh	r3, [r7, #10]
 8007f36:	897b      	ldrh	r3, [r7, #10]
 8007f38:	f083 0320 	eor.w	r3, r3, #32
 8007f3c:	817b      	strh	r3, [r7, #10]
 8007f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	441a      	add	r2, r3
 8007f58:	897b      	ldrh	r3, [r7, #10]
 8007f5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	8013      	strh	r3, [r2, #0]
 8007f6e:	f000 bcde 	b.w	800892e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	7b1b      	ldrb	r3, [r3, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f040 80bb 	bne.w	80080fa <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	699a      	ldr	r2, [r3, #24]
 8007f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d917      	bls.n	8007fd0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	699a      	ldr	r2, [r3, #24]
 8007fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc0:	1ad2      	subs	r2, r2, r3
 8007fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	619a      	str	r2, [r3, #24]
 8007fce:	e00e      	b.n	8007fee <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2200      	movs	r2, #0
 8007fec:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008000:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800800a:	b29b      	uxth	r3, r3
 800800c:	461a      	mov	r2, r3
 800800e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008012:	4413      	add	r3, r2
 8008014:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800801c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	011a      	lsls	r2, r3, #4
 8008026:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800802a:	4413      	add	r3, r2
 800802c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008030:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008034:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	b29b      	uxth	r3, r3
 800803c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008040:	b29a      	uxth	r2, r3
 8008042:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008046:	801a      	strh	r2, [r3, #0]
 8008048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800804c:	2b3e      	cmp	r3, #62	@ 0x3e
 800804e:	d924      	bls.n	800809a <USB_EPStartXfer+0xec2>
 8008050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008054:	095b      	lsrs	r3, r3, #5
 8008056:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800805a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800805e:	f003 031f 	and.w	r3, r3, #31
 8008062:	2b00      	cmp	r3, #0
 8008064:	d104      	bne.n	8008070 <USB_EPStartXfer+0xe98>
 8008066:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800806a:	3b01      	subs	r3, #1
 800806c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008070:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	b29a      	uxth	r2, r3
 8008078:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800807c:	b29b      	uxth	r3, r3
 800807e:	029b      	lsls	r3, r3, #10
 8008080:	b29b      	uxth	r3, r3
 8008082:	4313      	orrs	r3, r2
 8008084:	b29b      	uxth	r3, r3
 8008086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800808a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800808e:	b29a      	uxth	r2, r3
 8008090:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008094:	801a      	strh	r2, [r3, #0]
 8008096:	f000 bc10 	b.w	80088ba <USB_EPStartXfer+0x16e2>
 800809a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10c      	bne.n	80080bc <USB_EPStartXfer+0xee4>
 80080a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080b8:	801a      	strh	r2, [r3, #0]
 80080ba:	e3fe      	b.n	80088ba <USB_EPStartXfer+0x16e2>
 80080bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080c0:	085b      	lsrs	r3, r3, #1
 80080c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80080c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d004      	beq.n	80080dc <USB_EPStartXfer+0xf04>
 80080d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80080d6:	3301      	adds	r3, #1
 80080d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80080dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	029b      	lsls	r3, r3, #10
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	4313      	orrs	r3, r2
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080f6:	801a      	strh	r2, [r3, #0]
 80080f8:	e3df      	b.n	80088ba <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80080fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	78db      	ldrb	r3, [r3, #3]
 8008106:	2b02      	cmp	r3, #2
 8008108:	f040 8218 	bne.w	800853c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800810c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	785b      	ldrb	r3, [r3, #1]
 8008118:	2b00      	cmp	r3, #0
 800811a:	f040 809d 	bne.w	8008258 <USB_EPStartXfer+0x1080>
 800811e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008122:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800812c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008130:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800813a:	b29b      	uxth	r3, r3
 800813c:	461a      	mov	r2, r3
 800813e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008142:	4413      	add	r3, r2
 8008144:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800814c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	011a      	lsls	r2, r3, #4
 8008156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800815a:	4413      	add	r3, r2
 800815c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008160:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	b29b      	uxth	r3, r3
 800816c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008170:	b29a      	uxth	r2, r3
 8008172:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008176:	801a      	strh	r2, [r3, #0]
 8008178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800817c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	2b3e      	cmp	r3, #62	@ 0x3e
 8008186:	d92b      	bls.n	80081e0 <USB_EPStartXfer+0x1008>
 8008188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800818c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	095b      	lsrs	r3, r3, #5
 8008196:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800819a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800819e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	f003 031f 	and.w	r3, r3, #31
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d104      	bne.n	80081b8 <USB_EPStartXfer+0xfe0>
 80081ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081b2:	3b01      	subs	r3, #1
 80081b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80081b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	b29a      	uxth	r2, r3
 80081c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	029b      	lsls	r3, r3, #10
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	4313      	orrs	r3, r2
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081dc:	801a      	strh	r2, [r3, #0]
 80081de:	e070      	b.n	80082c2 <USB_EPStartXfer+0x10ea>
 80081e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10c      	bne.n	800820a <USB_EPStartXfer+0x1032>
 80081f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008200:	b29a      	uxth	r2, r3
 8008202:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008206:	801a      	strh	r2, [r3, #0]
 8008208:	e05b      	b.n	80082c2 <USB_EPStartXfer+0x10ea>
 800820a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800820e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	085b      	lsrs	r3, r3, #1
 8008218:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800821c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	2b00      	cmp	r3, #0
 800822e:	d004      	beq.n	800823a <USB_EPStartXfer+0x1062>
 8008230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008234:	3301      	adds	r3, #1
 8008236:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800823a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	b29a      	uxth	r2, r3
 8008242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008246:	b29b      	uxth	r3, r3
 8008248:	029b      	lsls	r3, r3, #10
 800824a:	b29b      	uxth	r3, r3
 800824c:	4313      	orrs	r3, r2
 800824e:	b29a      	uxth	r2, r3
 8008250:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008254:	801a      	strh	r2, [r3, #0]
 8008256:	e034      	b.n	80082c2 <USB_EPStartXfer+0x10ea>
 8008258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800825c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	785b      	ldrb	r3, [r3, #1]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d12c      	bne.n	80082c2 <USB_EPStartXfer+0x10ea>
 8008268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800826c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800827a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008284:	b29b      	uxth	r3, r3
 8008286:	461a      	mov	r2, r3
 8008288:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800828c:	4413      	add	r3, r2
 800828e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	011a      	lsls	r2, r3, #4
 80082a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80082a4:	4413      	add	r3, r2
 80082a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80082aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80082ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80082c0:	801a      	strh	r2, [r3, #0]
 80082c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80082d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	785b      	ldrb	r3, [r3, #1]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f040 809d 	bne.w	800841c <USB_EPStartXfer+0x1244>
 80082e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80082f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082fe:	b29b      	uxth	r3, r3
 8008300:	461a      	mov	r2, r3
 8008302:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008306:	4413      	add	r3, r2
 8008308:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800830c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	011a      	lsls	r2, r3, #4
 800831a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800831e:	4413      	add	r3, r2
 8008320:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008324:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008328:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	b29b      	uxth	r3, r3
 8008330:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008334:	b29a      	uxth	r2, r3
 8008336:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800833a:	801a      	strh	r2, [r3, #0]
 800833c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	2b3e      	cmp	r3, #62	@ 0x3e
 800834a:	d92b      	bls.n	80083a4 <USB_EPStartXfer+0x11cc>
 800834c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	095b      	lsrs	r3, r3, #5
 800835a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800835e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008362:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	f003 031f 	and.w	r3, r3, #31
 800836e:	2b00      	cmp	r3, #0
 8008370:	d104      	bne.n	800837c <USB_EPStartXfer+0x11a4>
 8008372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008376:	3b01      	subs	r3, #1
 8008378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800837c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008380:	881b      	ldrh	r3, [r3, #0]
 8008382:	b29a      	uxth	r2, r3
 8008384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008388:	b29b      	uxth	r3, r3
 800838a:	029b      	lsls	r3, r3, #10
 800838c:	b29b      	uxth	r3, r3
 800838e:	4313      	orrs	r3, r2
 8008390:	b29b      	uxth	r3, r3
 8008392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800839a:	b29a      	uxth	r2, r3
 800839c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083a0:	801a      	strh	r2, [r3, #0]
 80083a2:	e069      	b.n	8008478 <USB_EPStartXfer+0x12a0>
 80083a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10c      	bne.n	80083ce <USB_EPStartXfer+0x11f6>
 80083b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083b8:	881b      	ldrh	r3, [r3, #0]
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083ca:	801a      	strh	r2, [r3, #0]
 80083cc:	e054      	b.n	8008478 <USB_EPStartXfer+0x12a0>
 80083ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	085b      	lsrs	r3, r3, #1
 80083dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d004      	beq.n	80083fe <USB_EPStartXfer+0x1226>
 80083f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083f8:	3301      	adds	r3, #1
 80083fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	b29a      	uxth	r2, r3
 8008406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800840a:	b29b      	uxth	r3, r3
 800840c:	029b      	lsls	r3, r3, #10
 800840e:	b29b      	uxth	r3, r3
 8008410:	4313      	orrs	r3, r2
 8008412:	b29a      	uxth	r2, r3
 8008414:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008418:	801a      	strh	r2, [r3, #0]
 800841a:	e02d      	b.n	8008478 <USB_EPStartXfer+0x12a0>
 800841c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	785b      	ldrb	r3, [r3, #1]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d125      	bne.n	8008478 <USB_EPStartXfer+0x12a0>
 800842c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008430:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800843a:	b29b      	uxth	r3, r3
 800843c:	461a      	mov	r2, r3
 800843e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008442:	4413      	add	r3, r2
 8008444:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800844c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	011a      	lsls	r2, r3, #4
 8008456:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800845a:	4413      	add	r3, r2
 800845c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008460:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	b29a      	uxth	r2, r3
 8008472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008476:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800847c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	69db      	ldr	r3, [r3, #28]
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 8218 	beq.w	80088ba <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800848a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80084aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80084ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d005      	beq.n	80084c2 <USB_EPStartXfer+0x12ea>
 80084b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80084ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10d      	bne.n	80084de <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80084c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80084c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f040 81f5 	bne.w	80088ba <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80084d0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80084d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f040 81ee 	bne.w	80088ba <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80084de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4413      	add	r3, r2
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008500:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008504:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800850c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	441a      	add	r2, r3
 8008522:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008526:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800852a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800852e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008532:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008536:	b29b      	uxth	r3, r3
 8008538:	8013      	strh	r3, [r2, #0]
 800853a:	e1be      	b.n	80088ba <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800853c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	78db      	ldrb	r3, [r3, #3]
 8008548:	2b01      	cmp	r3, #1
 800854a:	f040 81b4 	bne.w	80088b6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800854e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	699a      	ldr	r2, [r3, #24]
 800855a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800855e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	429a      	cmp	r2, r3
 8008568:	d917      	bls.n	800859a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800856a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800856e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800857a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800857e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699a      	ldr	r2, [r3, #24]
 8008586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800858a:	1ad2      	subs	r2, r2, r3
 800858c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	619a      	str	r2, [r3, #24]
 8008598:	e00e      	b.n	80085b8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800859a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800859e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80085aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2200      	movs	r2, #0
 80085b6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80085b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	785b      	ldrb	r3, [r3, #1]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f040 8085 	bne.w	80086d4 <USB_EPStartXfer+0x14fc>
 80085ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	461a      	mov	r2, r3
 80085ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085ee:	4413      	add	r3, r2
 80085f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	011a      	lsls	r2, r3, #4
 8008602:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008606:	4413      	add	r3, r2
 8008608:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800860c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008610:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008614:	881b      	ldrh	r3, [r3, #0]
 8008616:	b29b      	uxth	r3, r3
 8008618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800861c:	b29a      	uxth	r2, r3
 800861e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008622:	801a      	strh	r2, [r3, #0]
 8008624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008628:	2b3e      	cmp	r3, #62	@ 0x3e
 800862a:	d923      	bls.n	8008674 <USB_EPStartXfer+0x149c>
 800862c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008630:	095b      	lsrs	r3, r3, #5
 8008632:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800863a:	f003 031f 	and.w	r3, r3, #31
 800863e:	2b00      	cmp	r3, #0
 8008640:	d104      	bne.n	800864c <USB_EPStartXfer+0x1474>
 8008642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008646:	3b01      	subs	r3, #1
 8008648:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800864c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	b29a      	uxth	r2, r3
 8008654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008658:	b29b      	uxth	r3, r3
 800865a:	029b      	lsls	r3, r3, #10
 800865c:	b29b      	uxth	r3, r3
 800865e:	4313      	orrs	r3, r2
 8008660:	b29b      	uxth	r3, r3
 8008662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800866a:	b29a      	uxth	r2, r3
 800866c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008670:	801a      	strh	r2, [r3, #0]
 8008672:	e060      	b.n	8008736 <USB_EPStartXfer+0x155e>
 8008674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10c      	bne.n	8008696 <USB_EPStartXfer+0x14be>
 800867c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008680:	881b      	ldrh	r3, [r3, #0]
 8008682:	b29b      	uxth	r3, r3
 8008684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800868c:	b29a      	uxth	r2, r3
 800868e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008692:	801a      	strh	r2, [r3, #0]
 8008694:	e04f      	b.n	8008736 <USB_EPStartXfer+0x155e>
 8008696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800869a:	085b      	lsrs	r3, r3, #1
 800869c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80086a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d004      	beq.n	80086b6 <USB_EPStartXfer+0x14de>
 80086ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086b0:	3301      	adds	r3, #1
 80086b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80086b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086ba:	881b      	ldrh	r3, [r3, #0]
 80086bc:	b29a      	uxth	r2, r3
 80086be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	029b      	lsls	r3, r3, #10
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	4313      	orrs	r3, r2
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086d0:	801a      	strh	r2, [r3, #0]
 80086d2:	e030      	b.n	8008736 <USB_EPStartXfer+0x155e>
 80086d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	785b      	ldrb	r3, [r3, #1]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d128      	bne.n	8008736 <USB_EPStartXfer+0x155e>
 80086e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80086f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008700:	b29b      	uxth	r3, r3
 8008702:	461a      	mov	r2, r3
 8008704:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008708:	4413      	add	r3, r2
 800870a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800870e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	011a      	lsls	r2, r3, #4
 800871c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008720:	4413      	add	r3, r2
 8008722:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008726:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800872a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800872e:	b29a      	uxth	r2, r3
 8008730:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008734:	801a      	strh	r2, [r3, #0]
 8008736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800873a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	785b      	ldrb	r3, [r3, #1]
 8008750:	2b00      	cmp	r3, #0
 8008752:	f040 8085 	bne.w	8008860 <USB_EPStartXfer+0x1688>
 8008756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800875a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008768:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008772:	b29b      	uxth	r3, r3
 8008774:	461a      	mov	r2, r3
 8008776:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800877a:	4413      	add	r3, r2
 800877c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	011a      	lsls	r2, r3, #4
 800878e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008792:	4413      	add	r3, r2
 8008794:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008798:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800879c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087a0:	881b      	ldrh	r3, [r3, #0]
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087ae:	801a      	strh	r2, [r3, #0]
 80087b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80087b6:	d923      	bls.n	8008800 <USB_EPStartXfer+0x1628>
 80087b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087bc:	095b      	lsrs	r3, r3, #5
 80087be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087c6:	f003 031f 	and.w	r3, r3, #31
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d104      	bne.n	80087d8 <USB_EPStartXfer+0x1600>
 80087ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087d2:	3b01      	subs	r3, #1
 80087d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	b29a      	uxth	r2, r3
 80087e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	029b      	lsls	r3, r3, #10
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	4313      	orrs	r3, r2
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087fc:	801a      	strh	r2, [r3, #0]
 80087fe:	e05c      	b.n	80088ba <USB_EPStartXfer+0x16e2>
 8008800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10c      	bne.n	8008822 <USB_EPStartXfer+0x164a>
 8008808:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800880c:	881b      	ldrh	r3, [r3, #0]
 800880e:	b29b      	uxth	r3, r3
 8008810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008818:	b29a      	uxth	r2, r3
 800881a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800881e:	801a      	strh	r2, [r3, #0]
 8008820:	e04b      	b.n	80088ba <USB_EPStartXfer+0x16e2>
 8008822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008826:	085b      	lsrs	r3, r3, #1
 8008828:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800882c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	2b00      	cmp	r3, #0
 8008836:	d004      	beq.n	8008842 <USB_EPStartXfer+0x166a>
 8008838:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800883c:	3301      	adds	r3, #1
 800883e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	b29a      	uxth	r2, r3
 800884a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800884e:	b29b      	uxth	r3, r3
 8008850:	029b      	lsls	r3, r3, #10
 8008852:	b29b      	uxth	r3, r3
 8008854:	4313      	orrs	r3, r2
 8008856:	b29a      	uxth	r2, r3
 8008858:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800885c:	801a      	strh	r2, [r3, #0]
 800885e:	e02c      	b.n	80088ba <USB_EPStartXfer+0x16e2>
 8008860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	785b      	ldrb	r3, [r3, #1]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d124      	bne.n	80088ba <USB_EPStartXfer+0x16e2>
 8008870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800887e:	b29b      	uxth	r3, r3
 8008880:	461a      	mov	r2, r3
 8008882:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008886:	4413      	add	r3, r2
 8008888:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800888c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	011a      	lsls	r2, r3, #4
 800889a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800889e:	4413      	add	r3, r2
 80088a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80088a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80088a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80088b2:	801a      	strh	r2, [r3, #0]
 80088b4:	e001      	b.n	80088ba <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e03a      	b.n	8008930 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	881b      	ldrh	r3, [r3, #0]
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088e0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80088e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80088e8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80088ec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80088f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80088f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80088f8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80088fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008900:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800890a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	441a      	add	r2, r3
 8008916:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800891a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800891e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008922:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800892a:	b29b      	uxth	r3, r3
 800892c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800893a:	b480      	push	{r7}
 800893c:	b085      	sub	sp, #20
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	785b      	ldrb	r3, [r3, #1]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d020      	beq.n	800898e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	4413      	add	r3, r2
 8008956:	881b      	ldrh	r3, [r3, #0]
 8008958:	b29b      	uxth	r3, r3
 800895a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800895e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008962:	81bb      	strh	r3, [r7, #12]
 8008964:	89bb      	ldrh	r3, [r7, #12]
 8008966:	f083 0310 	eor.w	r3, r3, #16
 800896a:	81bb      	strh	r3, [r7, #12]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	441a      	add	r2, r3
 8008976:	89bb      	ldrh	r3, [r7, #12]
 8008978:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800897c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008980:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008984:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008988:	b29b      	uxth	r3, r3
 800898a:	8013      	strh	r3, [r2, #0]
 800898c:	e01f      	b.n	80089ce <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	b29b      	uxth	r3, r3
 800899c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089a4:	81fb      	strh	r3, [r7, #14]
 80089a6:	89fb      	ldrh	r3, [r7, #14]
 80089a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80089ac:	81fb      	strh	r3, [r7, #14]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	441a      	add	r2, r3
 80089b8:	89fb      	ldrh	r3, [r7, #14]
 80089ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bc80      	pop	{r7}
 80089d8:	4770      	bx	lr

080089da <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089da:	b480      	push	{r7}
 80089dc:	b087      	sub	sp, #28
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	7b1b      	ldrb	r3, [r3, #12]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f040 809d 	bne.w	8008b28 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	785b      	ldrb	r3, [r3, #1]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d04c      	beq.n	8008a90 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	823b      	strh	r3, [r7, #16]
 8008a04:	8a3b      	ldrh	r3, [r7, #16]
 8008a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d01b      	beq.n	8008a46 <USB_EPClearStall+0x6c>
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	881b      	ldrh	r3, [r3, #0]
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a24:	81fb      	strh	r3, [r7, #14]
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	441a      	add	r2, r3
 8008a30:	89fb      	ldrh	r3, [r7, #14]
 8008a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	78db      	ldrb	r3, [r3, #3]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d06c      	beq.n	8008b28 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a64:	81bb      	strh	r3, [r7, #12]
 8008a66:	89bb      	ldrh	r3, [r7, #12]
 8008a68:	f083 0320 	eor.w	r3, r3, #32
 8008a6c:	81bb      	strh	r3, [r7, #12]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	441a      	add	r2, r3
 8008a78:	89bb      	ldrh	r3, [r7, #12]
 8008a7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	8013      	strh	r3, [r2, #0]
 8008a8e:	e04b      	b.n	8008b28 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4413      	add	r3, r2
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	82fb      	strh	r3, [r7, #22]
 8008a9e:	8afb      	ldrh	r3, [r7, #22]
 8008aa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d01b      	beq.n	8008ae0 <USB_EPClearStall+0x106>
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	881b      	ldrh	r3, [r3, #0]
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008abe:	82bb      	strh	r3, [r7, #20]
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	441a      	add	r2, r3
 8008aca:	8abb      	ldrh	r3, [r7, #20]
 8008acc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ad0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ad4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008af6:	827b      	strh	r3, [r7, #18]
 8008af8:	8a7b      	ldrh	r3, [r7, #18]
 8008afa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008afe:	827b      	strh	r3, [r7, #18]
 8008b00:	8a7b      	ldrh	r3, [r7, #18]
 8008b02:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008b06:	827b      	strh	r3, [r7, #18]
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	441a      	add	r2, r3
 8008b12:	8a7b      	ldrh	r3, [r7, #18]
 8008b14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	371c      	adds	r7, #28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bc80      	pop	{r7}
 8008b32:	4770      	bx	lr

08008b34 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008b40:	78fb      	ldrb	r3, [r7, #3]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d103      	bne.n	8008b4e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2280      	movs	r2, #128	@ 0x80
 8008b4a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bc80      	pop	{r7}
 8008b58:	4770      	bx	lr

08008b5a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bc80      	pop	{r7}
 8008b6c:	4770      	bx	lr

08008b6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b083      	sub	sp, #12
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bc80      	pop	{r7}
 8008b80:	4770      	bx	lr

08008b82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b085      	sub	sp, #20
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b94:	68fb      	ldr	r3, [r7, #12]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bc80      	pop	{r7}
 8008b9e:	4770      	bx	lr

08008ba0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bc80      	pop	{r7}
 8008bb4:	4770      	bx	lr

08008bb6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b08b      	sub	sp, #44	@ 0x2c
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	60b9      	str	r1, [r7, #8]
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	80fb      	strh	r3, [r7, #6]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008bcc:	88bb      	ldrh	r3, [r7, #4]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	085b      	lsrs	r3, r3, #1
 8008bd2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008bdc:	88fb      	ldrh	r3, [r7, #6]
 8008bde:	005a      	lsls	r2, r3, #1
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	4413      	add	r3, r2
 8008be4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008be8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bee:	e01f      	b.n	8008c30 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	b21b      	sxth	r3, r3
 8008bfe:	021b      	lsls	r3, r3, #8
 8008c00:	b21a      	sxth	r2, r3
 8008c02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	b21b      	sxth	r3, r3
 8008c0a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	8a7a      	ldrh	r2, [r7, #18]
 8008c10:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	3302      	adds	r3, #2
 8008c16:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	3302      	adds	r3, #2
 8008c1c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	3301      	adds	r3, #1
 8008c22:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	3301      	adds	r3, #1
 8008c28:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1dc      	bne.n	8008bf0 <USB_WritePMA+0x3a>
  }
}
 8008c36:	bf00      	nop
 8008c38:	bf00      	nop
 8008c3a:	372c      	adds	r7, #44	@ 0x2c
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bc80      	pop	{r7}
 8008c40:	4770      	bx	lr

08008c42 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b08b      	sub	sp, #44	@ 0x2c
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	461a      	mov	r2, r3
 8008c50:	460b      	mov	r3, r1
 8008c52:	80fb      	strh	r3, [r7, #6]
 8008c54:	4613      	mov	r3, r2
 8008c56:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008c58:	88bb      	ldrh	r3, [r7, #4]
 8008c5a:	085b      	lsrs	r3, r3, #1
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c68:	88fb      	ldrh	r3, [r7, #6]
 8008c6a:	005a      	lsls	r2, r3, #1
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c74:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c7a:	e01b      	b.n	8008cb4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	881b      	ldrh	r3, [r3, #0]
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c84:	6a3b      	ldr	r3, [r7, #32]
 8008c86:	3302      	adds	r3, #2
 8008c88:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	3301      	adds	r3, #1
 8008c96:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	0a1b      	lsrs	r3, r3, #8
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008ca8:	6a3b      	ldr	r3, [r7, #32]
 8008caa:	3302      	adds	r3, #2
 8008cac:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1e0      	bne.n	8008c7c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008cba:	88bb      	ldrh	r3, [r7, #4]
 8008cbc:	f003 0301 	and.w	r3, r3, #1
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d007      	beq.n	8008cd6 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	701a      	strb	r2, [r3, #0]
  }
}
 8008cd6:	bf00      	nop
 8008cd8:	372c      	adds	r7, #44	@ 0x2c
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bc80      	pop	{r7}
 8008cde:	4770      	bx	lr

08008ce0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	7c1b      	ldrb	r3, [r3, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d115      	bne.n	8008d24 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008cf8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cfc:	2202      	movs	r2, #2
 8008cfe:	2181      	movs	r1, #129	@ 0x81
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f001 fe82 	bl	800aa0a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008d0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d10:	2202      	movs	r2, #2
 8008d12:	2101      	movs	r1, #1
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f001 fe78 	bl	800aa0a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008d22:	e012      	b.n	8008d4a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008d24:	2340      	movs	r3, #64	@ 0x40
 8008d26:	2202      	movs	r2, #2
 8008d28:	2181      	movs	r1, #129	@ 0x81
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f001 fe6d 	bl	800aa0a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008d36:	2340      	movs	r3, #64	@ 0x40
 8008d38:	2202      	movs	r2, #2
 8008d3a:	2101      	movs	r1, #1
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f001 fe64 	bl	800aa0a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d4a:	2308      	movs	r3, #8
 8008d4c:	2203      	movs	r2, #3
 8008d4e:	2182      	movs	r1, #130	@ 0x82
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f001 fe5a 	bl	800aa0a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d5c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008d60:	f001 ff7a 	bl	800ac58 <USBD_static_malloc>
 8008d64:	4602      	mov	r2, r0
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d102      	bne.n	8008d7c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008d76:	2301      	movs	r3, #1
 8008d78:	73fb      	strb	r3, [r7, #15]
 8008d7a:	e026      	b.n	8008dca <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d82:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	7c1b      	ldrb	r3, [r3, #16]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d109      	bne.n	8008dba <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008dac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008db0:	2101      	movs	r1, #1
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 ff19 	bl	800abea <USBD_LL_PrepareReceive>
 8008db8:	e007      	b.n	8008dca <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008dc0:	2340      	movs	r3, #64	@ 0x40
 8008dc2:	2101      	movs	r1, #1
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f001 ff10 	bl	800abea <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008de4:	2181      	movs	r1, #129	@ 0x81
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f001 fe35 	bl	800aa56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008df2:	2101      	movs	r1, #1
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f001 fe2e 	bl	800aa56 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008e02:	2182      	movs	r1, #130	@ 0x82
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f001 fe26 	bl	800aa56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00e      	beq.n	8008e38 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f001 ff20 	bl	800ac70 <USBD_static_free>
    pdev->pClassData = NULL;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b086      	sub	sp, #24
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e52:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008e54:	2300      	movs	r3, #0
 8008e56:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d039      	beq.n	8008ee0 <USBD_CDC_Setup+0x9e>
 8008e6c:	2b20      	cmp	r3, #32
 8008e6e:	d17f      	bne.n	8008f70 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	88db      	ldrh	r3, [r3, #6]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d029      	beq.n	8008ecc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	b25b      	sxtb	r3, r3
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	da11      	bge.n	8008ea6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008e8e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	88d2      	ldrh	r2, [r2, #6]
 8008e94:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e96:	6939      	ldr	r1, [r7, #16]
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	88db      	ldrh	r3, [r3, #6]
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f001 fa06 	bl	800a2b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008ea4:	e06b      	b.n	8008f7e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	785a      	ldrb	r2, [r3, #1]
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	88db      	ldrh	r3, [r3, #6]
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008ebc:	6939      	ldr	r1, [r7, #16]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	88db      	ldrh	r3, [r3, #6]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f001 fa21 	bl	800a30c <USBD_CtlPrepareRx>
      break;
 8008eca:	e058      	b.n	8008f7e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	683a      	ldr	r2, [r7, #0]
 8008ed6:	7850      	ldrb	r0, [r2, #1]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	4798      	blx	r3
      break;
 8008ede:	e04e      	b.n	8008f7e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	785b      	ldrb	r3, [r3, #1]
 8008ee4:	2b0b      	cmp	r3, #11
 8008ee6:	d02e      	beq.n	8008f46 <USBD_CDC_Setup+0x104>
 8008ee8:	2b0b      	cmp	r3, #11
 8008eea:	dc38      	bgt.n	8008f5e <USBD_CDC_Setup+0x11c>
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <USBD_CDC_Setup+0xb4>
 8008ef0:	2b0a      	cmp	r3, #10
 8008ef2:	d014      	beq.n	8008f1e <USBD_CDC_Setup+0xdc>
 8008ef4:	e033      	b.n	8008f5e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	d107      	bne.n	8008f10 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008f00:	f107 030c 	add.w	r3, r7, #12
 8008f04:	2202      	movs	r2, #2
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f001 f9d1 	bl	800a2b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f0e:	e02e      	b.n	8008f6e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f001 f962 	bl	800a1dc <USBD_CtlError>
            ret = USBD_FAIL;
 8008f18:	2302      	movs	r3, #2
 8008f1a:	75fb      	strb	r3, [r7, #23]
          break;
 8008f1c:	e027      	b.n	8008f6e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f24:	2b03      	cmp	r3, #3
 8008f26:	d107      	bne.n	8008f38 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008f28:	f107 030f 	add.w	r3, r7, #15
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f001 f9bd 	bl	800a2b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f36:	e01a      	b.n	8008f6e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008f38:	6839      	ldr	r1, [r7, #0]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f001 f94e 	bl	800a1dc <USBD_CtlError>
            ret = USBD_FAIL;
 8008f40:	2302      	movs	r3, #2
 8008f42:	75fb      	strb	r3, [r7, #23]
          break;
 8008f44:	e013      	b.n	8008f6e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f4c:	2b03      	cmp	r3, #3
 8008f4e:	d00d      	beq.n	8008f6c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f001 f942 	bl	800a1dc <USBD_CtlError>
            ret = USBD_FAIL;
 8008f58:	2302      	movs	r3, #2
 8008f5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f5c:	e006      	b.n	8008f6c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008f5e:	6839      	ldr	r1, [r7, #0]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f001 f93b 	bl	800a1dc <USBD_CtlError>
          ret = USBD_FAIL;
 8008f66:	2302      	movs	r3, #2
 8008f68:	75fb      	strb	r3, [r7, #23]
          break;
 8008f6a:	e000      	b.n	8008f6e <USBD_CDC_Setup+0x12c>
          break;
 8008f6c:	bf00      	nop
      }
      break;
 8008f6e:	e006      	b.n	8008f7e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f001 f932 	bl	800a1dc <USBD_CtlError>
      ret = USBD_FAIL;
 8008f78:	2302      	movs	r3, #2
 8008f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f7c:	bf00      	nop
  }

  return ret;
 8008f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3718      	adds	r7, #24
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	460b      	mov	r3, r1
 8008f92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f9a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008fa2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d03a      	beq.n	8009024 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008fae:	78fa      	ldrb	r2, [r7, #3]
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	440b      	add	r3, r1
 8008fbc:	331c      	adds	r3, #28
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d029      	beq.n	8009018 <USBD_CDC_DataIn+0x90>
 8008fc4:	78fa      	ldrb	r2, [r7, #3]
 8008fc6:	6879      	ldr	r1, [r7, #4]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	4413      	add	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	440b      	add	r3, r1
 8008fd2:	331c      	adds	r3, #28
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	78f9      	ldrb	r1, [r7, #3]
 8008fd8:	68b8      	ldr	r0, [r7, #8]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	440b      	add	r3, r1
 8008fe0:	00db      	lsls	r3, r3, #3
 8008fe2:	4403      	add	r3, r0
 8008fe4:	3320      	adds	r3, #32
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008fec:	fb01 f303 	mul.w	r3, r1, r3
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d110      	bne.n	8009018 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008ff6:	78fa      	ldrb	r2, [r7, #3]
 8008ff8:	6879      	ldr	r1, [r7, #4]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	440b      	add	r3, r1
 8009004:	331c      	adds	r3, #28
 8009006:	2200      	movs	r2, #0
 8009008:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800900a:	78f9      	ldrb	r1, [r7, #3]
 800900c:	2300      	movs	r3, #0
 800900e:	2200      	movs	r2, #0
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f001 fdc7 	bl	800aba4 <USBD_LL_Transmit>
 8009016:	e003      	b.n	8009020 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	e000      	b.n	8009026 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009024:	2302      	movs	r3, #2
  }
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b084      	sub	sp, #16
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	460b      	mov	r3, r1
 8009038:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009040:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009042:	78fb      	ldrb	r3, [r7, #3]
 8009044:	4619      	mov	r1, r3
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f001 fdf2 	bl	800ac30 <USBD_LL_GetRxDataSize>
 800904c:	4602      	mov	r2, r0
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00d      	beq.n	800907a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009072:	4611      	mov	r1, r2
 8009074:	4798      	blx	r3

    return USBD_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	e000      	b.n	800907c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800907a:	2302      	movs	r3, #2
  }
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009092:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800909a:	2b00      	cmp	r3, #0
 800909c:	d014      	beq.n	80090c8 <USBD_CDC_EP0_RxReady+0x44>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80090a4:	2bff      	cmp	r3, #255	@ 0xff
 80090a6:	d00f      	beq.n	80090c8 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80090b6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80090be:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	22ff      	movs	r2, #255	@ 0xff
 80090c4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
	...

080090d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2243      	movs	r2, #67	@ 0x43
 80090e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80090e2:	4b03      	ldr	r3, [pc, #12]	@ (80090f0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bc80      	pop	{r7}
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	200000ac 	.word	0x200000ac

080090f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2243      	movs	r2, #67	@ 0x43
 8009100:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009102:	4b03      	ldr	r3, [pc, #12]	@ (8009110 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009104:	4618      	mov	r0, r3
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	bc80      	pop	{r7}
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	20000068 	.word	0x20000068

08009114 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2243      	movs	r2, #67	@ 0x43
 8009120:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009122:	4b03      	ldr	r3, [pc, #12]	@ (8009130 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009124:	4618      	mov	r0, r3
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	bc80      	pop	{r7}
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	200000f0 	.word	0x200000f0

08009134 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	220a      	movs	r2, #10
 8009140:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009142:	4b03      	ldr	r3, [pc, #12]	@ (8009150 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009144:	4618      	mov	r0, r3
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	bc80      	pop	{r7}
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	20000024 	.word	0x20000024

08009154 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800915e:	2302      	movs	r3, #2
 8009160:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d005      	beq.n	8009174 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009174:	7bfb      	ldrb	r3, [r7, #15]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3714      	adds	r7, #20
 800917a:	46bd      	mov	sp, r7
 800917c:	bc80      	pop	{r7}
 800917e:	4770      	bx	lr

08009180 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009180:	b480      	push	{r7}
 8009182:	b087      	sub	sp, #28
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	4613      	mov	r3, r2
 800918c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009194:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800919e:	88fa      	ldrh	r2, [r7, #6]
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	371c      	adds	r7, #28
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bc80      	pop	{r7}
 80091b0:	4770      	bx	lr

080091b2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b085      	sub	sp, #20
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091c2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bc80      	pop	{r7}
 80091d6:	4770      	bx	lr

080091d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d01c      	beq.n	800922c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d115      	bne.n	8009228 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2201      	movs	r2, #1
 8009200:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800921a:	b29b      	uxth	r3, r3
 800921c:	2181      	movs	r1, #129	@ 0x81
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f001 fcc0 	bl	800aba4 <USBD_LL_Transmit>

      return USBD_OK;
 8009224:	2300      	movs	r3, #0
 8009226:	e002      	b.n	800922e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009228:	2301      	movs	r3, #1
 800922a:	e000      	b.n	800922e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800922c:	2302      	movs	r3, #2
  }
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b084      	sub	sp, #16
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009244:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800924c:	2b00      	cmp	r3, #0
 800924e:	d017      	beq.n	8009280 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	7c1b      	ldrb	r3, [r3, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d109      	bne.n	800926c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800925e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009262:	2101      	movs	r1, #1
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 fcc0 	bl	800abea <USBD_LL_PrepareReceive>
 800926a:	e007      	b.n	800927c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009272:	2340      	movs	r3, #64	@ 0x40
 8009274:	2101      	movs	r1, #1
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f001 fcb7 	bl	800abea <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	e000      	b.n	8009282 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009280:	2302      	movs	r3, #2
  }
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b084      	sub	sp, #16
 800928e:	af00      	add	r7, sp, #0
 8009290:	60f8      	str	r0, [r7, #12]
 8009292:	60b9      	str	r1, [r7, #8]
 8009294:	4613      	mov	r3, r2
 8009296:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d101      	bne.n	80092a2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800929e:	2302      	movs	r3, #2
 80092a0:	e01a      	b.n	80092d8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d003      	beq.n	80092b4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d003      	beq.n	80092c2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	79fa      	ldrb	r2, [r7, #7]
 80092ce:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f001 fb25 	bl	800a920 <USBD_LL_Init>

  return USBD_OK;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d006      	beq.n	8009302 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	683a      	ldr	r2, [r7, #0]
 80092f8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	73fb      	strb	r3, [r7, #15]
 8009300:	e001      	b.n	8009306 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009302:	2302      	movs	r3, #2
 8009304:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009306:	7bfb      	ldrb	r3, [r7, #15]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	bc80      	pop	{r7}
 8009310:	4770      	bx	lr

08009312 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b082      	sub	sp, #8
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f001 fb5a 	bl	800a9d4 <USBD_LL_Start>

  return USBD_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800932a:	b480      	push	{r7}
 800932c:	b083      	sub	sp, #12
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	bc80      	pop	{r7}
 800933c:	4770      	bx	lr

0800933e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b084      	sub	sp, #16
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	460b      	mov	r3, r1
 8009348:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800934a:	2302      	movs	r3, #2
 800934c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00c      	beq.n	8009372 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	78fa      	ldrb	r2, [r7, #3]
 8009362:	4611      	mov	r1, r2
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	4798      	blx	r3
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d101      	bne.n	8009372 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009372:	7bfb      	ldrb	r3, [r7, #15]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	460b      	mov	r3, r1
 8009386:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	78fa      	ldrb	r2, [r7, #3]
 8009392:	4611      	mov	r1, r2
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	4798      	blx	r3

  return USBD_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b082      	sub	sp, #8
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 fed8 	bl	800a16a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80093c8:	461a      	mov	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80093d6:	f003 031f 	and.w	r3, r3, #31
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d016      	beq.n	800940c <USBD_LL_SetupStage+0x6a>
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d81c      	bhi.n	800941c <USBD_LL_SetupStage+0x7a>
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d002      	beq.n	80093ec <USBD_LL_SetupStage+0x4a>
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d008      	beq.n	80093fc <USBD_LL_SetupStage+0x5a>
 80093ea:	e017      	b.n	800941c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80093f2:	4619      	mov	r1, r3
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f9cb 	bl	8009790 <USBD_StdDevReq>
      break;
 80093fa:	e01a      	b.n	8009432 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009402:	4619      	mov	r1, r3
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fa2d 	bl	8009864 <USBD_StdItfReq>
      break;
 800940a:	e012      	b.n	8009432 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009412:	4619      	mov	r1, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fa6d 	bl	80098f4 <USBD_StdEPReq>
      break;
 800941a:	e00a      	b.n	8009432 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009422:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009426:	b2db      	uxtb	r3, r3
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f001 fb32 	bl	800aa94 <USBD_LL_StallEP>
      break;
 8009430:	bf00      	nop
  }

  return USBD_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b086      	sub	sp, #24
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	460b      	mov	r3, r1
 8009446:	607a      	str	r2, [r7, #4]
 8009448:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800944a:	7afb      	ldrb	r3, [r7, #11]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d14b      	bne.n	80094e8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009456:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800945e:	2b03      	cmp	r3, #3
 8009460:	d134      	bne.n	80094cc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	68da      	ldr	r2, [r3, #12]
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	429a      	cmp	r2, r3
 800946c:	d919      	bls.n	80094a2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	68da      	ldr	r2, [r3, #12]
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	1ad2      	subs	r2, r2, r3
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	68da      	ldr	r2, [r3, #12]
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009484:	429a      	cmp	r2, r3
 8009486:	d203      	bcs.n	8009490 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800948c:	b29b      	uxth	r3, r3
 800948e:	e002      	b.n	8009496 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009494:	b29b      	uxth	r3, r3
 8009496:	461a      	mov	r2, r3
 8009498:	6879      	ldr	r1, [r7, #4]
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f000 ff54 	bl	800a348 <USBD_CtlContinueRx>
 80094a0:	e038      	b.n	8009514 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00a      	beq.n	80094c4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80094b4:	2b03      	cmp	r3, #3
 80094b6:	d105      	bne.n	80094c4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f000 ff51 	bl	800a36c <USBD_CtlSendStatus>
 80094ca:	e023      	b.n	8009514 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094d2:	2b05      	cmp	r3, #5
 80094d4:	d11e      	bne.n	8009514 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80094de:	2100      	movs	r1, #0
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f001 fad7 	bl	800aa94 <USBD_LL_StallEP>
 80094e6:	e015      	b.n	8009514 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00d      	beq.n	8009510 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d108      	bne.n	8009510 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	7afa      	ldrb	r2, [r7, #11]
 8009508:	4611      	mov	r1, r2
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	4798      	blx	r3
 800950e:	e001      	b.n	8009514 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009510:	2302      	movs	r3, #2
 8009512:	e000      	b.n	8009516 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3718      	adds	r7, #24
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b086      	sub	sp, #24
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	460b      	mov	r3, r1
 8009528:	607a      	str	r2, [r7, #4]
 800952a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800952c:	7afb      	ldrb	r3, [r7, #11]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d17f      	bne.n	8009632 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3314      	adds	r3, #20
 8009536:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800953e:	2b02      	cmp	r3, #2
 8009540:	d15c      	bne.n	80095fc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	68da      	ldr	r2, [r3, #12]
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	429a      	cmp	r2, r3
 800954c:	d915      	bls.n	800957a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	68da      	ldr	r2, [r3, #12]
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	1ad2      	subs	r2, r2, r3
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	b29b      	uxth	r3, r3
 8009562:	461a      	mov	r2, r3
 8009564:	6879      	ldr	r1, [r7, #4]
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f000 febe 	bl	800a2e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800956c:	2300      	movs	r3, #0
 800956e:	2200      	movs	r2, #0
 8009570:	2100      	movs	r1, #0
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f001 fb39 	bl	800abea <USBD_LL_PrepareReceive>
 8009578:	e04e      	b.n	8009618 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	6912      	ldr	r2, [r2, #16]
 8009582:	fbb3 f1f2 	udiv	r1, r3, r2
 8009586:	fb01 f202 	mul.w	r2, r1, r2
 800958a:	1a9b      	subs	r3, r3, r2
 800958c:	2b00      	cmp	r3, #0
 800958e:	d11c      	bne.n	80095ca <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	689a      	ldr	r2, [r3, #8]
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009598:	429a      	cmp	r2, r3
 800959a:	d316      	bcc.n	80095ca <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	689a      	ldr	r2, [r3, #8]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d20f      	bcs.n	80095ca <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80095aa:	2200      	movs	r2, #0
 80095ac:	2100      	movs	r1, #0
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f000 fe9a 	bl	800a2e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095bc:	2300      	movs	r3, #0
 80095be:	2200      	movs	r2, #0
 80095c0:	2100      	movs	r1, #0
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f001 fb11 	bl	800abea <USBD_LL_PrepareReceive>
 80095c8:	e026      	b.n	8009618 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00a      	beq.n	80095ec <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80095dc:	2b03      	cmp	r3, #3
 80095de:	d105      	bne.n	80095ec <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80095ec:	2180      	movs	r1, #128	@ 0x80
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f001 fa50 	bl	800aa94 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 fecc 	bl	800a392 <USBD_CtlReceiveStatus>
 80095fa:	e00d      	b.n	8009618 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009602:	2b04      	cmp	r3, #4
 8009604:	d004      	beq.n	8009610 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800960c:	2b00      	cmp	r3, #0
 800960e:	d103      	bne.n	8009618 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009610:	2180      	movs	r1, #128	@ 0x80
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f001 fa3e 	bl	800aa94 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800961e:	2b01      	cmp	r3, #1
 8009620:	d11d      	bne.n	800965e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f7ff fe81 	bl	800932a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009630:	e015      	b.n	800965e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00d      	beq.n	800965a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009644:	2b03      	cmp	r3, #3
 8009646:	d108      	bne.n	800965a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800964e:	695b      	ldr	r3, [r3, #20]
 8009650:	7afa      	ldrb	r2, [r7, #11]
 8009652:	4611      	mov	r1, r2
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	4798      	blx	r3
 8009658:	e001      	b.n	800965e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800965a:	2302      	movs	r3, #2
 800965c:	e000      	b.n	8009660 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009670:	2340      	movs	r3, #64	@ 0x40
 8009672:	2200      	movs	r2, #0
 8009674:	2100      	movs	r1, #0
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f001 f9c7 	bl	800aa0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2240      	movs	r2, #64	@ 0x40
 8009688:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800968c:	2340      	movs	r3, #64	@ 0x40
 800968e:	2200      	movs	r2, #0
 8009690:	2180      	movs	r1, #128	@ 0x80
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f001 f9b9 	bl	800aa0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2240      	movs	r2, #64	@ 0x40
 80096a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d009      	beq.n	80096e0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	6852      	ldr	r2, [r2, #4]
 80096d8:	b2d2      	uxtb	r2, r2
 80096da:	4611      	mov	r1, r2
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	4798      	blx	r3
  }

  return USBD_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096ea:	b480      	push	{r7}
 80096ec:	b083      	sub	sp, #12
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	460b      	mov	r3, r1
 80096f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	78fa      	ldrb	r2, [r7, #3]
 80096fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	bc80      	pop	{r7}
 8009706:	4770      	bx	lr

08009708 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2204      	movs	r2, #4
 8009720:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	bc80      	pop	{r7}
 800972e:	4770      	bx	lr

08009730 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800973e:	2b04      	cmp	r3, #4
 8009740:	d105      	bne.n	800974e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	bc80      	pop	{r7}
 8009758:	4770      	bx	lr

0800975a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b082      	sub	sp, #8
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009768:	2b03      	cmp	r3, #3
 800976a:	d10b      	bne.n	8009784 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009772:	69db      	ldr	r3, [r3, #28]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d005      	beq.n	8009784 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800977e:	69db      	ldr	r3, [r3, #28]
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
	...

08009790 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097a6:	2b40      	cmp	r3, #64	@ 0x40
 80097a8:	d005      	beq.n	80097b6 <USBD_StdDevReq+0x26>
 80097aa:	2b40      	cmp	r3, #64	@ 0x40
 80097ac:	d84f      	bhi.n	800984e <USBD_StdDevReq+0xbe>
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d009      	beq.n	80097c6 <USBD_StdDevReq+0x36>
 80097b2:	2b20      	cmp	r3, #32
 80097b4:	d14b      	bne.n	800984e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	4798      	blx	r3
      break;
 80097c4:	e048      	b.n	8009858 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	785b      	ldrb	r3, [r3, #1]
 80097ca:	2b09      	cmp	r3, #9
 80097cc:	d839      	bhi.n	8009842 <USBD_StdDevReq+0xb2>
 80097ce:	a201      	add	r2, pc, #4	@ (adr r2, 80097d4 <USBD_StdDevReq+0x44>)
 80097d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d4:	08009825 	.word	0x08009825
 80097d8:	08009839 	.word	0x08009839
 80097dc:	08009843 	.word	0x08009843
 80097e0:	0800982f 	.word	0x0800982f
 80097e4:	08009843 	.word	0x08009843
 80097e8:	08009807 	.word	0x08009807
 80097ec:	080097fd 	.word	0x080097fd
 80097f0:	08009843 	.word	0x08009843
 80097f4:	0800981b 	.word	0x0800981b
 80097f8:	08009811 	.word	0x08009811
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80097fc:	6839      	ldr	r1, [r7, #0]
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f9dc 	bl	8009bbc <USBD_GetDescriptor>
          break;
 8009804:	e022      	b.n	800984c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009806:	6839      	ldr	r1, [r7, #0]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 fb3f 	bl	8009e8c <USBD_SetAddress>
          break;
 800980e:	e01d      	b.n	800984c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fb7e 	bl	8009f14 <USBD_SetConfig>
          break;
 8009818:	e018      	b.n	800984c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 fc07 	bl	800a030 <USBD_GetConfig>
          break;
 8009822:	e013      	b.n	800984c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fc37 	bl	800a09a <USBD_GetStatus>
          break;
 800982c:	e00e      	b.n	800984c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800982e:	6839      	ldr	r1, [r7, #0]
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 fc65 	bl	800a100 <USBD_SetFeature>
          break;
 8009836:	e009      	b.n	800984c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fc74 	bl	800a128 <USBD_ClrFeature>
          break;
 8009840:	e004      	b.n	800984c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009842:	6839      	ldr	r1, [r7, #0]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fcc9 	bl	800a1dc <USBD_CtlError>
          break;
 800984a:	bf00      	nop
      }
      break;
 800984c:	e004      	b.n	8009858 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800984e:	6839      	ldr	r1, [r7, #0]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fcc3 	bl	800a1dc <USBD_CtlError>
      break;
 8009856:	bf00      	nop
  }

  return ret;
 8009858:	7bfb      	ldrb	r3, [r7, #15]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop

08009864 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800986e:	2300      	movs	r3, #0
 8009870:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800987a:	2b40      	cmp	r3, #64	@ 0x40
 800987c:	d005      	beq.n	800988a <USBD_StdItfReq+0x26>
 800987e:	2b40      	cmp	r3, #64	@ 0x40
 8009880:	d82e      	bhi.n	80098e0 <USBD_StdItfReq+0x7c>
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <USBD_StdItfReq+0x26>
 8009886:	2b20      	cmp	r3, #32
 8009888:	d12a      	bne.n	80098e0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009890:	3b01      	subs	r3, #1
 8009892:	2b02      	cmp	r3, #2
 8009894:	d81d      	bhi.n	80098d2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	889b      	ldrh	r3, [r3, #4]
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b01      	cmp	r3, #1
 800989e:	d813      	bhi.n	80098c8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	4798      	blx	r3
 80098ae:	4603      	mov	r3, r0
 80098b0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	88db      	ldrh	r3, [r3, #6]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d110      	bne.n	80098dc <USBD_StdItfReq+0x78>
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10d      	bne.n	80098dc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fd53 	bl	800a36c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80098c6:	e009      	b.n	80098dc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fc86 	bl	800a1dc <USBD_CtlError>
          break;
 80098d0:	e004      	b.n	80098dc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fc81 	bl	800a1dc <USBD_CtlError>
          break;
 80098da:	e000      	b.n	80098de <USBD_StdItfReq+0x7a>
          break;
 80098dc:	bf00      	nop
      }
      break;
 80098de:	e004      	b.n	80098ea <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fc7a 	bl	800a1dc <USBD_CtlError>
      break;
 80098e8:	bf00      	nop
  }

  return USBD_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	889b      	ldrh	r3, [r3, #4]
 8009906:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009910:	2b40      	cmp	r3, #64	@ 0x40
 8009912:	d007      	beq.n	8009924 <USBD_StdEPReq+0x30>
 8009914:	2b40      	cmp	r3, #64	@ 0x40
 8009916:	f200 8146 	bhi.w	8009ba6 <USBD_StdEPReq+0x2b2>
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00a      	beq.n	8009934 <USBD_StdEPReq+0x40>
 800991e:	2b20      	cmp	r3, #32
 8009920:	f040 8141 	bne.w	8009ba6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	6839      	ldr	r1, [r7, #0]
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	4798      	blx	r3
      break;
 8009932:	e13d      	b.n	8009bb0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800993c:	2b20      	cmp	r3, #32
 800993e:	d10a      	bne.n	8009956 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	4798      	blx	r3
 800994e:	4603      	mov	r3, r0
 8009950:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009952:	7bfb      	ldrb	r3, [r7, #15]
 8009954:	e12d      	b.n	8009bb2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	785b      	ldrb	r3, [r3, #1]
 800995a:	2b03      	cmp	r3, #3
 800995c:	d007      	beq.n	800996e <USBD_StdEPReq+0x7a>
 800995e:	2b03      	cmp	r3, #3
 8009960:	f300 811b 	bgt.w	8009b9a <USBD_StdEPReq+0x2a6>
 8009964:	2b00      	cmp	r3, #0
 8009966:	d072      	beq.n	8009a4e <USBD_StdEPReq+0x15a>
 8009968:	2b01      	cmp	r3, #1
 800996a:	d03a      	beq.n	80099e2 <USBD_StdEPReq+0xee>
 800996c:	e115      	b.n	8009b9a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009974:	2b02      	cmp	r3, #2
 8009976:	d002      	beq.n	800997e <USBD_StdEPReq+0x8a>
 8009978:	2b03      	cmp	r3, #3
 800997a:	d015      	beq.n	80099a8 <USBD_StdEPReq+0xb4>
 800997c:	e02b      	b.n	80099d6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800997e:	7bbb      	ldrb	r3, [r7, #14]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00c      	beq.n	800999e <USBD_StdEPReq+0xaa>
 8009984:	7bbb      	ldrb	r3, [r7, #14]
 8009986:	2b80      	cmp	r3, #128	@ 0x80
 8009988:	d009      	beq.n	800999e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800998a:	7bbb      	ldrb	r3, [r7, #14]
 800998c:	4619      	mov	r1, r3
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f001 f880 	bl	800aa94 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009994:	2180      	movs	r1, #128	@ 0x80
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f001 f87c 	bl	800aa94 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800999c:	e020      	b.n	80099e0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800999e:	6839      	ldr	r1, [r7, #0]
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fc1b 	bl	800a1dc <USBD_CtlError>
              break;
 80099a6:	e01b      	b.n	80099e0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	885b      	ldrh	r3, [r3, #2]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d10e      	bne.n	80099ce <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80099b0:	7bbb      	ldrb	r3, [r7, #14]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00b      	beq.n	80099ce <USBD_StdEPReq+0xda>
 80099b6:	7bbb      	ldrb	r3, [r7, #14]
 80099b8:	2b80      	cmp	r3, #128	@ 0x80
 80099ba:	d008      	beq.n	80099ce <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	88db      	ldrh	r3, [r3, #6]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d104      	bne.n	80099ce <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80099c4:	7bbb      	ldrb	r3, [r7, #14]
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f001 f863 	bl	800aa94 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fccc 	bl	800a36c <USBD_CtlSendStatus>

              break;
 80099d4:	e004      	b.n	80099e0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fbff 	bl	800a1dc <USBD_CtlError>
              break;
 80099de:	bf00      	nop
          }
          break;
 80099e0:	e0e0      	b.n	8009ba4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d002      	beq.n	80099f2 <USBD_StdEPReq+0xfe>
 80099ec:	2b03      	cmp	r3, #3
 80099ee:	d015      	beq.n	8009a1c <USBD_StdEPReq+0x128>
 80099f0:	e026      	b.n	8009a40 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099f2:	7bbb      	ldrb	r3, [r7, #14]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00c      	beq.n	8009a12 <USBD_StdEPReq+0x11e>
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
 80099fa:	2b80      	cmp	r3, #128	@ 0x80
 80099fc:	d009      	beq.n	8009a12 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80099fe:	7bbb      	ldrb	r3, [r7, #14]
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f001 f846 	bl	800aa94 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009a08:	2180      	movs	r1, #128	@ 0x80
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f001 f842 	bl	800aa94 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a10:	e01c      	b.n	8009a4c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fbe1 	bl	800a1dc <USBD_CtlError>
              break;
 8009a1a:	e017      	b.n	8009a4c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	885b      	ldrh	r3, [r3, #2]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d112      	bne.n	8009a4a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009a24:	7bbb      	ldrb	r3, [r7, #14]
 8009a26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d004      	beq.n	8009a38 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009a2e:	7bbb      	ldrb	r3, [r7, #14]
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f001 f84d 	bl	800aad2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fc97 	bl	800a36c <USBD_CtlSendStatus>
              }
              break;
 8009a3e:	e004      	b.n	8009a4a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fbca 	bl	800a1dc <USBD_CtlError>
              break;
 8009a48:	e000      	b.n	8009a4c <USBD_StdEPReq+0x158>
              break;
 8009a4a:	bf00      	nop
          }
          break;
 8009a4c:	e0aa      	b.n	8009ba4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d002      	beq.n	8009a5e <USBD_StdEPReq+0x16a>
 8009a58:	2b03      	cmp	r3, #3
 8009a5a:	d032      	beq.n	8009ac2 <USBD_StdEPReq+0x1ce>
 8009a5c:	e097      	b.n	8009b8e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a5e:	7bbb      	ldrb	r3, [r7, #14]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d007      	beq.n	8009a74 <USBD_StdEPReq+0x180>
 8009a64:	7bbb      	ldrb	r3, [r7, #14]
 8009a66:	2b80      	cmp	r3, #128	@ 0x80
 8009a68:	d004      	beq.n	8009a74 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fbb5 	bl	800a1dc <USBD_CtlError>
                break;
 8009a72:	e091      	b.n	8009b98 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	da0b      	bge.n	8009a94 <USBD_StdEPReq+0x1a0>
 8009a7c:	7bbb      	ldrb	r3, [r7, #14]
 8009a7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a82:	4613      	mov	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	3310      	adds	r3, #16
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	4413      	add	r3, r2
 8009a90:	3304      	adds	r3, #4
 8009a92:	e00b      	b.n	8009aac <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a94:	7bbb      	ldrb	r3, [r7, #14]
 8009a96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	3304      	adds	r3, #4
 8009aac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fbf8 	bl	800a2b0 <USBD_CtlSendData>
              break;
 8009ac0:	e06a      	b.n	8009b98 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ac2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	da11      	bge.n	8009aee <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009aca:	7bbb      	ldrb	r3, [r7, #14]
 8009acc:	f003 020f 	and.w	r2, r3, #15
 8009ad0:	6879      	ldr	r1, [r7, #4]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	440b      	add	r3, r1
 8009adc:	3318      	adds	r3, #24
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d117      	bne.n	8009b14 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fb78 	bl	800a1dc <USBD_CtlError>
                  break;
 8009aec:	e054      	b.n	8009b98 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009aee:	7bbb      	ldrb	r3, [r7, #14]
 8009af0:	f003 020f 	and.w	r2, r3, #15
 8009af4:	6879      	ldr	r1, [r7, #4]
 8009af6:	4613      	mov	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	440b      	add	r3, r1
 8009b00:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d104      	bne.n	8009b14 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009b0a:	6839      	ldr	r1, [r7, #0]
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fb65 	bl	800a1dc <USBD_CtlError>
                  break;
 8009b12:	e041      	b.n	8009b98 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	da0b      	bge.n	8009b34 <USBD_StdEPReq+0x240>
 8009b1c:	7bbb      	ldrb	r3, [r7, #14]
 8009b1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b22:	4613      	mov	r3, r2
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4413      	add	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	3310      	adds	r3, #16
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	4413      	add	r3, r2
 8009b30:	3304      	adds	r3, #4
 8009b32:	e00b      	b.n	8009b4c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
 8009b36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	4413      	add	r3, r2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	4413      	add	r3, r2
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b4e:	7bbb      	ldrb	r3, [r7, #14]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <USBD_StdEPReq+0x266>
 8009b54:	7bbb      	ldrb	r3, [r7, #14]
 8009b56:	2b80      	cmp	r3, #128	@ 0x80
 8009b58:	d103      	bne.n	8009b62 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	601a      	str	r2, [r3, #0]
 8009b60:	e00e      	b.n	8009b80 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009b62:	7bbb      	ldrb	r3, [r7, #14]
 8009b64:	4619      	mov	r1, r3
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 ffd2 	bl	800ab10 <USBD_LL_IsStallEP>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d003      	beq.n	8009b7a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	2201      	movs	r2, #1
 8009b76:	601a      	str	r2, [r3, #0]
 8009b78:	e002      	b.n	8009b80 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	2202      	movs	r2, #2
 8009b84:	4619      	mov	r1, r3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fb92 	bl	800a2b0 <USBD_CtlSendData>
              break;
 8009b8c:	e004      	b.n	8009b98 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009b8e:	6839      	ldr	r1, [r7, #0]
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fb23 	bl	800a1dc <USBD_CtlError>
              break;
 8009b96:	bf00      	nop
          }
          break;
 8009b98:	e004      	b.n	8009ba4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fb1d 	bl	800a1dc <USBD_CtlError>
          break;
 8009ba2:	bf00      	nop
      }
      break;
 8009ba4:	e004      	b.n	8009bb0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009ba6:	6839      	ldr	r1, [r7, #0]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 fb17 	bl	800a1dc <USBD_CtlError>
      break;
 8009bae:	bf00      	nop
  }

  return ret;
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
	...

08009bbc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	885b      	ldrh	r3, [r3, #2]
 8009bd6:	0a1b      	lsrs	r3, r3, #8
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	2b06      	cmp	r3, #6
 8009bde:	f200 8128 	bhi.w	8009e32 <USBD_GetDescriptor+0x276>
 8009be2:	a201      	add	r2, pc, #4	@ (adr r2, 8009be8 <USBD_GetDescriptor+0x2c>)
 8009be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be8:	08009c05 	.word	0x08009c05
 8009bec:	08009c1d 	.word	0x08009c1d
 8009bf0:	08009c5d 	.word	0x08009c5d
 8009bf4:	08009e33 	.word	0x08009e33
 8009bf8:	08009e33 	.word	0x08009e33
 8009bfc:	08009dd3 	.word	0x08009dd3
 8009c00:	08009dff 	.word	0x08009dff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	7c12      	ldrb	r2, [r2, #16]
 8009c10:	f107 0108 	add.w	r1, r7, #8
 8009c14:	4610      	mov	r0, r2
 8009c16:	4798      	blx	r3
 8009c18:	60f8      	str	r0, [r7, #12]
      break;
 8009c1a:	e112      	b.n	8009e42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	7c1b      	ldrb	r3, [r3, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d10d      	bne.n	8009c40 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c2c:	f107 0208 	add.w	r2, r7, #8
 8009c30:	4610      	mov	r0, r2
 8009c32:	4798      	blx	r3
 8009c34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c3e:	e100      	b.n	8009e42 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c48:	f107 0208 	add.w	r2, r7, #8
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	4798      	blx	r3
 8009c50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	3301      	adds	r3, #1
 8009c56:	2202      	movs	r2, #2
 8009c58:	701a      	strb	r2, [r3, #0]
      break;
 8009c5a:	e0f2      	b.n	8009e42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	885b      	ldrh	r3, [r3, #2]
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	2b05      	cmp	r3, #5
 8009c64:	f200 80ac 	bhi.w	8009dc0 <USBD_GetDescriptor+0x204>
 8009c68:	a201      	add	r2, pc, #4	@ (adr r2, 8009c70 <USBD_GetDescriptor+0xb4>)
 8009c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6e:	bf00      	nop
 8009c70:	08009c89 	.word	0x08009c89
 8009c74:	08009cbd 	.word	0x08009cbd
 8009c78:	08009cf1 	.word	0x08009cf1
 8009c7c:	08009d25 	.word	0x08009d25
 8009c80:	08009d59 	.word	0x08009d59
 8009c84:	08009d8d 	.word	0x08009d8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00b      	beq.n	8009cac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	7c12      	ldrb	r2, [r2, #16]
 8009ca0:	f107 0108 	add.w	r1, r7, #8
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	4798      	blx	r3
 8009ca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009caa:	e091      	b.n	8009dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fa94 	bl	800a1dc <USBD_CtlError>
            err++;
 8009cb4:	7afb      	ldrb	r3, [r7, #11]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cba:	e089      	b.n	8009dd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00b      	beq.n	8009ce0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	7c12      	ldrb	r2, [r2, #16]
 8009cd4:	f107 0108 	add.w	r1, r7, #8
 8009cd8:	4610      	mov	r0, r2
 8009cda:	4798      	blx	r3
 8009cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cde:	e077      	b.n	8009dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ce0:	6839      	ldr	r1, [r7, #0]
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fa7a 	bl	800a1dc <USBD_CtlError>
            err++;
 8009ce8:	7afb      	ldrb	r3, [r7, #11]
 8009cea:	3301      	adds	r3, #1
 8009cec:	72fb      	strb	r3, [r7, #11]
          break;
 8009cee:	e06f      	b.n	8009dd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00b      	beq.n	8009d14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	7c12      	ldrb	r2, [r2, #16]
 8009d08:	f107 0108 	add.w	r1, r7, #8
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	4798      	blx	r3
 8009d10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d12:	e05d      	b.n	8009dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fa60 	bl	800a1dc <USBD_CtlError>
            err++;
 8009d1c:	7afb      	ldrb	r3, [r7, #11]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	72fb      	strb	r3, [r7, #11]
          break;
 8009d22:	e055      	b.n	8009dd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00b      	beq.n	8009d48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	7c12      	ldrb	r2, [r2, #16]
 8009d3c:	f107 0108 	add.w	r1, r7, #8
 8009d40:	4610      	mov	r0, r2
 8009d42:	4798      	blx	r3
 8009d44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d46:	e043      	b.n	8009dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fa46 	bl	800a1dc <USBD_CtlError>
            err++;
 8009d50:	7afb      	ldrb	r3, [r7, #11]
 8009d52:	3301      	adds	r3, #1
 8009d54:	72fb      	strb	r3, [r7, #11]
          break;
 8009d56:	e03b      	b.n	8009dd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d5e:	695b      	ldr	r3, [r3, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00b      	beq.n	8009d7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d6a:	695b      	ldr	r3, [r3, #20]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	7c12      	ldrb	r2, [r2, #16]
 8009d70:	f107 0108 	add.w	r1, r7, #8
 8009d74:	4610      	mov	r0, r2
 8009d76:	4798      	blx	r3
 8009d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d7a:	e029      	b.n	8009dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d7c:	6839      	ldr	r1, [r7, #0]
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fa2c 	bl	800a1dc <USBD_CtlError>
            err++;
 8009d84:	7afb      	ldrb	r3, [r7, #11]
 8009d86:	3301      	adds	r3, #1
 8009d88:	72fb      	strb	r3, [r7, #11]
          break;
 8009d8a:	e021      	b.n	8009dd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00b      	beq.n	8009db0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d9e:	699b      	ldr	r3, [r3, #24]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	7c12      	ldrb	r2, [r2, #16]
 8009da4:	f107 0108 	add.w	r1, r7, #8
 8009da8:	4610      	mov	r0, r2
 8009daa:	4798      	blx	r3
 8009dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dae:	e00f      	b.n	8009dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009db0:	6839      	ldr	r1, [r7, #0]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 fa12 	bl	800a1dc <USBD_CtlError>
            err++;
 8009db8:	7afb      	ldrb	r3, [r7, #11]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8009dbe:	e007      	b.n	8009dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009dc0:	6839      	ldr	r1, [r7, #0]
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 fa0a 	bl	800a1dc <USBD_CtlError>
          err++;
 8009dc8:	7afb      	ldrb	r3, [r7, #11]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009dce:	e038      	b.n	8009e42 <USBD_GetDescriptor+0x286>
 8009dd0:	e037      	b.n	8009e42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	7c1b      	ldrb	r3, [r3, #16]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d109      	bne.n	8009dee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009de2:	f107 0208 	add.w	r2, r7, #8
 8009de6:	4610      	mov	r0, r2
 8009de8:	4798      	blx	r3
 8009dea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dec:	e029      	b.n	8009e42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 f9f3 	bl	800a1dc <USBD_CtlError>
        err++;
 8009df6:	7afb      	ldrb	r3, [r7, #11]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	72fb      	strb	r3, [r7, #11]
      break;
 8009dfc:	e021      	b.n	8009e42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	7c1b      	ldrb	r3, [r3, #16]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10d      	bne.n	8009e22 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e0e:	f107 0208 	add.w	r2, r7, #8
 8009e12:	4610      	mov	r0, r2
 8009e14:	4798      	blx	r3
 8009e16:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	2207      	movs	r2, #7
 8009e1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e20:	e00f      	b.n	8009e42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f9d9 	bl	800a1dc <USBD_CtlError>
        err++;
 8009e2a:	7afb      	ldrb	r3, [r7, #11]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	72fb      	strb	r3, [r7, #11]
      break;
 8009e30:	e007      	b.n	8009e42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e32:	6839      	ldr	r1, [r7, #0]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 f9d1 	bl	800a1dc <USBD_CtlError>
      err++;
 8009e3a:	7afb      	ldrb	r3, [r7, #11]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	72fb      	strb	r3, [r7, #11]
      break;
 8009e40:	bf00      	nop
  }

  if (err != 0U)
 8009e42:	7afb      	ldrb	r3, [r7, #11]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d11c      	bne.n	8009e82 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009e48:	893b      	ldrh	r3, [r7, #8]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d011      	beq.n	8009e72 <USBD_GetDescriptor+0x2b6>
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	88db      	ldrh	r3, [r3, #6]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00d      	beq.n	8009e72 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	88da      	ldrh	r2, [r3, #6]
 8009e5a:	893b      	ldrh	r3, [r7, #8]
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	bf28      	it	cs
 8009e60:	4613      	movcs	r3, r2
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e66:	893b      	ldrh	r3, [r7, #8]
 8009e68:	461a      	mov	r2, r3
 8009e6a:	68f9      	ldr	r1, [r7, #12]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fa1f 	bl	800a2b0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	88db      	ldrh	r3, [r3, #6]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d104      	bne.n	8009e84 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 fa76 	bl	800a36c <USBD_CtlSendStatus>
 8009e80:	e000      	b.n	8009e84 <USBD_GetDescriptor+0x2c8>
    return;
 8009e82:	bf00      	nop
    }
  }
}
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop

08009e8c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	889b      	ldrh	r3, [r3, #4]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d130      	bne.n	8009f00 <USBD_SetAddress+0x74>
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	88db      	ldrh	r3, [r3, #6]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d12c      	bne.n	8009f00 <USBD_SetAddress+0x74>
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	885b      	ldrh	r3, [r3, #2]
 8009eaa:	2b7f      	cmp	r3, #127	@ 0x7f
 8009eac:	d828      	bhi.n	8009f00 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	885b      	ldrh	r3, [r3, #2]
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ec0:	2b03      	cmp	r3, #3
 8009ec2:	d104      	bne.n	8009ece <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f988 	bl	800a1dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ecc:	e01d      	b.n	8009f0a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	7bfa      	ldrb	r2, [r7, #15]
 8009ed2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ed6:	7bfb      	ldrb	r3, [r7, #15]
 8009ed8:	4619      	mov	r1, r3
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fe43 	bl	800ab66 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 fa43 	bl	800a36c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ee6:	7bfb      	ldrb	r3, [r7, #15]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d004      	beq.n	8009ef6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2202      	movs	r2, #2
 8009ef0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ef4:	e009      	b.n	8009f0a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009efe:	e004      	b.n	8009f0a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009f00:	6839      	ldr	r1, [r7, #0]
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f96a 	bl	800a1dc <USBD_CtlError>
  }
}
 8009f08:	bf00      	nop
 8009f0a:	bf00      	nop
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
	...

08009f14 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	885b      	ldrh	r3, [r3, #2]
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	4b41      	ldr	r3, [pc, #260]	@ (800a02c <USBD_SetConfig+0x118>)
 8009f26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f28:	4b40      	ldr	r3, [pc, #256]	@ (800a02c <USBD_SetConfig+0x118>)
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d904      	bls.n	8009f3a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f952 	bl	800a1dc <USBD_CtlError>
 8009f38:	e075      	b.n	800a026 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d002      	beq.n	8009f4a <USBD_SetConfig+0x36>
 8009f44:	2b03      	cmp	r3, #3
 8009f46:	d023      	beq.n	8009f90 <USBD_SetConfig+0x7c>
 8009f48:	e062      	b.n	800a010 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009f4a:	4b38      	ldr	r3, [pc, #224]	@ (800a02c <USBD_SetConfig+0x118>)
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d01a      	beq.n	8009f88 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009f52:	4b36      	ldr	r3, [pc, #216]	@ (800a02c <USBD_SetConfig+0x118>)
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2203      	movs	r2, #3
 8009f60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f64:	4b31      	ldr	r3, [pc, #196]	@ (800a02c <USBD_SetConfig+0x118>)
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	4619      	mov	r1, r3
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f7ff f9e7 	bl	800933e <USBD_SetClassConfig>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d104      	bne.n	8009f80 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 f92f 	bl	800a1dc <USBD_CtlError>
            return;
 8009f7e:	e052      	b.n	800a026 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 f9f3 	bl	800a36c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f86:	e04e      	b.n	800a026 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f9ef 	bl	800a36c <USBD_CtlSendStatus>
        break;
 8009f8e:	e04a      	b.n	800a026 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009f90:	4b26      	ldr	r3, [pc, #152]	@ (800a02c <USBD_SetConfig+0x118>)
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d112      	bne.n	8009fbe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009fa0:	4b22      	ldr	r3, [pc, #136]	@ (800a02c <USBD_SetConfig+0x118>)
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009faa:	4b20      	ldr	r3, [pc, #128]	@ (800a02c <USBD_SetConfig+0x118>)
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff f9e3 	bl	800937c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f9d8 	bl	800a36c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009fbc:	e033      	b.n	800a026 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800a02c <USBD_SetConfig+0x118>)
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d01d      	beq.n	800a008 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f7ff f9d1 	bl	800937c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009fda:	4b14      	ldr	r3, [pc, #80]	@ (800a02c <USBD_SetConfig+0x118>)
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009fe4:	4b11      	ldr	r3, [pc, #68]	@ (800a02c <USBD_SetConfig+0x118>)
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7ff f9a7 	bl	800933e <USBD_SetClassConfig>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d104      	bne.n	800a000 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009ff6:	6839      	ldr	r1, [r7, #0]
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 f8ef 	bl	800a1dc <USBD_CtlError>
            return;
 8009ffe:	e012      	b.n	800a026 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f9b3 	bl	800a36c <USBD_CtlSendStatus>
        break;
 800a006:	e00e      	b.n	800a026 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f9af 	bl	800a36c <USBD_CtlSendStatus>
        break;
 800a00e:	e00a      	b.n	800a026 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f8e2 	bl	800a1dc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a018:	4b04      	ldr	r3, [pc, #16]	@ (800a02c <USBD_SetConfig+0x118>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	4619      	mov	r1, r3
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7ff f9ac 	bl	800937c <USBD_ClrClassConfig>
        break;
 800a024:	bf00      	nop
    }
  }
}
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	2000040c 	.word	0x2000040c

0800a030 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	88db      	ldrh	r3, [r3, #6]
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d004      	beq.n	800a04c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a042:	6839      	ldr	r1, [r7, #0]
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 f8c9 	bl	800a1dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a04a:	e022      	b.n	800a092 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a052:	2b02      	cmp	r3, #2
 800a054:	dc02      	bgt.n	800a05c <USBD_GetConfig+0x2c>
 800a056:	2b00      	cmp	r3, #0
 800a058:	dc03      	bgt.n	800a062 <USBD_GetConfig+0x32>
 800a05a:	e015      	b.n	800a088 <USBD_GetConfig+0x58>
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	d00b      	beq.n	800a078 <USBD_GetConfig+0x48>
 800a060:	e012      	b.n	800a088 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	3308      	adds	r3, #8
 800a06c:	2201      	movs	r2, #1
 800a06e:	4619      	mov	r1, r3
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f91d 	bl	800a2b0 <USBD_CtlSendData>
        break;
 800a076:	e00c      	b.n	800a092 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	3304      	adds	r3, #4
 800a07c:	2201      	movs	r2, #1
 800a07e:	4619      	mov	r1, r3
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 f915 	bl	800a2b0 <USBD_CtlSendData>
        break;
 800a086:	e004      	b.n	800a092 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 f8a6 	bl	800a1dc <USBD_CtlError>
        break;
 800a090:	bf00      	nop
}
 800a092:	bf00      	nop
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b082      	sub	sp, #8
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d81e      	bhi.n	800a0ee <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	88db      	ldrh	r3, [r3, #6]
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d004      	beq.n	800a0c2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a0b8:	6839      	ldr	r1, [r7, #0]
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f88e 	bl	800a1dc <USBD_CtlError>
        break;
 800a0c0:	e01a      	b.n	800a0f8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d005      	beq.n	800a0de <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	f043 0202 	orr.w	r2, r3, #2
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	330c      	adds	r3, #12
 800a0e2:	2202      	movs	r2, #2
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 f8e2 	bl	800a2b0 <USBD_CtlSendData>
      break;
 800a0ec:	e004      	b.n	800a0f8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a0ee:	6839      	ldr	r1, [r7, #0]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f873 	bl	800a1dc <USBD_CtlError>
      break;
 800a0f6:	bf00      	nop
  }
}
 800a0f8:	bf00      	nop
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	885b      	ldrh	r3, [r3, #2]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d106      	bne.n	800a120 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f926 	bl	800a36c <USBD_CtlSendStatus>
  }
}
 800a120:	bf00      	nop
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a138:	3b01      	subs	r3, #1
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d80b      	bhi.n	800a156 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	885b      	ldrh	r3, [r3, #2]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d10c      	bne.n	800a160 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f90c 	bl	800a36c <USBD_CtlSendStatus>
      }
      break;
 800a154:	e004      	b.n	800a160 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a156:	6839      	ldr	r1, [r7, #0]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f83f 	bl	800a1dc <USBD_CtlError>
      break;
 800a15e:	e000      	b.n	800a162 <USBD_ClrFeature+0x3a>
      break;
 800a160:	bf00      	nop
  }
}
 800a162:	bf00      	nop
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a16a:	b480      	push	{r7}
 800a16c:	b083      	sub	sp, #12
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
 800a172:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	781a      	ldrb	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	785a      	ldrb	r2, [r3, #1]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	3302      	adds	r3, #2
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	461a      	mov	r2, r3
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	3303      	adds	r3, #3
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	021b      	lsls	r3, r3, #8
 800a194:	b29b      	uxth	r3, r3
 800a196:	4413      	add	r3, r2
 800a198:	b29a      	uxth	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	3305      	adds	r3, #5
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	021b      	lsls	r3, r3, #8
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	4413      	add	r3, r2
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	3306      	adds	r3, #6
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	3307      	adds	r3, #7
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	021b      	lsls	r3, r3, #8
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	4413      	add	r3, r2
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	80da      	strh	r2, [r3, #6]

}
 800a1d2:	bf00      	nop
 800a1d4:	370c      	adds	r7, #12
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bc80      	pop	{r7}
 800a1da:	4770      	bx	lr

0800a1dc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a1e6:	2180      	movs	r1, #128	@ 0x80
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 fc53 	bl	800aa94 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 fc4f 	bl	800aa94 <USBD_LL_StallEP>
}
 800a1f6:	bf00      	nop
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b086      	sub	sp, #24
 800a202:	af00      	add	r7, sp, #0
 800a204:	60f8      	str	r0, [r7, #12]
 800a206:	60b9      	str	r1, [r7, #8]
 800a208:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a20a:	2300      	movs	r3, #0
 800a20c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d032      	beq.n	800a27a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f000 f834 	bl	800a282 <USBD_GetLen>
 800a21a:	4603      	mov	r3, r0
 800a21c:	3301      	adds	r3, #1
 800a21e:	b29b      	uxth	r3, r3
 800a220:	005b      	lsls	r3, r3, #1
 800a222:	b29a      	uxth	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a228:	7dfb      	ldrb	r3, [r7, #23]
 800a22a:	1c5a      	adds	r2, r3, #1
 800a22c:	75fa      	strb	r2, [r7, #23]
 800a22e:	461a      	mov	r2, r3
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	4413      	add	r3, r2
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	7812      	ldrb	r2, [r2, #0]
 800a238:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a23a:	7dfb      	ldrb	r3, [r7, #23]
 800a23c:	1c5a      	adds	r2, r3, #1
 800a23e:	75fa      	strb	r2, [r7, #23]
 800a240:	461a      	mov	r2, r3
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	4413      	add	r3, r2
 800a246:	2203      	movs	r2, #3
 800a248:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a24a:	e012      	b.n	800a272 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	1c5a      	adds	r2, r3, #1
 800a250:	60fa      	str	r2, [r7, #12]
 800a252:	7dfa      	ldrb	r2, [r7, #23]
 800a254:	1c51      	adds	r1, r2, #1
 800a256:	75f9      	strb	r1, [r7, #23]
 800a258:	4611      	mov	r1, r2
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	440a      	add	r2, r1
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a262:	7dfb      	ldrb	r3, [r7, #23]
 800a264:	1c5a      	adds	r2, r3, #1
 800a266:	75fa      	strb	r2, [r7, #23]
 800a268:	461a      	mov	r2, r3
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	4413      	add	r3, r2
 800a26e:	2200      	movs	r2, #0
 800a270:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1e8      	bne.n	800a24c <USBD_GetString+0x4e>
    }
  }
}
 800a27a:	bf00      	nop
 800a27c:	3718      	adds	r7, #24
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a282:	b480      	push	{r7}
 800a284:	b085      	sub	sp, #20
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a28a:	2300      	movs	r3, #0
 800a28c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a28e:	e005      	b.n	800a29c <USBD_GetLen+0x1a>
  {
    len++;
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	3301      	adds	r3, #1
 800a294:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	3301      	adds	r3, #1
 800a29a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1f5      	bne.n	800a290 <USBD_GetLen+0xe>
  }

  return len;
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bc80      	pop	{r7}
 800a2ae:	4770      	bx	lr

0800a2b0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2202      	movs	r2, #2
 800a2c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a2c6:	88fa      	ldrh	r2, [r7, #6]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a2cc:	88fa      	ldrh	r2, [r7, #6]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2d2:	88fb      	ldrh	r3, [r7, #6]
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f000 fc63 	bl	800aba4 <USBD_LL_Transmit>

  return USBD_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2f6:	88fb      	ldrh	r3, [r7, #6]
 800a2f8:	68ba      	ldr	r2, [r7, #8]
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f000 fc51 	bl	800aba4 <USBD_LL_Transmit>

  return USBD_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	4613      	mov	r3, r2
 800a318:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2203      	movs	r2, #3
 800a31e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a322:	88fa      	ldrh	r2, [r7, #6]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a32a:	88fa      	ldrh	r2, [r7, #6]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a332:	88fb      	ldrh	r3, [r7, #6]
 800a334:	68ba      	ldr	r2, [r7, #8]
 800a336:	2100      	movs	r1, #0
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f000 fc56 	bl	800abea <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	4613      	mov	r3, r2
 800a354:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a356:	88fb      	ldrh	r3, [r7, #6]
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	2100      	movs	r1, #0
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f000 fc44 	bl	800abea <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2204      	movs	r2, #4
 800a378:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a37c:	2300      	movs	r3, #0
 800a37e:	2200      	movs	r2, #0
 800a380:	2100      	movs	r1, #0
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fc0e 	bl	800aba4 <USBD_LL_Transmit>

  return USBD_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b082      	sub	sp, #8
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2205      	movs	r2, #5
 800a39e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 fc1e 	bl	800abea <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	4912      	ldr	r1, [pc, #72]	@ (800a408 <MX_USB_DEVICE_Init+0x50>)
 800a3c0:	4812      	ldr	r0, [pc, #72]	@ (800a40c <MX_USB_DEVICE_Init+0x54>)
 800a3c2:	f7fe ff62 	bl	800928a <USBD_Init>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a3cc:	f7f8 f8c8 	bl	8002560 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a3d0:	490f      	ldr	r1, [pc, #60]	@ (800a410 <MX_USB_DEVICE_Init+0x58>)
 800a3d2:	480e      	ldr	r0, [pc, #56]	@ (800a40c <MX_USB_DEVICE_Init+0x54>)
 800a3d4:	f7fe ff84 	bl	80092e0 <USBD_RegisterClass>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a3de:	f7f8 f8bf 	bl	8002560 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a3e2:	490c      	ldr	r1, [pc, #48]	@ (800a414 <MX_USB_DEVICE_Init+0x5c>)
 800a3e4:	4809      	ldr	r0, [pc, #36]	@ (800a40c <MX_USB_DEVICE_Init+0x54>)
 800a3e6:	f7fe feb5 	bl	8009154 <USBD_CDC_RegisterInterface>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a3f0:	f7f8 f8b6 	bl	8002560 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a3f4:	4805      	ldr	r0, [pc, #20]	@ (800a40c <MX_USB_DEVICE_Init+0x54>)
 800a3f6:	f7fe ff8c 	bl	8009312 <USBD_Start>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a400:	f7f8 f8ae 	bl	8002560 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a404:	bf00      	nop
 800a406:	bd80      	pop	{r7, pc}
 800a408:	20000144 	.word	0x20000144
 800a40c:	20000410 	.word	0x20000410
 800a410:	20000030 	.word	0x20000030
 800a414:	20000134 	.word	0x20000134

0800a418 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a41c:	2200      	movs	r2, #0
 800a41e:	4905      	ldr	r1, [pc, #20]	@ (800a434 <CDC_Init_FS+0x1c>)
 800a420:	4805      	ldr	r0, [pc, #20]	@ (800a438 <CDC_Init_FS+0x20>)
 800a422:	f7fe fead 	bl	8009180 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a426:	4905      	ldr	r1, [pc, #20]	@ (800a43c <CDC_Init_FS+0x24>)
 800a428:	4803      	ldr	r0, [pc, #12]	@ (800a438 <CDC_Init_FS+0x20>)
 800a42a:	f7fe fec2 	bl	80091b2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a42e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a430:	4618      	mov	r0, r3
 800a432:	bd80      	pop	{r7, pc}
 800a434:	20000ad4 	.word	0x20000ad4
 800a438:	20000410 	.word	0x20000410
 800a43c:	200006d4 	.word	0x200006d4

0800a440 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a440:	b480      	push	{r7}
 800a442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a444:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a446:	4618      	mov	r0, r3
 800a448:	46bd      	mov	sp, r7
 800a44a:	bc80      	pop	{r7}
 800a44c:	4770      	bx	lr
	...

0800a450 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	4603      	mov	r3, r0
 800a458:	6039      	str	r1, [r7, #0]
 800a45a:	71fb      	strb	r3, [r7, #7]
 800a45c:	4613      	mov	r3, r2
 800a45e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a460:	79fb      	ldrb	r3, [r7, #7]
 800a462:	2b23      	cmp	r3, #35	@ 0x23
 800a464:	d84a      	bhi.n	800a4fc <CDC_Control_FS+0xac>
 800a466:	a201      	add	r2, pc, #4	@ (adr r2, 800a46c <CDC_Control_FS+0x1c>)
 800a468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46c:	0800a4fd 	.word	0x0800a4fd
 800a470:	0800a4fd 	.word	0x0800a4fd
 800a474:	0800a4fd 	.word	0x0800a4fd
 800a478:	0800a4fd 	.word	0x0800a4fd
 800a47c:	0800a4fd 	.word	0x0800a4fd
 800a480:	0800a4fd 	.word	0x0800a4fd
 800a484:	0800a4fd 	.word	0x0800a4fd
 800a488:	0800a4fd 	.word	0x0800a4fd
 800a48c:	0800a4fd 	.word	0x0800a4fd
 800a490:	0800a4fd 	.word	0x0800a4fd
 800a494:	0800a4fd 	.word	0x0800a4fd
 800a498:	0800a4fd 	.word	0x0800a4fd
 800a49c:	0800a4fd 	.word	0x0800a4fd
 800a4a0:	0800a4fd 	.word	0x0800a4fd
 800a4a4:	0800a4fd 	.word	0x0800a4fd
 800a4a8:	0800a4fd 	.word	0x0800a4fd
 800a4ac:	0800a4fd 	.word	0x0800a4fd
 800a4b0:	0800a4fd 	.word	0x0800a4fd
 800a4b4:	0800a4fd 	.word	0x0800a4fd
 800a4b8:	0800a4fd 	.word	0x0800a4fd
 800a4bc:	0800a4fd 	.word	0x0800a4fd
 800a4c0:	0800a4fd 	.word	0x0800a4fd
 800a4c4:	0800a4fd 	.word	0x0800a4fd
 800a4c8:	0800a4fd 	.word	0x0800a4fd
 800a4cc:	0800a4fd 	.word	0x0800a4fd
 800a4d0:	0800a4fd 	.word	0x0800a4fd
 800a4d4:	0800a4fd 	.word	0x0800a4fd
 800a4d8:	0800a4fd 	.word	0x0800a4fd
 800a4dc:	0800a4fd 	.word	0x0800a4fd
 800a4e0:	0800a4fd 	.word	0x0800a4fd
 800a4e4:	0800a4fd 	.word	0x0800a4fd
 800a4e8:	0800a4fd 	.word	0x0800a4fd
 800a4ec:	0800a4fd 	.word	0x0800a4fd
 800a4f0:	0800a4fd 	.word	0x0800a4fd
 800a4f4:	0800a4fd 	.word	0x0800a4fd
 800a4f8:	0800a4fd 	.word	0x0800a4fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a4fc:	bf00      	nop
  }

  return (USBD_OK);
 800a4fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a500:	4618      	mov	r0, r3
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	bc80      	pop	{r7}
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop

0800a50c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a516:	6879      	ldr	r1, [r7, #4]
 800a518:	4805      	ldr	r0, [pc, #20]	@ (800a530 <CDC_Receive_FS+0x24>)
 800a51a:	f7fe fe4a 	bl	80091b2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a51e:	4804      	ldr	r0, [pc, #16]	@ (800a530 <CDC_Receive_FS+0x24>)
 800a520:	f7fe fe89 	bl	8009236 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a524:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a526:	4618      	mov	r0, r3
 800a528:	3708      	adds	r7, #8
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	20000410 	.word	0x20000410

0800a534 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	460b      	mov	r3, r1
 800a53e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a540:	2300      	movs	r3, #0
 800a542:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a544:	4b0d      	ldr	r3, [pc, #52]	@ (800a57c <CDC_Transmit_FS+0x48>)
 800a546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a54a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a552:	2b00      	cmp	r3, #0
 800a554:	d001      	beq.n	800a55a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a556:	2301      	movs	r3, #1
 800a558:	e00b      	b.n	800a572 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a55a:	887b      	ldrh	r3, [r7, #2]
 800a55c:	461a      	mov	r2, r3
 800a55e:	6879      	ldr	r1, [r7, #4]
 800a560:	4806      	ldr	r0, [pc, #24]	@ (800a57c <CDC_Transmit_FS+0x48>)
 800a562:	f7fe fe0d 	bl	8009180 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a566:	4805      	ldr	r0, [pc, #20]	@ (800a57c <CDC_Transmit_FS+0x48>)
 800a568:	f7fe fe36 	bl	80091d8 <USBD_CDC_TransmitPacket>
 800a56c:	4603      	mov	r3, r0
 800a56e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a570:	7bfb      	ldrb	r3, [r7, #15]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	20000410 	.word	0x20000410

0800a580 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	4603      	mov	r3, r0
 800a588:	6039      	str	r1, [r7, #0]
 800a58a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	2212      	movs	r2, #18
 800a590:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a592:	4b03      	ldr	r3, [pc, #12]	@ (800a5a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a594:	4618      	mov	r0, r3
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	bc80      	pop	{r7}
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	20000160 	.word	0x20000160

0800a5a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	6039      	str	r1, [r7, #0]
 800a5ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	2204      	movs	r2, #4
 800a5b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a5b6:	4b03      	ldr	r3, [pc, #12]	@ (800a5c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bc80      	pop	{r7}
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	20000174 	.word	0x20000174

0800a5c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	6039      	str	r1, [r7, #0]
 800a5d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5d4:	79fb      	ldrb	r3, [r7, #7]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d105      	bne.n	800a5e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5da:	683a      	ldr	r2, [r7, #0]
 800a5dc:	4907      	ldr	r1, [pc, #28]	@ (800a5fc <USBD_FS_ProductStrDescriptor+0x34>)
 800a5de:	4808      	ldr	r0, [pc, #32]	@ (800a600 <USBD_FS_ProductStrDescriptor+0x38>)
 800a5e0:	f7ff fe0d 	bl	800a1fe <USBD_GetString>
 800a5e4:	e004      	b.n	800a5f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5e6:	683a      	ldr	r2, [r7, #0]
 800a5e8:	4904      	ldr	r1, [pc, #16]	@ (800a5fc <USBD_FS_ProductStrDescriptor+0x34>)
 800a5ea:	4805      	ldr	r0, [pc, #20]	@ (800a600 <USBD_FS_ProductStrDescriptor+0x38>)
 800a5ec:	f7ff fe07 	bl	800a1fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5f0:	4b02      	ldr	r3, [pc, #8]	@ (800a5fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	20000ed4 	.word	0x20000ed4
 800a600:	0800b74c 	.word	0x0800b74c

0800a604 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	4603      	mov	r3, r0
 800a60c:	6039      	str	r1, [r7, #0]
 800a60e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a610:	683a      	ldr	r2, [r7, #0]
 800a612:	4904      	ldr	r1, [pc, #16]	@ (800a624 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a614:	4804      	ldr	r0, [pc, #16]	@ (800a628 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a616:	f7ff fdf2 	bl	800a1fe <USBD_GetString>
  return USBD_StrDesc;
 800a61a:	4b02      	ldr	r3, [pc, #8]	@ (800a624 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3708      	adds	r7, #8
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	20000ed4 	.word	0x20000ed4
 800a628:	0800b764 	.word	0x0800b764

0800a62c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	4603      	mov	r3, r0
 800a634:	6039      	str	r1, [r7, #0]
 800a636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	221a      	movs	r2, #26
 800a63c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a63e:	f000 f843 	bl	800a6c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a642:	4b02      	ldr	r3, [pc, #8]	@ (800a64c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a644:	4618      	mov	r0, r3
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	20000178 	.word	0x20000178

0800a650 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	4603      	mov	r3, r0
 800a658:	6039      	str	r1, [r7, #0]
 800a65a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a65c:	79fb      	ldrb	r3, [r7, #7]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d105      	bne.n	800a66e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a662:	683a      	ldr	r2, [r7, #0]
 800a664:	4907      	ldr	r1, [pc, #28]	@ (800a684 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a666:	4808      	ldr	r0, [pc, #32]	@ (800a688 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a668:	f7ff fdc9 	bl	800a1fe <USBD_GetString>
 800a66c:	e004      	b.n	800a678 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a66e:	683a      	ldr	r2, [r7, #0]
 800a670:	4904      	ldr	r1, [pc, #16]	@ (800a684 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a672:	4805      	ldr	r0, [pc, #20]	@ (800a688 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a674:	f7ff fdc3 	bl	800a1fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800a678:	4b02      	ldr	r3, [pc, #8]	@ (800a684 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	20000ed4 	.word	0x20000ed4
 800a688:	0800b76c 	.word	0x0800b76c

0800a68c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	4603      	mov	r3, r0
 800a694:	6039      	str	r1, [r7, #0]
 800a696:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a698:	79fb      	ldrb	r3, [r7, #7]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d105      	bne.n	800a6aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	4907      	ldr	r1, [pc, #28]	@ (800a6c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a6a2:	4808      	ldr	r0, [pc, #32]	@ (800a6c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a6a4:	f7ff fdab 	bl	800a1fe <USBD_GetString>
 800a6a8:	e004      	b.n	800a6b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a6aa:	683a      	ldr	r2, [r7, #0]
 800a6ac:	4904      	ldr	r1, [pc, #16]	@ (800a6c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a6ae:	4805      	ldr	r0, [pc, #20]	@ (800a6c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a6b0:	f7ff fda5 	bl	800a1fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6b4:	4b02      	ldr	r3, [pc, #8]	@ (800a6c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3708      	adds	r7, #8
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	20000ed4 	.word	0x20000ed4
 800a6c4:	0800b778 	.word	0x0800b778

0800a6c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a6ce:	4b0f      	ldr	r3, [pc, #60]	@ (800a70c <Get_SerialNum+0x44>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a6d4:	4b0e      	ldr	r3, [pc, #56]	@ (800a710 <Get_SerialNum+0x48>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a6da:	4b0e      	ldr	r3, [pc, #56]	@ (800a714 <Get_SerialNum+0x4c>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d009      	beq.n	800a702 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a6ee:	2208      	movs	r2, #8
 800a6f0:	4909      	ldr	r1, [pc, #36]	@ (800a718 <Get_SerialNum+0x50>)
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f000 f814 	bl	800a720 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a6f8:	2204      	movs	r2, #4
 800a6fa:	4908      	ldr	r1, [pc, #32]	@ (800a71c <Get_SerialNum+0x54>)
 800a6fc:	68b8      	ldr	r0, [r7, #8]
 800a6fe:	f000 f80f 	bl	800a720 <IntToUnicode>
  }
}
 800a702:	bf00      	nop
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	1ffff7e8 	.word	0x1ffff7e8
 800a710:	1ffff7ec 	.word	0x1ffff7ec
 800a714:	1ffff7f0 	.word	0x1ffff7f0
 800a718:	2000017a 	.word	0x2000017a
 800a71c:	2000018a 	.word	0x2000018a

0800a720 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a720:	b480      	push	{r7}
 800a722:	b087      	sub	sp, #28
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	4613      	mov	r3, r2
 800a72c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a72e:	2300      	movs	r3, #0
 800a730:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a732:	2300      	movs	r3, #0
 800a734:	75fb      	strb	r3, [r7, #23]
 800a736:	e027      	b.n	800a788 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	0f1b      	lsrs	r3, r3, #28
 800a73c:	2b09      	cmp	r3, #9
 800a73e:	d80b      	bhi.n	800a758 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	0f1b      	lsrs	r3, r3, #28
 800a744:	b2da      	uxtb	r2, r3
 800a746:	7dfb      	ldrb	r3, [r7, #23]
 800a748:	005b      	lsls	r3, r3, #1
 800a74a:	4619      	mov	r1, r3
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	440b      	add	r3, r1
 800a750:	3230      	adds	r2, #48	@ 0x30
 800a752:	b2d2      	uxtb	r2, r2
 800a754:	701a      	strb	r2, [r3, #0]
 800a756:	e00a      	b.n	800a76e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	0f1b      	lsrs	r3, r3, #28
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	7dfb      	ldrb	r3, [r7, #23]
 800a760:	005b      	lsls	r3, r3, #1
 800a762:	4619      	mov	r1, r3
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	440b      	add	r3, r1
 800a768:	3237      	adds	r2, #55	@ 0x37
 800a76a:	b2d2      	uxtb	r2, r2
 800a76c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	011b      	lsls	r3, r3, #4
 800a772:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a774:	7dfb      	ldrb	r3, [r7, #23]
 800a776:	005b      	lsls	r3, r3, #1
 800a778:	3301      	adds	r3, #1
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	4413      	add	r3, r2
 800a77e:	2200      	movs	r2, #0
 800a780:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a782:	7dfb      	ldrb	r3, [r7, #23]
 800a784:	3301      	adds	r3, #1
 800a786:	75fb      	strb	r3, [r7, #23]
 800a788:	7dfa      	ldrb	r2, [r7, #23]
 800a78a:	79fb      	ldrb	r3, [r7, #7]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d3d3      	bcc.n	800a738 <IntToUnicode+0x18>
  }
}
 800a790:	bf00      	nop
 800a792:	bf00      	nop
 800a794:	371c      	adds	r7, #28
 800a796:	46bd      	mov	sp, r7
 800a798:	bc80      	pop	{r7}
 800a79a:	4770      	bx	lr

0800a79c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a0d      	ldr	r2, [pc, #52]	@ (800a7e0 <HAL_PCD_MspInit+0x44>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d113      	bne.n	800a7d6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a7ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a7e4 <HAL_PCD_MspInit+0x48>)
 800a7b0:	69db      	ldr	r3, [r3, #28]
 800a7b2:	4a0c      	ldr	r2, [pc, #48]	@ (800a7e4 <HAL_PCD_MspInit+0x48>)
 800a7b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a7b8:	61d3      	str	r3, [r2, #28]
 800a7ba:	4b0a      	ldr	r3, [pc, #40]	@ (800a7e4 <HAL_PCD_MspInit+0x48>)
 800a7bc:	69db      	ldr	r3, [r3, #28]
 800a7be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7c2:	60fb      	str	r3, [r7, #12]
 800a7c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	2014      	movs	r0, #20
 800a7cc:	f7f8 fc2f 	bl	800302e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a7d0:	2014      	movs	r0, #20
 800a7d2:	f7f8 fc48 	bl	8003066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a7d6:	bf00      	nop
 800a7d8:	3710      	adds	r7, #16
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	40005c00 	.word	0x40005c00
 800a7e4:	40021000 	.word	0x40021000

0800a7e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	4610      	mov	r0, r2
 800a800:	f7fe fdcf 	bl	80093a2 <USBD_LL_SetupStage>
}
 800a804:	bf00      	nop
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a81e:	78fa      	ldrb	r2, [r7, #3]
 800a820:	6879      	ldr	r1, [r7, #4]
 800a822:	4613      	mov	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	4413      	add	r3, r2
 800a828:	00db      	lsls	r3, r3, #3
 800a82a:	440b      	add	r3, r1
 800a82c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	78fb      	ldrb	r3, [r7, #3]
 800a834:	4619      	mov	r1, r3
 800a836:	f7fe fe01 	bl	800943c <USBD_LL_DataOutStage>
}
 800a83a:	bf00      	nop
 800a83c:	3708      	adds	r7, #8
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b082      	sub	sp, #8
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	460b      	mov	r3, r1
 800a84c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a854:	78fa      	ldrb	r2, [r7, #3]
 800a856:	6879      	ldr	r1, [r7, #4]
 800a858:	4613      	mov	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	4413      	add	r3, r2
 800a85e:	00db      	lsls	r3, r3, #3
 800a860:	440b      	add	r3, r1
 800a862:	3324      	adds	r3, #36	@ 0x24
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	78fb      	ldrb	r3, [r7, #3]
 800a868:	4619      	mov	r1, r3
 800a86a:	f7fe fe58 	bl	800951e <USBD_LL_DataInStage>
}
 800a86e:	bf00      	nop
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b082      	sub	sp, #8
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a884:	4618      	mov	r0, r3
 800a886:	f7fe ff68 	bl	800975a <USBD_LL_SOF>
}
 800a88a:	bf00      	nop
 800a88c:	3708      	adds	r7, #8
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b084      	sub	sp, #16
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a89a:	2301      	movs	r3, #1
 800a89c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	799b      	ldrb	r3, [r3, #6]
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	d001      	beq.n	800a8aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a8a6:	f7f7 fe5b 	bl	8002560 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8b0:	7bfa      	ldrb	r2, [r7, #15]
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fe ff18 	bl	80096ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fe fed1 	bl	8009668 <USBD_LL_Reset>
}
 800a8c6:	bf00      	nop
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
	...

0800a8d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fe ff12 	bl	8009708 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	7a9b      	ldrb	r3, [r3, #10]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d005      	beq.n	800a8f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a8ec:	4b04      	ldr	r3, [pc, #16]	@ (800a900 <HAL_PCD_SuspendCallback+0x30>)
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	4a03      	ldr	r2, [pc, #12]	@ (800a900 <HAL_PCD_SuspendCallback+0x30>)
 800a8f2:	f043 0306 	orr.w	r3, r3, #6
 800a8f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a8f8:	bf00      	nop
 800a8fa:	3708      	adds	r7, #8
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	e000ed00 	.word	0xe000ed00

0800a904 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a912:	4618      	mov	r0, r3
 800a914:	f7fe ff0c 	bl	8009730 <USBD_LL_Resume>
}
 800a918:	bf00      	nop
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a928:	4a28      	ldr	r2, [pc, #160]	@ (800a9cc <USBD_LL_Init+0xac>)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a26      	ldr	r2, [pc, #152]	@ (800a9cc <USBD_LL_Init+0xac>)
 800a934:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a938:	4b24      	ldr	r3, [pc, #144]	@ (800a9cc <USBD_LL_Init+0xac>)
 800a93a:	4a25      	ldr	r2, [pc, #148]	@ (800a9d0 <USBD_LL_Init+0xb0>)
 800a93c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a93e:	4b23      	ldr	r3, [pc, #140]	@ (800a9cc <USBD_LL_Init+0xac>)
 800a940:	2208      	movs	r2, #8
 800a942:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a944:	4b21      	ldr	r3, [pc, #132]	@ (800a9cc <USBD_LL_Init+0xac>)
 800a946:	2202      	movs	r2, #2
 800a948:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a94a:	4b20      	ldr	r3, [pc, #128]	@ (800a9cc <USBD_LL_Init+0xac>)
 800a94c:	2200      	movs	r2, #0
 800a94e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a950:	4b1e      	ldr	r3, [pc, #120]	@ (800a9cc <USBD_LL_Init+0xac>)
 800a952:	2200      	movs	r2, #0
 800a954:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a956:	4b1d      	ldr	r3, [pc, #116]	@ (800a9cc <USBD_LL_Init+0xac>)
 800a958:	2200      	movs	r2, #0
 800a95a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a95c:	481b      	ldr	r0, [pc, #108]	@ (800a9cc <USBD_LL_Init+0xac>)
 800a95e:	f7f8 fd8f 	bl	8003480 <HAL_PCD_Init>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d001      	beq.n	800a96c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a968:	f7f7 fdfa 	bl	8002560 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a972:	2318      	movs	r3, #24
 800a974:	2200      	movs	r2, #0
 800a976:	2100      	movs	r1, #0
 800a978:	f7fa faa0 	bl	8004ebc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a982:	2358      	movs	r3, #88	@ 0x58
 800a984:	2200      	movs	r2, #0
 800a986:	2180      	movs	r1, #128	@ 0x80
 800a988:	f7fa fa98 	bl	8004ebc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a992:	23c0      	movs	r3, #192	@ 0xc0
 800a994:	2200      	movs	r2, #0
 800a996:	2181      	movs	r1, #129	@ 0x81
 800a998:	f7fa fa90 	bl	8004ebc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a9a2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	2101      	movs	r1, #1
 800a9aa:	f7fa fa87 	bl	8004ebc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a9b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	2182      	movs	r1, #130	@ 0x82
 800a9bc:	f7fa fa7e 	bl	8004ebc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	200010d4 	.word	0x200010d4
 800a9d0:	40005c00 	.word	0x40005c00

0800a9d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7f8 fe3e 	bl	800366c <HAL_PCD_Start>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 f94e 	bl	800ac98 <USBD_Get_USB_Status>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa00:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	4608      	mov	r0, r1
 800aa14:	4611      	mov	r1, r2
 800aa16:	461a      	mov	r2, r3
 800aa18:	4603      	mov	r3, r0
 800aa1a:	70fb      	strb	r3, [r7, #3]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	70bb      	strb	r3, [r7, #2]
 800aa20:	4613      	mov	r3, r2
 800aa22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa24:	2300      	movs	r3, #0
 800aa26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aa32:	78bb      	ldrb	r3, [r7, #2]
 800aa34:	883a      	ldrh	r2, [r7, #0]
 800aa36:	78f9      	ldrb	r1, [r7, #3]
 800aa38:	f7f8 ff92 	bl	8003960 <HAL_PCD_EP_Open>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa40:	7bfb      	ldrb	r3, [r7, #15]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f000 f928 	bl	800ac98 <USBD_Get_USB_Status>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b084      	sub	sp, #16
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
 800aa5e:	460b      	mov	r3, r1
 800aa60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa62:	2300      	movs	r3, #0
 800aa64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa66:	2300      	movs	r3, #0
 800aa68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa70:	78fa      	ldrb	r2, [r7, #3]
 800aa72:	4611      	mov	r1, r2
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7f8 ffd0 	bl	8003a1a <HAL_PCD_EP_Close>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa7e:	7bfb      	ldrb	r3, [r7, #15]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f000 f909 	bl	800ac98 <USBD_Get_USB_Status>
 800aa86:	4603      	mov	r3, r0
 800aa88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aaae:	78fa      	ldrb	r2, [r7, #3]
 800aab0:	4611      	mov	r1, r2
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7f9 f878 	bl	8003ba8 <HAL_PCD_EP_SetStall>
 800aab8:	4603      	mov	r3, r0
 800aaba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aabc:	7bfb      	ldrb	r3, [r7, #15]
 800aabe:	4618      	mov	r0, r3
 800aac0:	f000 f8ea 	bl	800ac98 <USBD_Get_USB_Status>
 800aac4:	4603      	mov	r3, r0
 800aac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aac8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3710      	adds	r7, #16
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b084      	sub	sp, #16
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	460b      	mov	r3, r1
 800aadc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aaec:	78fa      	ldrb	r2, [r7, #3]
 800aaee:	4611      	mov	r1, r2
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7f9 f8b9 	bl	8003c68 <HAL_PCD_EP_ClrStall>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aafa:	7bfb      	ldrb	r3, [r7, #15]
 800aafc:	4618      	mov	r0, r3
 800aafe:	f000 f8cb 	bl	800ac98 <USBD_Get_USB_Status>
 800ab02:	4603      	mov	r3, r0
 800ab04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab06:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	460b      	mov	r3, r1
 800ab1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ab24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	da0b      	bge.n	800ab44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab2c:	78fb      	ldrb	r3, [r7, #3]
 800ab2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab32:	68f9      	ldr	r1, [r7, #12]
 800ab34:	4613      	mov	r3, r2
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4413      	add	r3, r2
 800ab3a:	00db      	lsls	r3, r3, #3
 800ab3c:	440b      	add	r3, r1
 800ab3e:	3312      	adds	r3, #18
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	e00b      	b.n	800ab5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab44:	78fb      	ldrb	r3, [r7, #3]
 800ab46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab4a:	68f9      	ldr	r1, [r7, #12]
 800ab4c:	4613      	mov	r3, r2
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	4413      	add	r3, r2
 800ab52:	00db      	lsls	r3, r3, #3
 800ab54:	440b      	add	r3, r1
 800ab56:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ab5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3714      	adds	r7, #20
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bc80      	pop	{r7}
 800ab64:	4770      	bx	lr

0800ab66 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b084      	sub	sp, #16
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	460b      	mov	r3, r1
 800ab70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab76:	2300      	movs	r3, #0
 800ab78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab80:	78fa      	ldrb	r2, [r7, #3]
 800ab82:	4611      	mov	r1, r2
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7f8 fec7 	bl	8003918 <HAL_PCD_SetAddress>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab8e:	7bfb      	ldrb	r3, [r7, #15]
 800ab90:	4618      	mov	r0, r3
 800ab92:	f000 f881 	bl	800ac98 <USBD_Get_USB_Status>
 800ab96:	4603      	mov	r3, r0
 800ab98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b086      	sub	sp, #24
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	607a      	str	r2, [r7, #4]
 800abae:	461a      	mov	r2, r3
 800abb0:	460b      	mov	r3, r1
 800abb2:	72fb      	strb	r3, [r7, #11]
 800abb4:	4613      	mov	r3, r2
 800abb6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abb8:	2300      	movs	r3, #0
 800abba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abbc:	2300      	movs	r3, #0
 800abbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800abc6:	893b      	ldrh	r3, [r7, #8]
 800abc8:	7af9      	ldrb	r1, [r7, #11]
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	f7f8 ffb5 	bl	8003b3a <HAL_PCD_EP_Transmit>
 800abd0:	4603      	mov	r3, r0
 800abd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abd4:	7dfb      	ldrb	r3, [r7, #23]
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 f85e 	bl	800ac98 <USBD_Get_USB_Status>
 800abdc:	4603      	mov	r3, r0
 800abde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abe0:	7dbb      	ldrb	r3, [r7, #22]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3718      	adds	r7, #24
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b086      	sub	sp, #24
 800abee:	af00      	add	r7, sp, #0
 800abf0:	60f8      	str	r0, [r7, #12]
 800abf2:	607a      	str	r2, [r7, #4]
 800abf4:	461a      	mov	r2, r3
 800abf6:	460b      	mov	r3, r1
 800abf8:	72fb      	strb	r3, [r7, #11]
 800abfa:	4613      	mov	r3, r2
 800abfc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abfe:	2300      	movs	r3, #0
 800ac00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac02:	2300      	movs	r3, #0
 800ac04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ac0c:	893b      	ldrh	r3, [r7, #8]
 800ac0e:	7af9      	ldrb	r1, [r7, #11]
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	f7f8 ff4a 	bl	8003aaa <HAL_PCD_EP_Receive>
 800ac16:	4603      	mov	r3, r0
 800ac18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac1a:	7dfb      	ldrb	r3, [r7, #23]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 f83b 	bl	800ac98 <USBD_Get_USB_Status>
 800ac22:	4603      	mov	r3, r0
 800ac24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac26:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3718      	adds	r7, #24
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ac42:	78fa      	ldrb	r2, [r7, #3]
 800ac44:	4611      	mov	r1, r2
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7f8 ff60 	bl	8003b0c <HAL_PCD_EP_GetRxCount>
 800ac4c:	4603      	mov	r3, r0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
	...

0800ac58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ac60:	4b02      	ldr	r3, [pc, #8]	@ (800ac6c <USBD_static_malloc+0x14>)
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bc80      	pop	{r7}
 800ac6a:	4770      	bx	lr
 800ac6c:	200013ac 	.word	0x200013ac

0800ac70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]

}
 800ac78:	bf00      	nop
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bc80      	pop	{r7}
 800ac80:	4770      	bx	lr

0800ac82 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac82:	b480      	push	{r7}
 800ac84:	b083      	sub	sp, #12
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ac8e:	bf00      	nop
 800ac90:	370c      	adds	r7, #12
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bc80      	pop	{r7}
 800ac96:	4770      	bx	lr

0800ac98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	4603      	mov	r3, r0
 800aca0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aca2:	2300      	movs	r3, #0
 800aca4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aca6:	79fb      	ldrb	r3, [r7, #7]
 800aca8:	2b03      	cmp	r3, #3
 800acaa:	d817      	bhi.n	800acdc <USBD_Get_USB_Status+0x44>
 800acac:	a201      	add	r2, pc, #4	@ (adr r2, 800acb4 <USBD_Get_USB_Status+0x1c>)
 800acae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb2:	bf00      	nop
 800acb4:	0800acc5 	.word	0x0800acc5
 800acb8:	0800accb 	.word	0x0800accb
 800acbc:	0800acd1 	.word	0x0800acd1
 800acc0:	0800acd7 	.word	0x0800acd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800acc4:	2300      	movs	r3, #0
 800acc6:	73fb      	strb	r3, [r7, #15]
    break;
 800acc8:	e00b      	b.n	800ace2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800acca:	2302      	movs	r3, #2
 800accc:	73fb      	strb	r3, [r7, #15]
    break;
 800acce:	e008      	b.n	800ace2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800acd0:	2301      	movs	r3, #1
 800acd2:	73fb      	strb	r3, [r7, #15]
    break;
 800acd4:	e005      	b.n	800ace2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800acd6:	2302      	movs	r3, #2
 800acd8:	73fb      	strb	r3, [r7, #15]
    break;
 800acda:	e002      	b.n	800ace2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800acdc:	2302      	movs	r3, #2
 800acde:	73fb      	strb	r3, [r7, #15]
    break;
 800ace0:	bf00      	nop
  }
  return usb_status;
 800ace2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	bc80      	pop	{r7}
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop

0800acf0 <siprintf>:
 800acf0:	b40e      	push	{r1, r2, r3}
 800acf2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800acf6:	b510      	push	{r4, lr}
 800acf8:	2400      	movs	r4, #0
 800acfa:	b09d      	sub	sp, #116	@ 0x74
 800acfc:	ab1f      	add	r3, sp, #124	@ 0x7c
 800acfe:	9002      	str	r0, [sp, #8]
 800ad00:	9006      	str	r0, [sp, #24]
 800ad02:	9107      	str	r1, [sp, #28]
 800ad04:	9104      	str	r1, [sp, #16]
 800ad06:	4809      	ldr	r0, [pc, #36]	@ (800ad2c <siprintf+0x3c>)
 800ad08:	4909      	ldr	r1, [pc, #36]	@ (800ad30 <siprintf+0x40>)
 800ad0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad0e:	9105      	str	r1, [sp, #20]
 800ad10:	6800      	ldr	r0, [r0, #0]
 800ad12:	a902      	add	r1, sp, #8
 800ad14:	9301      	str	r3, [sp, #4]
 800ad16:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ad18:	f000 f9a0 	bl	800b05c <_svfiprintf_r>
 800ad1c:	9b02      	ldr	r3, [sp, #8]
 800ad1e:	701c      	strb	r4, [r3, #0]
 800ad20:	b01d      	add	sp, #116	@ 0x74
 800ad22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad26:	b003      	add	sp, #12
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	20000194 	.word	0x20000194
 800ad30:	ffff0208 	.word	0xffff0208

0800ad34 <memset>:
 800ad34:	4603      	mov	r3, r0
 800ad36:	4402      	add	r2, r0
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d100      	bne.n	800ad3e <memset+0xa>
 800ad3c:	4770      	bx	lr
 800ad3e:	f803 1b01 	strb.w	r1, [r3], #1
 800ad42:	e7f9      	b.n	800ad38 <memset+0x4>

0800ad44 <__errno>:
 800ad44:	4b01      	ldr	r3, [pc, #4]	@ (800ad4c <__errno+0x8>)
 800ad46:	6818      	ldr	r0, [r3, #0]
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	20000194 	.word	0x20000194

0800ad50 <__libc_init_array>:
 800ad50:	b570      	push	{r4, r5, r6, lr}
 800ad52:	2600      	movs	r6, #0
 800ad54:	4d0c      	ldr	r5, [pc, #48]	@ (800ad88 <__libc_init_array+0x38>)
 800ad56:	4c0d      	ldr	r4, [pc, #52]	@ (800ad8c <__libc_init_array+0x3c>)
 800ad58:	1b64      	subs	r4, r4, r5
 800ad5a:	10a4      	asrs	r4, r4, #2
 800ad5c:	42a6      	cmp	r6, r4
 800ad5e:	d109      	bne.n	800ad74 <__libc_init_array+0x24>
 800ad60:	f000 fc76 	bl	800b650 <_init>
 800ad64:	2600      	movs	r6, #0
 800ad66:	4d0a      	ldr	r5, [pc, #40]	@ (800ad90 <__libc_init_array+0x40>)
 800ad68:	4c0a      	ldr	r4, [pc, #40]	@ (800ad94 <__libc_init_array+0x44>)
 800ad6a:	1b64      	subs	r4, r4, r5
 800ad6c:	10a4      	asrs	r4, r4, #2
 800ad6e:	42a6      	cmp	r6, r4
 800ad70:	d105      	bne.n	800ad7e <__libc_init_array+0x2e>
 800ad72:	bd70      	pop	{r4, r5, r6, pc}
 800ad74:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad78:	4798      	blx	r3
 800ad7a:	3601      	adds	r6, #1
 800ad7c:	e7ee      	b.n	800ad5c <__libc_init_array+0xc>
 800ad7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad82:	4798      	blx	r3
 800ad84:	3601      	adds	r6, #1
 800ad86:	e7f2      	b.n	800ad6e <__libc_init_array+0x1e>
 800ad88:	0800b7f8 	.word	0x0800b7f8
 800ad8c:	0800b7f8 	.word	0x0800b7f8
 800ad90:	0800b7f8 	.word	0x0800b7f8
 800ad94:	0800b7fc 	.word	0x0800b7fc

0800ad98 <__retarget_lock_acquire_recursive>:
 800ad98:	4770      	bx	lr

0800ad9a <__retarget_lock_release_recursive>:
 800ad9a:	4770      	bx	lr

0800ad9c <memcpy>:
 800ad9c:	440a      	add	r2, r1
 800ad9e:	4291      	cmp	r1, r2
 800ada0:	f100 33ff 	add.w	r3, r0, #4294967295
 800ada4:	d100      	bne.n	800ada8 <memcpy+0xc>
 800ada6:	4770      	bx	lr
 800ada8:	b510      	push	{r4, lr}
 800adaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adae:	4291      	cmp	r1, r2
 800adb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adb4:	d1f9      	bne.n	800adaa <memcpy+0xe>
 800adb6:	bd10      	pop	{r4, pc}

0800adb8 <_free_r>:
 800adb8:	b538      	push	{r3, r4, r5, lr}
 800adba:	4605      	mov	r5, r0
 800adbc:	2900      	cmp	r1, #0
 800adbe:	d040      	beq.n	800ae42 <_free_r+0x8a>
 800adc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adc4:	1f0c      	subs	r4, r1, #4
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	bfb8      	it	lt
 800adca:	18e4      	addlt	r4, r4, r3
 800adcc:	f000 f8de 	bl	800af8c <__malloc_lock>
 800add0:	4a1c      	ldr	r2, [pc, #112]	@ (800ae44 <_free_r+0x8c>)
 800add2:	6813      	ldr	r3, [r2, #0]
 800add4:	b933      	cbnz	r3, 800ade4 <_free_r+0x2c>
 800add6:	6063      	str	r3, [r4, #4]
 800add8:	6014      	str	r4, [r2, #0]
 800adda:	4628      	mov	r0, r5
 800addc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ade0:	f000 b8da 	b.w	800af98 <__malloc_unlock>
 800ade4:	42a3      	cmp	r3, r4
 800ade6:	d908      	bls.n	800adfa <_free_r+0x42>
 800ade8:	6820      	ldr	r0, [r4, #0]
 800adea:	1821      	adds	r1, r4, r0
 800adec:	428b      	cmp	r3, r1
 800adee:	bf01      	itttt	eq
 800adf0:	6819      	ldreq	r1, [r3, #0]
 800adf2:	685b      	ldreq	r3, [r3, #4]
 800adf4:	1809      	addeq	r1, r1, r0
 800adf6:	6021      	streq	r1, [r4, #0]
 800adf8:	e7ed      	b.n	800add6 <_free_r+0x1e>
 800adfa:	461a      	mov	r2, r3
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	b10b      	cbz	r3, 800ae04 <_free_r+0x4c>
 800ae00:	42a3      	cmp	r3, r4
 800ae02:	d9fa      	bls.n	800adfa <_free_r+0x42>
 800ae04:	6811      	ldr	r1, [r2, #0]
 800ae06:	1850      	adds	r0, r2, r1
 800ae08:	42a0      	cmp	r0, r4
 800ae0a:	d10b      	bne.n	800ae24 <_free_r+0x6c>
 800ae0c:	6820      	ldr	r0, [r4, #0]
 800ae0e:	4401      	add	r1, r0
 800ae10:	1850      	adds	r0, r2, r1
 800ae12:	4283      	cmp	r3, r0
 800ae14:	6011      	str	r1, [r2, #0]
 800ae16:	d1e0      	bne.n	800adda <_free_r+0x22>
 800ae18:	6818      	ldr	r0, [r3, #0]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	4408      	add	r0, r1
 800ae1e:	6010      	str	r0, [r2, #0]
 800ae20:	6053      	str	r3, [r2, #4]
 800ae22:	e7da      	b.n	800adda <_free_r+0x22>
 800ae24:	d902      	bls.n	800ae2c <_free_r+0x74>
 800ae26:	230c      	movs	r3, #12
 800ae28:	602b      	str	r3, [r5, #0]
 800ae2a:	e7d6      	b.n	800adda <_free_r+0x22>
 800ae2c:	6820      	ldr	r0, [r4, #0]
 800ae2e:	1821      	adds	r1, r4, r0
 800ae30:	428b      	cmp	r3, r1
 800ae32:	bf01      	itttt	eq
 800ae34:	6819      	ldreq	r1, [r3, #0]
 800ae36:	685b      	ldreq	r3, [r3, #4]
 800ae38:	1809      	addeq	r1, r1, r0
 800ae3a:	6021      	streq	r1, [r4, #0]
 800ae3c:	6063      	str	r3, [r4, #4]
 800ae3e:	6054      	str	r4, [r2, #4]
 800ae40:	e7cb      	b.n	800adda <_free_r+0x22>
 800ae42:	bd38      	pop	{r3, r4, r5, pc}
 800ae44:	20001710 	.word	0x20001710

0800ae48 <sbrk_aligned>:
 800ae48:	b570      	push	{r4, r5, r6, lr}
 800ae4a:	4e0f      	ldr	r6, [pc, #60]	@ (800ae88 <sbrk_aligned+0x40>)
 800ae4c:	460c      	mov	r4, r1
 800ae4e:	6831      	ldr	r1, [r6, #0]
 800ae50:	4605      	mov	r5, r0
 800ae52:	b911      	cbnz	r1, 800ae5a <sbrk_aligned+0x12>
 800ae54:	f000 fba8 	bl	800b5a8 <_sbrk_r>
 800ae58:	6030      	str	r0, [r6, #0]
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	f000 fba3 	bl	800b5a8 <_sbrk_r>
 800ae62:	1c43      	adds	r3, r0, #1
 800ae64:	d103      	bne.n	800ae6e <sbrk_aligned+0x26>
 800ae66:	f04f 34ff 	mov.w	r4, #4294967295
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	bd70      	pop	{r4, r5, r6, pc}
 800ae6e:	1cc4      	adds	r4, r0, #3
 800ae70:	f024 0403 	bic.w	r4, r4, #3
 800ae74:	42a0      	cmp	r0, r4
 800ae76:	d0f8      	beq.n	800ae6a <sbrk_aligned+0x22>
 800ae78:	1a21      	subs	r1, r4, r0
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	f000 fb94 	bl	800b5a8 <_sbrk_r>
 800ae80:	3001      	adds	r0, #1
 800ae82:	d1f2      	bne.n	800ae6a <sbrk_aligned+0x22>
 800ae84:	e7ef      	b.n	800ae66 <sbrk_aligned+0x1e>
 800ae86:	bf00      	nop
 800ae88:	2000170c 	.word	0x2000170c

0800ae8c <_malloc_r>:
 800ae8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae90:	1ccd      	adds	r5, r1, #3
 800ae92:	f025 0503 	bic.w	r5, r5, #3
 800ae96:	3508      	adds	r5, #8
 800ae98:	2d0c      	cmp	r5, #12
 800ae9a:	bf38      	it	cc
 800ae9c:	250c      	movcc	r5, #12
 800ae9e:	2d00      	cmp	r5, #0
 800aea0:	4606      	mov	r6, r0
 800aea2:	db01      	blt.n	800aea8 <_malloc_r+0x1c>
 800aea4:	42a9      	cmp	r1, r5
 800aea6:	d904      	bls.n	800aeb2 <_malloc_r+0x26>
 800aea8:	230c      	movs	r3, #12
 800aeaa:	6033      	str	r3, [r6, #0]
 800aeac:	2000      	movs	r0, #0
 800aeae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af88 <_malloc_r+0xfc>
 800aeb6:	f000 f869 	bl	800af8c <__malloc_lock>
 800aeba:	f8d8 3000 	ldr.w	r3, [r8]
 800aebe:	461c      	mov	r4, r3
 800aec0:	bb44      	cbnz	r4, 800af14 <_malloc_r+0x88>
 800aec2:	4629      	mov	r1, r5
 800aec4:	4630      	mov	r0, r6
 800aec6:	f7ff ffbf 	bl	800ae48 <sbrk_aligned>
 800aeca:	1c43      	adds	r3, r0, #1
 800aecc:	4604      	mov	r4, r0
 800aece:	d158      	bne.n	800af82 <_malloc_r+0xf6>
 800aed0:	f8d8 4000 	ldr.w	r4, [r8]
 800aed4:	4627      	mov	r7, r4
 800aed6:	2f00      	cmp	r7, #0
 800aed8:	d143      	bne.n	800af62 <_malloc_r+0xd6>
 800aeda:	2c00      	cmp	r4, #0
 800aedc:	d04b      	beq.n	800af76 <_malloc_r+0xea>
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	4639      	mov	r1, r7
 800aee2:	4630      	mov	r0, r6
 800aee4:	eb04 0903 	add.w	r9, r4, r3
 800aee8:	f000 fb5e 	bl	800b5a8 <_sbrk_r>
 800aeec:	4581      	cmp	r9, r0
 800aeee:	d142      	bne.n	800af76 <_malloc_r+0xea>
 800aef0:	6821      	ldr	r1, [r4, #0]
 800aef2:	4630      	mov	r0, r6
 800aef4:	1a6d      	subs	r5, r5, r1
 800aef6:	4629      	mov	r1, r5
 800aef8:	f7ff ffa6 	bl	800ae48 <sbrk_aligned>
 800aefc:	3001      	adds	r0, #1
 800aefe:	d03a      	beq.n	800af76 <_malloc_r+0xea>
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	442b      	add	r3, r5
 800af04:	6023      	str	r3, [r4, #0]
 800af06:	f8d8 3000 	ldr.w	r3, [r8]
 800af0a:	685a      	ldr	r2, [r3, #4]
 800af0c:	bb62      	cbnz	r2, 800af68 <_malloc_r+0xdc>
 800af0e:	f8c8 7000 	str.w	r7, [r8]
 800af12:	e00f      	b.n	800af34 <_malloc_r+0xa8>
 800af14:	6822      	ldr	r2, [r4, #0]
 800af16:	1b52      	subs	r2, r2, r5
 800af18:	d420      	bmi.n	800af5c <_malloc_r+0xd0>
 800af1a:	2a0b      	cmp	r2, #11
 800af1c:	d917      	bls.n	800af4e <_malloc_r+0xc2>
 800af1e:	1961      	adds	r1, r4, r5
 800af20:	42a3      	cmp	r3, r4
 800af22:	6025      	str	r5, [r4, #0]
 800af24:	bf18      	it	ne
 800af26:	6059      	strne	r1, [r3, #4]
 800af28:	6863      	ldr	r3, [r4, #4]
 800af2a:	bf08      	it	eq
 800af2c:	f8c8 1000 	streq.w	r1, [r8]
 800af30:	5162      	str	r2, [r4, r5]
 800af32:	604b      	str	r3, [r1, #4]
 800af34:	4630      	mov	r0, r6
 800af36:	f000 f82f 	bl	800af98 <__malloc_unlock>
 800af3a:	f104 000b 	add.w	r0, r4, #11
 800af3e:	1d23      	adds	r3, r4, #4
 800af40:	f020 0007 	bic.w	r0, r0, #7
 800af44:	1ac2      	subs	r2, r0, r3
 800af46:	bf1c      	itt	ne
 800af48:	1a1b      	subne	r3, r3, r0
 800af4a:	50a3      	strne	r3, [r4, r2]
 800af4c:	e7af      	b.n	800aeae <_malloc_r+0x22>
 800af4e:	6862      	ldr	r2, [r4, #4]
 800af50:	42a3      	cmp	r3, r4
 800af52:	bf0c      	ite	eq
 800af54:	f8c8 2000 	streq.w	r2, [r8]
 800af58:	605a      	strne	r2, [r3, #4]
 800af5a:	e7eb      	b.n	800af34 <_malloc_r+0xa8>
 800af5c:	4623      	mov	r3, r4
 800af5e:	6864      	ldr	r4, [r4, #4]
 800af60:	e7ae      	b.n	800aec0 <_malloc_r+0x34>
 800af62:	463c      	mov	r4, r7
 800af64:	687f      	ldr	r7, [r7, #4]
 800af66:	e7b6      	b.n	800aed6 <_malloc_r+0x4a>
 800af68:	461a      	mov	r2, r3
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	42a3      	cmp	r3, r4
 800af6e:	d1fb      	bne.n	800af68 <_malloc_r+0xdc>
 800af70:	2300      	movs	r3, #0
 800af72:	6053      	str	r3, [r2, #4]
 800af74:	e7de      	b.n	800af34 <_malloc_r+0xa8>
 800af76:	230c      	movs	r3, #12
 800af78:	4630      	mov	r0, r6
 800af7a:	6033      	str	r3, [r6, #0]
 800af7c:	f000 f80c 	bl	800af98 <__malloc_unlock>
 800af80:	e794      	b.n	800aeac <_malloc_r+0x20>
 800af82:	6005      	str	r5, [r0, #0]
 800af84:	e7d6      	b.n	800af34 <_malloc_r+0xa8>
 800af86:	bf00      	nop
 800af88:	20001710 	.word	0x20001710

0800af8c <__malloc_lock>:
 800af8c:	4801      	ldr	r0, [pc, #4]	@ (800af94 <__malloc_lock+0x8>)
 800af8e:	f7ff bf03 	b.w	800ad98 <__retarget_lock_acquire_recursive>
 800af92:	bf00      	nop
 800af94:	20001708 	.word	0x20001708

0800af98 <__malloc_unlock>:
 800af98:	4801      	ldr	r0, [pc, #4]	@ (800afa0 <__malloc_unlock+0x8>)
 800af9a:	f7ff befe 	b.w	800ad9a <__retarget_lock_release_recursive>
 800af9e:	bf00      	nop
 800afa0:	20001708 	.word	0x20001708

0800afa4 <__ssputs_r>:
 800afa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afa8:	461f      	mov	r7, r3
 800afaa:	688e      	ldr	r6, [r1, #8]
 800afac:	4682      	mov	sl, r0
 800afae:	42be      	cmp	r6, r7
 800afb0:	460c      	mov	r4, r1
 800afb2:	4690      	mov	r8, r2
 800afb4:	680b      	ldr	r3, [r1, #0]
 800afb6:	d82d      	bhi.n	800b014 <__ssputs_r+0x70>
 800afb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800afc0:	d026      	beq.n	800b010 <__ssputs_r+0x6c>
 800afc2:	6965      	ldr	r5, [r4, #20]
 800afc4:	6909      	ldr	r1, [r1, #16]
 800afc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afca:	eba3 0901 	sub.w	r9, r3, r1
 800afce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800afd2:	1c7b      	adds	r3, r7, #1
 800afd4:	444b      	add	r3, r9
 800afd6:	106d      	asrs	r5, r5, #1
 800afd8:	429d      	cmp	r5, r3
 800afda:	bf38      	it	cc
 800afdc:	461d      	movcc	r5, r3
 800afde:	0553      	lsls	r3, r2, #21
 800afe0:	d527      	bpl.n	800b032 <__ssputs_r+0x8e>
 800afe2:	4629      	mov	r1, r5
 800afe4:	f7ff ff52 	bl	800ae8c <_malloc_r>
 800afe8:	4606      	mov	r6, r0
 800afea:	b360      	cbz	r0, 800b046 <__ssputs_r+0xa2>
 800afec:	464a      	mov	r2, r9
 800afee:	6921      	ldr	r1, [r4, #16]
 800aff0:	f7ff fed4 	bl	800ad9c <memcpy>
 800aff4:	89a3      	ldrh	r3, [r4, #12]
 800aff6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800affa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800affe:	81a3      	strh	r3, [r4, #12]
 800b000:	6126      	str	r6, [r4, #16]
 800b002:	444e      	add	r6, r9
 800b004:	6026      	str	r6, [r4, #0]
 800b006:	463e      	mov	r6, r7
 800b008:	6165      	str	r5, [r4, #20]
 800b00a:	eba5 0509 	sub.w	r5, r5, r9
 800b00e:	60a5      	str	r5, [r4, #8]
 800b010:	42be      	cmp	r6, r7
 800b012:	d900      	bls.n	800b016 <__ssputs_r+0x72>
 800b014:	463e      	mov	r6, r7
 800b016:	4632      	mov	r2, r6
 800b018:	4641      	mov	r1, r8
 800b01a:	6820      	ldr	r0, [r4, #0]
 800b01c:	f000 faaa 	bl	800b574 <memmove>
 800b020:	2000      	movs	r0, #0
 800b022:	68a3      	ldr	r3, [r4, #8]
 800b024:	1b9b      	subs	r3, r3, r6
 800b026:	60a3      	str	r3, [r4, #8]
 800b028:	6823      	ldr	r3, [r4, #0]
 800b02a:	4433      	add	r3, r6
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b032:	462a      	mov	r2, r5
 800b034:	f000 fad6 	bl	800b5e4 <_realloc_r>
 800b038:	4606      	mov	r6, r0
 800b03a:	2800      	cmp	r0, #0
 800b03c:	d1e0      	bne.n	800b000 <__ssputs_r+0x5c>
 800b03e:	4650      	mov	r0, sl
 800b040:	6921      	ldr	r1, [r4, #16]
 800b042:	f7ff feb9 	bl	800adb8 <_free_r>
 800b046:	230c      	movs	r3, #12
 800b048:	f8ca 3000 	str.w	r3, [sl]
 800b04c:	89a3      	ldrh	r3, [r4, #12]
 800b04e:	f04f 30ff 	mov.w	r0, #4294967295
 800b052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b056:	81a3      	strh	r3, [r4, #12]
 800b058:	e7e9      	b.n	800b02e <__ssputs_r+0x8a>
	...

0800b05c <_svfiprintf_r>:
 800b05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b060:	4698      	mov	r8, r3
 800b062:	898b      	ldrh	r3, [r1, #12]
 800b064:	4607      	mov	r7, r0
 800b066:	061b      	lsls	r3, r3, #24
 800b068:	460d      	mov	r5, r1
 800b06a:	4614      	mov	r4, r2
 800b06c:	b09d      	sub	sp, #116	@ 0x74
 800b06e:	d510      	bpl.n	800b092 <_svfiprintf_r+0x36>
 800b070:	690b      	ldr	r3, [r1, #16]
 800b072:	b973      	cbnz	r3, 800b092 <_svfiprintf_r+0x36>
 800b074:	2140      	movs	r1, #64	@ 0x40
 800b076:	f7ff ff09 	bl	800ae8c <_malloc_r>
 800b07a:	6028      	str	r0, [r5, #0]
 800b07c:	6128      	str	r0, [r5, #16]
 800b07e:	b930      	cbnz	r0, 800b08e <_svfiprintf_r+0x32>
 800b080:	230c      	movs	r3, #12
 800b082:	603b      	str	r3, [r7, #0]
 800b084:	f04f 30ff 	mov.w	r0, #4294967295
 800b088:	b01d      	add	sp, #116	@ 0x74
 800b08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b08e:	2340      	movs	r3, #64	@ 0x40
 800b090:	616b      	str	r3, [r5, #20]
 800b092:	2300      	movs	r3, #0
 800b094:	9309      	str	r3, [sp, #36]	@ 0x24
 800b096:	2320      	movs	r3, #32
 800b098:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b09c:	2330      	movs	r3, #48	@ 0x30
 800b09e:	f04f 0901 	mov.w	r9, #1
 800b0a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0a6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b240 <_svfiprintf_r+0x1e4>
 800b0aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0ae:	4623      	mov	r3, r4
 800b0b0:	469a      	mov	sl, r3
 800b0b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0b6:	b10a      	cbz	r2, 800b0bc <_svfiprintf_r+0x60>
 800b0b8:	2a25      	cmp	r2, #37	@ 0x25
 800b0ba:	d1f9      	bne.n	800b0b0 <_svfiprintf_r+0x54>
 800b0bc:	ebba 0b04 	subs.w	fp, sl, r4
 800b0c0:	d00b      	beq.n	800b0da <_svfiprintf_r+0x7e>
 800b0c2:	465b      	mov	r3, fp
 800b0c4:	4622      	mov	r2, r4
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	f7ff ff6b 	bl	800afa4 <__ssputs_r>
 800b0ce:	3001      	adds	r0, #1
 800b0d0:	f000 80a7 	beq.w	800b222 <_svfiprintf_r+0x1c6>
 800b0d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0d6:	445a      	add	r2, fp
 800b0d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0da:	f89a 3000 	ldrb.w	r3, [sl]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	f000 809f 	beq.w	800b222 <_svfiprintf_r+0x1c6>
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0ee:	f10a 0a01 	add.w	sl, sl, #1
 800b0f2:	9304      	str	r3, [sp, #16]
 800b0f4:	9307      	str	r3, [sp, #28]
 800b0f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0fc:	4654      	mov	r4, sl
 800b0fe:	2205      	movs	r2, #5
 800b100:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b104:	484e      	ldr	r0, [pc, #312]	@ (800b240 <_svfiprintf_r+0x1e4>)
 800b106:	f000 fa5f 	bl	800b5c8 <memchr>
 800b10a:	9a04      	ldr	r2, [sp, #16]
 800b10c:	b9d8      	cbnz	r0, 800b146 <_svfiprintf_r+0xea>
 800b10e:	06d0      	lsls	r0, r2, #27
 800b110:	bf44      	itt	mi
 800b112:	2320      	movmi	r3, #32
 800b114:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b118:	0711      	lsls	r1, r2, #28
 800b11a:	bf44      	itt	mi
 800b11c:	232b      	movmi	r3, #43	@ 0x2b
 800b11e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b122:	f89a 3000 	ldrb.w	r3, [sl]
 800b126:	2b2a      	cmp	r3, #42	@ 0x2a
 800b128:	d015      	beq.n	800b156 <_svfiprintf_r+0xfa>
 800b12a:	4654      	mov	r4, sl
 800b12c:	2000      	movs	r0, #0
 800b12e:	f04f 0c0a 	mov.w	ip, #10
 800b132:	9a07      	ldr	r2, [sp, #28]
 800b134:	4621      	mov	r1, r4
 800b136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b13a:	3b30      	subs	r3, #48	@ 0x30
 800b13c:	2b09      	cmp	r3, #9
 800b13e:	d94b      	bls.n	800b1d8 <_svfiprintf_r+0x17c>
 800b140:	b1b0      	cbz	r0, 800b170 <_svfiprintf_r+0x114>
 800b142:	9207      	str	r2, [sp, #28]
 800b144:	e014      	b.n	800b170 <_svfiprintf_r+0x114>
 800b146:	eba0 0308 	sub.w	r3, r0, r8
 800b14a:	fa09 f303 	lsl.w	r3, r9, r3
 800b14e:	4313      	orrs	r3, r2
 800b150:	46a2      	mov	sl, r4
 800b152:	9304      	str	r3, [sp, #16]
 800b154:	e7d2      	b.n	800b0fc <_svfiprintf_r+0xa0>
 800b156:	9b03      	ldr	r3, [sp, #12]
 800b158:	1d19      	adds	r1, r3, #4
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	9103      	str	r1, [sp, #12]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	bfbb      	ittet	lt
 800b162:	425b      	neglt	r3, r3
 800b164:	f042 0202 	orrlt.w	r2, r2, #2
 800b168:	9307      	strge	r3, [sp, #28]
 800b16a:	9307      	strlt	r3, [sp, #28]
 800b16c:	bfb8      	it	lt
 800b16e:	9204      	strlt	r2, [sp, #16]
 800b170:	7823      	ldrb	r3, [r4, #0]
 800b172:	2b2e      	cmp	r3, #46	@ 0x2e
 800b174:	d10a      	bne.n	800b18c <_svfiprintf_r+0x130>
 800b176:	7863      	ldrb	r3, [r4, #1]
 800b178:	2b2a      	cmp	r3, #42	@ 0x2a
 800b17a:	d132      	bne.n	800b1e2 <_svfiprintf_r+0x186>
 800b17c:	9b03      	ldr	r3, [sp, #12]
 800b17e:	3402      	adds	r4, #2
 800b180:	1d1a      	adds	r2, r3, #4
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	9203      	str	r2, [sp, #12]
 800b186:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b18a:	9305      	str	r3, [sp, #20]
 800b18c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b244 <_svfiprintf_r+0x1e8>
 800b190:	2203      	movs	r2, #3
 800b192:	4650      	mov	r0, sl
 800b194:	7821      	ldrb	r1, [r4, #0]
 800b196:	f000 fa17 	bl	800b5c8 <memchr>
 800b19a:	b138      	cbz	r0, 800b1ac <_svfiprintf_r+0x150>
 800b19c:	2240      	movs	r2, #64	@ 0x40
 800b19e:	9b04      	ldr	r3, [sp, #16]
 800b1a0:	eba0 000a 	sub.w	r0, r0, sl
 800b1a4:	4082      	lsls	r2, r0
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	3401      	adds	r4, #1
 800b1aa:	9304      	str	r3, [sp, #16]
 800b1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1b0:	2206      	movs	r2, #6
 800b1b2:	4825      	ldr	r0, [pc, #148]	@ (800b248 <_svfiprintf_r+0x1ec>)
 800b1b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1b8:	f000 fa06 	bl	800b5c8 <memchr>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	d036      	beq.n	800b22e <_svfiprintf_r+0x1d2>
 800b1c0:	4b22      	ldr	r3, [pc, #136]	@ (800b24c <_svfiprintf_r+0x1f0>)
 800b1c2:	bb1b      	cbnz	r3, 800b20c <_svfiprintf_r+0x1b0>
 800b1c4:	9b03      	ldr	r3, [sp, #12]
 800b1c6:	3307      	adds	r3, #7
 800b1c8:	f023 0307 	bic.w	r3, r3, #7
 800b1cc:	3308      	adds	r3, #8
 800b1ce:	9303      	str	r3, [sp, #12]
 800b1d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1d2:	4433      	add	r3, r6
 800b1d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1d6:	e76a      	b.n	800b0ae <_svfiprintf_r+0x52>
 800b1d8:	460c      	mov	r4, r1
 800b1da:	2001      	movs	r0, #1
 800b1dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1e0:	e7a8      	b.n	800b134 <_svfiprintf_r+0xd8>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	f04f 0c0a 	mov.w	ip, #10
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	3401      	adds	r4, #1
 800b1ec:	9305      	str	r3, [sp, #20]
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1f4:	3a30      	subs	r2, #48	@ 0x30
 800b1f6:	2a09      	cmp	r2, #9
 800b1f8:	d903      	bls.n	800b202 <_svfiprintf_r+0x1a6>
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d0c6      	beq.n	800b18c <_svfiprintf_r+0x130>
 800b1fe:	9105      	str	r1, [sp, #20]
 800b200:	e7c4      	b.n	800b18c <_svfiprintf_r+0x130>
 800b202:	4604      	mov	r4, r0
 800b204:	2301      	movs	r3, #1
 800b206:	fb0c 2101 	mla	r1, ip, r1, r2
 800b20a:	e7f0      	b.n	800b1ee <_svfiprintf_r+0x192>
 800b20c:	ab03      	add	r3, sp, #12
 800b20e:	9300      	str	r3, [sp, #0]
 800b210:	462a      	mov	r2, r5
 800b212:	4638      	mov	r0, r7
 800b214:	4b0e      	ldr	r3, [pc, #56]	@ (800b250 <_svfiprintf_r+0x1f4>)
 800b216:	a904      	add	r1, sp, #16
 800b218:	f3af 8000 	nop.w
 800b21c:	1c42      	adds	r2, r0, #1
 800b21e:	4606      	mov	r6, r0
 800b220:	d1d6      	bne.n	800b1d0 <_svfiprintf_r+0x174>
 800b222:	89ab      	ldrh	r3, [r5, #12]
 800b224:	065b      	lsls	r3, r3, #25
 800b226:	f53f af2d 	bmi.w	800b084 <_svfiprintf_r+0x28>
 800b22a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b22c:	e72c      	b.n	800b088 <_svfiprintf_r+0x2c>
 800b22e:	ab03      	add	r3, sp, #12
 800b230:	9300      	str	r3, [sp, #0]
 800b232:	462a      	mov	r2, r5
 800b234:	4638      	mov	r0, r7
 800b236:	4b06      	ldr	r3, [pc, #24]	@ (800b250 <_svfiprintf_r+0x1f4>)
 800b238:	a904      	add	r1, sp, #16
 800b23a:	f000 f87d 	bl	800b338 <_printf_i>
 800b23e:	e7ed      	b.n	800b21c <_svfiprintf_r+0x1c0>
 800b240:	0800b7ba 	.word	0x0800b7ba
 800b244:	0800b7c0 	.word	0x0800b7c0
 800b248:	0800b7c4 	.word	0x0800b7c4
 800b24c:	00000000 	.word	0x00000000
 800b250:	0800afa5 	.word	0x0800afa5

0800b254 <_printf_common>:
 800b254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b258:	4616      	mov	r6, r2
 800b25a:	4698      	mov	r8, r3
 800b25c:	688a      	ldr	r2, [r1, #8]
 800b25e:	690b      	ldr	r3, [r1, #16]
 800b260:	4607      	mov	r7, r0
 800b262:	4293      	cmp	r3, r2
 800b264:	bfb8      	it	lt
 800b266:	4613      	movlt	r3, r2
 800b268:	6033      	str	r3, [r6, #0]
 800b26a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b26e:	460c      	mov	r4, r1
 800b270:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b274:	b10a      	cbz	r2, 800b27a <_printf_common+0x26>
 800b276:	3301      	adds	r3, #1
 800b278:	6033      	str	r3, [r6, #0]
 800b27a:	6823      	ldr	r3, [r4, #0]
 800b27c:	0699      	lsls	r1, r3, #26
 800b27e:	bf42      	ittt	mi
 800b280:	6833      	ldrmi	r3, [r6, #0]
 800b282:	3302      	addmi	r3, #2
 800b284:	6033      	strmi	r3, [r6, #0]
 800b286:	6825      	ldr	r5, [r4, #0]
 800b288:	f015 0506 	ands.w	r5, r5, #6
 800b28c:	d106      	bne.n	800b29c <_printf_common+0x48>
 800b28e:	f104 0a19 	add.w	sl, r4, #25
 800b292:	68e3      	ldr	r3, [r4, #12]
 800b294:	6832      	ldr	r2, [r6, #0]
 800b296:	1a9b      	subs	r3, r3, r2
 800b298:	42ab      	cmp	r3, r5
 800b29a:	dc2b      	bgt.n	800b2f4 <_printf_common+0xa0>
 800b29c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2a0:	6822      	ldr	r2, [r4, #0]
 800b2a2:	3b00      	subs	r3, #0
 800b2a4:	bf18      	it	ne
 800b2a6:	2301      	movne	r3, #1
 800b2a8:	0692      	lsls	r2, r2, #26
 800b2aa:	d430      	bmi.n	800b30e <_printf_common+0xba>
 800b2ac:	4641      	mov	r1, r8
 800b2ae:	4638      	mov	r0, r7
 800b2b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2b4:	47c8      	blx	r9
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	d023      	beq.n	800b302 <_printf_common+0xae>
 800b2ba:	6823      	ldr	r3, [r4, #0]
 800b2bc:	6922      	ldr	r2, [r4, #16]
 800b2be:	f003 0306 	and.w	r3, r3, #6
 800b2c2:	2b04      	cmp	r3, #4
 800b2c4:	bf14      	ite	ne
 800b2c6:	2500      	movne	r5, #0
 800b2c8:	6833      	ldreq	r3, [r6, #0]
 800b2ca:	f04f 0600 	mov.w	r6, #0
 800b2ce:	bf08      	it	eq
 800b2d0:	68e5      	ldreq	r5, [r4, #12]
 800b2d2:	f104 041a 	add.w	r4, r4, #26
 800b2d6:	bf08      	it	eq
 800b2d8:	1aed      	subeq	r5, r5, r3
 800b2da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b2de:	bf08      	it	eq
 800b2e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	bfc4      	itt	gt
 800b2e8:	1a9b      	subgt	r3, r3, r2
 800b2ea:	18ed      	addgt	r5, r5, r3
 800b2ec:	42b5      	cmp	r5, r6
 800b2ee:	d11a      	bne.n	800b326 <_printf_common+0xd2>
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	e008      	b.n	800b306 <_printf_common+0xb2>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	4652      	mov	r2, sl
 800b2f8:	4641      	mov	r1, r8
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	47c8      	blx	r9
 800b2fe:	3001      	adds	r0, #1
 800b300:	d103      	bne.n	800b30a <_printf_common+0xb6>
 800b302:	f04f 30ff 	mov.w	r0, #4294967295
 800b306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b30a:	3501      	adds	r5, #1
 800b30c:	e7c1      	b.n	800b292 <_printf_common+0x3e>
 800b30e:	2030      	movs	r0, #48	@ 0x30
 800b310:	18e1      	adds	r1, r4, r3
 800b312:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b316:	1c5a      	adds	r2, r3, #1
 800b318:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b31c:	4422      	add	r2, r4
 800b31e:	3302      	adds	r3, #2
 800b320:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b324:	e7c2      	b.n	800b2ac <_printf_common+0x58>
 800b326:	2301      	movs	r3, #1
 800b328:	4622      	mov	r2, r4
 800b32a:	4641      	mov	r1, r8
 800b32c:	4638      	mov	r0, r7
 800b32e:	47c8      	blx	r9
 800b330:	3001      	adds	r0, #1
 800b332:	d0e6      	beq.n	800b302 <_printf_common+0xae>
 800b334:	3601      	adds	r6, #1
 800b336:	e7d9      	b.n	800b2ec <_printf_common+0x98>

0800b338 <_printf_i>:
 800b338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b33c:	7e0f      	ldrb	r7, [r1, #24]
 800b33e:	4691      	mov	r9, r2
 800b340:	2f78      	cmp	r7, #120	@ 0x78
 800b342:	4680      	mov	r8, r0
 800b344:	460c      	mov	r4, r1
 800b346:	469a      	mov	sl, r3
 800b348:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b34a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b34e:	d807      	bhi.n	800b360 <_printf_i+0x28>
 800b350:	2f62      	cmp	r7, #98	@ 0x62
 800b352:	d80a      	bhi.n	800b36a <_printf_i+0x32>
 800b354:	2f00      	cmp	r7, #0
 800b356:	f000 80d1 	beq.w	800b4fc <_printf_i+0x1c4>
 800b35a:	2f58      	cmp	r7, #88	@ 0x58
 800b35c:	f000 80b8 	beq.w	800b4d0 <_printf_i+0x198>
 800b360:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b364:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b368:	e03a      	b.n	800b3e0 <_printf_i+0xa8>
 800b36a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b36e:	2b15      	cmp	r3, #21
 800b370:	d8f6      	bhi.n	800b360 <_printf_i+0x28>
 800b372:	a101      	add	r1, pc, #4	@ (adr r1, 800b378 <_printf_i+0x40>)
 800b374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b378:	0800b3d1 	.word	0x0800b3d1
 800b37c:	0800b3e5 	.word	0x0800b3e5
 800b380:	0800b361 	.word	0x0800b361
 800b384:	0800b361 	.word	0x0800b361
 800b388:	0800b361 	.word	0x0800b361
 800b38c:	0800b361 	.word	0x0800b361
 800b390:	0800b3e5 	.word	0x0800b3e5
 800b394:	0800b361 	.word	0x0800b361
 800b398:	0800b361 	.word	0x0800b361
 800b39c:	0800b361 	.word	0x0800b361
 800b3a0:	0800b361 	.word	0x0800b361
 800b3a4:	0800b4e3 	.word	0x0800b4e3
 800b3a8:	0800b40f 	.word	0x0800b40f
 800b3ac:	0800b49d 	.word	0x0800b49d
 800b3b0:	0800b361 	.word	0x0800b361
 800b3b4:	0800b361 	.word	0x0800b361
 800b3b8:	0800b505 	.word	0x0800b505
 800b3bc:	0800b361 	.word	0x0800b361
 800b3c0:	0800b40f 	.word	0x0800b40f
 800b3c4:	0800b361 	.word	0x0800b361
 800b3c8:	0800b361 	.word	0x0800b361
 800b3cc:	0800b4a5 	.word	0x0800b4a5
 800b3d0:	6833      	ldr	r3, [r6, #0]
 800b3d2:	1d1a      	adds	r2, r3, #4
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	6032      	str	r2, [r6, #0]
 800b3d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e09c      	b.n	800b51e <_printf_i+0x1e6>
 800b3e4:	6833      	ldr	r3, [r6, #0]
 800b3e6:	6820      	ldr	r0, [r4, #0]
 800b3e8:	1d19      	adds	r1, r3, #4
 800b3ea:	6031      	str	r1, [r6, #0]
 800b3ec:	0606      	lsls	r6, r0, #24
 800b3ee:	d501      	bpl.n	800b3f4 <_printf_i+0xbc>
 800b3f0:	681d      	ldr	r5, [r3, #0]
 800b3f2:	e003      	b.n	800b3fc <_printf_i+0xc4>
 800b3f4:	0645      	lsls	r5, r0, #25
 800b3f6:	d5fb      	bpl.n	800b3f0 <_printf_i+0xb8>
 800b3f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3fc:	2d00      	cmp	r5, #0
 800b3fe:	da03      	bge.n	800b408 <_printf_i+0xd0>
 800b400:	232d      	movs	r3, #45	@ 0x2d
 800b402:	426d      	negs	r5, r5
 800b404:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b408:	230a      	movs	r3, #10
 800b40a:	4858      	ldr	r0, [pc, #352]	@ (800b56c <_printf_i+0x234>)
 800b40c:	e011      	b.n	800b432 <_printf_i+0xfa>
 800b40e:	6821      	ldr	r1, [r4, #0]
 800b410:	6833      	ldr	r3, [r6, #0]
 800b412:	0608      	lsls	r0, r1, #24
 800b414:	f853 5b04 	ldr.w	r5, [r3], #4
 800b418:	d402      	bmi.n	800b420 <_printf_i+0xe8>
 800b41a:	0649      	lsls	r1, r1, #25
 800b41c:	bf48      	it	mi
 800b41e:	b2ad      	uxthmi	r5, r5
 800b420:	2f6f      	cmp	r7, #111	@ 0x6f
 800b422:	6033      	str	r3, [r6, #0]
 800b424:	bf14      	ite	ne
 800b426:	230a      	movne	r3, #10
 800b428:	2308      	moveq	r3, #8
 800b42a:	4850      	ldr	r0, [pc, #320]	@ (800b56c <_printf_i+0x234>)
 800b42c:	2100      	movs	r1, #0
 800b42e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b432:	6866      	ldr	r6, [r4, #4]
 800b434:	2e00      	cmp	r6, #0
 800b436:	60a6      	str	r6, [r4, #8]
 800b438:	db05      	blt.n	800b446 <_printf_i+0x10e>
 800b43a:	6821      	ldr	r1, [r4, #0]
 800b43c:	432e      	orrs	r6, r5
 800b43e:	f021 0104 	bic.w	r1, r1, #4
 800b442:	6021      	str	r1, [r4, #0]
 800b444:	d04b      	beq.n	800b4de <_printf_i+0x1a6>
 800b446:	4616      	mov	r6, r2
 800b448:	fbb5 f1f3 	udiv	r1, r5, r3
 800b44c:	fb03 5711 	mls	r7, r3, r1, r5
 800b450:	5dc7      	ldrb	r7, [r0, r7]
 800b452:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b456:	462f      	mov	r7, r5
 800b458:	42bb      	cmp	r3, r7
 800b45a:	460d      	mov	r5, r1
 800b45c:	d9f4      	bls.n	800b448 <_printf_i+0x110>
 800b45e:	2b08      	cmp	r3, #8
 800b460:	d10b      	bne.n	800b47a <_printf_i+0x142>
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	07df      	lsls	r7, r3, #31
 800b466:	d508      	bpl.n	800b47a <_printf_i+0x142>
 800b468:	6923      	ldr	r3, [r4, #16]
 800b46a:	6861      	ldr	r1, [r4, #4]
 800b46c:	4299      	cmp	r1, r3
 800b46e:	bfde      	ittt	le
 800b470:	2330      	movle	r3, #48	@ 0x30
 800b472:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b476:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b47a:	1b92      	subs	r2, r2, r6
 800b47c:	6122      	str	r2, [r4, #16]
 800b47e:	464b      	mov	r3, r9
 800b480:	4621      	mov	r1, r4
 800b482:	4640      	mov	r0, r8
 800b484:	f8cd a000 	str.w	sl, [sp]
 800b488:	aa03      	add	r2, sp, #12
 800b48a:	f7ff fee3 	bl	800b254 <_printf_common>
 800b48e:	3001      	adds	r0, #1
 800b490:	d14a      	bne.n	800b528 <_printf_i+0x1f0>
 800b492:	f04f 30ff 	mov.w	r0, #4294967295
 800b496:	b004      	add	sp, #16
 800b498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b49c:	6823      	ldr	r3, [r4, #0]
 800b49e:	f043 0320 	orr.w	r3, r3, #32
 800b4a2:	6023      	str	r3, [r4, #0]
 800b4a4:	2778      	movs	r7, #120	@ 0x78
 800b4a6:	4832      	ldr	r0, [pc, #200]	@ (800b570 <_printf_i+0x238>)
 800b4a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4ac:	6823      	ldr	r3, [r4, #0]
 800b4ae:	6831      	ldr	r1, [r6, #0]
 800b4b0:	061f      	lsls	r7, r3, #24
 800b4b2:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4b6:	d402      	bmi.n	800b4be <_printf_i+0x186>
 800b4b8:	065f      	lsls	r7, r3, #25
 800b4ba:	bf48      	it	mi
 800b4bc:	b2ad      	uxthmi	r5, r5
 800b4be:	6031      	str	r1, [r6, #0]
 800b4c0:	07d9      	lsls	r1, r3, #31
 800b4c2:	bf44      	itt	mi
 800b4c4:	f043 0320 	orrmi.w	r3, r3, #32
 800b4c8:	6023      	strmi	r3, [r4, #0]
 800b4ca:	b11d      	cbz	r5, 800b4d4 <_printf_i+0x19c>
 800b4cc:	2310      	movs	r3, #16
 800b4ce:	e7ad      	b.n	800b42c <_printf_i+0xf4>
 800b4d0:	4826      	ldr	r0, [pc, #152]	@ (800b56c <_printf_i+0x234>)
 800b4d2:	e7e9      	b.n	800b4a8 <_printf_i+0x170>
 800b4d4:	6823      	ldr	r3, [r4, #0]
 800b4d6:	f023 0320 	bic.w	r3, r3, #32
 800b4da:	6023      	str	r3, [r4, #0]
 800b4dc:	e7f6      	b.n	800b4cc <_printf_i+0x194>
 800b4de:	4616      	mov	r6, r2
 800b4e0:	e7bd      	b.n	800b45e <_printf_i+0x126>
 800b4e2:	6833      	ldr	r3, [r6, #0]
 800b4e4:	6825      	ldr	r5, [r4, #0]
 800b4e6:	1d18      	adds	r0, r3, #4
 800b4e8:	6961      	ldr	r1, [r4, #20]
 800b4ea:	6030      	str	r0, [r6, #0]
 800b4ec:	062e      	lsls	r6, r5, #24
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	d501      	bpl.n	800b4f6 <_printf_i+0x1be>
 800b4f2:	6019      	str	r1, [r3, #0]
 800b4f4:	e002      	b.n	800b4fc <_printf_i+0x1c4>
 800b4f6:	0668      	lsls	r0, r5, #25
 800b4f8:	d5fb      	bpl.n	800b4f2 <_printf_i+0x1ba>
 800b4fa:	8019      	strh	r1, [r3, #0]
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	4616      	mov	r6, r2
 800b500:	6123      	str	r3, [r4, #16]
 800b502:	e7bc      	b.n	800b47e <_printf_i+0x146>
 800b504:	6833      	ldr	r3, [r6, #0]
 800b506:	2100      	movs	r1, #0
 800b508:	1d1a      	adds	r2, r3, #4
 800b50a:	6032      	str	r2, [r6, #0]
 800b50c:	681e      	ldr	r6, [r3, #0]
 800b50e:	6862      	ldr	r2, [r4, #4]
 800b510:	4630      	mov	r0, r6
 800b512:	f000 f859 	bl	800b5c8 <memchr>
 800b516:	b108      	cbz	r0, 800b51c <_printf_i+0x1e4>
 800b518:	1b80      	subs	r0, r0, r6
 800b51a:	6060      	str	r0, [r4, #4]
 800b51c:	6863      	ldr	r3, [r4, #4]
 800b51e:	6123      	str	r3, [r4, #16]
 800b520:	2300      	movs	r3, #0
 800b522:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b526:	e7aa      	b.n	800b47e <_printf_i+0x146>
 800b528:	4632      	mov	r2, r6
 800b52a:	4649      	mov	r1, r9
 800b52c:	4640      	mov	r0, r8
 800b52e:	6923      	ldr	r3, [r4, #16]
 800b530:	47d0      	blx	sl
 800b532:	3001      	adds	r0, #1
 800b534:	d0ad      	beq.n	800b492 <_printf_i+0x15a>
 800b536:	6823      	ldr	r3, [r4, #0]
 800b538:	079b      	lsls	r3, r3, #30
 800b53a:	d413      	bmi.n	800b564 <_printf_i+0x22c>
 800b53c:	68e0      	ldr	r0, [r4, #12]
 800b53e:	9b03      	ldr	r3, [sp, #12]
 800b540:	4298      	cmp	r0, r3
 800b542:	bfb8      	it	lt
 800b544:	4618      	movlt	r0, r3
 800b546:	e7a6      	b.n	800b496 <_printf_i+0x15e>
 800b548:	2301      	movs	r3, #1
 800b54a:	4632      	mov	r2, r6
 800b54c:	4649      	mov	r1, r9
 800b54e:	4640      	mov	r0, r8
 800b550:	47d0      	blx	sl
 800b552:	3001      	adds	r0, #1
 800b554:	d09d      	beq.n	800b492 <_printf_i+0x15a>
 800b556:	3501      	adds	r5, #1
 800b558:	68e3      	ldr	r3, [r4, #12]
 800b55a:	9903      	ldr	r1, [sp, #12]
 800b55c:	1a5b      	subs	r3, r3, r1
 800b55e:	42ab      	cmp	r3, r5
 800b560:	dcf2      	bgt.n	800b548 <_printf_i+0x210>
 800b562:	e7eb      	b.n	800b53c <_printf_i+0x204>
 800b564:	2500      	movs	r5, #0
 800b566:	f104 0619 	add.w	r6, r4, #25
 800b56a:	e7f5      	b.n	800b558 <_printf_i+0x220>
 800b56c:	0800b7cb 	.word	0x0800b7cb
 800b570:	0800b7dc 	.word	0x0800b7dc

0800b574 <memmove>:
 800b574:	4288      	cmp	r0, r1
 800b576:	b510      	push	{r4, lr}
 800b578:	eb01 0402 	add.w	r4, r1, r2
 800b57c:	d902      	bls.n	800b584 <memmove+0x10>
 800b57e:	4284      	cmp	r4, r0
 800b580:	4623      	mov	r3, r4
 800b582:	d807      	bhi.n	800b594 <memmove+0x20>
 800b584:	1e43      	subs	r3, r0, #1
 800b586:	42a1      	cmp	r1, r4
 800b588:	d008      	beq.n	800b59c <memmove+0x28>
 800b58a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b58e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b592:	e7f8      	b.n	800b586 <memmove+0x12>
 800b594:	4601      	mov	r1, r0
 800b596:	4402      	add	r2, r0
 800b598:	428a      	cmp	r2, r1
 800b59a:	d100      	bne.n	800b59e <memmove+0x2a>
 800b59c:	bd10      	pop	{r4, pc}
 800b59e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5a6:	e7f7      	b.n	800b598 <memmove+0x24>

0800b5a8 <_sbrk_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	4d05      	ldr	r5, [pc, #20]	@ (800b5c4 <_sbrk_r+0x1c>)
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	4608      	mov	r0, r1
 800b5b2:	602b      	str	r3, [r5, #0]
 800b5b4:	f7f7 f8e0 	bl	8002778 <_sbrk>
 800b5b8:	1c43      	adds	r3, r0, #1
 800b5ba:	d102      	bne.n	800b5c2 <_sbrk_r+0x1a>
 800b5bc:	682b      	ldr	r3, [r5, #0]
 800b5be:	b103      	cbz	r3, 800b5c2 <_sbrk_r+0x1a>
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	bd38      	pop	{r3, r4, r5, pc}
 800b5c4:	20001704 	.word	0x20001704

0800b5c8 <memchr>:
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	b510      	push	{r4, lr}
 800b5cc:	b2c9      	uxtb	r1, r1
 800b5ce:	4402      	add	r2, r0
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	d101      	bne.n	800b5da <memchr+0x12>
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	e003      	b.n	800b5e2 <memchr+0x1a>
 800b5da:	7804      	ldrb	r4, [r0, #0]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	428c      	cmp	r4, r1
 800b5e0:	d1f6      	bne.n	800b5d0 <memchr+0x8>
 800b5e2:	bd10      	pop	{r4, pc}

0800b5e4 <_realloc_r>:
 800b5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e8:	4607      	mov	r7, r0
 800b5ea:	4614      	mov	r4, r2
 800b5ec:	460d      	mov	r5, r1
 800b5ee:	b921      	cbnz	r1, 800b5fa <_realloc_r+0x16>
 800b5f0:	4611      	mov	r1, r2
 800b5f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f6:	f7ff bc49 	b.w	800ae8c <_malloc_r>
 800b5fa:	b92a      	cbnz	r2, 800b608 <_realloc_r+0x24>
 800b5fc:	f7ff fbdc 	bl	800adb8 <_free_r>
 800b600:	4625      	mov	r5, r4
 800b602:	4628      	mov	r0, r5
 800b604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b608:	f000 f81a 	bl	800b640 <_malloc_usable_size_r>
 800b60c:	4284      	cmp	r4, r0
 800b60e:	4606      	mov	r6, r0
 800b610:	d802      	bhi.n	800b618 <_realloc_r+0x34>
 800b612:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b616:	d8f4      	bhi.n	800b602 <_realloc_r+0x1e>
 800b618:	4621      	mov	r1, r4
 800b61a:	4638      	mov	r0, r7
 800b61c:	f7ff fc36 	bl	800ae8c <_malloc_r>
 800b620:	4680      	mov	r8, r0
 800b622:	b908      	cbnz	r0, 800b628 <_realloc_r+0x44>
 800b624:	4645      	mov	r5, r8
 800b626:	e7ec      	b.n	800b602 <_realloc_r+0x1e>
 800b628:	42b4      	cmp	r4, r6
 800b62a:	4622      	mov	r2, r4
 800b62c:	4629      	mov	r1, r5
 800b62e:	bf28      	it	cs
 800b630:	4632      	movcs	r2, r6
 800b632:	f7ff fbb3 	bl	800ad9c <memcpy>
 800b636:	4629      	mov	r1, r5
 800b638:	4638      	mov	r0, r7
 800b63a:	f7ff fbbd 	bl	800adb8 <_free_r>
 800b63e:	e7f1      	b.n	800b624 <_realloc_r+0x40>

0800b640 <_malloc_usable_size_r>:
 800b640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b644:	1f18      	subs	r0, r3, #4
 800b646:	2b00      	cmp	r3, #0
 800b648:	bfbc      	itt	lt
 800b64a:	580b      	ldrlt	r3, [r1, r0]
 800b64c:	18c0      	addlt	r0, r0, r3
 800b64e:	4770      	bx	lr

0800b650 <_init>:
 800b650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b652:	bf00      	nop
 800b654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b656:	bc08      	pop	{r3}
 800b658:	469e      	mov	lr, r3
 800b65a:	4770      	bx	lr

0800b65c <_fini>:
 800b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65e:	bf00      	nop
 800b660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b662:	bc08      	pop	{r3}
 800b664:	469e      	mov	lr, r3
 800b666:	4770      	bx	lr
